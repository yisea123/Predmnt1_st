
NUCLEO-F446RE_PredictiveMaintenance.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08004000  08004000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000151ac  080041d0  080041d0  000041d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000168e0  08019380  08019380  00019380  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0802fc60  0802fc60  0002fc60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0802fc68  0802fc68  0002fc68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0802fc6c  0802fc6c  0002fc6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000aac  20000000  0802fc70  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00011cc0  20000ab0  0803071c  00030ab0  2**3
                  ALLOC
  8 ._user_heap_stack 0000c000  20012770  0803071c  00032770  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00030aac  2**0
                  CONTENTS, READONLY
 10 .debug_info   0007f5ee  00000000  00000000  00030adc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000abd4  00000000  00000000  000b00ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0002c10d  00000000  00000000  000bac9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00003500  00000000  00000000  000e6db0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00004868  00000000  00000000  000ea2b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  00031aaa  00000000  00000000  000eeb18  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00031edc  00000000  00000000  001205c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000f9386  00000000  00000000  0015249e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000016a  00000000  00000000  0024b824  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000bad8  00000000  00000000  0024b990  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080041d0 <__do_global_dtors_aux>:
 80041d0:	b510      	push	{r4, lr}
 80041d2:	4c05      	ldr	r4, [pc, #20]	; (80041e8 <__do_global_dtors_aux+0x18>)
 80041d4:	7823      	ldrb	r3, [r4, #0]
 80041d6:	b933      	cbnz	r3, 80041e6 <__do_global_dtors_aux+0x16>
 80041d8:	4b04      	ldr	r3, [pc, #16]	; (80041ec <__do_global_dtors_aux+0x1c>)
 80041da:	b113      	cbz	r3, 80041e2 <__do_global_dtors_aux+0x12>
 80041dc:	4804      	ldr	r0, [pc, #16]	; (80041f0 <__do_global_dtors_aux+0x20>)
 80041de:	f3af 8000 	nop.w
 80041e2:	2301      	movs	r3, #1
 80041e4:	7023      	strb	r3, [r4, #0]
 80041e6:	bd10      	pop	{r4, pc}
 80041e8:	20000ab0 	.word	0x20000ab0
 80041ec:	00000000 	.word	0x00000000
 80041f0:	08019364 	.word	0x08019364

080041f4 <frame_dummy>:
 80041f4:	b508      	push	{r3, lr}
 80041f6:	4b03      	ldr	r3, [pc, #12]	; (8004204 <frame_dummy+0x10>)
 80041f8:	b11b      	cbz	r3, 8004202 <frame_dummy+0xe>
 80041fa:	4903      	ldr	r1, [pc, #12]	; (8004208 <frame_dummy+0x14>)
 80041fc:	4803      	ldr	r0, [pc, #12]	; (800420c <frame_dummy+0x18>)
 80041fe:	f3af 8000 	nop.w
 8004202:	bd08      	pop	{r3, pc}
 8004204:	00000000 	.word	0x00000000
 8004208:	20000ab4 	.word	0x20000ab4
 800420c:	08019364 	.word	0x08019364

08004210 <arm_bitreversal_32>:
 8004210:	1c4b      	adds	r3, r1, #1
 8004212:	2b01      	cmp	r3, #1
 8004214:	bf98      	it	ls
 8004216:	4770      	bxls	lr
 8004218:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800421c:	1c91      	adds	r1, r2, #2
 800421e:	089b      	lsrs	r3, r3, #2

08004220 <arm_bitreversal_32_0>:
 8004220:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8004224:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8004228:	880a      	ldrh	r2, [r1, #0]
 800422a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 800422e:	4480      	add	r8, r0
 8004230:	4481      	add	r9, r0
 8004232:	4402      	add	r2, r0
 8004234:	4484      	add	ip, r0
 8004236:	f8d9 7000 	ldr.w	r7, [r9]
 800423a:	f8d8 6000 	ldr.w	r6, [r8]
 800423e:	6815      	ldr	r5, [r2, #0]
 8004240:	f8dc 4000 	ldr.w	r4, [ip]
 8004244:	f8c9 6000 	str.w	r6, [r9]
 8004248:	f8c8 7000 	str.w	r7, [r8]
 800424c:	f8cc 5000 	str.w	r5, [ip]
 8004250:	6014      	str	r4, [r2, #0]
 8004252:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8004256:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800425a:	6855      	ldr	r5, [r2, #4]
 800425c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8004260:	f8c9 6004 	str.w	r6, [r9, #4]
 8004264:	f8c8 7004 	str.w	r7, [r8, #4]
 8004268:	f8cc 5004 	str.w	r5, [ip, #4]
 800426c:	6054      	str	r4, [r2, #4]
 800426e:	3108      	adds	r1, #8
 8004270:	3b01      	subs	r3, #1
 8004272:	d1d5      	bne.n	8004220 <arm_bitreversal_32_0>
 8004274:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8004278:	4770      	bx	lr

0800427a <arm_bitreversal_16>:
 800427a:	1c4b      	adds	r3, r1, #1
 800427c:	2b01      	cmp	r3, #1
 800427e:	bf98      	it	ls
 8004280:	4770      	bxls	lr
 8004282:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8004286:	1c91      	adds	r1, r2, #2
 8004288:	089b      	lsrs	r3, r3, #2

0800428a <arm_bitreversal_16_0>:
 800428a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800428e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8004292:	880a      	ldrh	r2, [r1, #0]
 8004294:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8004298:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800429c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 80042a0:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 80042a4:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 80042a8:	f8d9 7000 	ldr.w	r7, [r9]
 80042ac:	f8d8 6000 	ldr.w	r6, [r8]
 80042b0:	6815      	ldr	r5, [r2, #0]
 80042b2:	f8dc 4000 	ldr.w	r4, [ip]
 80042b6:	f8c9 6000 	str.w	r6, [r9]
 80042ba:	f8c8 7000 	str.w	r7, [r8]
 80042be:	f8cc 5000 	str.w	r5, [ip]
 80042c2:	6014      	str	r4, [r2, #0]
 80042c4:	3108      	adds	r1, #8
 80042c6:	3b01      	subs	r3, #1
 80042c8:	d1df      	bne.n	800428a <arm_bitreversal_16_0>
 80042ca:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80042ce:	4770      	bx	lr

080042d0 <memchr>:
 80042d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80042d4:	2a10      	cmp	r2, #16
 80042d6:	db2b      	blt.n	8004330 <memchr+0x60>
 80042d8:	f010 0f07 	tst.w	r0, #7
 80042dc:	d008      	beq.n	80042f0 <memchr+0x20>
 80042de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80042e2:	3a01      	subs	r2, #1
 80042e4:	428b      	cmp	r3, r1
 80042e6:	d02d      	beq.n	8004344 <memchr+0x74>
 80042e8:	f010 0f07 	tst.w	r0, #7
 80042ec:	b342      	cbz	r2, 8004340 <memchr+0x70>
 80042ee:	d1f6      	bne.n	80042de <memchr+0xe>
 80042f0:	b4f0      	push	{r4, r5, r6, r7}
 80042f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80042f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80042fa:	f022 0407 	bic.w	r4, r2, #7
 80042fe:	f07f 0700 	mvns.w	r7, #0
 8004302:	2300      	movs	r3, #0
 8004304:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8004308:	3c08      	subs	r4, #8
 800430a:	ea85 0501 	eor.w	r5, r5, r1
 800430e:	ea86 0601 	eor.w	r6, r6, r1
 8004312:	fa85 f547 	uadd8	r5, r5, r7
 8004316:	faa3 f587 	sel	r5, r3, r7
 800431a:	fa86 f647 	uadd8	r6, r6, r7
 800431e:	faa5 f687 	sel	r6, r5, r7
 8004322:	b98e      	cbnz	r6, 8004348 <memchr+0x78>
 8004324:	d1ee      	bne.n	8004304 <memchr+0x34>
 8004326:	bcf0      	pop	{r4, r5, r6, r7}
 8004328:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800432c:	f002 0207 	and.w	r2, r2, #7
 8004330:	b132      	cbz	r2, 8004340 <memchr+0x70>
 8004332:	f810 3b01 	ldrb.w	r3, [r0], #1
 8004336:	3a01      	subs	r2, #1
 8004338:	ea83 0301 	eor.w	r3, r3, r1
 800433c:	b113      	cbz	r3, 8004344 <memchr+0x74>
 800433e:	d1f8      	bne.n	8004332 <memchr+0x62>
 8004340:	2000      	movs	r0, #0
 8004342:	4770      	bx	lr
 8004344:	3801      	subs	r0, #1
 8004346:	4770      	bx	lr
 8004348:	2d00      	cmp	r5, #0
 800434a:	bf06      	itte	eq
 800434c:	4635      	moveq	r5, r6
 800434e:	3803      	subeq	r0, #3
 8004350:	3807      	subne	r0, #7
 8004352:	f015 0f01 	tst.w	r5, #1
 8004356:	d107      	bne.n	8004368 <memchr+0x98>
 8004358:	3001      	adds	r0, #1
 800435a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800435e:	bf02      	ittt	eq
 8004360:	3001      	addeq	r0, #1
 8004362:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8004366:	3001      	addeq	r0, #1
 8004368:	bcf0      	pop	{r4, r5, r6, r7}
 800436a:	3801      	subs	r0, #1
 800436c:	4770      	bx	lr
 800436e:	bf00      	nop

08004370 <__aeabi_drsub>:
 8004370:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8004374:	e002      	b.n	800437c <__adddf3>
 8004376:	bf00      	nop

08004378 <__aeabi_dsub>:
 8004378:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800437c <__adddf3>:
 800437c:	b530      	push	{r4, r5, lr}
 800437e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8004382:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8004386:	ea94 0f05 	teq	r4, r5
 800438a:	bf08      	it	eq
 800438c:	ea90 0f02 	teqeq	r0, r2
 8004390:	bf1f      	itttt	ne
 8004392:	ea54 0c00 	orrsne.w	ip, r4, r0
 8004396:	ea55 0c02 	orrsne.w	ip, r5, r2
 800439a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800439e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80043a2:	f000 80e2 	beq.w	800456a <__adddf3+0x1ee>
 80043a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80043aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80043ae:	bfb8      	it	lt
 80043b0:	426d      	neglt	r5, r5
 80043b2:	dd0c      	ble.n	80043ce <__adddf3+0x52>
 80043b4:	442c      	add	r4, r5
 80043b6:	ea80 0202 	eor.w	r2, r0, r2
 80043ba:	ea81 0303 	eor.w	r3, r1, r3
 80043be:	ea82 0000 	eor.w	r0, r2, r0
 80043c2:	ea83 0101 	eor.w	r1, r3, r1
 80043c6:	ea80 0202 	eor.w	r2, r0, r2
 80043ca:	ea81 0303 	eor.w	r3, r1, r3
 80043ce:	2d36      	cmp	r5, #54	; 0x36
 80043d0:	bf88      	it	hi
 80043d2:	bd30      	pophi	{r4, r5, pc}
 80043d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80043d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80043dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80043e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80043e4:	d002      	beq.n	80043ec <__adddf3+0x70>
 80043e6:	4240      	negs	r0, r0
 80043e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80043ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80043f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80043f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80043f8:	d002      	beq.n	8004400 <__adddf3+0x84>
 80043fa:	4252      	negs	r2, r2
 80043fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8004400:	ea94 0f05 	teq	r4, r5
 8004404:	f000 80a7 	beq.w	8004556 <__adddf3+0x1da>
 8004408:	f1a4 0401 	sub.w	r4, r4, #1
 800440c:	f1d5 0e20 	rsbs	lr, r5, #32
 8004410:	db0d      	blt.n	800442e <__adddf3+0xb2>
 8004412:	fa02 fc0e 	lsl.w	ip, r2, lr
 8004416:	fa22 f205 	lsr.w	r2, r2, r5
 800441a:	1880      	adds	r0, r0, r2
 800441c:	f141 0100 	adc.w	r1, r1, #0
 8004420:	fa03 f20e 	lsl.w	r2, r3, lr
 8004424:	1880      	adds	r0, r0, r2
 8004426:	fa43 f305 	asr.w	r3, r3, r5
 800442a:	4159      	adcs	r1, r3
 800442c:	e00e      	b.n	800444c <__adddf3+0xd0>
 800442e:	f1a5 0520 	sub.w	r5, r5, #32
 8004432:	f10e 0e20 	add.w	lr, lr, #32
 8004436:	2a01      	cmp	r2, #1
 8004438:	fa03 fc0e 	lsl.w	ip, r3, lr
 800443c:	bf28      	it	cs
 800443e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8004442:	fa43 f305 	asr.w	r3, r3, r5
 8004446:	18c0      	adds	r0, r0, r3
 8004448:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800444c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8004450:	d507      	bpl.n	8004462 <__adddf3+0xe6>
 8004452:	f04f 0e00 	mov.w	lr, #0
 8004456:	f1dc 0c00 	rsbs	ip, ip, #0
 800445a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800445e:	eb6e 0101 	sbc.w	r1, lr, r1
 8004462:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8004466:	d31b      	bcc.n	80044a0 <__adddf3+0x124>
 8004468:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800446c:	d30c      	bcc.n	8004488 <__adddf3+0x10c>
 800446e:	0849      	lsrs	r1, r1, #1
 8004470:	ea5f 0030 	movs.w	r0, r0, rrx
 8004474:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8004478:	f104 0401 	add.w	r4, r4, #1
 800447c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8004480:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8004484:	f080 809a 	bcs.w	80045bc <__adddf3+0x240>
 8004488:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800448c:	bf08      	it	eq
 800448e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8004492:	f150 0000 	adcs.w	r0, r0, #0
 8004496:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800449a:	ea41 0105 	orr.w	r1, r1, r5
 800449e:	bd30      	pop	{r4, r5, pc}
 80044a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80044a4:	4140      	adcs	r0, r0
 80044a6:	eb41 0101 	adc.w	r1, r1, r1
 80044aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80044ae:	f1a4 0401 	sub.w	r4, r4, #1
 80044b2:	d1e9      	bne.n	8004488 <__adddf3+0x10c>
 80044b4:	f091 0f00 	teq	r1, #0
 80044b8:	bf04      	itt	eq
 80044ba:	4601      	moveq	r1, r0
 80044bc:	2000      	moveq	r0, #0
 80044be:	fab1 f381 	clz	r3, r1
 80044c2:	bf08      	it	eq
 80044c4:	3320      	addeq	r3, #32
 80044c6:	f1a3 030b 	sub.w	r3, r3, #11
 80044ca:	f1b3 0220 	subs.w	r2, r3, #32
 80044ce:	da0c      	bge.n	80044ea <__adddf3+0x16e>
 80044d0:	320c      	adds	r2, #12
 80044d2:	dd08      	ble.n	80044e6 <__adddf3+0x16a>
 80044d4:	f102 0c14 	add.w	ip, r2, #20
 80044d8:	f1c2 020c 	rsb	r2, r2, #12
 80044dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80044e0:	fa21 f102 	lsr.w	r1, r1, r2
 80044e4:	e00c      	b.n	8004500 <__adddf3+0x184>
 80044e6:	f102 0214 	add.w	r2, r2, #20
 80044ea:	bfd8      	it	le
 80044ec:	f1c2 0c20 	rsble	ip, r2, #32
 80044f0:	fa01 f102 	lsl.w	r1, r1, r2
 80044f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80044f8:	bfdc      	itt	le
 80044fa:	ea41 010c 	orrle.w	r1, r1, ip
 80044fe:	4090      	lslle	r0, r2
 8004500:	1ae4      	subs	r4, r4, r3
 8004502:	bfa2      	ittt	ge
 8004504:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8004508:	4329      	orrge	r1, r5
 800450a:	bd30      	popge	{r4, r5, pc}
 800450c:	ea6f 0404 	mvn.w	r4, r4
 8004510:	3c1f      	subs	r4, #31
 8004512:	da1c      	bge.n	800454e <__adddf3+0x1d2>
 8004514:	340c      	adds	r4, #12
 8004516:	dc0e      	bgt.n	8004536 <__adddf3+0x1ba>
 8004518:	f104 0414 	add.w	r4, r4, #20
 800451c:	f1c4 0220 	rsb	r2, r4, #32
 8004520:	fa20 f004 	lsr.w	r0, r0, r4
 8004524:	fa01 f302 	lsl.w	r3, r1, r2
 8004528:	ea40 0003 	orr.w	r0, r0, r3
 800452c:	fa21 f304 	lsr.w	r3, r1, r4
 8004530:	ea45 0103 	orr.w	r1, r5, r3
 8004534:	bd30      	pop	{r4, r5, pc}
 8004536:	f1c4 040c 	rsb	r4, r4, #12
 800453a:	f1c4 0220 	rsb	r2, r4, #32
 800453e:	fa20 f002 	lsr.w	r0, r0, r2
 8004542:	fa01 f304 	lsl.w	r3, r1, r4
 8004546:	ea40 0003 	orr.w	r0, r0, r3
 800454a:	4629      	mov	r1, r5
 800454c:	bd30      	pop	{r4, r5, pc}
 800454e:	fa21 f004 	lsr.w	r0, r1, r4
 8004552:	4629      	mov	r1, r5
 8004554:	bd30      	pop	{r4, r5, pc}
 8004556:	f094 0f00 	teq	r4, #0
 800455a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800455e:	bf06      	itte	eq
 8004560:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8004564:	3401      	addeq	r4, #1
 8004566:	3d01      	subne	r5, #1
 8004568:	e74e      	b.n	8004408 <__adddf3+0x8c>
 800456a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800456e:	bf18      	it	ne
 8004570:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8004574:	d029      	beq.n	80045ca <__adddf3+0x24e>
 8004576:	ea94 0f05 	teq	r4, r5
 800457a:	bf08      	it	eq
 800457c:	ea90 0f02 	teqeq	r0, r2
 8004580:	d005      	beq.n	800458e <__adddf3+0x212>
 8004582:	ea54 0c00 	orrs.w	ip, r4, r0
 8004586:	bf04      	itt	eq
 8004588:	4619      	moveq	r1, r3
 800458a:	4610      	moveq	r0, r2
 800458c:	bd30      	pop	{r4, r5, pc}
 800458e:	ea91 0f03 	teq	r1, r3
 8004592:	bf1e      	ittt	ne
 8004594:	2100      	movne	r1, #0
 8004596:	2000      	movne	r0, #0
 8004598:	bd30      	popne	{r4, r5, pc}
 800459a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800459e:	d105      	bne.n	80045ac <__adddf3+0x230>
 80045a0:	0040      	lsls	r0, r0, #1
 80045a2:	4149      	adcs	r1, r1
 80045a4:	bf28      	it	cs
 80045a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80045aa:	bd30      	pop	{r4, r5, pc}
 80045ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80045b0:	bf3c      	itt	cc
 80045b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80045b6:	bd30      	popcc	{r4, r5, pc}
 80045b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80045bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80045c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80045c4:	f04f 0000 	mov.w	r0, #0
 80045c8:	bd30      	pop	{r4, r5, pc}
 80045ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80045ce:	bf1a      	itte	ne
 80045d0:	4619      	movne	r1, r3
 80045d2:	4610      	movne	r0, r2
 80045d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80045d8:	bf1c      	itt	ne
 80045da:	460b      	movne	r3, r1
 80045dc:	4602      	movne	r2, r0
 80045de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80045e2:	bf06      	itte	eq
 80045e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80045e8:	ea91 0f03 	teqeq	r1, r3
 80045ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80045f0:	bd30      	pop	{r4, r5, pc}
 80045f2:	bf00      	nop

080045f4 <__aeabi_ui2d>:
 80045f4:	f090 0f00 	teq	r0, #0
 80045f8:	bf04      	itt	eq
 80045fa:	2100      	moveq	r1, #0
 80045fc:	4770      	bxeq	lr
 80045fe:	b530      	push	{r4, r5, lr}
 8004600:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8004604:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8004608:	f04f 0500 	mov.w	r5, #0
 800460c:	f04f 0100 	mov.w	r1, #0
 8004610:	e750      	b.n	80044b4 <__adddf3+0x138>
 8004612:	bf00      	nop

08004614 <__aeabi_i2d>:
 8004614:	f090 0f00 	teq	r0, #0
 8004618:	bf04      	itt	eq
 800461a:	2100      	moveq	r1, #0
 800461c:	4770      	bxeq	lr
 800461e:	b530      	push	{r4, r5, lr}
 8004620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8004624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8004628:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800462c:	bf48      	it	mi
 800462e:	4240      	negmi	r0, r0
 8004630:	f04f 0100 	mov.w	r1, #0
 8004634:	e73e      	b.n	80044b4 <__adddf3+0x138>
 8004636:	bf00      	nop

08004638 <__aeabi_f2d>:
 8004638:	0042      	lsls	r2, r0, #1
 800463a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800463e:	ea4f 0131 	mov.w	r1, r1, rrx
 8004642:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8004646:	bf1f      	itttt	ne
 8004648:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800464c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8004650:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8004654:	4770      	bxne	lr
 8004656:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800465a:	bf08      	it	eq
 800465c:	4770      	bxeq	lr
 800465e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8004662:	bf04      	itt	eq
 8004664:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8004668:	4770      	bxeq	lr
 800466a:	b530      	push	{r4, r5, lr}
 800466c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8004670:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8004674:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8004678:	e71c      	b.n	80044b4 <__adddf3+0x138>
 800467a:	bf00      	nop

0800467c <__aeabi_ul2d>:
 800467c:	ea50 0201 	orrs.w	r2, r0, r1
 8004680:	bf08      	it	eq
 8004682:	4770      	bxeq	lr
 8004684:	b530      	push	{r4, r5, lr}
 8004686:	f04f 0500 	mov.w	r5, #0
 800468a:	e00a      	b.n	80046a2 <__aeabi_l2d+0x16>

0800468c <__aeabi_l2d>:
 800468c:	ea50 0201 	orrs.w	r2, r0, r1
 8004690:	bf08      	it	eq
 8004692:	4770      	bxeq	lr
 8004694:	b530      	push	{r4, r5, lr}
 8004696:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800469a:	d502      	bpl.n	80046a2 <__aeabi_l2d+0x16>
 800469c:	4240      	negs	r0, r0
 800469e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80046a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80046a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80046aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80046ae:	f43f aed8 	beq.w	8004462 <__adddf3+0xe6>
 80046b2:	f04f 0203 	mov.w	r2, #3
 80046b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80046ba:	bf18      	it	ne
 80046bc:	3203      	addne	r2, #3
 80046be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80046c2:	bf18      	it	ne
 80046c4:	3203      	addne	r2, #3
 80046c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80046ca:	f1c2 0320 	rsb	r3, r2, #32
 80046ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80046d2:	fa20 f002 	lsr.w	r0, r0, r2
 80046d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80046da:	ea40 000e 	orr.w	r0, r0, lr
 80046de:	fa21 f102 	lsr.w	r1, r1, r2
 80046e2:	4414      	add	r4, r2
 80046e4:	e6bd      	b.n	8004462 <__adddf3+0xe6>
 80046e6:	bf00      	nop

080046e8 <__aeabi_dmul>:
 80046e8:	b570      	push	{r4, r5, r6, lr}
 80046ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80046ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80046f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80046f6:	bf1d      	ittte	ne
 80046f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80046fc:	ea94 0f0c 	teqne	r4, ip
 8004700:	ea95 0f0c 	teqne	r5, ip
 8004704:	f000 f8de 	bleq	80048c4 <__aeabi_dmul+0x1dc>
 8004708:	442c      	add	r4, r5
 800470a:	ea81 0603 	eor.w	r6, r1, r3
 800470e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8004712:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8004716:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800471a:	bf18      	it	ne
 800471c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8004720:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004724:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004728:	d038      	beq.n	800479c <__aeabi_dmul+0xb4>
 800472a:	fba0 ce02 	umull	ip, lr, r0, r2
 800472e:	f04f 0500 	mov.w	r5, #0
 8004732:	fbe1 e502 	umlal	lr, r5, r1, r2
 8004736:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800473a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800473e:	f04f 0600 	mov.w	r6, #0
 8004742:	fbe1 5603 	umlal	r5, r6, r1, r3
 8004746:	f09c 0f00 	teq	ip, #0
 800474a:	bf18      	it	ne
 800474c:	f04e 0e01 	orrne.w	lr, lr, #1
 8004750:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8004754:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8004758:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800475c:	d204      	bcs.n	8004768 <__aeabi_dmul+0x80>
 800475e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8004762:	416d      	adcs	r5, r5
 8004764:	eb46 0606 	adc.w	r6, r6, r6
 8004768:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800476c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8004770:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8004774:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8004778:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800477c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8004780:	bf88      	it	hi
 8004782:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8004786:	d81e      	bhi.n	80047c6 <__aeabi_dmul+0xde>
 8004788:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800478c:	bf08      	it	eq
 800478e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8004792:	f150 0000 	adcs.w	r0, r0, #0
 8004796:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800479a:	bd70      	pop	{r4, r5, r6, pc}
 800479c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80047a0:	ea46 0101 	orr.w	r1, r6, r1
 80047a4:	ea40 0002 	orr.w	r0, r0, r2
 80047a8:	ea81 0103 	eor.w	r1, r1, r3
 80047ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80047b0:	bfc2      	ittt	gt
 80047b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80047b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80047ba:	bd70      	popgt	{r4, r5, r6, pc}
 80047bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80047c0:	f04f 0e00 	mov.w	lr, #0
 80047c4:	3c01      	subs	r4, #1
 80047c6:	f300 80ab 	bgt.w	8004920 <__aeabi_dmul+0x238>
 80047ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80047ce:	bfde      	ittt	le
 80047d0:	2000      	movle	r0, #0
 80047d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80047d6:	bd70      	pople	{r4, r5, r6, pc}
 80047d8:	f1c4 0400 	rsb	r4, r4, #0
 80047dc:	3c20      	subs	r4, #32
 80047de:	da35      	bge.n	800484c <__aeabi_dmul+0x164>
 80047e0:	340c      	adds	r4, #12
 80047e2:	dc1b      	bgt.n	800481c <__aeabi_dmul+0x134>
 80047e4:	f104 0414 	add.w	r4, r4, #20
 80047e8:	f1c4 0520 	rsb	r5, r4, #32
 80047ec:	fa00 f305 	lsl.w	r3, r0, r5
 80047f0:	fa20 f004 	lsr.w	r0, r0, r4
 80047f4:	fa01 f205 	lsl.w	r2, r1, r5
 80047f8:	ea40 0002 	orr.w	r0, r0, r2
 80047fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8004800:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8004804:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8004808:	fa21 f604 	lsr.w	r6, r1, r4
 800480c:	eb42 0106 	adc.w	r1, r2, r6
 8004810:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8004814:	bf08      	it	eq
 8004816:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800481a:	bd70      	pop	{r4, r5, r6, pc}
 800481c:	f1c4 040c 	rsb	r4, r4, #12
 8004820:	f1c4 0520 	rsb	r5, r4, #32
 8004824:	fa00 f304 	lsl.w	r3, r0, r4
 8004828:	fa20 f005 	lsr.w	r0, r0, r5
 800482c:	fa01 f204 	lsl.w	r2, r1, r4
 8004830:	ea40 0002 	orr.w	r0, r0, r2
 8004834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8004838:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800483c:	f141 0100 	adc.w	r1, r1, #0
 8004840:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8004844:	bf08      	it	eq
 8004846:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800484a:	bd70      	pop	{r4, r5, r6, pc}
 800484c:	f1c4 0520 	rsb	r5, r4, #32
 8004850:	fa00 f205 	lsl.w	r2, r0, r5
 8004854:	ea4e 0e02 	orr.w	lr, lr, r2
 8004858:	fa20 f304 	lsr.w	r3, r0, r4
 800485c:	fa01 f205 	lsl.w	r2, r1, r5
 8004860:	ea43 0302 	orr.w	r3, r3, r2
 8004864:	fa21 f004 	lsr.w	r0, r1, r4
 8004868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800486c:	fa21 f204 	lsr.w	r2, r1, r4
 8004870:	ea20 0002 	bic.w	r0, r0, r2
 8004874:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8004878:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800487c:	bf08      	it	eq
 800487e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8004882:	bd70      	pop	{r4, r5, r6, pc}
 8004884:	f094 0f00 	teq	r4, #0
 8004888:	d10f      	bne.n	80048aa <__aeabi_dmul+0x1c2>
 800488a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800488e:	0040      	lsls	r0, r0, #1
 8004890:	eb41 0101 	adc.w	r1, r1, r1
 8004894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8004898:	bf08      	it	eq
 800489a:	3c01      	subeq	r4, #1
 800489c:	d0f7      	beq.n	800488e <__aeabi_dmul+0x1a6>
 800489e:	ea41 0106 	orr.w	r1, r1, r6
 80048a2:	f095 0f00 	teq	r5, #0
 80048a6:	bf18      	it	ne
 80048a8:	4770      	bxne	lr
 80048aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80048ae:	0052      	lsls	r2, r2, #1
 80048b0:	eb43 0303 	adc.w	r3, r3, r3
 80048b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80048b8:	bf08      	it	eq
 80048ba:	3d01      	subeq	r5, #1
 80048bc:	d0f7      	beq.n	80048ae <__aeabi_dmul+0x1c6>
 80048be:	ea43 0306 	orr.w	r3, r3, r6
 80048c2:	4770      	bx	lr
 80048c4:	ea94 0f0c 	teq	r4, ip
 80048c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80048cc:	bf18      	it	ne
 80048ce:	ea95 0f0c 	teqne	r5, ip
 80048d2:	d00c      	beq.n	80048ee <__aeabi_dmul+0x206>
 80048d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80048d8:	bf18      	it	ne
 80048da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80048de:	d1d1      	bne.n	8004884 <__aeabi_dmul+0x19c>
 80048e0:	ea81 0103 	eor.w	r1, r1, r3
 80048e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80048e8:	f04f 0000 	mov.w	r0, #0
 80048ec:	bd70      	pop	{r4, r5, r6, pc}
 80048ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80048f2:	bf06      	itte	eq
 80048f4:	4610      	moveq	r0, r2
 80048f6:	4619      	moveq	r1, r3
 80048f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80048fc:	d019      	beq.n	8004932 <__aeabi_dmul+0x24a>
 80048fe:	ea94 0f0c 	teq	r4, ip
 8004902:	d102      	bne.n	800490a <__aeabi_dmul+0x222>
 8004904:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8004908:	d113      	bne.n	8004932 <__aeabi_dmul+0x24a>
 800490a:	ea95 0f0c 	teq	r5, ip
 800490e:	d105      	bne.n	800491c <__aeabi_dmul+0x234>
 8004910:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8004914:	bf1c      	itt	ne
 8004916:	4610      	movne	r0, r2
 8004918:	4619      	movne	r1, r3
 800491a:	d10a      	bne.n	8004932 <__aeabi_dmul+0x24a>
 800491c:	ea81 0103 	eor.w	r1, r1, r3
 8004920:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8004924:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8004928:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800492c:	f04f 0000 	mov.w	r0, #0
 8004930:	bd70      	pop	{r4, r5, r6, pc}
 8004932:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8004936:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800493a:	bd70      	pop	{r4, r5, r6, pc}

0800493c <__aeabi_ddiv>:
 800493c:	b570      	push	{r4, r5, r6, lr}
 800493e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8004942:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8004946:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800494a:	bf1d      	ittte	ne
 800494c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8004950:	ea94 0f0c 	teqne	r4, ip
 8004954:	ea95 0f0c 	teqne	r5, ip
 8004958:	f000 f8a7 	bleq	8004aaa <__aeabi_ddiv+0x16e>
 800495c:	eba4 0405 	sub.w	r4, r4, r5
 8004960:	ea81 0e03 	eor.w	lr, r1, r3
 8004964:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8004968:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800496c:	f000 8088 	beq.w	8004a80 <__aeabi_ddiv+0x144>
 8004970:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8004974:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8004978:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800497c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8004980:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8004984:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8004988:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800498c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8004990:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8004994:	429d      	cmp	r5, r3
 8004996:	bf08      	it	eq
 8004998:	4296      	cmpeq	r6, r2
 800499a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800499e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80049a2:	d202      	bcs.n	80049aa <__aeabi_ddiv+0x6e>
 80049a4:	085b      	lsrs	r3, r3, #1
 80049a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80049aa:	1ab6      	subs	r6, r6, r2
 80049ac:	eb65 0503 	sbc.w	r5, r5, r3
 80049b0:	085b      	lsrs	r3, r3, #1
 80049b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80049b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80049ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80049be:	ebb6 0e02 	subs.w	lr, r6, r2
 80049c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80049c6:	bf22      	ittt	cs
 80049c8:	1ab6      	subcs	r6, r6, r2
 80049ca:	4675      	movcs	r5, lr
 80049cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80049d0:	085b      	lsrs	r3, r3, #1
 80049d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80049d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80049da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80049de:	bf22      	ittt	cs
 80049e0:	1ab6      	subcs	r6, r6, r2
 80049e2:	4675      	movcs	r5, lr
 80049e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80049e8:	085b      	lsrs	r3, r3, #1
 80049ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80049ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80049f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80049f6:	bf22      	ittt	cs
 80049f8:	1ab6      	subcs	r6, r6, r2
 80049fa:	4675      	movcs	r5, lr
 80049fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8004a00:	085b      	lsrs	r3, r3, #1
 8004a02:	ea4f 0232 	mov.w	r2, r2, rrx
 8004a06:	ebb6 0e02 	subs.w	lr, r6, r2
 8004a0a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8004a0e:	bf22      	ittt	cs
 8004a10:	1ab6      	subcs	r6, r6, r2
 8004a12:	4675      	movcs	r5, lr
 8004a14:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8004a18:	ea55 0e06 	orrs.w	lr, r5, r6
 8004a1c:	d018      	beq.n	8004a50 <__aeabi_ddiv+0x114>
 8004a1e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8004a22:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8004a26:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8004a2a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8004a2e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8004a32:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8004a36:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8004a3a:	d1c0      	bne.n	80049be <__aeabi_ddiv+0x82>
 8004a3c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8004a40:	d10b      	bne.n	8004a5a <__aeabi_ddiv+0x11e>
 8004a42:	ea41 0100 	orr.w	r1, r1, r0
 8004a46:	f04f 0000 	mov.w	r0, #0
 8004a4a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8004a4e:	e7b6      	b.n	80049be <__aeabi_ddiv+0x82>
 8004a50:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8004a54:	bf04      	itt	eq
 8004a56:	4301      	orreq	r1, r0
 8004a58:	2000      	moveq	r0, #0
 8004a5a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8004a5e:	bf88      	it	hi
 8004a60:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8004a64:	f63f aeaf 	bhi.w	80047c6 <__aeabi_dmul+0xde>
 8004a68:	ebb5 0c03 	subs.w	ip, r5, r3
 8004a6c:	bf04      	itt	eq
 8004a6e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8004a72:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8004a76:	f150 0000 	adcs.w	r0, r0, #0
 8004a7a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8004a7e:	bd70      	pop	{r4, r5, r6, pc}
 8004a80:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8004a84:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8004a88:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8004a8c:	bfc2      	ittt	gt
 8004a8e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8004a92:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8004a96:	bd70      	popgt	{r4, r5, r6, pc}
 8004a98:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004a9c:	f04f 0e00 	mov.w	lr, #0
 8004aa0:	3c01      	subs	r4, #1
 8004aa2:	e690      	b.n	80047c6 <__aeabi_dmul+0xde>
 8004aa4:	ea45 0e06 	orr.w	lr, r5, r6
 8004aa8:	e68d      	b.n	80047c6 <__aeabi_dmul+0xde>
 8004aaa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8004aae:	ea94 0f0c 	teq	r4, ip
 8004ab2:	bf08      	it	eq
 8004ab4:	ea95 0f0c 	teqeq	r5, ip
 8004ab8:	f43f af3b 	beq.w	8004932 <__aeabi_dmul+0x24a>
 8004abc:	ea94 0f0c 	teq	r4, ip
 8004ac0:	d10a      	bne.n	8004ad8 <__aeabi_ddiv+0x19c>
 8004ac2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8004ac6:	f47f af34 	bne.w	8004932 <__aeabi_dmul+0x24a>
 8004aca:	ea95 0f0c 	teq	r5, ip
 8004ace:	f47f af25 	bne.w	800491c <__aeabi_dmul+0x234>
 8004ad2:	4610      	mov	r0, r2
 8004ad4:	4619      	mov	r1, r3
 8004ad6:	e72c      	b.n	8004932 <__aeabi_dmul+0x24a>
 8004ad8:	ea95 0f0c 	teq	r5, ip
 8004adc:	d106      	bne.n	8004aec <__aeabi_ddiv+0x1b0>
 8004ade:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8004ae2:	f43f aefd 	beq.w	80048e0 <__aeabi_dmul+0x1f8>
 8004ae6:	4610      	mov	r0, r2
 8004ae8:	4619      	mov	r1, r3
 8004aea:	e722      	b.n	8004932 <__aeabi_dmul+0x24a>
 8004aec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8004af0:	bf18      	it	ne
 8004af2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8004af6:	f47f aec5 	bne.w	8004884 <__aeabi_dmul+0x19c>
 8004afa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8004afe:	f47f af0d 	bne.w	800491c <__aeabi_dmul+0x234>
 8004b02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8004b06:	f47f aeeb 	bne.w	80048e0 <__aeabi_dmul+0x1f8>
 8004b0a:	e712      	b.n	8004932 <__aeabi_dmul+0x24a>

08004b0c <__gedf2>:
 8004b0c:	f04f 3cff 	mov.w	ip, #4294967295
 8004b10:	e006      	b.n	8004b20 <__cmpdf2+0x4>
 8004b12:	bf00      	nop

08004b14 <__ledf2>:
 8004b14:	f04f 0c01 	mov.w	ip, #1
 8004b18:	e002      	b.n	8004b20 <__cmpdf2+0x4>
 8004b1a:	bf00      	nop

08004b1c <__cmpdf2>:
 8004b1c:	f04f 0c01 	mov.w	ip, #1
 8004b20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8004b24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8004b28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8004b30:	bf18      	it	ne
 8004b32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8004b36:	d01b      	beq.n	8004b70 <__cmpdf2+0x54>
 8004b38:	b001      	add	sp, #4
 8004b3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8004b3e:	bf0c      	ite	eq
 8004b40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8004b44:	ea91 0f03 	teqne	r1, r3
 8004b48:	bf02      	ittt	eq
 8004b4a:	ea90 0f02 	teqeq	r0, r2
 8004b4e:	2000      	moveq	r0, #0
 8004b50:	4770      	bxeq	lr
 8004b52:	f110 0f00 	cmn.w	r0, #0
 8004b56:	ea91 0f03 	teq	r1, r3
 8004b5a:	bf58      	it	pl
 8004b5c:	4299      	cmppl	r1, r3
 8004b5e:	bf08      	it	eq
 8004b60:	4290      	cmpeq	r0, r2
 8004b62:	bf2c      	ite	cs
 8004b64:	17d8      	asrcs	r0, r3, #31
 8004b66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8004b6a:	f040 0001 	orr.w	r0, r0, #1
 8004b6e:	4770      	bx	lr
 8004b70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8004b74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004b78:	d102      	bne.n	8004b80 <__cmpdf2+0x64>
 8004b7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8004b7e:	d107      	bne.n	8004b90 <__cmpdf2+0x74>
 8004b80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8004b84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004b88:	d1d6      	bne.n	8004b38 <__cmpdf2+0x1c>
 8004b8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8004b8e:	d0d3      	beq.n	8004b38 <__cmpdf2+0x1c>
 8004b90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8004b94:	4770      	bx	lr
 8004b96:	bf00      	nop

08004b98 <__aeabi_cdrcmple>:
 8004b98:	4684      	mov	ip, r0
 8004b9a:	4610      	mov	r0, r2
 8004b9c:	4662      	mov	r2, ip
 8004b9e:	468c      	mov	ip, r1
 8004ba0:	4619      	mov	r1, r3
 8004ba2:	4663      	mov	r3, ip
 8004ba4:	e000      	b.n	8004ba8 <__aeabi_cdcmpeq>
 8004ba6:	bf00      	nop

08004ba8 <__aeabi_cdcmpeq>:
 8004ba8:	b501      	push	{r0, lr}
 8004baa:	f7ff ffb7 	bl	8004b1c <__cmpdf2>
 8004bae:	2800      	cmp	r0, #0
 8004bb0:	bf48      	it	mi
 8004bb2:	f110 0f00 	cmnmi.w	r0, #0
 8004bb6:	bd01      	pop	{r0, pc}

08004bb8 <__aeabi_dcmpeq>:
 8004bb8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004bbc:	f7ff fff4 	bl	8004ba8 <__aeabi_cdcmpeq>
 8004bc0:	bf0c      	ite	eq
 8004bc2:	2001      	moveq	r0, #1
 8004bc4:	2000      	movne	r0, #0
 8004bc6:	f85d fb08 	ldr.w	pc, [sp], #8
 8004bca:	bf00      	nop

08004bcc <__aeabi_dcmplt>:
 8004bcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004bd0:	f7ff ffea 	bl	8004ba8 <__aeabi_cdcmpeq>
 8004bd4:	bf34      	ite	cc
 8004bd6:	2001      	movcc	r0, #1
 8004bd8:	2000      	movcs	r0, #0
 8004bda:	f85d fb08 	ldr.w	pc, [sp], #8
 8004bde:	bf00      	nop

08004be0 <__aeabi_dcmple>:
 8004be0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004be4:	f7ff ffe0 	bl	8004ba8 <__aeabi_cdcmpeq>
 8004be8:	bf94      	ite	ls
 8004bea:	2001      	movls	r0, #1
 8004bec:	2000      	movhi	r0, #0
 8004bee:	f85d fb08 	ldr.w	pc, [sp], #8
 8004bf2:	bf00      	nop

08004bf4 <__aeabi_dcmpge>:
 8004bf4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004bf8:	f7ff ffce 	bl	8004b98 <__aeabi_cdrcmple>
 8004bfc:	bf94      	ite	ls
 8004bfe:	2001      	movls	r0, #1
 8004c00:	2000      	movhi	r0, #0
 8004c02:	f85d fb08 	ldr.w	pc, [sp], #8
 8004c06:	bf00      	nop

08004c08 <__aeabi_dcmpgt>:
 8004c08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004c0c:	f7ff ffc4 	bl	8004b98 <__aeabi_cdrcmple>
 8004c10:	bf34      	ite	cc
 8004c12:	2001      	movcc	r0, #1
 8004c14:	2000      	movcs	r0, #0
 8004c16:	f85d fb08 	ldr.w	pc, [sp], #8
 8004c1a:	bf00      	nop

08004c1c <__aeabi_dcmpun>:
 8004c1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8004c20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004c24:	d102      	bne.n	8004c2c <__aeabi_dcmpun+0x10>
 8004c26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8004c2a:	d10a      	bne.n	8004c42 <__aeabi_dcmpun+0x26>
 8004c2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8004c30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004c34:	d102      	bne.n	8004c3c <__aeabi_dcmpun+0x20>
 8004c36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8004c3a:	d102      	bne.n	8004c42 <__aeabi_dcmpun+0x26>
 8004c3c:	f04f 0000 	mov.w	r0, #0
 8004c40:	4770      	bx	lr
 8004c42:	f04f 0001 	mov.w	r0, #1
 8004c46:	4770      	bx	lr

08004c48 <__aeabi_d2iz>:
 8004c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8004c4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8004c50:	d215      	bcs.n	8004c7e <__aeabi_d2iz+0x36>
 8004c52:	d511      	bpl.n	8004c78 <__aeabi_d2iz+0x30>
 8004c54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8004c58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8004c5c:	d912      	bls.n	8004c84 <__aeabi_d2iz+0x3c>
 8004c5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8004c62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004c66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8004c6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8004c6e:	fa23 f002 	lsr.w	r0, r3, r2
 8004c72:	bf18      	it	ne
 8004c74:	4240      	negne	r0, r0
 8004c76:	4770      	bx	lr
 8004c78:	f04f 0000 	mov.w	r0, #0
 8004c7c:	4770      	bx	lr
 8004c7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8004c82:	d105      	bne.n	8004c90 <__aeabi_d2iz+0x48>
 8004c84:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8004c88:	bf08      	it	eq
 8004c8a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8004c8e:	4770      	bx	lr
 8004c90:	f04f 0000 	mov.w	r0, #0
 8004c94:	4770      	bx	lr
 8004c96:	bf00      	nop

08004c98 <__aeabi_d2uiz>:
 8004c98:	004a      	lsls	r2, r1, #1
 8004c9a:	d211      	bcs.n	8004cc0 <__aeabi_d2uiz+0x28>
 8004c9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8004ca0:	d211      	bcs.n	8004cc6 <__aeabi_d2uiz+0x2e>
 8004ca2:	d50d      	bpl.n	8004cc0 <__aeabi_d2uiz+0x28>
 8004ca4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8004ca8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8004cac:	d40e      	bmi.n	8004ccc <__aeabi_d2uiz+0x34>
 8004cae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8004cb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004cb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8004cba:	fa23 f002 	lsr.w	r0, r3, r2
 8004cbe:	4770      	bx	lr
 8004cc0:	f04f 0000 	mov.w	r0, #0
 8004cc4:	4770      	bx	lr
 8004cc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8004cca:	d102      	bne.n	8004cd2 <__aeabi_d2uiz+0x3a>
 8004ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8004cd0:	4770      	bx	lr
 8004cd2:	f04f 0000 	mov.w	r0, #0
 8004cd6:	4770      	bx	lr

08004cd8 <__aeabi_d2f>:
 8004cd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8004cdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8004ce0:	bf24      	itt	cs
 8004ce2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8004ce6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8004cea:	d90d      	bls.n	8004d08 <__aeabi_d2f+0x30>
 8004cec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8004cf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8004cf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8004cf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8004cfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8004d00:	bf08      	it	eq
 8004d02:	f020 0001 	biceq.w	r0, r0, #1
 8004d06:	4770      	bx	lr
 8004d08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8004d0c:	d121      	bne.n	8004d52 <__aeabi_d2f+0x7a>
 8004d0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8004d12:	bfbc      	itt	lt
 8004d14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8004d18:	4770      	bxlt	lr
 8004d1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004d1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8004d22:	f1c2 0218 	rsb	r2, r2, #24
 8004d26:	f1c2 0c20 	rsb	ip, r2, #32
 8004d2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8004d2e:	fa20 f002 	lsr.w	r0, r0, r2
 8004d32:	bf18      	it	ne
 8004d34:	f040 0001 	orrne.w	r0, r0, #1
 8004d38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8004d3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8004d40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8004d44:	ea40 000c 	orr.w	r0, r0, ip
 8004d48:	fa23 f302 	lsr.w	r3, r3, r2
 8004d4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004d50:	e7cc      	b.n	8004cec <__aeabi_d2f+0x14>
 8004d52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8004d56:	d107      	bne.n	8004d68 <__aeabi_d2f+0x90>
 8004d58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8004d5c:	bf1e      	ittt	ne
 8004d5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8004d62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8004d66:	4770      	bxne	lr
 8004d68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8004d6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8004d70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8004d74:	4770      	bx	lr
 8004d76:	bf00      	nop

08004d78 <__aeabi_uldivmod>:
 8004d78:	b953      	cbnz	r3, 8004d90 <__aeabi_uldivmod+0x18>
 8004d7a:	b94a      	cbnz	r2, 8004d90 <__aeabi_uldivmod+0x18>
 8004d7c:	2900      	cmp	r1, #0
 8004d7e:	bf08      	it	eq
 8004d80:	2800      	cmpeq	r0, #0
 8004d82:	bf1c      	itt	ne
 8004d84:	f04f 31ff 	movne.w	r1, #4294967295
 8004d88:	f04f 30ff 	movne.w	r0, #4294967295
 8004d8c:	f000 b972 	b.w	8005074 <__aeabi_idiv0>
 8004d90:	f1ad 0c08 	sub.w	ip, sp, #8
 8004d94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8004d98:	f000 f806 	bl	8004da8 <__udivmoddi4>
 8004d9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8004da0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004da4:	b004      	add	sp, #16
 8004da6:	4770      	bx	lr

08004da8 <__udivmoddi4>:
 8004da8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004dac:	9e08      	ldr	r6, [sp, #32]
 8004dae:	4604      	mov	r4, r0
 8004db0:	4688      	mov	r8, r1
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d14b      	bne.n	8004e4e <__udivmoddi4+0xa6>
 8004db6:	428a      	cmp	r2, r1
 8004db8:	4615      	mov	r5, r2
 8004dba:	d967      	bls.n	8004e8c <__udivmoddi4+0xe4>
 8004dbc:	fab2 f282 	clz	r2, r2
 8004dc0:	b14a      	cbz	r2, 8004dd6 <__udivmoddi4+0x2e>
 8004dc2:	f1c2 0720 	rsb	r7, r2, #32
 8004dc6:	fa01 f302 	lsl.w	r3, r1, r2
 8004dca:	fa20 f707 	lsr.w	r7, r0, r7
 8004dce:	4095      	lsls	r5, r2
 8004dd0:	ea47 0803 	orr.w	r8, r7, r3
 8004dd4:	4094      	lsls	r4, r2
 8004dd6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8004dda:	0c23      	lsrs	r3, r4, #16
 8004ddc:	fbb8 f7fe 	udiv	r7, r8, lr
 8004de0:	fa1f fc85 	uxth.w	ip, r5
 8004de4:	fb0e 8817 	mls	r8, lr, r7, r8
 8004de8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8004dec:	fb07 f10c 	mul.w	r1, r7, ip
 8004df0:	4299      	cmp	r1, r3
 8004df2:	d909      	bls.n	8004e08 <__udivmoddi4+0x60>
 8004df4:	18eb      	adds	r3, r5, r3
 8004df6:	f107 30ff 	add.w	r0, r7, #4294967295
 8004dfa:	f080 811b 	bcs.w	8005034 <__udivmoddi4+0x28c>
 8004dfe:	4299      	cmp	r1, r3
 8004e00:	f240 8118 	bls.w	8005034 <__udivmoddi4+0x28c>
 8004e04:	3f02      	subs	r7, #2
 8004e06:	442b      	add	r3, r5
 8004e08:	1a5b      	subs	r3, r3, r1
 8004e0a:	b2a4      	uxth	r4, r4
 8004e0c:	fbb3 f0fe 	udiv	r0, r3, lr
 8004e10:	fb0e 3310 	mls	r3, lr, r0, r3
 8004e14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8004e18:	fb00 fc0c 	mul.w	ip, r0, ip
 8004e1c:	45a4      	cmp	ip, r4
 8004e1e:	d909      	bls.n	8004e34 <__udivmoddi4+0x8c>
 8004e20:	192c      	adds	r4, r5, r4
 8004e22:	f100 33ff 	add.w	r3, r0, #4294967295
 8004e26:	f080 8107 	bcs.w	8005038 <__udivmoddi4+0x290>
 8004e2a:	45a4      	cmp	ip, r4
 8004e2c:	f240 8104 	bls.w	8005038 <__udivmoddi4+0x290>
 8004e30:	3802      	subs	r0, #2
 8004e32:	442c      	add	r4, r5
 8004e34:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8004e38:	eba4 040c 	sub.w	r4, r4, ip
 8004e3c:	2700      	movs	r7, #0
 8004e3e:	b11e      	cbz	r6, 8004e48 <__udivmoddi4+0xa0>
 8004e40:	40d4      	lsrs	r4, r2
 8004e42:	2300      	movs	r3, #0
 8004e44:	e9c6 4300 	strd	r4, r3, [r6]
 8004e48:	4639      	mov	r1, r7
 8004e4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e4e:	428b      	cmp	r3, r1
 8004e50:	d909      	bls.n	8004e66 <__udivmoddi4+0xbe>
 8004e52:	2e00      	cmp	r6, #0
 8004e54:	f000 80eb 	beq.w	800502e <__udivmoddi4+0x286>
 8004e58:	2700      	movs	r7, #0
 8004e5a:	e9c6 0100 	strd	r0, r1, [r6]
 8004e5e:	4638      	mov	r0, r7
 8004e60:	4639      	mov	r1, r7
 8004e62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e66:	fab3 f783 	clz	r7, r3
 8004e6a:	2f00      	cmp	r7, #0
 8004e6c:	d147      	bne.n	8004efe <__udivmoddi4+0x156>
 8004e6e:	428b      	cmp	r3, r1
 8004e70:	d302      	bcc.n	8004e78 <__udivmoddi4+0xd0>
 8004e72:	4282      	cmp	r2, r0
 8004e74:	f200 80fa 	bhi.w	800506c <__udivmoddi4+0x2c4>
 8004e78:	1a84      	subs	r4, r0, r2
 8004e7a:	eb61 0303 	sbc.w	r3, r1, r3
 8004e7e:	2001      	movs	r0, #1
 8004e80:	4698      	mov	r8, r3
 8004e82:	2e00      	cmp	r6, #0
 8004e84:	d0e0      	beq.n	8004e48 <__udivmoddi4+0xa0>
 8004e86:	e9c6 4800 	strd	r4, r8, [r6]
 8004e8a:	e7dd      	b.n	8004e48 <__udivmoddi4+0xa0>
 8004e8c:	b902      	cbnz	r2, 8004e90 <__udivmoddi4+0xe8>
 8004e8e:	deff      	udf	#255	; 0xff
 8004e90:	fab2 f282 	clz	r2, r2
 8004e94:	2a00      	cmp	r2, #0
 8004e96:	f040 808f 	bne.w	8004fb8 <__udivmoddi4+0x210>
 8004e9a:	1b49      	subs	r1, r1, r5
 8004e9c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8004ea0:	fa1f f885 	uxth.w	r8, r5
 8004ea4:	2701      	movs	r7, #1
 8004ea6:	fbb1 fcfe 	udiv	ip, r1, lr
 8004eaa:	0c23      	lsrs	r3, r4, #16
 8004eac:	fb0e 111c 	mls	r1, lr, ip, r1
 8004eb0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8004eb4:	fb08 f10c 	mul.w	r1, r8, ip
 8004eb8:	4299      	cmp	r1, r3
 8004eba:	d907      	bls.n	8004ecc <__udivmoddi4+0x124>
 8004ebc:	18eb      	adds	r3, r5, r3
 8004ebe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8004ec2:	d202      	bcs.n	8004eca <__udivmoddi4+0x122>
 8004ec4:	4299      	cmp	r1, r3
 8004ec6:	f200 80cd 	bhi.w	8005064 <__udivmoddi4+0x2bc>
 8004eca:	4684      	mov	ip, r0
 8004ecc:	1a59      	subs	r1, r3, r1
 8004ece:	b2a3      	uxth	r3, r4
 8004ed0:	fbb1 f0fe 	udiv	r0, r1, lr
 8004ed4:	fb0e 1410 	mls	r4, lr, r0, r1
 8004ed8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8004edc:	fb08 f800 	mul.w	r8, r8, r0
 8004ee0:	45a0      	cmp	r8, r4
 8004ee2:	d907      	bls.n	8004ef4 <__udivmoddi4+0x14c>
 8004ee4:	192c      	adds	r4, r5, r4
 8004ee6:	f100 33ff 	add.w	r3, r0, #4294967295
 8004eea:	d202      	bcs.n	8004ef2 <__udivmoddi4+0x14a>
 8004eec:	45a0      	cmp	r8, r4
 8004eee:	f200 80b6 	bhi.w	800505e <__udivmoddi4+0x2b6>
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	eba4 0408 	sub.w	r4, r4, r8
 8004ef8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8004efc:	e79f      	b.n	8004e3e <__udivmoddi4+0x96>
 8004efe:	f1c7 0c20 	rsb	ip, r7, #32
 8004f02:	40bb      	lsls	r3, r7
 8004f04:	fa22 fe0c 	lsr.w	lr, r2, ip
 8004f08:	ea4e 0e03 	orr.w	lr, lr, r3
 8004f0c:	fa01 f407 	lsl.w	r4, r1, r7
 8004f10:	fa20 f50c 	lsr.w	r5, r0, ip
 8004f14:	fa21 f30c 	lsr.w	r3, r1, ip
 8004f18:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8004f1c:	4325      	orrs	r5, r4
 8004f1e:	fbb3 f9f8 	udiv	r9, r3, r8
 8004f22:	0c2c      	lsrs	r4, r5, #16
 8004f24:	fb08 3319 	mls	r3, r8, r9, r3
 8004f28:	fa1f fa8e 	uxth.w	sl, lr
 8004f2c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8004f30:	fb09 f40a 	mul.w	r4, r9, sl
 8004f34:	429c      	cmp	r4, r3
 8004f36:	fa02 f207 	lsl.w	r2, r2, r7
 8004f3a:	fa00 f107 	lsl.w	r1, r0, r7
 8004f3e:	d90b      	bls.n	8004f58 <__udivmoddi4+0x1b0>
 8004f40:	eb1e 0303 	adds.w	r3, lr, r3
 8004f44:	f109 30ff 	add.w	r0, r9, #4294967295
 8004f48:	f080 8087 	bcs.w	800505a <__udivmoddi4+0x2b2>
 8004f4c:	429c      	cmp	r4, r3
 8004f4e:	f240 8084 	bls.w	800505a <__udivmoddi4+0x2b2>
 8004f52:	f1a9 0902 	sub.w	r9, r9, #2
 8004f56:	4473      	add	r3, lr
 8004f58:	1b1b      	subs	r3, r3, r4
 8004f5a:	b2ad      	uxth	r5, r5
 8004f5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8004f60:	fb08 3310 	mls	r3, r8, r0, r3
 8004f64:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8004f68:	fb00 fa0a 	mul.w	sl, r0, sl
 8004f6c:	45a2      	cmp	sl, r4
 8004f6e:	d908      	bls.n	8004f82 <__udivmoddi4+0x1da>
 8004f70:	eb1e 0404 	adds.w	r4, lr, r4
 8004f74:	f100 33ff 	add.w	r3, r0, #4294967295
 8004f78:	d26b      	bcs.n	8005052 <__udivmoddi4+0x2aa>
 8004f7a:	45a2      	cmp	sl, r4
 8004f7c:	d969      	bls.n	8005052 <__udivmoddi4+0x2aa>
 8004f7e:	3802      	subs	r0, #2
 8004f80:	4474      	add	r4, lr
 8004f82:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8004f86:	fba0 8902 	umull	r8, r9, r0, r2
 8004f8a:	eba4 040a 	sub.w	r4, r4, sl
 8004f8e:	454c      	cmp	r4, r9
 8004f90:	46c2      	mov	sl, r8
 8004f92:	464b      	mov	r3, r9
 8004f94:	d354      	bcc.n	8005040 <__udivmoddi4+0x298>
 8004f96:	d051      	beq.n	800503c <__udivmoddi4+0x294>
 8004f98:	2e00      	cmp	r6, #0
 8004f9a:	d069      	beq.n	8005070 <__udivmoddi4+0x2c8>
 8004f9c:	ebb1 050a 	subs.w	r5, r1, sl
 8004fa0:	eb64 0403 	sbc.w	r4, r4, r3
 8004fa4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8004fa8:	40fd      	lsrs	r5, r7
 8004faa:	40fc      	lsrs	r4, r7
 8004fac:	ea4c 0505 	orr.w	r5, ip, r5
 8004fb0:	e9c6 5400 	strd	r5, r4, [r6]
 8004fb4:	2700      	movs	r7, #0
 8004fb6:	e747      	b.n	8004e48 <__udivmoddi4+0xa0>
 8004fb8:	f1c2 0320 	rsb	r3, r2, #32
 8004fbc:	fa20 f703 	lsr.w	r7, r0, r3
 8004fc0:	4095      	lsls	r5, r2
 8004fc2:	fa01 f002 	lsl.w	r0, r1, r2
 8004fc6:	fa21 f303 	lsr.w	r3, r1, r3
 8004fca:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8004fce:	4338      	orrs	r0, r7
 8004fd0:	0c01      	lsrs	r1, r0, #16
 8004fd2:	fbb3 f7fe 	udiv	r7, r3, lr
 8004fd6:	fa1f f885 	uxth.w	r8, r5
 8004fda:	fb0e 3317 	mls	r3, lr, r7, r3
 8004fde:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8004fe2:	fb07 f308 	mul.w	r3, r7, r8
 8004fe6:	428b      	cmp	r3, r1
 8004fe8:	fa04 f402 	lsl.w	r4, r4, r2
 8004fec:	d907      	bls.n	8004ffe <__udivmoddi4+0x256>
 8004fee:	1869      	adds	r1, r5, r1
 8004ff0:	f107 3cff 	add.w	ip, r7, #4294967295
 8004ff4:	d22f      	bcs.n	8005056 <__udivmoddi4+0x2ae>
 8004ff6:	428b      	cmp	r3, r1
 8004ff8:	d92d      	bls.n	8005056 <__udivmoddi4+0x2ae>
 8004ffa:	3f02      	subs	r7, #2
 8004ffc:	4429      	add	r1, r5
 8004ffe:	1acb      	subs	r3, r1, r3
 8005000:	b281      	uxth	r1, r0
 8005002:	fbb3 f0fe 	udiv	r0, r3, lr
 8005006:	fb0e 3310 	mls	r3, lr, r0, r3
 800500a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800500e:	fb00 f308 	mul.w	r3, r0, r8
 8005012:	428b      	cmp	r3, r1
 8005014:	d907      	bls.n	8005026 <__udivmoddi4+0x27e>
 8005016:	1869      	adds	r1, r5, r1
 8005018:	f100 3cff 	add.w	ip, r0, #4294967295
 800501c:	d217      	bcs.n	800504e <__udivmoddi4+0x2a6>
 800501e:	428b      	cmp	r3, r1
 8005020:	d915      	bls.n	800504e <__udivmoddi4+0x2a6>
 8005022:	3802      	subs	r0, #2
 8005024:	4429      	add	r1, r5
 8005026:	1ac9      	subs	r1, r1, r3
 8005028:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800502c:	e73b      	b.n	8004ea6 <__udivmoddi4+0xfe>
 800502e:	4637      	mov	r7, r6
 8005030:	4630      	mov	r0, r6
 8005032:	e709      	b.n	8004e48 <__udivmoddi4+0xa0>
 8005034:	4607      	mov	r7, r0
 8005036:	e6e7      	b.n	8004e08 <__udivmoddi4+0x60>
 8005038:	4618      	mov	r0, r3
 800503a:	e6fb      	b.n	8004e34 <__udivmoddi4+0x8c>
 800503c:	4541      	cmp	r1, r8
 800503e:	d2ab      	bcs.n	8004f98 <__udivmoddi4+0x1f0>
 8005040:	ebb8 0a02 	subs.w	sl, r8, r2
 8005044:	eb69 020e 	sbc.w	r2, r9, lr
 8005048:	3801      	subs	r0, #1
 800504a:	4613      	mov	r3, r2
 800504c:	e7a4      	b.n	8004f98 <__udivmoddi4+0x1f0>
 800504e:	4660      	mov	r0, ip
 8005050:	e7e9      	b.n	8005026 <__udivmoddi4+0x27e>
 8005052:	4618      	mov	r0, r3
 8005054:	e795      	b.n	8004f82 <__udivmoddi4+0x1da>
 8005056:	4667      	mov	r7, ip
 8005058:	e7d1      	b.n	8004ffe <__udivmoddi4+0x256>
 800505a:	4681      	mov	r9, r0
 800505c:	e77c      	b.n	8004f58 <__udivmoddi4+0x1b0>
 800505e:	3802      	subs	r0, #2
 8005060:	442c      	add	r4, r5
 8005062:	e747      	b.n	8004ef4 <__udivmoddi4+0x14c>
 8005064:	f1ac 0c02 	sub.w	ip, ip, #2
 8005068:	442b      	add	r3, r5
 800506a:	e72f      	b.n	8004ecc <__udivmoddi4+0x124>
 800506c:	4638      	mov	r0, r7
 800506e:	e708      	b.n	8004e82 <__udivmoddi4+0xda>
 8005070:	4637      	mov	r7, r6
 8005072:	e6e9      	b.n	8004e48 <__udivmoddi4+0xa0>

08005074 <__aeabi_idiv0>:
 8005074:	4770      	bx	lr
 8005076:	bf00      	nop

08005078 <HTS221_GetCapabilities>:
  (void)(pObj);

  Capabilities->Humidity    = 1;
  Capabilities->Pressure    = 0;
  Capabilities->Temperature = 1;
  Capabilities->LowPower    = 0;
 8005078:	4b04      	ldr	r3, [pc, #16]	; (800508c <HTS221_GetCapabilities+0x14>)
  Capabilities->HumMaxOdr   = 12.5f;
 800507a:	608b      	str	r3, [r1, #8]
  Capabilities->LowPower    = 0;
 800507c:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  Capabilities->TempMaxOdr  = 12.5f;
 8005080:	2000      	movs	r0, #0
  Capabilities->LowPower    = 0;
 8005082:	e9c1 2300 	strd	r2, r3, [r1]
  Capabilities->TempMaxOdr  = 12.5f;
 8005086:	60c8      	str	r0, [r1, #12]
  Capabilities->PressMaxOdr = 0.0f;
  return HTS221_OK;
}
 8005088:	4770      	bx	lr
 800508a:	bf00      	nop
 800508c:	41480000 	.word	0x41480000

08005090 <HTS221_SetOutputDataRate>:
static int32_t HTS221_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
  hts221_odr_t new_odr;

  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 8005090:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8005094:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8005098:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
 800509c:	b508      	push	{r3, lr}
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 800509e:	d910      	bls.n	80050c2 <HTS221_SetOutputDataRate+0x32>
 80050a0:	eef1 7a0c 	vmov.f32	s15, #28	; 0x40e00000  7.0
 80050a4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80050a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050ac:	bf94      	ite	ls
 80050ae:	2102      	movls	r1, #2
 80050b0:	2103      	movhi	r1, #3
            :                 HTS221_ODR_12Hz5;

  if (hts221_data_rate_set(&(pObj->Ctx), new_odr) != HTS221_OK)
 80050b2:	301c      	adds	r0, #28
 80050b4:	f000 f9de 	bl	8005474 <hts221_data_rate_set>
 80050b8:	3000      	adds	r0, #0
 80050ba:	bf18      	it	ne
 80050bc:	2001      	movne	r0, #1
  {
    return HTS221_ERROR;
  }

  return HTS221_OK;
}
 80050be:	4240      	negs	r0, r0
 80050c0:	bd08      	pop	{r3, pc}
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 80050c2:	2101      	movs	r1, #1
 80050c4:	e7f5      	b.n	80050b2 <HTS221_SetOutputDataRate+0x22>

080050c6 <HTS221_Init>:
{
 80050c6:	b538      	push	{r3, r4, r5, lr}
  if (pObj->is_initialized == 0U)
 80050c8:	f890 1028 	ldrb.w	r1, [r0, #40]	; 0x28
{
 80050cc:	4604      	mov	r4, r0
  if (pObj->is_initialized == 0U)
 80050ce:	b121      	cbz	r1, 80050da <HTS221_Init+0x14>
  pObj->is_initialized = 1;
 80050d0:	2301      	movs	r3, #1
 80050d2:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  return HTS221_OK;
 80050d6:	2000      	movs	r0, #0
}
 80050d8:	bd38      	pop	{r3, r4, r5, pc}
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t HTS221_Initialize(HTS221_Object_t *pObj)
{
  /* Power off the component. */
  if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 80050da:	f100 051c 	add.w	r5, r0, #28
 80050de:	4628      	mov	r0, r5
 80050e0:	f000 fa22 	bl	8005528 <hts221_power_on_set>
 80050e4:	b110      	cbz	r0, 80050ec <HTS221_Init+0x26>
      return HTS221_ERROR;
 80050e6:	f04f 30ff 	mov.w	r0, #4294967295
 80050ea:	e7f5      	b.n	80050d8 <HTS221_Init+0x12>
  {
    return HTS221_ERROR;
  }

  /* Enable BDU */
  if (hts221_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 80050ec:	2101      	movs	r1, #1
 80050ee:	4628      	mov	r0, r5
 80050f0:	f000 f9f4 	bl	80054dc <hts221_block_data_update_set>
 80050f4:	2800      	cmp	r0, #0
 80050f6:	d1f6      	bne.n	80050e6 <HTS221_Init+0x20>
  {
    return HTS221_ERROR;
  }

  /* Set default ODR */
  if (HTS221_SetOutputDataRate(pObj, 1.0f) != HTS221_OK)
 80050f8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80050fc:	4620      	mov	r0, r4
 80050fe:	f7ff ffc7 	bl	8005090 <HTS221_SetOutputDataRate>
 8005102:	2800      	cmp	r0, #0
 8005104:	d0e4      	beq.n	80050d0 <HTS221_Init+0xa>
 8005106:	e7ee      	b.n	80050e6 <HTS221_Init+0x20>

08005108 <HTS221_HUM_SetOutputDataRate>:
  return HTS221_SetOutputDataRate(pObj, Odr);
 8005108:	f7ff bfc2 	b.w	8005090 <HTS221_SetOutputDataRate>

0800510c <HTS221_ReadID>:
{
 800510c:	b508      	push	{r3, lr}
  if (hts221_device_id_get(&(pObj->Ctx), Id) != HTS221_OK)
 800510e:	301c      	adds	r0, #28
 8005110:	f000 fa05 	bl	800551e <hts221_device_id_get>
 8005114:	3000      	adds	r0, #0
 8005116:	bf18      	it	ne
 8005118:	2001      	movne	r0, #1
}
 800511a:	4240      	negs	r0, r0
 800511c:	bd08      	pop	{r3, pc}
	...

08005120 <HTS221_GetOutputDataRate>:
{
 8005120:	b513      	push	{r0, r1, r4, lr}
 8005122:	460c      	mov	r4, r1
  if (hts221_data_rate_get(&(pObj->Ctx), &odr_low_level) != HTS221_OK)
 8005124:	301c      	adds	r0, #28
 8005126:	f10d 0107 	add.w	r1, sp, #7
 800512a:	f000 f9ba 	bl	80054a2 <hts221_data_rate_get>
 800512e:	b990      	cbnz	r0, 8005156 <HTS221_GetOutputDataRate+0x36>
  switch (odr_low_level)
 8005130:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005134:	2b03      	cmp	r3, #3
 8005136:	d80e      	bhi.n	8005156 <HTS221_GetOutputDataRate+0x36>
 8005138:	e8df f003 	tbb	[pc, r3]
 800513c:	0b090602 	.word	0x0b090602
      *Odr = 0.0f;
 8005140:	2300      	movs	r3, #0
      *Odr = 12.5f;
 8005142:	6023      	str	r3, [r4, #0]
}
 8005144:	b002      	add	sp, #8
 8005146:	bd10      	pop	{r4, pc}
      *Odr = 1.0f;
 8005148:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800514c:	e7f9      	b.n	8005142 <HTS221_GetOutputDataRate+0x22>
      *Odr = 7.0f;
 800514e:	4b03      	ldr	r3, [pc, #12]	; (800515c <HTS221_GetOutputDataRate+0x3c>)
 8005150:	e7f7      	b.n	8005142 <HTS221_GetOutputDataRate+0x22>
      *Odr = 12.5f;
 8005152:	4b03      	ldr	r3, [pc, #12]	; (8005160 <HTS221_GetOutputDataRate+0x40>)
 8005154:	e7f5      	b.n	8005142 <HTS221_GetOutputDataRate+0x22>
      ret = HTS221_ERROR;
 8005156:	f04f 30ff 	mov.w	r0, #4294967295
 800515a:	e7f3      	b.n	8005144 <HTS221_GetOutputDataRate+0x24>
 800515c:	40e00000 	.word	0x40e00000
 8005160:	41480000 	.word	0x41480000

08005164 <HTS221_HUM_GetOutputDataRate>:
  return HTS221_GetOutputDataRate(pObj, Odr);
 8005164:	f7ff bfdc 	b.w	8005120 <HTS221_GetOutputDataRate>

08005168 <HTS221_HUM_GetHumidity>:
{
 8005168:	b530      	push	{r4, r5, lr}
 800516a:	ed2d 8b04 	vpush	{d8-d9}
  if (hts221_hum_adc_point_0_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 800516e:	f100 041c 	add.w	r4, r0, #28
{
 8005172:	b083      	sub	sp, #12
 8005174:	460d      	mov	r5, r1
  if (hts221_hum_adc_point_0_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 8005176:	4620      	mov	r0, r4
 8005178:	a901      	add	r1, sp, #4
 800517a:	f000 fa3c 	bl	80055f6 <hts221_hum_adc_point_0_get>
 800517e:	b128      	cbz	r0, 800518c <HTS221_HUM_GetHumidity+0x24>
    return HTS221_ERROR;
 8005180:	f04f 30ff 	mov.w	r0, #4294967295
}
 8005184:	b003      	add	sp, #12
 8005186:	ecbd 8b04 	vpop	{d8-d9}
 800518a:	bd30      	pop	{r4, r5, pc}
  lin_hum.x0 = (float)coeff.i16bit;
 800518c:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8005190:	ee08 3a10 	vmov	s16, r3
  if (hts221_hum_rh_point_0_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 8005194:	a901      	add	r1, sp, #4
 8005196:	4620      	mov	r0, r4
  lin_hum.x0 = (float)coeff.i16bit;
 8005198:	eeb8 9ac8 	vcvt.f32.s32	s18, s16
  if (hts221_hum_rh_point_0_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 800519c:	f000 f9db 	bl	8005556 <hts221_hum_rh_point_0_get>
 80051a0:	2800      	cmp	r0, #0
 80051a2:	d1ed      	bne.n	8005180 <HTS221_HUM_GetHumidity+0x18>
  lin_hum.y0 = (float)coeff.u8bit[0];
 80051a4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80051a8:	ee08 3a90 	vmov	s17, r3
  if (hts221_hum_adc_point_1_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 80051ac:	a901      	add	r1, sp, #4
 80051ae:	4620      	mov	r0, r4
  lin_hum.y0 = (float)coeff.u8bit[0];
 80051b0:	eef8 9a68 	vcvt.f32.u32	s19, s17
  if (hts221_hum_adc_point_1_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 80051b4:	f000 fa24 	bl	8005600 <hts221_hum_adc_point_1_get>
 80051b8:	2800      	cmp	r0, #0
 80051ba:	d1e1      	bne.n	8005180 <HTS221_HUM_GetHumidity+0x18>
  lin_hum.x1 = (float)coeff.i16bit;
 80051bc:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80051c0:	ee08 3a10 	vmov	s16, r3
  if (hts221_hum_rh_point_1_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 80051c4:	a901      	add	r1, sp, #4
 80051c6:	4620      	mov	r0, r4
  lin_hum.x1 = (float)coeff.i16bit;
 80051c8:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
  if (hts221_hum_rh_point_1_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 80051cc:	f000 f9ce 	bl	800556c <hts221_hum_rh_point_1_get>
 80051d0:	2800      	cmp	r0, #0
 80051d2:	d1d5      	bne.n	8005180 <HTS221_HUM_GetHumidity+0x18>
  lin_hum.y1 = (float)coeff.u8bit[0];
 80051d4:	f89d 3004 	ldrb.w	r3, [sp, #4]
  (void)memset(data_raw_humidity.u8bit, 0x00, sizeof(int16_t));
 80051d8:	f8ad 0000 	strh.w	r0, [sp]
  lin_hum.y1 = (float)coeff.u8bit[0];
 80051dc:	ee08 3a90 	vmov	s17, r3
  if (hts221_humidity_raw_get(&(pObj->Ctx), data_raw_humidity.u8bit) != HTS221_OK)
 80051e0:	4669      	mov	r1, sp
 80051e2:	4620      	mov	r0, r4
  lin_hum.y1 = (float)coeff.u8bit[0];
 80051e4:	eef8 8a68 	vcvt.f32.u32	s17, s17
  if (hts221_humidity_raw_get(&(pObj->Ctx), data_raw_humidity.u8bit) != HTS221_OK)
 80051e8:	f000 f98f 	bl	800550a <hts221_humidity_raw_get>
 80051ec:	2800      	cmp	r0, #0
 80051ee:	d1c7      	bne.n	8005180 <HTS221_HUM_GetHumidity+0x18>
 * @param  Coeff the coefficient
 * @retval Calculation result
 */
static float Linear_Interpolation(lin_t *Lin, float Coeff)
{
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 80051f0:	ee28 7ac9 	vnmul.f32	s14, s17, s18
  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 80051f4:	f9bd 3000 	ldrsh.w	r3, [sp]
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 80051f8:	eea9 7a88 	vfma.f32	s14, s19, s16
  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 80051fc:	ee07 3a90 	vmov	s15, r3
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 8005200:	ee78 8ae9 	vsub.f32	s17, s17, s19
  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 8005204:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 8005208:	ee38 8a49 	vsub.f32	s16, s16, s18
 800520c:	eea7 7aa8 	vfma.f32	s14, s15, s17
 8005210:	eec7 7a08 	vdiv.f32	s15, s14, s16
  if (*Value < 0.0f)
 8005214:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 800521c:	edc5 7a00 	vstr	s15, [r5]
  if (*Value < 0.0f)
 8005220:	d409      	bmi.n	8005236 <HTS221_HUM_GetHumidity+0xce>
  if (*Value > 100.0f)
 8005222:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8005244 <HTS221_HUM_GetHumidity+0xdc>
 8005226:	eef4 7ac7 	vcmpe.f32	s15, s14
 800522a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800522e:	dc05      	bgt.n	800523c <HTS221_HUM_GetHumidity+0xd4>
 8005230:	edc5 7a00 	vstr	s15, [r5]
 8005234:	e7a6      	b.n	8005184 <HTS221_HUM_GetHumidity+0x1c>
    *Value = 0.0f;
 8005236:	eddf 7a04 	vldr	s15, [pc, #16]	; 8005248 <HTS221_HUM_GetHumidity+0xe0>
 800523a:	e7f9      	b.n	8005230 <HTS221_HUM_GetHumidity+0xc8>
    *Value = 100.0f;
 800523c:	ed85 7a00 	vstr	s14, [r5]
 8005240:	e7a0      	b.n	8005184 <HTS221_HUM_GetHumidity+0x1c>
 8005242:	bf00      	nop
 8005244:	42c80000 	.word	0x42c80000
 8005248:	00000000 	.word	0x00000000

0800524c <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800524c:	b430      	push	{r4, r5}
 800524e:	4604      	mov	r4, r0
 8005250:	6945      	ldr	r5, [r0, #20]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8005252:	68a4      	ldr	r4, [r4, #8]
 8005254:	7b00      	ldrb	r0, [r0, #12]
 8005256:	b924      	cbnz	r4, 8005262 <ReadRegWrap+0x16>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8005258:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800525c:	46ac      	mov	ip, r5
  }
}
 800525e:	bc30      	pop	{r4, r5}
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8005260:	4760      	bx	ip
 8005262:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8005266:	e7f9      	b.n	800525c <ReadRegWrap+0x10>

08005268 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005268:	b430      	push	{r4, r5}
 800526a:	4604      	mov	r4, r0
 800526c:	6905      	ldr	r5, [r0, #16]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 800526e:	68a4      	ldr	r4, [r4, #8]
 8005270:	7b00      	ldrb	r0, [r0, #12]
 8005272:	b924      	cbnz	r4, 800527e <WriteRegWrap+0x16>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8005274:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8005278:	46ac      	mov	ip, r5
  }
}
 800527a:	bc30      	pop	{r4, r5}
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800527c:	4760      	bx	ip
 800527e:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8005282:	e7f9      	b.n	8005278 <WriteRegWrap+0x10>

08005284 <HTS221_HUM_Enable>:
{
 8005284:	b510      	push	{r4, lr}
  if (pObj->hum_is_enabled == 1U)
 8005286:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 800528a:	2b01      	cmp	r3, #1
{
 800528c:	4604      	mov	r4, r0
  if (pObj->hum_is_enabled == 1U)
 800528e:	d005      	beq.n	800529c <HTS221_HUM_Enable+0x18>
  if (pObj->temp_is_enabled == 0U)
 8005290:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 8005294:	b123      	cbz	r3, 80052a0 <HTS221_HUM_Enable+0x1c>
  pObj->hum_is_enabled = 1;
 8005296:	2301      	movs	r3, #1
 8005298:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    return HTS221_OK;
 800529c:	2000      	movs	r0, #0
 800529e:	e007      	b.n	80052b0 <HTS221_HUM_Enable+0x2c>
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 80052a0:	2101      	movs	r1, #1
 80052a2:	301c      	adds	r0, #28
 80052a4:	f000 f940 	bl	8005528 <hts221_power_on_set>
 80052a8:	2800      	cmp	r0, #0
 80052aa:	d0f4      	beq.n	8005296 <HTS221_HUM_Enable+0x12>
      return HTS221_ERROR;
 80052ac:	f04f 30ff 	mov.w	r0, #4294967295
}
 80052b0:	bd10      	pop	{r4, pc}

080052b2 <HTS221_HUM_Disable>:
{
 80052b2:	b510      	push	{r4, lr}
 80052b4:	4604      	mov	r4, r0
  if (pObj->hum_is_enabled == 0U)
 80052b6:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
 80052ba:	b128      	cbz	r0, 80052c8 <HTS221_HUM_Disable+0x16>
  if (pObj->temp_is_enabled == 0U)
 80052bc:	f894 102a 	ldrb.w	r1, [r4, #42]	; 0x2a
 80052c0:	b119      	cbz	r1, 80052ca <HTS221_HUM_Disable+0x18>
  pObj->hum_is_enabled = 0;
 80052c2:	2000      	movs	r0, #0
 80052c4:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
}
 80052c8:	bd10      	pop	{r4, pc}
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 80052ca:	f104 001c 	add.w	r0, r4, #28
 80052ce:	f000 f92b 	bl	8005528 <hts221_power_on_set>
 80052d2:	2800      	cmp	r0, #0
 80052d4:	d0f5      	beq.n	80052c2 <HTS221_HUM_Disable+0x10>
      return HTS221_ERROR;
 80052d6:	f04f 30ff 	mov.w	r0, #4294967295
 80052da:	e7f5      	b.n	80052c8 <HTS221_HUM_Disable+0x16>

080052dc <HTS221_TEMP_Enable>:
{
 80052dc:	b510      	push	{r4, lr}
  if (pObj->temp_is_enabled == 1U)
 80052de:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 80052e2:	2b01      	cmp	r3, #1
{
 80052e4:	4604      	mov	r4, r0
  if (pObj->temp_is_enabled == 1U)
 80052e6:	d005      	beq.n	80052f4 <HTS221_TEMP_Enable+0x18>
  if (pObj->hum_is_enabled == 0U)
 80052e8:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 80052ec:	b123      	cbz	r3, 80052f8 <HTS221_TEMP_Enable+0x1c>
  pObj->temp_is_enabled = 1;
 80052ee:	2301      	movs	r3, #1
 80052f0:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
    return HTS221_OK;
 80052f4:	2000      	movs	r0, #0
 80052f6:	e007      	b.n	8005308 <HTS221_TEMP_Enable+0x2c>
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 80052f8:	2101      	movs	r1, #1
 80052fa:	301c      	adds	r0, #28
 80052fc:	f000 f914 	bl	8005528 <hts221_power_on_set>
 8005300:	2800      	cmp	r0, #0
 8005302:	d0f4      	beq.n	80052ee <HTS221_TEMP_Enable+0x12>
      return HTS221_ERROR;
 8005304:	f04f 30ff 	mov.w	r0, #4294967295
}
 8005308:	bd10      	pop	{r4, pc}

0800530a <HTS221_TEMP_Disable>:
{
 800530a:	b510      	push	{r4, lr}
 800530c:	4604      	mov	r4, r0
  if (pObj->temp_is_enabled == 0U)
 800530e:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
 8005312:	b128      	cbz	r0, 8005320 <HTS221_TEMP_Disable+0x16>
  if (pObj->hum_is_enabled == 0U)
 8005314:	f894 1029 	ldrb.w	r1, [r4, #41]	; 0x29
 8005318:	b119      	cbz	r1, 8005322 <HTS221_TEMP_Disable+0x18>
  pObj->temp_is_enabled = 0;
 800531a:	2000      	movs	r0, #0
 800531c:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
}
 8005320:	bd10      	pop	{r4, pc}
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8005322:	f104 001c 	add.w	r0, r4, #28
 8005326:	f000 f8ff 	bl	8005528 <hts221_power_on_set>
 800532a:	2800      	cmp	r0, #0
 800532c:	d0f5      	beq.n	800531a <HTS221_TEMP_Disable+0x10>
      return HTS221_ERROR;
 800532e:	f04f 30ff 	mov.w	r0, #4294967295
 8005332:	e7f5      	b.n	8005320 <HTS221_TEMP_Disable+0x16>

08005334 <HTS221_DeInit>:
{
 8005334:	b510      	push	{r4, lr}
  if (pObj->is_initialized == 1U)
 8005336:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 800533a:	2b01      	cmp	r3, #1
{
 800533c:	4604      	mov	r4, r0
  if (pObj->is_initialized == 1U)
 800533e:	d003      	beq.n	8005348 <HTS221_DeInit+0x14>
  pObj->is_initialized = 0;
 8005340:	2000      	movs	r0, #0
 8005342:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
}
 8005346:	bd10      	pop	{r4, pc}
    if (HTS221_HUM_Disable(pObj) != HTS221_OK)
 8005348:	f7ff ffb3 	bl	80052b2 <HTS221_HUM_Disable>
 800534c:	b110      	cbz	r0, 8005354 <HTS221_DeInit+0x20>
      return HTS221_ERROR;
 800534e:	f04f 30ff 	mov.w	r0, #4294967295
 8005352:	e7f8      	b.n	8005346 <HTS221_DeInit+0x12>
    if (HTS221_TEMP_Disable(pObj) != HTS221_OK)
 8005354:	4620      	mov	r0, r4
 8005356:	f7ff ffd8 	bl	800530a <HTS221_TEMP_Disable>
 800535a:	2800      	cmp	r0, #0
 800535c:	d0f0      	beq.n	8005340 <HTS221_DeInit+0xc>
 800535e:	e7f6      	b.n	800534e <HTS221_DeInit+0x1a>

08005360 <HTS221_TEMP_SetOutputDataRate>:
 8005360:	f7ff be96 	b.w	8005090 <HTS221_SetOutputDataRate>

08005364 <HTS221_TEMP_GetOutputDataRate>:
 8005364:	f7ff bedc 	b.w	8005120 <HTS221_GetOutputDataRate>

08005368 <HTS221_TEMP_GetTemperature>:
{
 8005368:	b530      	push	{r4, r5, lr}
 800536a:	ed2d 8b04 	vpush	{d8-d9}
  if (hts221_temp_adc_point_0_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 800536e:	f100 041c 	add.w	r4, r0, #28
{
 8005372:	b083      	sub	sp, #12
 8005374:	460d      	mov	r5, r1
  if (hts221_temp_adc_point_0_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 8005376:	4620      	mov	r0, r4
 8005378:	a901      	add	r1, sp, #4
 800537a:	f000 f946 	bl	800560a <hts221_temp_adc_point_0_get>
 800537e:	b128      	cbz	r0, 800538c <HTS221_TEMP_GetTemperature+0x24>
    return HTS221_ERROR;
 8005380:	f04f 30ff 	mov.w	r0, #4294967295
}
 8005384:	b003      	add	sp, #12
 8005386:	ecbd 8b04 	vpop	{d8-d9}
 800538a:	bd30      	pop	{r4, r5, pc}
  lin_temp.x0 = (float)coeff.i16bit;
 800538c:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8005390:	ee08 3a10 	vmov	s16, r3
  if (hts221_temp_deg_point_0_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 8005394:	a901      	add	r1, sp, #4
 8005396:	4620      	mov	r0, r4
  lin_temp.x0 = (float)coeff.i16bit;
 8005398:	eeb8 9ac8 	vcvt.f32.s32	s18, s16
  if (hts221_temp_deg_point_0_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 800539c:	f000 f8f1 	bl	8005582 <hts221_temp_deg_point_0_get>
 80053a0:	2800      	cmp	r0, #0
 80053a2:	d1ed      	bne.n	8005380 <HTS221_TEMP_GetTemperature+0x18>
  lin_temp.y0 = (float)coeff.u8bit[0];
 80053a4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80053a8:	ee08 3a90 	vmov	s17, r3
  if (hts221_temp_adc_point_1_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 80053ac:	a901      	add	r1, sp, #4
 80053ae:	4620      	mov	r0, r4
  lin_temp.y0 = (float)coeff.u8bit[0];
 80053b0:	eef8 9a68 	vcvt.f32.u32	s19, s17
  if (hts221_temp_adc_point_1_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 80053b4:	f000 f92e 	bl	8005614 <hts221_temp_adc_point_1_get>
 80053b8:	2800      	cmp	r0, #0
 80053ba:	d1e1      	bne.n	8005380 <HTS221_TEMP_GetTemperature+0x18>
  lin_temp.x1 = (float)coeff.i16bit;
 80053bc:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80053c0:	ee08 3a10 	vmov	s16, r3
  if (hts221_temp_deg_point_1_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 80053c4:	a901      	add	r1, sp, #4
 80053c6:	4620      	mov	r0, r4
  lin_temp.x1 = (float)coeff.i16bit;
 80053c8:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
  if (hts221_temp_deg_point_1_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 80053cc:	f000 f8f6 	bl	80055bc <hts221_temp_deg_point_1_get>
 80053d0:	2800      	cmp	r0, #0
 80053d2:	d1d5      	bne.n	8005380 <HTS221_TEMP_GetTemperature+0x18>
  lin_temp.y1 = (float)coeff.u8bit[0];
 80053d4:	f89d 3004 	ldrb.w	r3, [sp, #4]
  (void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 80053d8:	f8ad 0000 	strh.w	r0, [sp]
  lin_temp.y1 = (float)coeff.u8bit[0];
 80053dc:	ee08 3a90 	vmov	s17, r3
  if (hts221_temperature_raw_get(&(pObj->Ctx), data_raw_temperature.u8bit) != HTS221_OK)
 80053e0:	4669      	mov	r1, sp
 80053e2:	4620      	mov	r0, r4
  lin_temp.y1 = (float)coeff.u8bit[0];
 80053e4:	eef8 8a68 	vcvt.f32.u32	s17, s17
  if (hts221_temperature_raw_get(&(pObj->Ctx), data_raw_temperature.u8bit) != HTS221_OK)
 80053e8:	f000 f894 	bl	8005514 <hts221_temperature_raw_get>
 80053ec:	2800      	cmp	r0, #0
 80053ee:	d1c7      	bne.n	8005380 <HTS221_TEMP_GetTemperature+0x18>
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 80053f0:	ee68 7ac9 	vnmul.f32	s15, s17, s18
  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 80053f4:	f9bd 3000 	ldrsh.w	r3, [sp]
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 80053f8:	eee9 7a88 	vfma.f32	s15, s19, s16
  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 80053fc:	ee07 3a10 	vmov	s14, r3
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 8005400:	ee78 8ae9 	vsub.f32	s17, s17, s19
  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 8005404:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 8005408:	ee38 8a49 	vsub.f32	s16, s16, s18
 800540c:	eee7 7a28 	vfma.f32	s15, s14, s17
 8005410:	ee87 7a88 	vdiv.f32	s14, s15, s16
  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 8005414:	ed85 7a00 	vstr	s14, [r5]
  return HTS221_OK;
 8005418:	e7b4      	b.n	8005384 <HTS221_TEMP_GetTemperature+0x1c>
	...

0800541c <HTS221_RegisterBusIO>:
  if (pObj == NULL)
 800541c:	b1a0      	cbz	r0, 8005448 <HTS221_RegisterBusIO+0x2c>
    pObj->IO.DeInit    = pIO->DeInit;
 800541e:	684a      	ldr	r2, [r1, #4]
    pObj->IO.Init      = pIO->Init;
 8005420:	680b      	ldr	r3, [r1, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8005422:	6042      	str	r2, [r0, #4]
    pObj->IO.BusType   = pIO->BusType;
 8005424:	688a      	ldr	r2, [r1, #8]
    pObj->IO.Init      = pIO->Init;
 8005426:	6003      	str	r3, [r0, #0]
    pObj->IO.BusType   = pIO->BusType;
 8005428:	6082      	str	r2, [r0, #8]
    pObj->IO.Address   = pIO->Address;
 800542a:	7b0a      	ldrb	r2, [r1, #12]
 800542c:	7302      	strb	r2, [r0, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800542e:	690a      	ldr	r2, [r1, #16]
 8005430:	6102      	str	r2, [r0, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8005432:	694a      	ldr	r2, [r1, #20]
 8005434:	6142      	str	r2, [r0, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8005436:	698a      	ldr	r2, [r1, #24]
 8005438:	6182      	str	r2, [r0, #24]
    pObj->Ctx.read_reg  = ReadRegWrap;
 800543a:	4a05      	ldr	r2, [pc, #20]	; (8005450 <HTS221_RegisterBusIO+0x34>)
 800543c:	6202      	str	r2, [r0, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 800543e:	4a05      	ldr	r2, [pc, #20]	; (8005454 <HTS221_RegisterBusIO+0x38>)
 8005440:	61c2      	str	r2, [r0, #28]
    pObj->Ctx.handle   = pObj;
 8005442:	6240      	str	r0, [r0, #36]	; 0x24
    if (pObj->IO.Init != NULL)
 8005444:	b103      	cbz	r3, 8005448 <HTS221_RegisterBusIO+0x2c>
      ret = pObj->IO.Init();
 8005446:	4718      	bx	r3
}
 8005448:	f04f 30ff 	mov.w	r0, #4294967295
 800544c:	4770      	bx	lr
 800544e:	bf00      	nop
 8005450:	0800524d 	.word	0x0800524d
 8005454:	08005269 	.word	0x08005269

08005458 <hts221_read_reg>:
  * @param  uint16_t len: number of consecutive register to read
  *
  */
int32_t hts221_read_reg(hts221_ctx_t *ctx, uint8_t reg, uint8_t *data,
                        uint16_t len)
{
 8005458:	b410      	push	{r4}
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800545a:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 800545e:	46a4      	mov	ip, r4
  return ret;
}
 8005460:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005464:	4760      	bx	ip

08005466 <hts221_write_reg>:
  * @param  uint16_t len: number of consecutive register to write
  *
*/
int32_t hts221_write_reg(hts221_ctx_t *ctx, uint8_t reg, uint8_t *data,
                         uint16_t len)
{
 8005466:	b410      	push	{r4}
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005468:	6804      	ldr	r4, [r0, #0]
 800546a:	6880      	ldr	r0, [r0, #8]
 800546c:	46a4      	mov	ip, r4
  return ret;
}
 800546e:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005472:	4760      	bx	ip

08005474 <hts221_data_rate_set>:
  * @param  hts221_ctx_t *ctx: read / write interface definitions
  * @param  hts221_odr_t: change the values of odr in reg CTRL_REG1
  *
  */
int32_t hts221_data_rate_set(hts221_ctx_t *ctx, hts221_odr_t val)
{
 8005474:	b537      	push	{r0, r1, r2, r4, r5, lr}
  hts221_reg_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, &reg.byte, 1);
 8005476:	2301      	movs	r3, #1
{
 8005478:	460d      	mov	r5, r1
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, &reg.byte, 1);
 800547a:	aa01      	add	r2, sp, #4
 800547c:	2120      	movs	r1, #32
{
 800547e:	4604      	mov	r4, r0
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, &reg.byte, 1);
 8005480:	f7ff ffea 	bl	8005458 <hts221_read_reg>

  if (ret == 0)
 8005484:	b958      	cbnz	r0, 800549e <hts221_data_rate_set+0x2a>
  {
    reg.ctrl_reg1.odr = (uint8_t)val;
 8005486:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800548a:	f365 0301 	bfi	r3, r5, #0, #2
 800548e:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, &reg.byte, 1);
 8005492:	aa01      	add	r2, sp, #4
 8005494:	2301      	movs	r3, #1
 8005496:	2120      	movs	r1, #32
 8005498:	4620      	mov	r0, r4
 800549a:	f7ff ffe4 	bl	8005466 <hts221_write_reg>
  }

  return ret;
}
 800549e:	b003      	add	sp, #12
 80054a0:	bd30      	pop	{r4, r5, pc}

080054a2 <hts221_data_rate_get>:
  * @param  hts221_ctx_t *ctx: read / write interface definitions
  * @param  hts221_odr_t: Get the values of odr in reg CTRL_REG1
  *
  */
int32_t hts221_data_rate_get(hts221_ctx_t *ctx, hts221_odr_t *val)
{
 80054a2:	b513      	push	{r0, r1, r4, lr}
  hts221_reg_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, &reg.byte, 1);
 80054a4:	2301      	movs	r3, #1
{
 80054a6:	460c      	mov	r4, r1
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, &reg.byte, 1);
 80054a8:	aa01      	add	r2, sp, #4
 80054aa:	2120      	movs	r1, #32
 80054ac:	f7ff ffd4 	bl	8005458 <hts221_read_reg>

  switch (reg.ctrl_reg1.odr)
 80054b0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80054b4:	f003 0303 	and.w	r3, r3, #3
 80054b8:	2b03      	cmp	r3, #3
 80054ba:	d80d      	bhi.n	80054d8 <hts221_data_rate_get+0x36>
 80054bc:	e8df f003 	tbb	[pc, r3]
 80054c0:	0a080602 	.word	0x0a080602
  {
    case HTS221_ONE_SHOT:
      *val = HTS221_ONE_SHOT;
 80054c4:	2300      	movs	r3, #0
      break;
    case HTS221_ODR_12Hz5:
      *val = HTS221_ODR_12Hz5;
      break;
    default:
      *val = HTS221_ODR_ND;
 80054c6:	7023      	strb	r3, [r4, #0]
      break;
  }

  return ret;
}
 80054c8:	b002      	add	sp, #8
 80054ca:	bd10      	pop	{r4, pc}
      *val = HTS221_ODR_1Hz;
 80054cc:	2301      	movs	r3, #1
 80054ce:	e7fa      	b.n	80054c6 <hts221_data_rate_get+0x24>
      *val = HTS221_ODR_7Hz;
 80054d0:	2302      	movs	r3, #2
 80054d2:	e7f8      	b.n	80054c6 <hts221_data_rate_get+0x24>
      *val = HTS221_ODR_12Hz5;
 80054d4:	2303      	movs	r3, #3
 80054d6:	e7f6      	b.n	80054c6 <hts221_data_rate_get+0x24>
      *val = HTS221_ODR_ND;
 80054d8:	2304      	movs	r3, #4
 80054da:	e7f4      	b.n	80054c6 <hts221_data_rate_get+0x24>

080054dc <hts221_block_data_update_set>:
  * @param  hts221_ctx_t *ctx: read / write interface definitions
  * @param  uint8_t val: change the values of bdu in reg CTRL_REG1
  *
  */
int32_t hts221_block_data_update_set(hts221_ctx_t *ctx, uint8_t val)
{
 80054dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  hts221_reg_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, &reg.byte, 1);
 80054de:	2301      	movs	r3, #1
{
 80054e0:	460d      	mov	r5, r1
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, &reg.byte, 1);
 80054e2:	aa01      	add	r2, sp, #4
 80054e4:	2120      	movs	r1, #32
{
 80054e6:	4604      	mov	r4, r0
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, &reg.byte, 1);
 80054e8:	f7ff ffb6 	bl	8005458 <hts221_read_reg>

  if (ret == 0)
 80054ec:	b958      	cbnz	r0, 8005506 <hts221_block_data_update_set+0x2a>
  {
    reg.ctrl_reg1.bdu = val;
 80054ee:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80054f2:	f365 0382 	bfi	r3, r5, #2, #1
 80054f6:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, &reg.byte, 1);
 80054fa:	aa01      	add	r2, sp, #4
 80054fc:	2301      	movs	r3, #1
 80054fe:	2120      	movs	r1, #32
 8005500:	4620      	mov	r0, r4
 8005502:	f7ff ffb0 	bl	8005466 <hts221_write_reg>
  }

  return ret;
}
 8005506:	b003      	add	sp, #12
 8005508:	bd30      	pop	{r4, r5, pc}

0800550a <hts221_humidity_raw_get>:
  * @param  uint8_t * : buffer that stores data read
  *
  */
int32_t hts221_humidity_raw_get(hts221_ctx_t *ctx, uint8_t *buff)
{
  return hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
 800550a:	460a      	mov	r2, r1
 800550c:	2302      	movs	r3, #2
 800550e:	2128      	movs	r1, #40	; 0x28
 8005510:	f7ff bfa2 	b.w	8005458 <hts221_read_reg>

08005514 <hts221_temperature_raw_get>:
  * @param  uint8_t * : buffer that stores data read
  *
  */
int32_t hts221_temperature_raw_get(hts221_ctx_t *ctx, uint8_t *buff)
{
  return hts221_read_reg(ctx, HTS221_TEMP_OUT_L, buff, 2);
 8005514:	460a      	mov	r2, r1
 8005516:	2302      	movs	r3, #2
 8005518:	212a      	movs	r1, #42	; 0x2a
 800551a:	f7ff bf9d 	b.w	8005458 <hts221_read_reg>

0800551e <hts221_device_id_get>:
  * @param  uint8_t * : buffer that stores data read
  *
  */
int32_t hts221_device_id_get(hts221_ctx_t *ctx, uint8_t *buff)
{
  return hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);
 800551e:	460a      	mov	r2, r1
 8005520:	2301      	movs	r3, #1
 8005522:	210f      	movs	r1, #15
 8005524:	f7ff bf98 	b.w	8005458 <hts221_read_reg>

08005528 <hts221_power_on_set>:
  * @param  hts221_ctx_t *ctx: read / write interface definitions
  * @param  uint8_t val: change the values of pd in reg CTRL_REG1
  *
  */
int32_t hts221_power_on_set(hts221_ctx_t *ctx, uint8_t val)
{
 8005528:	b537      	push	{r0, r1, r2, r4, r5, lr}
  hts221_reg_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, &reg.byte, 1);
 800552a:	2301      	movs	r3, #1
{
 800552c:	460d      	mov	r5, r1
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, &reg.byte, 1);
 800552e:	aa01      	add	r2, sp, #4
 8005530:	2120      	movs	r1, #32
{
 8005532:	4604      	mov	r4, r0
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, &reg.byte, 1);
 8005534:	f7ff ff90 	bl	8005458 <hts221_read_reg>

  if (ret == 0)
 8005538:	b958      	cbnz	r0, 8005552 <hts221_power_on_set+0x2a>
  {
    reg.ctrl_reg1.pd = val;
 800553a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800553e:	f365 13c7 	bfi	r3, r5, #7, #1
 8005542:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, &reg.byte, 1);
 8005546:	aa01      	add	r2, sp, #4
 8005548:	2301      	movs	r3, #1
 800554a:	2120      	movs	r1, #32
 800554c:	4620      	mov	r0, r4
 800554e:	f7ff ff8a 	bl	8005466 <hts221_write_reg>
  }
  return ret;
}
 8005552:	b003      	add	sp, #12
 8005554:	bd30      	pop	{r4, r5, pc}

08005556 <hts221_hum_rh_point_0_get>:
  * @param  hts221_ctx_t *ctx: read / write interface definitions
  * @param  uint8_t * : buffer that stores data read
  *
  */
int32_t hts221_hum_rh_point_0_get(hts221_ctx_t *ctx, uint8_t *buff)
{
 8005556:	b510      	push	{r4, lr}
 8005558:	460c      	mov	r4, r1
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, buff, 1);
 800555a:	460a      	mov	r2, r1
 800555c:	2301      	movs	r3, #1
 800555e:	2130      	movs	r1, #48	; 0x30
 8005560:	f7ff ff7a 	bl	8005458 <hts221_read_reg>
  *buff = (uint8_t)(((uint16_t)(*buff) >> 1) & 0x7FFFu);
 8005564:	7823      	ldrb	r3, [r4, #0]
 8005566:	085b      	lsrs	r3, r3, #1
 8005568:	7023      	strb	r3, [r4, #0]

  return ret;
}
 800556a:	bd10      	pop	{r4, pc}

0800556c <hts221_hum_rh_point_1_get>:
  * @param  hts221_ctx_t *ctx: read / write interface definitions
  * @param  uint8_t * : buffer that stores data read
  *
  */
int32_t hts221_hum_rh_point_1_get(hts221_ctx_t *ctx, uint8_t *buff)
{
 800556c:	b510      	push	{r4, lr}
 800556e:	460c      	mov	r4, r1
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, buff, 1);
 8005570:	460a      	mov	r2, r1
 8005572:	2301      	movs	r3, #1
 8005574:	2131      	movs	r1, #49	; 0x31
 8005576:	f7ff ff6f 	bl	8005458 <hts221_read_reg>
  *buff = (uint8_t)(((uint16_t)(*buff) >> 1) & 0x7FFFu);
 800557a:	7823      	ldrb	r3, [r4, #0]
 800557c:	085b      	lsrs	r3, r3, #1
 800557e:	7023      	strb	r3, [r4, #0]

  return ret;
}
 8005580:	bd10      	pop	{r4, pc}

08005582 <hts221_temp_deg_point_0_get>:
  * @param  hts221_ctx_t *ctx: read / write interface definitions
  * @param  uint8_t * : buffer that stores data read
  *
  */
int32_t hts221_temp_deg_point_0_get(hts221_ctx_t *ctx, uint8_t *buff)
{
 8005582:	b537      	push	{r0, r1, r2, r4, r5, lr}
  hts221_reg_t reg;
  int32_t ret;
  axis1bit16_t coeff;

  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, coeff.u8bit, 1);
 8005584:	2301      	movs	r3, #1
{
 8005586:	460c      	mov	r4, r1
  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, coeff.u8bit, 1);
 8005588:	aa01      	add	r2, sp, #4
 800558a:	2132      	movs	r1, #50	; 0x32
{
 800558c:	4605      	mov	r5, r0
  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, coeff.u8bit, 1);
 800558e:	f7ff ff63 	bl	8005458 <hts221_read_reg>

  if (ret == 0)
 8005592:	b988      	cbnz	r0, 80055b8 <hts221_temp_deg_point_0_get+0x36>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, &reg.byte, 1);
 8005594:	2301      	movs	r3, #1
 8005596:	466a      	mov	r2, sp
 8005598:	2135      	movs	r1, #53	; 0x35
 800559a:	4628      	mov	r0, r5
 800559c:	f7ff ff5c 	bl	8005458 <hts221_read_reg>
    coeff.u8bit[1] = reg.t1_t0_msb.t0_msb;
 80055a0:	f89d 3000 	ldrb.w	r3, [sp]
 80055a4:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80055a8:	f88d 3005 	strb.w	r3, [sp, #5]
    coeff.i16bit = coeff.i16bit / 8;
 80055ac:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80055b0:	2208      	movs	r2, #8
 80055b2:	fb93 f3f2 	sdiv	r3, r3, r2
    *(buff) = (uint8_t)coeff.i16bit;
 80055b6:	7023      	strb	r3, [r4, #0]
  }

  return ret;
}
 80055b8:	b003      	add	sp, #12
 80055ba:	bd30      	pop	{r4, r5, pc}

080055bc <hts221_temp_deg_point_1_get>:
  * @param  hts221_ctx_t *ctx: read / write interface definitions
  * @param  uint8_t * : buffer that stores data read
  *
  */
int32_t hts221_temp_deg_point_1_get(hts221_ctx_t *ctx, uint8_t *buff)
{
 80055bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  hts221_reg_t reg;
  int32_t ret;
  axis1bit16_t coeff;

  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, coeff.u8bit, 1);
 80055be:	2301      	movs	r3, #1
{
 80055c0:	460c      	mov	r4, r1
  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, coeff.u8bit, 1);
 80055c2:	aa01      	add	r2, sp, #4
 80055c4:	2133      	movs	r1, #51	; 0x33
{
 80055c6:	4605      	mov	r5, r0
  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, coeff.u8bit, 1);
 80055c8:	f7ff ff46 	bl	8005458 <hts221_read_reg>

  if (ret == 0)
 80055cc:	b988      	cbnz	r0, 80055f2 <hts221_temp_deg_point_1_get+0x36>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, &reg.byte, 1);
 80055ce:	2301      	movs	r3, #1
 80055d0:	466a      	mov	r2, sp
 80055d2:	2135      	movs	r1, #53	; 0x35
 80055d4:	4628      	mov	r0, r5
 80055d6:	f7ff ff3f 	bl	8005458 <hts221_read_reg>
    coeff.u8bit[1] = reg.t1_t0_msb.t1_msb;
 80055da:	f89d 3000 	ldrb.w	r3, [sp]
 80055de:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80055e2:	f88d 3005 	strb.w	r3, [sp, #5]
    coeff.i16bit = coeff.i16bit / 8;
 80055e6:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80055ea:	2208      	movs	r2, #8
 80055ec:	fb93 f3f2 	sdiv	r3, r3, r2
    *(buff) = (uint8_t)coeff.i16bit;
 80055f0:	7023      	strb	r3, [r4, #0]
  }

  return ret;
}
 80055f2:	b003      	add	sp, #12
 80055f4:	bd30      	pop	{r4, r5, pc}

080055f6 <hts221_hum_adc_point_0_get>:
  * @param  uint8_t * : buffer that stores data read
  *
  */
int32_t hts221_hum_adc_point_0_get(hts221_ctx_t *ctx, uint8_t *buff)
{
  return hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, buff, 2);
 80055f6:	460a      	mov	r2, r1
 80055f8:	2302      	movs	r3, #2
 80055fa:	2136      	movs	r1, #54	; 0x36
 80055fc:	f7ff bf2c 	b.w	8005458 <hts221_read_reg>

08005600 <hts221_hum_adc_point_1_get>:
  * @param  uint8_t * : buffer that stores data read
  *
  */
int32_t hts221_hum_adc_point_1_get(hts221_ctx_t *ctx, uint8_t *buff)
{
  return hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, buff, 2);
 8005600:	460a      	mov	r2, r1
 8005602:	2302      	movs	r3, #2
 8005604:	213a      	movs	r1, #58	; 0x3a
 8005606:	f7ff bf27 	b.w	8005458 <hts221_read_reg>

0800560a <hts221_temp_adc_point_0_get>:
  * @param  uint8_t * : buffer that stores data read
  *
  */
int32_t hts221_temp_adc_point_0_get(hts221_ctx_t *ctx, uint8_t *buff)
{
  return hts221_read_reg(ctx, HTS221_T0_OUT_L, buff, 2);
 800560a:	460a      	mov	r2, r1
 800560c:	2302      	movs	r3, #2
 800560e:	213c      	movs	r1, #60	; 0x3c
 8005610:	f7ff bf22 	b.w	8005458 <hts221_read_reg>

08005614 <hts221_temp_adc_point_1_get>:
  * @param  uint8_t * : buffer that stores data read
  *
  */
int32_t hts221_temp_adc_point_1_get(hts221_ctx_t *ctx, uint8_t *buff)
{
  return hts221_read_reg(ctx, HTS221_T1_OUT_L, buff, 2);
 8005614:	460a      	mov	r2, r1
 8005616:	2302      	movs	r3, #2
 8005618:	213e      	movs	r1, #62	; 0x3e
 800561a:	f7ff bf1d 	b.w	8005458 <hts221_read_reg>

0800561e <ism330dlc_read_reg>:
  * @param  uint16_t len: number of consecutive register to read
  *
  */
int32_t ism330dlc_read_reg(ism330dlc_ctx_t *ctx, uint8_t reg, uint8_t *data,
                           uint16_t len)
{
 800561e:	b410      	push	{r4}
  return ctx->read_reg(ctx->handle, reg, data, len);
 8005620:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 8005624:	46a4      	mov	ip, r4
}
 8005626:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->read_reg(ctx->handle, reg, data, len);
 800562a:	4760      	bx	ip

0800562c <ism330dlc_write_reg>:
  * @param  uint16_t len: number of consecutive register to write
  *
*/
int32_t ism330dlc_write_reg(ism330dlc_ctx_t *ctx, uint8_t reg, uint8_t *data,
                            uint16_t len)
{
 800562c:	b410      	push	{r4}
  return ctx->write_reg(ctx->handle, reg, data, len);
 800562e:	6804      	ldr	r4, [r0, #0]
 8005630:	6880      	ldr	r0, [r0, #8]
 8005632:	46a4      	mov	ip, r4
}
 8005634:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->write_reg(ctx->handle, reg, data, len);
 8005638:	4760      	bx	ip

0800563a <ism330dlc_xl_full_scale_set>:
  * @param  ism330dlc_fs_xl_t: change the values of fs_xl in reg CTRL1_XL
  *
  */
int32_t ism330dlc_xl_full_scale_set(ism330dlc_ctx_t *ctx,
                                    ism330dlc_fs_xl_t val)
{
 800563a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  ism330dlc_reg_t reg;
  int32_t mm_error;

  mm_error = ism330dlc_read_reg(ctx, ISM330DLC_CTRL1_XL, &reg.byte, 1);
 800563c:	2301      	movs	r3, #1
{
 800563e:	460d      	mov	r5, r1
  mm_error = ism330dlc_read_reg(ctx, ISM330DLC_CTRL1_XL, &reg.byte, 1);
 8005640:	aa01      	add	r2, sp, #4
 8005642:	2110      	movs	r1, #16
{
 8005644:	4604      	mov	r4, r0
  mm_error = ism330dlc_read_reg(ctx, ISM330DLC_CTRL1_XL, &reg.byte, 1);
 8005646:	f7ff ffea 	bl	800561e <ism330dlc_read_reg>
  reg.ctrl1_xl.fs_xl = val;
 800564a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800564e:	f365 0383 	bfi	r3, r5, #2, #2
 8005652:	f88d 3004 	strb.w	r3, [sp, #4]
  mm_error = ism330dlc_write_reg(ctx, ISM330DLC_CTRL1_XL, &reg.byte, 1);
 8005656:	aa01      	add	r2, sp, #4
 8005658:	2301      	movs	r3, #1
 800565a:	2110      	movs	r1, #16
 800565c:	4620      	mov	r0, r4
 800565e:	f7ff ffe5 	bl	800562c <ism330dlc_write_reg>

  return mm_error;
}
 8005662:	b003      	add	sp, #12
 8005664:	bd30      	pop	{r4, r5, pc}

08005666 <ism330dlc_xl_full_scale_get>:
  * @param  ism330dlc_fs_xl_t: Get the values of fs_xl in reg CTRL1_XL
  *
  */
int32_t ism330dlc_xl_full_scale_get(ism330dlc_ctx_t *ctx,
                                    ism330dlc_fs_xl_t *val)
{
 8005666:	b513      	push	{r0, r1, r4, lr}
  ism330dlc_reg_t reg;
  int32_t mm_error;

  mm_error = ism330dlc_read_reg(ctx, ISM330DLC_CTRL1_XL, &reg.byte, 1);
 8005668:	2301      	movs	r3, #1
{
 800566a:	460c      	mov	r4, r1
  mm_error = ism330dlc_read_reg(ctx, ISM330DLC_CTRL1_XL, &reg.byte, 1);
 800566c:	aa01      	add	r2, sp, #4
 800566e:	2110      	movs	r1, #16
 8005670:	f7ff ffd5 	bl	800561e <ism330dlc_read_reg>
  *val = (ism330dlc_fs_xl_t) reg.ctrl1_xl.fs_xl;
 8005674:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005678:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800567c:	7023      	strb	r3, [r4, #0]

  return mm_error;
}
 800567e:	b002      	add	sp, #8
 8005680:	bd10      	pop	{r4, pc}

08005682 <ism330dlc_xl_data_rate_set>:
  * @param  ism330dlc_odr_xl_t: change the values of odr_xl in reg CTRL1_XL
  *
  */
int32_t ism330dlc_xl_data_rate_set(ism330dlc_ctx_t *ctx,
                                   ism330dlc_odr_xl_t val)
{
 8005682:	b537      	push	{r0, r1, r2, r4, r5, lr}
  ism330dlc_reg_t reg;
  int32_t mm_error;

  mm_error = ism330dlc_read_reg(ctx, ISM330DLC_CTRL1_XL, &reg.byte, 1);
 8005684:	2301      	movs	r3, #1
{
 8005686:	460d      	mov	r5, r1
  mm_error = ism330dlc_read_reg(ctx, ISM330DLC_CTRL1_XL, &reg.byte, 1);
 8005688:	aa01      	add	r2, sp, #4
 800568a:	2110      	movs	r1, #16
{
 800568c:	4604      	mov	r4, r0
  mm_error = ism330dlc_read_reg(ctx, ISM330DLC_CTRL1_XL, &reg.byte, 1);
 800568e:	f7ff ffc6 	bl	800561e <ism330dlc_read_reg>
  reg.ctrl1_xl.odr_xl = val;
 8005692:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005696:	f365 1307 	bfi	r3, r5, #4, #4
 800569a:	f88d 3004 	strb.w	r3, [sp, #4]
  mm_error = ism330dlc_write_reg(ctx, ISM330DLC_CTRL1_XL, &reg.byte, 1);
 800569e:	aa01      	add	r2, sp, #4
 80056a0:	2301      	movs	r3, #1
 80056a2:	2110      	movs	r1, #16
 80056a4:	4620      	mov	r0, r4
 80056a6:	f7ff ffc1 	bl	800562c <ism330dlc_write_reg>

  return mm_error;
}
 80056aa:	b003      	add	sp, #12
 80056ac:	bd30      	pop	{r4, r5, pc}

080056ae <ism330dlc_xl_data_rate_get>:
  * @param  ism330dlc_odr_xl_t: Get the values of odr_xl in reg CTRL1_XL
  *
  */
int32_t ism330dlc_xl_data_rate_get(ism330dlc_ctx_t *ctx,
                                   ism330dlc_odr_xl_t *val)
{
 80056ae:	b513      	push	{r0, r1, r4, lr}
  ism330dlc_reg_t reg;
  int32_t mm_error;

  mm_error = ism330dlc_read_reg(ctx, ISM330DLC_CTRL1_XL, &reg.byte, 1);
 80056b0:	2301      	movs	r3, #1
{
 80056b2:	460c      	mov	r4, r1
  mm_error = ism330dlc_read_reg(ctx, ISM330DLC_CTRL1_XL, &reg.byte, 1);
 80056b4:	aa01      	add	r2, sp, #4
 80056b6:	2110      	movs	r1, #16
 80056b8:	f7ff ffb1 	bl	800561e <ism330dlc_read_reg>
  *val = (ism330dlc_odr_xl_t) reg.ctrl1_xl.odr_xl;
 80056bc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80056c0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80056c4:	7023      	strb	r3, [r4, #0]

  return mm_error;
}
 80056c6:	b002      	add	sp, #8
 80056c8:	bd10      	pop	{r4, pc}

080056ca <ism330dlc_gy_full_scale_set>:
  * @param  ism330dlc_ctx_t *ctx: read / write interface definitions
  * @param  ism330dlc_fs_g_t: change the values of fs_g in reg CTRL2_G
  *
  */
int32_t ism330dlc_gy_full_scale_set(ism330dlc_ctx_t *ctx, ism330dlc_fs_g_t val)
{
 80056ca:	b537      	push	{r0, r1, r2, r4, r5, lr}
  ism330dlc_reg_t reg;
  int32_t mm_error;

  mm_error = ism330dlc_read_reg(ctx, ISM330DLC_CTRL2_G, &reg.byte, 1);
 80056cc:	2301      	movs	r3, #1
{
 80056ce:	460d      	mov	r5, r1
  mm_error = ism330dlc_read_reg(ctx, ISM330DLC_CTRL2_G, &reg.byte, 1);
 80056d0:	aa01      	add	r2, sp, #4
 80056d2:	2111      	movs	r1, #17
{
 80056d4:	4604      	mov	r4, r0
  mm_error = ism330dlc_read_reg(ctx, ISM330DLC_CTRL2_G, &reg.byte, 1);
 80056d6:	f7ff ffa2 	bl	800561e <ism330dlc_read_reg>
  reg.ctrl2_g.fs_g = val;
 80056da:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80056de:	f365 0343 	bfi	r3, r5, #1, #3
 80056e2:	f88d 3004 	strb.w	r3, [sp, #4]
  mm_error = ism330dlc_write_reg(ctx, ISM330DLC_CTRL2_G, &reg.byte, 1);
 80056e6:	aa01      	add	r2, sp, #4
 80056e8:	2301      	movs	r3, #1
 80056ea:	2111      	movs	r1, #17
 80056ec:	4620      	mov	r0, r4
 80056ee:	f7ff ff9d 	bl	800562c <ism330dlc_write_reg>

  return mm_error;
}
 80056f2:	b003      	add	sp, #12
 80056f4:	bd30      	pop	{r4, r5, pc}

080056f6 <ism330dlc_gy_full_scale_get>:
  * @param  ism330dlc_fs_g_t: Get the values of fs_g in reg CTRL2_G
  *
  */
int32_t ism330dlc_gy_full_scale_get(ism330dlc_ctx_t *ctx,
                                    ism330dlc_fs_g_t *val)
{
 80056f6:	b513      	push	{r0, r1, r4, lr}
  ism330dlc_reg_t reg;
  int32_t mm_error;

  mm_error = ism330dlc_read_reg(ctx, ISM330DLC_CTRL2_G, &reg.byte, 1);
 80056f8:	2301      	movs	r3, #1
{
 80056fa:	460c      	mov	r4, r1
  mm_error = ism330dlc_read_reg(ctx, ISM330DLC_CTRL2_G, &reg.byte, 1);
 80056fc:	aa01      	add	r2, sp, #4
 80056fe:	2111      	movs	r1, #17
 8005700:	f7ff ff8d 	bl	800561e <ism330dlc_read_reg>
  *val = (ism330dlc_fs_g_t) reg.ctrl2_g.fs_g;
 8005704:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005708:	f3c3 0342 	ubfx	r3, r3, #1, #3
 800570c:	7023      	strb	r3, [r4, #0]

  return mm_error;
}
 800570e:	b002      	add	sp, #8
 8005710:	bd10      	pop	{r4, pc}

08005712 <ism330dlc_gy_data_rate_set>:
  * @param  ism330dlc_ctx_t *ctx: read / write interface definitions
  * @param  ism330dlc_odr_g_t: change the values of odr_g in reg CTRL2_G
  *
  */
int32_t ism330dlc_gy_data_rate_set(ism330dlc_ctx_t *ctx, ism330dlc_odr_g_t val)
{
 8005712:	b537      	push	{r0, r1, r2, r4, r5, lr}
  ism330dlc_reg_t reg;
  int32_t mm_error;

  mm_error = ism330dlc_read_reg(ctx, ISM330DLC_CTRL2_G, &reg.byte, 1);
 8005714:	2301      	movs	r3, #1
{
 8005716:	460d      	mov	r5, r1
  mm_error = ism330dlc_read_reg(ctx, ISM330DLC_CTRL2_G, &reg.byte, 1);
 8005718:	aa01      	add	r2, sp, #4
 800571a:	2111      	movs	r1, #17
{
 800571c:	4604      	mov	r4, r0
  mm_error = ism330dlc_read_reg(ctx, ISM330DLC_CTRL2_G, &reg.byte, 1);
 800571e:	f7ff ff7e 	bl	800561e <ism330dlc_read_reg>
  reg.ctrl2_g.odr_g = val;
 8005722:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005726:	f365 1307 	bfi	r3, r5, #4, #4
 800572a:	f88d 3004 	strb.w	r3, [sp, #4]
  mm_error = ism330dlc_write_reg(ctx, ISM330DLC_CTRL2_G, &reg.byte, 1);
 800572e:	aa01      	add	r2, sp, #4
 8005730:	2301      	movs	r3, #1
 8005732:	2111      	movs	r1, #17
 8005734:	4620      	mov	r0, r4
 8005736:	f7ff ff79 	bl	800562c <ism330dlc_write_reg>

  return mm_error;
}
 800573a:	b003      	add	sp, #12
 800573c:	bd30      	pop	{r4, r5, pc}

0800573e <ism330dlc_gy_data_rate_get>:
  * @param  ism330dlc_odr_g_t: Get the values of odr_g in reg CTRL2_G
  *
  */
int32_t ism330dlc_gy_data_rate_get(ism330dlc_ctx_t *ctx,
                                   ism330dlc_odr_g_t *val)
{
 800573e:	b513      	push	{r0, r1, r4, lr}
  ism330dlc_reg_t reg;
  int32_t mm_error;

  mm_error = ism330dlc_read_reg(ctx, ISM330DLC_CTRL2_G, &reg.byte, 1);
 8005740:	2301      	movs	r3, #1
{
 8005742:	460c      	mov	r4, r1
  mm_error = ism330dlc_read_reg(ctx, ISM330DLC_CTRL2_G, &reg.byte, 1);
 8005744:	aa01      	add	r2, sp, #4
 8005746:	2111      	movs	r1, #17
 8005748:	f7ff ff69 	bl	800561e <ism330dlc_read_reg>
  *val = (ism330dlc_odr_g_t) reg.ctrl2_g.odr_g;
 800574c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005750:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005754:	7023      	strb	r3, [r4, #0]

  return mm_error;
}
 8005756:	b002      	add	sp, #8
 8005758:	bd10      	pop	{r4, pc}

0800575a <ism330dlc_block_data_update_set>:
  * @param  ism330dlc_ctx_t *ctx: read / write interface definitions
  * @param  uint8_t val: change the values of bdu in reg CTRL3_C
  *
  */
int32_t ism330dlc_block_data_update_set(ism330dlc_ctx_t *ctx, uint8_t val)
{
 800575a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  ism330dlc_reg_t reg;
  int32_t mm_error;

  mm_error = ism330dlc_read_reg(ctx, ISM330DLC_CTRL3_C, &reg.byte, 1);
 800575c:	2301      	movs	r3, #1
{
 800575e:	460d      	mov	r5, r1
  mm_error = ism330dlc_read_reg(ctx, ISM330DLC_CTRL3_C, &reg.byte, 1);
 8005760:	aa01      	add	r2, sp, #4
 8005762:	2112      	movs	r1, #18
{
 8005764:	4604      	mov	r4, r0
  mm_error = ism330dlc_read_reg(ctx, ISM330DLC_CTRL3_C, &reg.byte, 1);
 8005766:	f7ff ff5a 	bl	800561e <ism330dlc_read_reg>
  reg.ctrl3_c.bdu = val;
 800576a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800576e:	f365 1386 	bfi	r3, r5, #6, #1
 8005772:	f88d 3004 	strb.w	r3, [sp, #4]
  mm_error = ism330dlc_write_reg(ctx, ISM330DLC_CTRL3_C, &reg.byte, 1);
 8005776:	aa01      	add	r2, sp, #4
 8005778:	2301      	movs	r3, #1
 800577a:	2112      	movs	r1, #18
 800577c:	4620      	mov	r0, r4
 800577e:	f7ff ff55 	bl	800562c <ism330dlc_write_reg>

  return mm_error;
}
 8005782:	b003      	add	sp, #12
 8005784:	bd30      	pop	{r4, r5, pc}

08005786 <ism330dlc_angular_rate_raw_get>:
  * @param  uint8_t * : buffer that stores data read
  *
  */
int32_t ism330dlc_angular_rate_raw_get(ism330dlc_ctx_t *ctx, uint8_t *buff)
{
  return ism330dlc_read_reg(ctx, ISM330DLC_OUTX_L_G, buff, 6);
 8005786:	460a      	mov	r2, r1
 8005788:	2306      	movs	r3, #6
 800578a:	2122      	movs	r1, #34	; 0x22
 800578c:	f7ff bf47 	b.w	800561e <ism330dlc_read_reg>

08005790 <ism330dlc_acceleration_raw_get>:
  * @param  uint8_t * : buffer that stores data read
  *
  */
int32_t ism330dlc_acceleration_raw_get(ism330dlc_ctx_t *ctx, uint8_t *buff)
{
  return ism330dlc_read_reg(ctx, ISM330DLC_OUTX_L_XL, buff, 6);
 8005790:	460a      	mov	r2, r1
 8005792:	2306      	movs	r3, #6
 8005794:	2128      	movs	r1, #40	; 0x28
 8005796:	f7ff bf42 	b.w	800561e <ism330dlc_read_reg>

0800579a <ism330dlc_data_ready_mode_set>:
  *                                reg DRDY_PULSE_CFG
  *
  */
int32_t ism330dlc_data_ready_mode_set(ism330dlc_ctx_t *ctx,
                                      ism330dlc_drdy_pulsed_t val)
{
 800579a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  ism330dlc_reg_t reg;
  int32_t mm_error;

  mm_error = ism330dlc_read_reg(ctx, ISM330DLC_DRDY_PULSE_CFG, &reg.byte, 1);
 800579c:	2301      	movs	r3, #1
{
 800579e:	460d      	mov	r5, r1
  mm_error = ism330dlc_read_reg(ctx, ISM330DLC_DRDY_PULSE_CFG, &reg.byte, 1);
 80057a0:	aa01      	add	r2, sp, #4
 80057a2:	210b      	movs	r1, #11
{
 80057a4:	4604      	mov	r4, r0
  mm_error = ism330dlc_read_reg(ctx, ISM330DLC_DRDY_PULSE_CFG, &reg.byte, 1);
 80057a6:	f7ff ff3a 	bl	800561e <ism330dlc_read_reg>
  reg.drdy_pulse_cfg.drdy_pulsed = val;
 80057aa:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80057ae:	f365 13c7 	bfi	r3, r5, #7, #1
 80057b2:	f88d 3004 	strb.w	r3, [sp, #4]
  mm_error = ism330dlc_write_reg(ctx, ISM330DLC_DRDY_PULSE_CFG, &reg.byte, 1);
 80057b6:	aa01      	add	r2, sp, #4
 80057b8:	2301      	movs	r3, #1
 80057ba:	210b      	movs	r1, #11
 80057bc:	4620      	mov	r0, r4
 80057be:	f7ff ff35 	bl	800562c <ism330dlc_write_reg>

  return mm_error;
}
 80057c2:	b003      	add	sp, #12
 80057c4:	bd30      	pop	{r4, r5, pc}

080057c6 <ism330dlc_device_id_get>:
  * @param  uint8_t * : buffer that stores data read
  *
  */
int32_t ism330dlc_device_id_get(ism330dlc_ctx_t *ctx, uint8_t *buff)
{
  return ism330dlc_read_reg(ctx, ISM330DLC_WHO_AM_I, buff, 1);
 80057c6:	460a      	mov	r2, r1
 80057c8:	2301      	movs	r3, #1
 80057ca:	210f      	movs	r1, #15
 80057cc:	f7ff bf27 	b.w	800561e <ism330dlc_read_reg>

080057d0 <ism330dlc_reset_set>:
  * @param  ism330dlc_ctx_t *ctx: read / write interface definitions
  * @param  uint8_t val: change the values of sw_reset in reg CTRL3_C
  *
  */
int32_t ism330dlc_reset_set(ism330dlc_ctx_t *ctx, uint8_t val)
{
 80057d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  ism330dlc_reg_t reg;
  int32_t mm_error;

  mm_error = ism330dlc_read_reg(ctx, ISM330DLC_CTRL3_C, &reg.byte, 1);
 80057d2:	2301      	movs	r3, #1
{
 80057d4:	460d      	mov	r5, r1
  mm_error = ism330dlc_read_reg(ctx, ISM330DLC_CTRL3_C, &reg.byte, 1);
 80057d6:	aa01      	add	r2, sp, #4
 80057d8:	2112      	movs	r1, #18
{
 80057da:	4604      	mov	r4, r0
  mm_error = ism330dlc_read_reg(ctx, ISM330DLC_CTRL3_C, &reg.byte, 1);
 80057dc:	f7ff ff1f 	bl	800561e <ism330dlc_read_reg>
  reg.ctrl3_c.sw_reset = val;
 80057e0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80057e4:	f365 0300 	bfi	r3, r5, #0, #1
 80057e8:	f88d 3004 	strb.w	r3, [sp, #4]
  mm_error = ism330dlc_write_reg(ctx, ISM330DLC_CTRL3_C, &reg.byte, 1);
 80057ec:	aa01      	add	r2, sp, #4
 80057ee:	2301      	movs	r3, #1
 80057f0:	2112      	movs	r1, #18
 80057f2:	4620      	mov	r0, r4
 80057f4:	f7ff ff1a 	bl	800562c <ism330dlc_write_reg>

  return mm_error;
}
 80057f8:	b003      	add	sp, #12
 80057fa:	bd30      	pop	{r4, r5, pc}

080057fc <ism330dlc_auto_increment_set>:
  * @param  ism330dlc_ctx_t *ctx: read / write interface definitions
  * @param  uint8_t val: change the values of if_inc in reg CTRL3_C
  *
  */
int32_t ism330dlc_auto_increment_set(ism330dlc_ctx_t *ctx, uint8_t val)
{
 80057fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  ism330dlc_reg_t reg;
  int32_t mm_error;

  mm_error = ism330dlc_read_reg(ctx, ISM330DLC_CTRL3_C, &reg.byte, 1);
 80057fe:	2301      	movs	r3, #1
{
 8005800:	460d      	mov	r5, r1
  mm_error = ism330dlc_read_reg(ctx, ISM330DLC_CTRL3_C, &reg.byte, 1);
 8005802:	aa01      	add	r2, sp, #4
 8005804:	2112      	movs	r1, #18
{
 8005806:	4604      	mov	r4, r0
  mm_error = ism330dlc_read_reg(ctx, ISM330DLC_CTRL3_C, &reg.byte, 1);
 8005808:	f7ff ff09 	bl	800561e <ism330dlc_read_reg>
  reg.ctrl3_c.if_inc = val;
 800580c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005810:	f365 0382 	bfi	r3, r5, #2, #1
 8005814:	f88d 3004 	strb.w	r3, [sp, #4]
  mm_error = ism330dlc_write_reg(ctx, ISM330DLC_CTRL3_C, &reg.byte, 1);
 8005818:	aa01      	add	r2, sp, #4
 800581a:	2301      	movs	r3, #1
 800581c:	2112      	movs	r1, #18
 800581e:	4620      	mov	r0, r4
 8005820:	f7ff ff04 	bl	800562c <ism330dlc_write_reg>

  return mm_error;
}
 8005824:	b003      	add	sp, #12
 8005826:	bd30      	pop	{r4, r5, pc}

08005828 <ism330dlc_xl_hp_bandwidth_set>:
  * @param  ism330dlc_hpcf_xl_t: change the values of hpcf_xl in reg CTRL8_XL
  *
  */
int32_t ism330dlc_xl_hp_bandwidth_set(ism330dlc_ctx_t *ctx,
                                      ism330dlc_hpcf_xl_t val)
{
 8005828:	b537      	push	{r0, r1, r2, r4, r5, lr}
  ism330dlc_reg_t reg;
  int32_t mm_error;

  mm_error = ism330dlc_read_reg(ctx, ISM330DLC_CTRL8_XL, &reg.byte, 1);
 800582a:	2301      	movs	r3, #1
{
 800582c:	460d      	mov	r5, r1
  mm_error = ism330dlc_read_reg(ctx, ISM330DLC_CTRL8_XL, &reg.byte, 1);
 800582e:	aa01      	add	r2, sp, #4
 8005830:	2117      	movs	r1, #23
{
 8005832:	4604      	mov	r4, r0
  mm_error = ism330dlc_read_reg(ctx, ISM330DLC_CTRL8_XL, &reg.byte, 1);
 8005834:	f7ff fef3 	bl	800561e <ism330dlc_read_reg>
  reg.ctrl8_xl.input_composite = 0;
 8005838:	f89d 3004 	ldrb.w	r3, [sp, #4]
  reg.ctrl8_xl.hpcf_xl = val & 0x03;
 800583c:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
 8005840:	f365 1346 	bfi	r3, r5, #5, #2
  reg.ctrl8_xl.hp_slope_xl_en = 1;
 8005844:	b2db      	uxtb	r3, r3
 8005846:	f043 0304 	orr.w	r3, r3, #4
 800584a:	f88d 3004 	strb.w	r3, [sp, #4]
  mm_error = ism330dlc_write_reg(ctx, ISM330DLC_CTRL8_XL, &reg.byte, 1);
 800584e:	aa01      	add	r2, sp, #4
 8005850:	2301      	movs	r3, #1
 8005852:	2117      	movs	r1, #23
 8005854:	4620      	mov	r0, r4
 8005856:	f7ff fee9 	bl	800562c <ism330dlc_write_reg>

  return mm_error;
}
 800585a:	b003      	add	sp, #12
 800585c:	bd30      	pop	{r4, r5, pc}

0800585e <ism330dlc_fifo_watermark_set>:
  * @param  ism330dlc_ctx_t *ctx: read / write interface definitions
  * @param  uint8_t val: change the values of fth in reg FIFO_CTRL1
  *
  */
int32_t ism330dlc_fifo_watermark_set(ism330dlc_ctx_t *ctx, uint16_t val)
{
 800585e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  ism330dlc_reg_t reg[2];
  int32_t mm_error;

  mm_error = ism330dlc_read_reg(ctx, ISM330DLC_FIFO_CTRL2, &reg[1].byte, 1);
 8005860:	2301      	movs	r3, #1
{
 8005862:	460c      	mov	r4, r1
  mm_error = ism330dlc_read_reg(ctx, ISM330DLC_FIFO_CTRL2, &reg[1].byte, 1);
 8005864:	f10d 0205 	add.w	r2, sp, #5
 8005868:	2107      	movs	r1, #7
{
 800586a:	4605      	mov	r5, r0
  mm_error = ism330dlc_read_reg(ctx, ISM330DLC_FIFO_CTRL2, &reg[1].byte, 1);
 800586c:	f7ff fed7 	bl	800561e <ism330dlc_read_reg>
  reg[0].fifo_ctrl1.fth = 0x00FF & val;
  reg[1].fifo_ctrl2.fth = (0x0700 & val) >> 8;
 8005870:	f89d 3005 	ldrb.w	r3, [sp, #5]
  reg[0].fifo_ctrl1.fth = 0x00FF & val;
 8005874:	f88d 4004 	strb.w	r4, [sp, #4]
  reg[1].fifo_ctrl2.fth = (0x0700 & val) >> 8;
 8005878:	0a24      	lsrs	r4, r4, #8
 800587a:	f364 0302 	bfi	r3, r4, #0, #3
 800587e:	f88d 3005 	strb.w	r3, [sp, #5]
  mm_error = ism330dlc_write_reg(ctx, ISM330DLC_FIFO_CTRL1, &reg[0].byte, 2);
 8005882:	aa01      	add	r2, sp, #4
 8005884:	2302      	movs	r3, #2
 8005886:	2106      	movs	r1, #6
 8005888:	4628      	mov	r0, r5
 800588a:	f7ff fecf 	bl	800562c <ism330dlc_write_reg>

  return mm_error;
}
 800588e:	b003      	add	sp, #12
 8005890:	bd30      	pop	{r4, r5, pc}

08005892 <ism330dlc_fifo_xl_batch_set>:
  *                                reg FIFO_CTRL3
  *
  */
int32_t ism330dlc_fifo_xl_batch_set(ism330dlc_ctx_t *ctx,
                                    ism330dlc_dec_fifo_xl_t val)
{
 8005892:	b537      	push	{r0, r1, r2, r4, r5, lr}
  ism330dlc_reg_t reg;
  int32_t mm_error;

  mm_error = ism330dlc_read_reg(ctx, ISM330DLC_FIFO_CTRL3, &reg.byte, 1);
 8005894:	2301      	movs	r3, #1
{
 8005896:	460d      	mov	r5, r1
  mm_error = ism330dlc_read_reg(ctx, ISM330DLC_FIFO_CTRL3, &reg.byte, 1);
 8005898:	aa01      	add	r2, sp, #4
 800589a:	2108      	movs	r1, #8
{
 800589c:	4604      	mov	r4, r0
  mm_error = ism330dlc_read_reg(ctx, ISM330DLC_FIFO_CTRL3, &reg.byte, 1);
 800589e:	f7ff febe 	bl	800561e <ism330dlc_read_reg>
  reg.fifo_ctrl3.dec_fifo_xl = val;
 80058a2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80058a6:	f365 0302 	bfi	r3, r5, #0, #3
 80058aa:	f88d 3004 	strb.w	r3, [sp, #4]
  mm_error = ism330dlc_write_reg(ctx, ISM330DLC_FIFO_CTRL3, &reg.byte, 1);
 80058ae:	aa01      	add	r2, sp, #4
 80058b0:	2301      	movs	r3, #1
 80058b2:	2108      	movs	r1, #8
 80058b4:	4620      	mov	r0, r4
 80058b6:	f7ff feb9 	bl	800562c <ism330dlc_write_reg>

  return mm_error;
}
 80058ba:	b003      	add	sp, #12
 80058bc:	bd30      	pop	{r4, r5, pc}

080058be <ism330dlc_fifo_gy_batch_set>:
  *                                  in reg FIFO_CTRL3
  *
  */
int32_t ism330dlc_fifo_gy_batch_set(ism330dlc_ctx_t *ctx,
                                    ism330dlc_dec_fifo_gyro_t val)
{
 80058be:	b537      	push	{r0, r1, r2, r4, r5, lr}
  ism330dlc_reg_t reg;
  int32_t mm_error;

  mm_error = ism330dlc_read_reg(ctx, ISM330DLC_FIFO_CTRL3, &reg.byte, 1);
 80058c0:	2301      	movs	r3, #1
{
 80058c2:	460d      	mov	r5, r1
  mm_error = ism330dlc_read_reg(ctx, ISM330DLC_FIFO_CTRL3, &reg.byte, 1);
 80058c4:	aa01      	add	r2, sp, #4
 80058c6:	2108      	movs	r1, #8
{
 80058c8:	4604      	mov	r4, r0
  mm_error = ism330dlc_read_reg(ctx, ISM330DLC_FIFO_CTRL3, &reg.byte, 1);
 80058ca:	f7ff fea8 	bl	800561e <ism330dlc_read_reg>
  reg.fifo_ctrl3.dec_fifo_gyro = val;
 80058ce:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80058d2:	f365 03c5 	bfi	r3, r5, #3, #3
 80058d6:	f88d 3004 	strb.w	r3, [sp, #4]
  mm_error = ism330dlc_write_reg(ctx, ISM330DLC_FIFO_CTRL3, &reg.byte, 1);
 80058da:	aa01      	add	r2, sp, #4
 80058dc:	2301      	movs	r3, #1
 80058de:	2108      	movs	r1, #8
 80058e0:	4620      	mov	r0, r4
 80058e2:	f7ff fea3 	bl	800562c <ism330dlc_write_reg>

  return mm_error;
}
 80058e6:	b003      	add	sp, #12
 80058e8:	bd30      	pop	{r4, r5, pc}

080058ea <ism330dlc_fifo_stop_on_wtm_set>:
  * @param  ism330dlc_ctx_t *ctx: read / write interface definitions
  * @param  uint8_t val: change the values of stop_on_fth in reg FIFO_CTRL4
  *
  */
int32_t ism330dlc_fifo_stop_on_wtm_set(ism330dlc_ctx_t *ctx, uint8_t val)
{
 80058ea:	b537      	push	{r0, r1, r2, r4, r5, lr}
  ism330dlc_reg_t reg;
  int32_t mm_error;

  mm_error = ism330dlc_read_reg(ctx, ISM330DLC_FIFO_CTRL4, &reg.byte, 1);
 80058ec:	2301      	movs	r3, #1
{
 80058ee:	460d      	mov	r5, r1
  mm_error = ism330dlc_read_reg(ctx, ISM330DLC_FIFO_CTRL4, &reg.byte, 1);
 80058f0:	aa01      	add	r2, sp, #4
 80058f2:	2109      	movs	r1, #9
{
 80058f4:	4604      	mov	r4, r0
  mm_error = ism330dlc_read_reg(ctx, ISM330DLC_FIFO_CTRL4, &reg.byte, 1);
 80058f6:	f7ff fe92 	bl	800561e <ism330dlc_read_reg>
  reg.fifo_ctrl4.stop_on_fth = val;
 80058fa:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80058fe:	f365 13c7 	bfi	r3, r5, #7, #1
 8005902:	f88d 3004 	strb.w	r3, [sp, #4]
  mm_error = ism330dlc_write_reg(ctx, ISM330DLC_FIFO_CTRL4, &reg.byte, 1);
 8005906:	aa01      	add	r2, sp, #4
 8005908:	2301      	movs	r3, #1
 800590a:	2109      	movs	r1, #9
 800590c:	4620      	mov	r0, r4
 800590e:	f7ff fe8d 	bl	800562c <ism330dlc_write_reg>

  return mm_error;
}
 8005912:	b003      	add	sp, #12
 8005914:	bd30      	pop	{r4, r5, pc}

08005916 <ism330dlc_fifo_mode_set>:
  *                              reg FIFO_CTRL5
  *
  */
int32_t ism330dlc_fifo_mode_set(ism330dlc_ctx_t *ctx,
                                ism330dlc_fifo_mode_t val)
{
 8005916:	b537      	push	{r0, r1, r2, r4, r5, lr}
  ism330dlc_reg_t reg;
  int32_t mm_error;

  mm_error = ism330dlc_read_reg(ctx, ISM330DLC_FIFO_CTRL5, &reg.byte, 1);
 8005918:	2301      	movs	r3, #1
{
 800591a:	460d      	mov	r5, r1
  mm_error = ism330dlc_read_reg(ctx, ISM330DLC_FIFO_CTRL5, &reg.byte, 1);
 800591c:	aa01      	add	r2, sp, #4
 800591e:	210a      	movs	r1, #10
{
 8005920:	4604      	mov	r4, r0
  mm_error = ism330dlc_read_reg(ctx, ISM330DLC_FIFO_CTRL5, &reg.byte, 1);
 8005922:	f7ff fe7c 	bl	800561e <ism330dlc_read_reg>
  reg.fifo_ctrl5.fifo_mode = val;
 8005926:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800592a:	f365 0302 	bfi	r3, r5, #0, #3
 800592e:	f88d 3004 	strb.w	r3, [sp, #4]
  mm_error = ism330dlc_write_reg(ctx, ISM330DLC_FIFO_CTRL5, &reg.byte, 1);
 8005932:	aa01      	add	r2, sp, #4
 8005934:	2301      	movs	r3, #1
 8005936:	210a      	movs	r1, #10
 8005938:	4620      	mov	r0, r4
 800593a:	f7ff fe77 	bl	800562c <ism330dlc_write_reg>

  return mm_error;
}
 800593e:	b003      	add	sp, #12
 8005940:	bd30      	pop	{r4, r5, pc}

08005942 <ism330dlc_fifo_data_rate_set>:
  *                               reg FIFO_CTRL5
  *
  */
int32_t ism330dlc_fifo_data_rate_set(ism330dlc_ctx_t *ctx,
                                     ism330dlc_odr_fifo_t val)
{
 8005942:	b537      	push	{r0, r1, r2, r4, r5, lr}
  ism330dlc_reg_t reg;
  int32_t mm_error;

  mm_error = ism330dlc_read_reg(ctx, ISM330DLC_FIFO_CTRL5, &reg.byte, 1);
 8005944:	2301      	movs	r3, #1
{
 8005946:	460d      	mov	r5, r1
  mm_error = ism330dlc_read_reg(ctx, ISM330DLC_FIFO_CTRL5, &reg.byte, 1);
 8005948:	aa01      	add	r2, sp, #4
 800594a:	210a      	movs	r1, #10
{
 800594c:	4604      	mov	r4, r0
  mm_error = ism330dlc_read_reg(ctx, ISM330DLC_FIFO_CTRL5, &reg.byte, 1);
 800594e:	f7ff fe66 	bl	800561e <ism330dlc_read_reg>
  reg.fifo_ctrl5.odr_fifo = val;
 8005952:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005956:	f365 03c6 	bfi	r3, r5, #3, #4
 800595a:	f88d 3004 	strb.w	r3, [sp, #4]
  mm_error = ism330dlc_write_reg(ctx, ISM330DLC_FIFO_CTRL5, &reg.byte, 1);
 800595e:	aa01      	add	r2, sp, #4
 8005960:	2301      	movs	r3, #1
 8005962:	210a      	movs	r1, #10
 8005964:	4620      	mov	r0, r4
 8005966:	f7ff fe61 	bl	800562c <ism330dlc_write_reg>

  return mm_error;
}
 800596a:	b003      	add	sp, #12
 800596c:	bd30      	pop	{r4, r5, pc}
	...

08005970 <LPS22HB_GetCapabilities>:
  (void)(pObj);

  Capabilities->Humidity    = 0;
  Capabilities->Pressure    = 1;
  Capabilities->Temperature = 1;
  Capabilities->LowPower    = 0;
 8005970:	f240 1301 	movw	r3, #257	; 0x101
 8005974:	2000      	movs	r0, #0
 8005976:	e9c1 3000 	strd	r3, r0, [r1]
  Capabilities->HumMaxOdr   = 0.0f;
 800597a:	4b02      	ldr	r3, [pc, #8]	; (8005984 <LPS22HB_GetCapabilities+0x14>)
  Capabilities->TempMaxOdr  = 75.0f;
 800597c:	e9c1 3302 	strd	r3, r3, [r1, #8]
  Capabilities->PressMaxOdr = 75.0f;
  return LPS22HB_OK;
}
 8005980:	4770      	bx	lr
 8005982:	bf00      	nop
 8005984:	42960000 	.word	0x42960000

08005988 <LPS22HB_Init>:
{
 8005988:	b538      	push	{r3, r4, r5, lr}
  if (pObj->is_initialized == 0U)
 800598a:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
{
 800598e:	4605      	mov	r5, r0
  if (pObj->is_initialized == 0U)
 8005990:	bb2b      	cbnz	r3, 80059de <LPS22HB_Init+0x56>
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HB_Initialize(LPS22HB_Object_t *pObj)
{
  /* Set Power mode */
  if (lps22hb_low_power_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 8005992:	f100 041c 	add.w	r4, r0, #28
 8005996:	2101      	movs	r1, #1
 8005998:	4620      	mov	r0, r4
 800599a:	f000 fab9 	bl	8005f10 <lps22hb_low_power_set>
 800599e:	4601      	mov	r1, r0
 80059a0:	b110      	cbz	r0, 80059a8 <LPS22HB_Init+0x20>
      return LPS22HB_ERROR;
 80059a2:	f04f 30ff 	mov.w	r0, #4294967295
}
 80059a6:	bd38      	pop	{r3, r4, r5, pc}
  {
    return LPS22HB_ERROR;
  }

  /* Power down the device */
  if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 80059a8:	4620      	mov	r0, r4
 80059aa:	f000 fa69 	bl	8005e80 <lps22hb_data_rate_set>
 80059ae:	2800      	cmp	r0, #0
 80059b0:	d1f7      	bne.n	80059a2 <LPS22HB_Init+0x1a>
  {
    return LPS22HB_ERROR;
  }

  /* Disable low-pass filter on LPS22HB pressure data */
  if (lps22hb_low_pass_filter_mode_set(&(pObj->Ctx), LPS22HB_LPF_ODR_DIV_9) != LPS22HB_OK)
 80059b2:	2102      	movs	r1, #2
 80059b4:	4620      	mov	r0, r4
 80059b6:	f000 fa4c 	bl	8005e52 <lps22hb_low_pass_filter_mode_set>
 80059ba:	2800      	cmp	r0, #0
 80059bc:	d1f1      	bne.n	80059a2 <LPS22HB_Init+0x1a>
  {
    return LPS22HB_ERROR;
  }

  if (lps22hb_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 80059be:	2101      	movs	r1, #1
 80059c0:	4620      	mov	r0, r4
 80059c2:	f000 fa2f 	bl	8005e24 <lps22hb_block_data_update_set>
 80059c6:	2800      	cmp	r0, #0
 80059c8:	d1eb      	bne.n	80059a2 <LPS22HB_Init+0x1a>
  {
    return LPS22HB_ERROR;
  }

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 80059ca:	68a9      	ldr	r1, [r5, #8]
 80059cc:	b961      	cbnz	r1, 80059e8 <LPS22HB_Init+0x60>
      return LPS22HB_ERROR;
    }
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    if (lps22hb_auto_add_inc_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 80059ce:	4620      	mov	r0, r4
 80059d0:	f000 fab5 	bl	8005f3e <lps22hb_auto_add_inc_set>
 80059d4:	2800      	cmp	r0, #0
 80059d6:	d1e4      	bne.n	80059a2 <LPS22HB_Init+0x1a>
    {
      return LPS22HB_ERROR;
    }
  }

  pObj->last_odr = LPS22HB_ODR_25_Hz;
 80059d8:	2303      	movs	r3, #3
 80059da:	f885 302b 	strb.w	r3, [r5, #43]	; 0x2b
  pObj->is_initialized = 1U;
 80059de:	2301      	movs	r3, #1
 80059e0:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
  return LPS22HB_OK;
 80059e4:	2000      	movs	r0, #0
 80059e6:	e7de      	b.n	80059a6 <LPS22HB_Init+0x1e>
    if (lps22hb_auto_add_inc_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 80059e8:	2101      	movs	r1, #1
 80059ea:	e7f0      	b.n	80059ce <LPS22HB_Init+0x46>

080059ec <LPS22HB_ReadID>:
{
 80059ec:	b508      	push	{r3, lr}
  if (lps22hb_device_id_get(&(pObj->Ctx), Id) != LPS22HB_OK)
 80059ee:	301c      	adds	r0, #28
 80059f0:	f000 fa89 	bl	8005f06 <lps22hb_device_id_get>
 80059f4:	3000      	adds	r0, #0
 80059f6:	bf18      	it	ne
 80059f8:	2001      	movne	r0, #1
}
 80059fa:	4240      	negs	r0, r0
 80059fc:	bd08      	pop	{r3, pc}
	...

08005a00 <LPS22HB_GetOutputDataRate>:
{
 8005a00:	b513      	push	{r0, r1, r4, lr}
 8005a02:	460c      	mov	r4, r1
  if (lps22hb_data_rate_get(&(pObj->Ctx), &odr_low_level) != LPS22HB_OK)
 8005a04:	301c      	adds	r0, #28
 8005a06:	f10d 0107 	add.w	r1, sp, #7
 8005a0a:	f000 fa50 	bl	8005eae <lps22hb_data_rate_get>
 8005a0e:	b9b8      	cbnz	r0, 8005a40 <LPS22HB_GetOutputDataRate+0x40>
  switch (odr_low_level)
 8005a10:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005a14:	2b05      	cmp	r3, #5
 8005a16:	d813      	bhi.n	8005a40 <LPS22HB_GetOutputDataRate+0x40>
 8005a18:	e8df f003 	tbb	[pc, r3]
 8005a1c:	0c0a0703 	.word	0x0c0a0703
 8005a20:	100e      	.short	0x100e
      *Odr = 0.0f;
 8005a22:	2300      	movs	r3, #0
      *Odr = 75.0f;
 8005a24:	6023      	str	r3, [r4, #0]
}
 8005a26:	b002      	add	sp, #8
 8005a28:	bd10      	pop	{r4, pc}
      *Odr = 1.0f;
 8005a2a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8005a2e:	e7f9      	b.n	8005a24 <LPS22HB_GetOutputDataRate+0x24>
      *Odr = 10.0f;
 8005a30:	4b05      	ldr	r3, [pc, #20]	; (8005a48 <LPS22HB_GetOutputDataRate+0x48>)
 8005a32:	e7f7      	b.n	8005a24 <LPS22HB_GetOutputDataRate+0x24>
      *Odr = 25.0f;
 8005a34:	4b05      	ldr	r3, [pc, #20]	; (8005a4c <LPS22HB_GetOutputDataRate+0x4c>)
 8005a36:	e7f5      	b.n	8005a24 <LPS22HB_GetOutputDataRate+0x24>
      *Odr = 50.0f;
 8005a38:	4b05      	ldr	r3, [pc, #20]	; (8005a50 <LPS22HB_GetOutputDataRate+0x50>)
 8005a3a:	e7f3      	b.n	8005a24 <LPS22HB_GetOutputDataRate+0x24>
      *Odr = 75.0f;
 8005a3c:	4b05      	ldr	r3, [pc, #20]	; (8005a54 <LPS22HB_GetOutputDataRate+0x54>)
 8005a3e:	e7f1      	b.n	8005a24 <LPS22HB_GetOutputDataRate+0x24>
      ret = LPS22HB_ERROR;
 8005a40:	f04f 30ff 	mov.w	r0, #4294967295
 8005a44:	e7ef      	b.n	8005a26 <LPS22HB_GetOutputDataRate+0x26>
 8005a46:	bf00      	nop
 8005a48:	41200000 	.word	0x41200000
 8005a4c:	41c80000 	.word	0x41c80000
 8005a50:	42480000 	.word	0x42480000
 8005a54:	42960000 	.word	0x42960000

08005a58 <LPS22HB_PRESS_GetOutputDataRate>:
  return LPS22HB_GetOutputDataRate(pObj, Odr);
 8005a58:	f7ff bfd2 	b.w	8005a00 <LPS22HB_GetOutputDataRate>

08005a5c <LPS22HB_SetOutputDataRate_When_Enabled>:
            : (Odr <= 10.0f) ? LPS22HB_ODR_10_Hz
 8005a5c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8005a60:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8005a64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
 8005a68:	b538      	push	{r3, r4, r5, lr}
 8005a6a:	4605      	mov	r5, r0
            : (Odr <= 10.0f) ? LPS22HB_ODR_10_Hz
 8005a6c:	d926      	bls.n	8005abc <LPS22HB_SetOutputDataRate_When_Enabled+0x60>
 8005a6e:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8005a72:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8005a76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a7a:	d921      	bls.n	8005ac0 <LPS22HB_SetOutputDataRate_When_Enabled+0x64>
 8005a7c:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
 8005a80:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8005a84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a88:	d91c      	bls.n	8005ac4 <LPS22HB_SetOutputDataRate_When_Enabled+0x68>
 8005a8a:	eddf 7a11 	vldr	s15, [pc, #68]	; 8005ad0 <LPS22HB_SetOutputDataRate_When_Enabled+0x74>
 8005a8e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8005a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a96:	bf94      	ite	ls
 8005a98:	2104      	movls	r1, #4
 8005a9a:	2105      	movhi	r1, #5
  if (lps22hb_data_rate_set(&(pObj->Ctx), new_odr) != LPS22HB_OK)
 8005a9c:	f105 041c 	add.w	r4, r5, #28
 8005aa0:	4620      	mov	r0, r4
 8005aa2:	f000 f9ed 	bl	8005e80 <lps22hb_data_rate_set>
 8005aa6:	b978      	cbnz	r0, 8005ac8 <LPS22HB_SetOutputDataRate_When_Enabled+0x6c>
  if (lps22hb_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HB_OK)
 8005aa8:	f105 012b 	add.w	r1, r5, #43	; 0x2b
 8005aac:	4620      	mov	r0, r4
 8005aae:	f000 f9fe 	bl	8005eae <lps22hb_data_rate_get>
 8005ab2:	3000      	adds	r0, #0
 8005ab4:	bf18      	it	ne
 8005ab6:	2001      	movne	r0, #1
 8005ab8:	4240      	negs	r0, r0
}
 8005aba:	bd38      	pop	{r3, r4, r5, pc}
            : (Odr <= 10.0f) ? LPS22HB_ODR_10_Hz
 8005abc:	2101      	movs	r1, #1
 8005abe:	e7ed      	b.n	8005a9c <LPS22HB_SetOutputDataRate_When_Enabled+0x40>
 8005ac0:	2102      	movs	r1, #2
 8005ac2:	e7eb      	b.n	8005a9c <LPS22HB_SetOutputDataRate_When_Enabled+0x40>
 8005ac4:	2103      	movs	r1, #3
 8005ac6:	e7e9      	b.n	8005a9c <LPS22HB_SetOutputDataRate_When_Enabled+0x40>
    return LPS22HB_ERROR;
 8005ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8005acc:	e7f5      	b.n	8005aba <LPS22HB_SetOutputDataRate_When_Enabled+0x5e>
 8005ace:	bf00      	nop
 8005ad0:	42480000 	.word	0x42480000

08005ad4 <LPS22HB_PRESS_GetPressure>:
{
 8005ad4:	b513      	push	{r0, r1, r4, lr}
  (void)memset(data_raw_pressure.u8bit, 0x00, sizeof(int32_t));
 8005ad6:	2300      	movs	r3, #0
{
 8005ad8:	460c      	mov	r4, r1
  if (lps22hb_pressure_raw_get(&(pObj->Ctx), data_raw_pressure.u8bit) != LPS22HB_OK)
 8005ada:	301c      	adds	r0, #28
 8005adc:	a901      	add	r1, sp, #4
  (void)memset(data_raw_pressure.u8bit, 0x00, sizeof(int32_t));
 8005ade:	9301      	str	r3, [sp, #4]
  if (lps22hb_pressure_raw_get(&(pObj->Ctx), data_raw_pressure.u8bit) != LPS22HB_OK)
 8005ae0:	f000 fa07 	bl	8005ef2 <lps22hb_pressure_raw_get>
 8005ae4:	b938      	cbnz	r0, 8005af6 <LPS22HB_PRESS_GetPressure+0x22>
  *Value = LPS22HB_FROM_LSB_TO_hPa((float)(data_raw_pressure.i32bit));
 8005ae6:	eddd 7a01 	vldr	s15, [sp, #4]
 8005aea:	eefa 7aca 	vcvt.f32.s32	s15, s15, #12
 8005aee:	edc4 7a00 	vstr	s15, [r4]
}
 8005af2:	b002      	add	sp, #8
 8005af4:	bd10      	pop	{r4, pc}
    return LPS22HB_ERROR;
 8005af6:	f04f 30ff 	mov.w	r0, #4294967295
 8005afa:	e7fa      	b.n	8005af2 <LPS22HB_PRESS_GetPressure+0x1e>

08005afc <LPS22HB_TEMP_GetTemperature>:
{
 8005afc:	b513      	push	{r0, r1, r4, lr}
  (void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 8005afe:	2300      	movs	r3, #0
{
 8005b00:	460c      	mov	r4, r1
  if (lps22hb_temperature_raw_get(&(pObj->Ctx), data_raw_temperature.u8bit) != LPS22HB_OK)
 8005b02:	301c      	adds	r0, #28
 8005b04:	a901      	add	r1, sp, #4
  (void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 8005b06:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (lps22hb_temperature_raw_get(&(pObj->Ctx), data_raw_temperature.u8bit) != LPS22HB_OK)
 8005b0a:	f000 f9f7 	bl	8005efc <lps22hb_temperature_raw_get>
 8005b0e:	b968      	cbnz	r0, 8005b2c <LPS22HB_TEMP_GetTemperature+0x30>
  *Value = LPS22HB_FROM_LSB_TO_degC((float)(data_raw_temperature.i16bit));
 8005b10:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8005b14:	eddf 6a07 	vldr	s13, [pc, #28]	; 8005b34 <LPS22HB_TEMP_GetTemperature+0x38>
 8005b18:	ee07 3a90 	vmov	s15, r3
 8005b1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b20:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005b24:	ed84 7a00 	vstr	s14, [r4]
}
 8005b28:	b002      	add	sp, #8
 8005b2a:	bd10      	pop	{r4, pc}
    return LPS22HB_ERROR;
 8005b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8005b30:	e7fa      	b.n	8005b28 <LPS22HB_TEMP_GetTemperature+0x2c>
 8005b32:	bf00      	nop
 8005b34:	42c80000 	.word	0x42c80000

08005b38 <LPS22HB_TEMP_SetOutputDataRate>:
  if (pObj->temp_is_enabled == 1U)
 8005b38:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 8005b3c:	2b01      	cmp	r3, #1
{
 8005b3e:	4602      	mov	r2, r0
  if (pObj->temp_is_enabled == 1U)
 8005b40:	d101      	bne.n	8005b46 <LPS22HB_TEMP_SetOutputDataRate+0xe>
    return LPS22HB_SetOutputDataRate_When_Enabled(pObj, Odr);
 8005b42:	f7ff bf8b 	b.w	8005a5c <LPS22HB_SetOutputDataRate_When_Enabled>
                   : (Odr <= 10.0f) ? LPS22HB_ODR_10_Hz
 8005b46:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005b4a:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8005b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b52:	d91a      	bls.n	8005b8a <LPS22HB_TEMP_SetOutputDataRate+0x52>
 8005b54:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005b58:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8005b5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b60:	d915      	bls.n	8005b8e <LPS22HB_TEMP_SetOutputDataRate+0x56>
 8005b62:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8005b66:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8005b6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b6e:	d910      	bls.n	8005b92 <LPS22HB_TEMP_SetOutputDataRate+0x5a>
 8005b70:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8005b98 <LPS22HB_TEMP_SetOutputDataRate+0x60>
 8005b74:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8005b78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b7c:	bf94      	ite	ls
 8005b7e:	2304      	movls	r3, #4
 8005b80:	2305      	movhi	r3, #5
  pObj->last_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
 8005b82:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
}
 8005b86:	2000      	movs	r0, #0
 8005b88:	4770      	bx	lr
                   : (Odr <= 10.0f) ? LPS22HB_ODR_10_Hz
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	e7f9      	b.n	8005b82 <LPS22HB_TEMP_SetOutputDataRate+0x4a>
 8005b8e:	2302      	movs	r3, #2
 8005b90:	e7f7      	b.n	8005b82 <LPS22HB_TEMP_SetOutputDataRate+0x4a>
 8005b92:	2303      	movs	r3, #3
 8005b94:	e7f5      	b.n	8005b82 <LPS22HB_TEMP_SetOutputDataRate+0x4a>
 8005b96:	bf00      	nop
 8005b98:	42480000 	.word	0x42480000

08005b9c <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint16_t i;
  int32_t ret = LPS22HB_OK;
  LPS22HB_Object_t *pObj = (LPS22HB_Object_t *)Handle;

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 8005ba0:	6884      	ldr	r4, [r0, #8]
{
 8005ba2:	4605      	mov	r5, r0
 8005ba4:	460e      	mov	r6, r1
 8005ba6:	4691      	mov	r9, r2
 8005ba8:	4698      	mov	r8, r3
  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 8005baa:	b994      	cbnz	r4, 8005bd2 <ReadRegWrap+0x36>
  {
    for (i = 0; i < Length; i++)
 8005bac:	4544      	cmp	r4, r8
 8005bae:	d102      	bne.n	8005bb6 <ReadRegWrap+0x1a>
      {
        return LPS22HB_ERROR;
      }
    }

    return ret;
 8005bb0:	2000      	movs	r0, #0
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
  }
}
 8005bb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      ret = pObj->IO.ReadReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 8005bb6:	19a1      	adds	r1, r4, r6
 8005bb8:	eb09 0204 	add.w	r2, r9, r4
 8005bbc:	696f      	ldr	r7, [r5, #20]
 8005bbe:	7b28      	ldrb	r0, [r5, #12]
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	b289      	uxth	r1, r1
 8005bc4:	47b8      	blx	r7
 8005bc6:	3401      	adds	r4, #1
      if (ret != LPS22HB_OK)
 8005bc8:	2800      	cmp	r0, #0
 8005bca:	d0ef      	beq.n	8005bac <ReadRegWrap+0x10>
        return LPS22HB_ERROR;
 8005bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8005bd0:	e7ef      	b.n	8005bb2 <ReadRegWrap+0x16>
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8005bd2:	6944      	ldr	r4, [r0, #20]
 8005bd4:	7b00      	ldrb	r0, [r0, #12]
 8005bd6:	46a4      	mov	ip, r4
}
 8005bd8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8005bdc:	4760      	bx	ip

08005bde <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005bde:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint16_t i;
  int32_t ret = LPS22HB_OK;
  LPS22HB_Object_t *pObj = (LPS22HB_Object_t *)Handle;

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 8005be2:	6884      	ldr	r4, [r0, #8]
{
 8005be4:	4605      	mov	r5, r0
 8005be6:	460e      	mov	r6, r1
 8005be8:	4691      	mov	r9, r2
 8005bea:	4698      	mov	r8, r3
  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 8005bec:	b994      	cbnz	r4, 8005c14 <WriteRegWrap+0x36>
  {
    for (i = 0; i < Length; i++)
 8005bee:	4544      	cmp	r4, r8
 8005bf0:	d102      	bne.n	8005bf8 <WriteRegWrap+0x1a>
      {
        return LPS22HB_ERROR;
      }
    }

    return ret;
 8005bf2:	2000      	movs	r0, #0
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
  }
}
 8005bf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      ret = pObj->IO.WriteReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 8005bf8:	19a1      	adds	r1, r4, r6
 8005bfa:	eb09 0204 	add.w	r2, r9, r4
 8005bfe:	692f      	ldr	r7, [r5, #16]
 8005c00:	7b28      	ldrb	r0, [r5, #12]
 8005c02:	2301      	movs	r3, #1
 8005c04:	b289      	uxth	r1, r1
 8005c06:	47b8      	blx	r7
 8005c08:	3401      	adds	r4, #1
      if (ret != LPS22HB_OK)
 8005c0a:	2800      	cmp	r0, #0
 8005c0c:	d0ef      	beq.n	8005bee <WriteRegWrap+0x10>
        return LPS22HB_ERROR;
 8005c0e:	f04f 30ff 	mov.w	r0, #4294967295
 8005c12:	e7ef      	b.n	8005bf4 <WriteRegWrap+0x16>
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8005c14:	6904      	ldr	r4, [r0, #16]
 8005c16:	7b00      	ldrb	r0, [r0, #12]
 8005c18:	46a4      	mov	ip, r4
}
 8005c1a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8005c1e:	4760      	bx	ip

08005c20 <LPS22HB_PRESS_Enable>:
{
 8005c20:	b510      	push	{r4, lr}
  if (pObj->press_is_enabled == 1U)
 8005c22:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8005c26:	2b01      	cmp	r3, #1
{
 8005c28:	4604      	mov	r4, r0
  if (pObj->press_is_enabled == 1U)
 8005c2a:	d009      	beq.n	8005c40 <LPS22HB_PRESS_Enable+0x20>
  if (lps22hb_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HB_OK)
 8005c2c:	f890 102b 	ldrb.w	r1, [r0, #43]	; 0x2b
 8005c30:	301c      	adds	r0, #28
 8005c32:	f000 f925 	bl	8005e80 <lps22hb_data_rate_set>
 8005c36:	b928      	cbnz	r0, 8005c44 <LPS22HB_PRESS_Enable+0x24>
  pObj->press_is_enabled = 1;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
}
 8005c3e:	bd10      	pop	{r4, pc}
    return LPS22HB_OK;
 8005c40:	2000      	movs	r0, #0
 8005c42:	e7fc      	b.n	8005c3e <LPS22HB_PRESS_Enable+0x1e>
    return LPS22HB_ERROR;
 8005c44:	f04f 30ff 	mov.w	r0, #4294967295
 8005c48:	e7f9      	b.n	8005c3e <LPS22HB_PRESS_Enable+0x1e>

08005c4a <LPS22HB_TEMP_Enable>:
{
 8005c4a:	b510      	push	{r4, lr}
  if (pObj->temp_is_enabled == 1U)
 8005c4c:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 8005c50:	2b01      	cmp	r3, #1
{
 8005c52:	4604      	mov	r4, r0
  if (pObj->temp_is_enabled == 1U)
 8005c54:	d009      	beq.n	8005c6a <LPS22HB_TEMP_Enable+0x20>
  if (lps22hb_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HB_OK)
 8005c56:	f890 102b 	ldrb.w	r1, [r0, #43]	; 0x2b
 8005c5a:	301c      	adds	r0, #28
 8005c5c:	f000 f910 	bl	8005e80 <lps22hb_data_rate_set>
 8005c60:	b928      	cbnz	r0, 8005c6e <LPS22HB_TEMP_Enable+0x24>
  pObj->temp_is_enabled = 1;
 8005c62:	2301      	movs	r3, #1
 8005c64:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
}
 8005c68:	bd10      	pop	{r4, pc}
    return LPS22HB_OK;
 8005c6a:	2000      	movs	r0, #0
 8005c6c:	e7fc      	b.n	8005c68 <LPS22HB_TEMP_Enable+0x1e>
    return LPS22HB_ERROR;
 8005c6e:	f04f 30ff 	mov.w	r0, #4294967295
 8005c72:	e7f9      	b.n	8005c68 <LPS22HB_TEMP_Enable+0x1e>

08005c74 <LPS22HB_PRESS_Disable>:
{
 8005c74:	b538      	push	{r3, r4, r5, lr}
 8005c76:	4604      	mov	r4, r0
  if (pObj->press_is_enabled == 0U)
 8005c78:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
 8005c7c:	b128      	cbz	r0, 8005c8a <LPS22HB_PRESS_Disable+0x16>
  if (pObj->temp_is_enabled == 0U)
 8005c7e:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8005c82:	b11b      	cbz	r3, 8005c8c <LPS22HB_PRESS_Disable+0x18>
  pObj->press_is_enabled = 0;
 8005c84:	2000      	movs	r0, #0
 8005c86:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
}
 8005c8a:	bd38      	pop	{r3, r4, r5, pc}
    if (lps22hb_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HB_OK)
 8005c8c:	f104 051c 	add.w	r5, r4, #28
 8005c90:	f104 012b 	add.w	r1, r4, #43	; 0x2b
 8005c94:	4628      	mov	r0, r5
 8005c96:	f000 f90a 	bl	8005eae <lps22hb_data_rate_get>
 8005c9a:	4601      	mov	r1, r0
 8005c9c:	b110      	cbz	r0, 8005ca4 <LPS22HB_PRESS_Disable+0x30>
      return LPS22HB_ERROR;
 8005c9e:	f04f 30ff 	mov.w	r0, #4294967295
 8005ca2:	e7f2      	b.n	8005c8a <LPS22HB_PRESS_Disable+0x16>
    if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 8005ca4:	4628      	mov	r0, r5
 8005ca6:	f000 f8eb 	bl	8005e80 <lps22hb_data_rate_set>
 8005caa:	2800      	cmp	r0, #0
 8005cac:	d0ea      	beq.n	8005c84 <LPS22HB_PRESS_Disable+0x10>
 8005cae:	e7f6      	b.n	8005c9e <LPS22HB_PRESS_Disable+0x2a>

08005cb0 <LPS22HB_TEMP_Disable>:
{
 8005cb0:	b538      	push	{r3, r4, r5, lr}
 8005cb2:	4604      	mov	r4, r0
  if (pObj->temp_is_enabled == 0U)
 8005cb4:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
 8005cb8:	b128      	cbz	r0, 8005cc6 <LPS22HB_TEMP_Disable+0x16>
  if (pObj->press_is_enabled == 0U)
 8005cba:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 8005cbe:	b11b      	cbz	r3, 8005cc8 <LPS22HB_TEMP_Disable+0x18>
  pObj->temp_is_enabled = 0;
 8005cc0:	2000      	movs	r0, #0
 8005cc2:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
}
 8005cc6:	bd38      	pop	{r3, r4, r5, pc}
    if (lps22hb_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HB_OK)
 8005cc8:	f104 051c 	add.w	r5, r4, #28
 8005ccc:	f104 012b 	add.w	r1, r4, #43	; 0x2b
 8005cd0:	4628      	mov	r0, r5
 8005cd2:	f000 f8ec 	bl	8005eae <lps22hb_data_rate_get>
 8005cd6:	4601      	mov	r1, r0
 8005cd8:	b110      	cbz	r0, 8005ce0 <LPS22HB_TEMP_Disable+0x30>
      return LPS22HB_ERROR;
 8005cda:	f04f 30ff 	mov.w	r0, #4294967295
 8005cde:	e7f2      	b.n	8005cc6 <LPS22HB_TEMP_Disable+0x16>
    if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 8005ce0:	4628      	mov	r0, r5
 8005ce2:	f000 f8cd 	bl	8005e80 <lps22hb_data_rate_set>
 8005ce6:	2800      	cmp	r0, #0
 8005ce8:	d0ea      	beq.n	8005cc0 <LPS22HB_TEMP_Disable+0x10>
 8005cea:	e7f6      	b.n	8005cda <LPS22HB_TEMP_Disable+0x2a>

08005cec <LPS22HB_DeInit>:
{
 8005cec:	b510      	push	{r4, lr}
  if (pObj->is_initialized == 1U)
 8005cee:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8005cf2:	2b01      	cmp	r3, #1
{
 8005cf4:	4604      	mov	r4, r0
  if (pObj->is_initialized == 1U)
 8005cf6:	d003      	beq.n	8005d00 <LPS22HB_DeInit+0x14>
  pObj->is_initialized = 0;
 8005cf8:	2000      	movs	r0, #0
 8005cfa:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
}
 8005cfe:	bd10      	pop	{r4, pc}
    if (LPS22HB_PRESS_Disable(pObj) != LPS22HB_OK)
 8005d00:	f7ff ffb8 	bl	8005c74 <LPS22HB_PRESS_Disable>
 8005d04:	b110      	cbz	r0, 8005d0c <LPS22HB_DeInit+0x20>
      return LPS22HB_ERROR;
 8005d06:	f04f 30ff 	mov.w	r0, #4294967295
 8005d0a:	e7f8      	b.n	8005cfe <LPS22HB_DeInit+0x12>
    if (LPS22HB_TEMP_Disable(pObj) != LPS22HB_OK)
 8005d0c:	4620      	mov	r0, r4
 8005d0e:	f7ff ffcf 	bl	8005cb0 <LPS22HB_TEMP_Disable>
 8005d12:	2800      	cmp	r0, #0
 8005d14:	d0f0      	beq.n	8005cf8 <LPS22HB_DeInit+0xc>
 8005d16:	e7f6      	b.n	8005d06 <LPS22HB_DeInit+0x1a>

08005d18 <LPS22HB_TEMP_GetOutputDataRate>:
 8005d18:	f7ff be72 	b.w	8005a00 <LPS22HB_GetOutputDataRate>

08005d1c <LPS22HB_PRESS_SetOutputDataRate>:
  if (pObj->press_is_enabled == 1U)
 8005d1c:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8005d20:	2b01      	cmp	r3, #1
{
 8005d22:	4602      	mov	r2, r0
  if (pObj->press_is_enabled == 1U)
 8005d24:	d101      	bne.n	8005d2a <LPS22HB_PRESS_SetOutputDataRate+0xe>
    return LPS22HB_SetOutputDataRate_When_Enabled(pObj, Odr);
 8005d26:	f7ff be99 	b.w	8005a5c <LPS22HB_SetOutputDataRate_When_Enabled>
                   : (Odr <= 10.0f) ? LPS22HB_ODR_10_Hz
 8005d2a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d2e:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8005d32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d36:	d91a      	bls.n	8005d6e <LPS22HB_PRESS_SetOutputDataRate+0x52>
 8005d38:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005d3c:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8005d40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d44:	d915      	bls.n	8005d72 <LPS22HB_PRESS_SetOutputDataRate+0x56>
 8005d46:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8005d4a:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8005d4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d52:	d910      	bls.n	8005d76 <LPS22HB_PRESS_SetOutputDataRate+0x5a>
 8005d54:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8005d7c <LPS22HB_PRESS_SetOutputDataRate+0x60>
 8005d58:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8005d5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d60:	bf94      	ite	ls
 8005d62:	2304      	movls	r3, #4
 8005d64:	2305      	movhi	r3, #5
  pObj->last_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
 8005d66:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
}
 8005d6a:	2000      	movs	r0, #0
 8005d6c:	4770      	bx	lr
                   : (Odr <= 10.0f) ? LPS22HB_ODR_10_Hz
 8005d6e:	2301      	movs	r3, #1
 8005d70:	e7f9      	b.n	8005d66 <LPS22HB_PRESS_SetOutputDataRate+0x4a>
 8005d72:	2302      	movs	r3, #2
 8005d74:	e7f7      	b.n	8005d66 <LPS22HB_PRESS_SetOutputDataRate+0x4a>
 8005d76:	2303      	movs	r3, #3
 8005d78:	e7f5      	b.n	8005d66 <LPS22HB_PRESS_SetOutputDataRate+0x4a>
 8005d7a:	bf00      	nop
 8005d7c:	42480000 	.word	0x42480000

08005d80 <LPS22HB_Write_Reg>:
{
 8005d80:	b513      	push	{r0, r1, r4, lr}
 8005d82:	ac02      	add	r4, sp, #8
  if (lps22hb_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LPS22HB_OK)
 8005d84:	2301      	movs	r3, #1
{
 8005d86:	f804 2d01 	strb.w	r2, [r4, #-1]!
  if (lps22hb_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LPS22HB_OK)
 8005d8a:	301c      	adds	r0, #28
 8005d8c:	4622      	mov	r2, r4
 8005d8e:	f000 f842 	bl	8005e16 <lps22hb_write_reg>
 8005d92:	3000      	adds	r0, #0
 8005d94:	bf18      	it	ne
 8005d96:	2001      	movne	r0, #1
}
 8005d98:	4240      	negs	r0, r0
 8005d9a:	b002      	add	sp, #8
 8005d9c:	bd10      	pop	{r4, pc}
	...

08005da0 <LPS22HB_RegisterBusIO>:
{
 8005da0:	b510      	push	{r4, lr}
  if (pObj == NULL)
 8005da2:	4604      	mov	r4, r0
 8005da4:	b910      	cbnz	r0, 8005dac <LPS22HB_RegisterBusIO+0xc>
    ret = LPS22HB_ERROR;
 8005da6:	f04f 30ff 	mov.w	r0, #4294967295
}
 8005daa:	bd10      	pop	{r4, pc}
    pObj->IO.DeInit    = pIO->DeInit;
 8005dac:	684a      	ldr	r2, [r1, #4]
    pObj->IO.Init      = pIO->Init;
 8005dae:	680b      	ldr	r3, [r1, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8005db0:	6042      	str	r2, [r0, #4]
    pObj->IO.BusType   = pIO->BusType;
 8005db2:	688a      	ldr	r2, [r1, #8]
    pObj->IO.Init      = pIO->Init;
 8005db4:	6003      	str	r3, [r0, #0]
    pObj->IO.BusType   = pIO->BusType;
 8005db6:	6082      	str	r2, [r0, #8]
    pObj->IO.Address   = pIO->Address;
 8005db8:	7b0a      	ldrb	r2, [r1, #12]
 8005dba:	7302      	strb	r2, [r0, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8005dbc:	690a      	ldr	r2, [r1, #16]
 8005dbe:	6102      	str	r2, [r0, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8005dc0:	694a      	ldr	r2, [r1, #20]
 8005dc2:	6142      	str	r2, [r0, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8005dc4:	698a      	ldr	r2, [r1, #24]
 8005dc6:	6182      	str	r2, [r0, #24]
    pObj->Ctx.read_reg  = ReadRegWrap;
 8005dc8:	4a0d      	ldr	r2, [pc, #52]	; (8005e00 <LPS22HB_RegisterBusIO+0x60>)
 8005dca:	6202      	str	r2, [r0, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8005dcc:	4a0d      	ldr	r2, [pc, #52]	; (8005e04 <LPS22HB_RegisterBusIO+0x64>)
 8005dce:	61c2      	str	r2, [r0, #28]
    pObj->Ctx.handle   = pObj;
 8005dd0:	6260      	str	r0, [r4, #36]	; 0x24
    if (pObj->IO.Init == NULL)
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d0e7      	beq.n	8005da6 <LPS22HB_RegisterBusIO+0x6>
    else if (pObj->IO.Init() != LPS22HB_OK)
 8005dd6:	4798      	blx	r3
 8005dd8:	2800      	cmp	r0, #0
 8005dda:	d1e4      	bne.n	8005da6 <LPS22HB_RegisterBusIO+0x6>
      if (pObj->IO.BusType == LPS22HB_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8005ddc:	68a3      	ldr	r3, [r4, #8]
 8005dde:	2b02      	cmp	r3, #2
 8005de0:	d1e3      	bne.n	8005daa <LPS22HB_RegisterBusIO+0xa>
        if (pObj->is_initialized == 0U)
 8005de2:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d1df      	bne.n	8005daa <LPS22HB_RegisterBusIO+0xa>
          if (LPS22HB_Write_Reg(pObj, LPS22HB_CTRL_REG1, data) != LPS22HB_OK)
 8005dea:	2201      	movs	r2, #1
 8005dec:	2110      	movs	r1, #16
 8005dee:	4620      	mov	r0, r4
 8005df0:	f7ff ffc6 	bl	8005d80 <LPS22HB_Write_Reg>
 8005df4:	3000      	adds	r0, #0
 8005df6:	bf18      	it	ne
 8005df8:	2001      	movne	r0, #1
 8005dfa:	4240      	negs	r0, r0
  return ret;
 8005dfc:	e7d5      	b.n	8005daa <LPS22HB_RegisterBusIO+0xa>
 8005dfe:	bf00      	nop
 8005e00:	08005b9d 	.word	0x08005b9d
 8005e04:	08005bdf 	.word	0x08005bdf

08005e08 <lps22hb_read_reg>:
  * @param  uint16_t len: number of consecutive register to read
  *
  */
int32_t lps22hb_read_reg(lps22hb_ctx_t *ctx, uint8_t reg, uint8_t *data,
                         uint16_t len)
{
 8005e08:	b410      	push	{r4}
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005e0a:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 8005e0e:	46a4      	mov	ip, r4
  return ret;
}
 8005e10:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005e14:	4760      	bx	ip

08005e16 <lps22hb_write_reg>:
  * @param  uint16_t len: number of consecutive register to write
  *
*/
int32_t lps22hb_write_reg(lps22hb_ctx_t *ctx, uint8_t reg, uint8_t *data,
                          uint16_t len)
{
 8005e16:	b410      	push	{r4}
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005e18:	6804      	ldr	r4, [r0, #0]
 8005e1a:	6880      	ldr	r0, [r0, #8]
 8005e1c:	46a4      	mov	ip, r4
  return ret;
}
 8005e1e:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005e22:	4760      	bx	ip

08005e24 <lps22hb_block_data_update_set>:
  * @param  lps22hb_ctx_t *ctx: read / write interface definitions
  * @param  uint8_t val: change the values of bdu in reg CTRL_REG1
  *
  */
int32_t lps22hb_block_data_update_set(lps22hb_ctx_t *ctx, uint8_t val)
{
 8005e24:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lps22hb_reg_t reg;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, &(reg.byte), 1);
 8005e26:	2301      	movs	r3, #1
{
 8005e28:	460d      	mov	r5, r1
  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, &(reg.byte), 1);
 8005e2a:	aa01      	add	r2, sp, #4
 8005e2c:	2110      	movs	r1, #16
{
 8005e2e:	4604      	mov	r4, r0
  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, &(reg.byte), 1);
 8005e30:	f7ff ffea 	bl	8005e08 <lps22hb_read_reg>
  if (ret == 0)
 8005e34:	b958      	cbnz	r0, 8005e4e <lps22hb_block_data_update_set+0x2a>
  {
    reg.ctrl_reg1.bdu = val;
 8005e36:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005e3a:	f365 0341 	bfi	r3, r5, #1, #1
 8005e3e:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, &(reg.byte), 1);
 8005e42:	aa01      	add	r2, sp, #4
 8005e44:	2301      	movs	r3, #1
 8005e46:	2110      	movs	r1, #16
 8005e48:	4620      	mov	r0, r4
 8005e4a:	f7ff ffe4 	bl	8005e16 <lps22hb_write_reg>
  }
  return ret;
}
 8005e4e:	b003      	add	sp, #12
 8005e50:	bd30      	pop	{r4, r5, pc}

08005e52 <lps22hb_low_pass_filter_mode_set>:
  * @param  lps22hb_lpfp_t: change the values of lpfp in reg CTRL_REG1
  *
  */
int32_t lps22hb_low_pass_filter_mode_set(lps22hb_ctx_t *ctx,
                                         lps22hb_lpfp_t val)
{
 8005e52:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lps22hb_reg_t reg;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, &(reg.byte), 1);
 8005e54:	2301      	movs	r3, #1
{
 8005e56:	460d      	mov	r5, r1
  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, &(reg.byte), 1);
 8005e58:	aa01      	add	r2, sp, #4
 8005e5a:	2110      	movs	r1, #16
{
 8005e5c:	4604      	mov	r4, r0
  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, &(reg.byte), 1);
 8005e5e:	f7ff ffd3 	bl	8005e08 <lps22hb_read_reg>
  if (ret == 0)
 8005e62:	b958      	cbnz	r0, 8005e7c <lps22hb_low_pass_filter_mode_set+0x2a>
  {
    reg.ctrl_reg1.lpfp = (uint8_t) val;
 8005e64:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005e68:	f365 0383 	bfi	r3, r5, #2, #2
 8005e6c:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, &(reg.byte), 1);
 8005e70:	aa01      	add	r2, sp, #4
 8005e72:	2301      	movs	r3, #1
 8005e74:	2110      	movs	r1, #16
 8005e76:	4620      	mov	r0, r4
 8005e78:	f7ff ffcd 	bl	8005e16 <lps22hb_write_reg>
  }
  return ret;
}
 8005e7c:	b003      	add	sp, #12
 8005e7e:	bd30      	pop	{r4, r5, pc}

08005e80 <lps22hb_data_rate_set>:
  * @param  lps22hb_ctx_t *ctx: read / write interface definitions
  * @param  lps22hb_odr_t: change the values of odr in reg CTRL_REG1
  *
  */
int32_t lps22hb_data_rate_set(lps22hb_ctx_t *ctx, lps22hb_odr_t val)
{
 8005e80:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lps22hb_reg_t reg;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, &(reg.byte), 1);
 8005e82:	2301      	movs	r3, #1
{
 8005e84:	460d      	mov	r5, r1
  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, &(reg.byte), 1);
 8005e86:	aa01      	add	r2, sp, #4
 8005e88:	2110      	movs	r1, #16
{
 8005e8a:	4604      	mov	r4, r0
  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, &(reg.byte), 1);
 8005e8c:	f7ff ffbc 	bl	8005e08 <lps22hb_read_reg>
  if (ret == 0)
 8005e90:	b958      	cbnz	r0, 8005eaa <lps22hb_data_rate_set+0x2a>
  {
    reg.ctrl_reg1.odr = (uint8_t)val;
 8005e92:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005e96:	f365 1306 	bfi	r3, r5, #4, #3
 8005e9a:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, &(reg.byte), 1);
 8005e9e:	aa01      	add	r2, sp, #4
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	2110      	movs	r1, #16
 8005ea4:	4620      	mov	r0, r4
 8005ea6:	f7ff ffb6 	bl	8005e16 <lps22hb_write_reg>
  }
  return ret;
}
 8005eaa:	b003      	add	sp, #12
 8005eac:	bd30      	pop	{r4, r5, pc}

08005eae <lps22hb_data_rate_get>:
  * @param  lps22hb_ctx_t *ctx: read / write interface definitions
  * @param  lps22hb_odr_t: Get the values of odr in reg CTRL_REG1
  *
  */
int32_t lps22hb_data_rate_get(lps22hb_ctx_t *ctx, lps22hb_odr_t *val)
{
 8005eae:	b513      	push	{r0, r1, r4, lr}
  lps22hb_reg_t reg;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, &(reg.byte), 1);
 8005eb0:	2301      	movs	r3, #1
{
 8005eb2:	460c      	mov	r4, r1
  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, &(reg.byte), 1);
 8005eb4:	aa01      	add	r2, sp, #4
 8005eb6:	2110      	movs	r1, #16
 8005eb8:	f7ff ffa6 	bl	8005e08 <lps22hb_read_reg>

  switch (reg.ctrl_reg1.odr)
 8005ebc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005ec0:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8005ec4:	2b05      	cmp	r3, #5
 8005ec6:	d812      	bhi.n	8005eee <lps22hb_data_rate_get+0x40>
 8005ec8:	e8df f003 	tbb	[pc, r3]
 8005ecc:	0b090703 	.word	0x0b090703
 8005ed0:	0f0d      	.short	0x0f0d
  {
    case LPS22HB_POWER_DOWN:
      *val = LPS22HB_POWER_DOWN;
 8005ed2:	2300      	movs	r3, #0
      break;
    case LPS22HB_ODR_75_Hz:
      *val = LPS22HB_ODR_75_Hz;
      break;
    default:
      *val = LPS22HB_ODR_ND;
 8005ed4:	7023      	strb	r3, [r4, #0]
      break;
  }
  return ret;
}
 8005ed6:	b002      	add	sp, #8
 8005ed8:	bd10      	pop	{r4, pc}
      *val = LPS22HB_ODR_1_Hz;
 8005eda:	2301      	movs	r3, #1
 8005edc:	e7fa      	b.n	8005ed4 <lps22hb_data_rate_get+0x26>
      *val = LPS22HB_ODR_10_Hz;
 8005ede:	2302      	movs	r3, #2
 8005ee0:	e7f8      	b.n	8005ed4 <lps22hb_data_rate_get+0x26>
      *val = LPS22HB_ODR_25_Hz;
 8005ee2:	2303      	movs	r3, #3
 8005ee4:	e7f6      	b.n	8005ed4 <lps22hb_data_rate_get+0x26>
      *val = LPS22HB_ODR_50_Hz;
 8005ee6:	2304      	movs	r3, #4
 8005ee8:	e7f4      	b.n	8005ed4 <lps22hb_data_rate_get+0x26>
      *val = LPS22HB_ODR_75_Hz;
 8005eea:	2305      	movs	r3, #5
 8005eec:	e7f2      	b.n	8005ed4 <lps22hb_data_rate_get+0x26>
      *val = LPS22HB_ODR_ND;
 8005eee:	2306      	movs	r3, #6
 8005ef0:	e7f0      	b.n	8005ed4 <lps22hb_data_rate_get+0x26>

08005ef2 <lps22hb_pressure_raw_get>:
  * @param  uint8_t * : buffer that stores data read
  *
  */
int32_t lps22hb_pressure_raw_get(lps22hb_ctx_t *ctx, uint8_t *buff)
{
  return lps22hb_read_reg(ctx, LPS22HB_PRESS_OUT_XL, buff, 3);
 8005ef2:	460a      	mov	r2, r1
 8005ef4:	2303      	movs	r3, #3
 8005ef6:	2128      	movs	r1, #40	; 0x28
 8005ef8:	f7ff bf86 	b.w	8005e08 <lps22hb_read_reg>

08005efc <lps22hb_temperature_raw_get>:
  * @param  uint8_t * : buffer that stores data read
  *
  */
int32_t lps22hb_temperature_raw_get(lps22hb_ctx_t *ctx, uint8_t *buff)
{
  return lps22hb_read_reg(ctx, LPS22HB_TEMP_OUT_L, (uint8_t *) buff, 2);
 8005efc:	460a      	mov	r2, r1
 8005efe:	2302      	movs	r3, #2
 8005f00:	212b      	movs	r1, #43	; 0x2b
 8005f02:	f7ff bf81 	b.w	8005e08 <lps22hb_read_reg>

08005f06 <lps22hb_device_id_get>:
  * @param  uint8_t * : buffer that stores data read
  *
  */
int32_t lps22hb_device_id_get(lps22hb_ctx_t *ctx, uint8_t *buff)
{
  return lps22hb_read_reg(ctx, LPS22HB_WHO_AM_I, (uint8_t *) buff, 1);
 8005f06:	460a      	mov	r2, r1
 8005f08:	2301      	movs	r3, #1
 8005f0a:	210f      	movs	r1, #15
 8005f0c:	f7ff bf7c 	b.w	8005e08 <lps22hb_read_reg>

08005f10 <lps22hb_low_power_set>:
  * @param  lps22hb_ctx_t *ctx: read / write interface definitions
  * @param  uint8_t val: change the values of lc_en in reg RES_CONF
  *
  */
int32_t lps22hb_low_power_set(lps22hb_ctx_t *ctx, uint8_t val)
{
 8005f10:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lps22hb_reg_t reg;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_RES_CONF, &(reg.byte), 1);
 8005f12:	2301      	movs	r3, #1
{
 8005f14:	460d      	mov	r5, r1
  ret = lps22hb_read_reg(ctx, LPS22HB_RES_CONF, &(reg.byte), 1);
 8005f16:	aa01      	add	r2, sp, #4
 8005f18:	211a      	movs	r1, #26
{
 8005f1a:	4604      	mov	r4, r0
  ret = lps22hb_read_reg(ctx, LPS22HB_RES_CONF, &(reg.byte), 1);
 8005f1c:	f7ff ff74 	bl	8005e08 <lps22hb_read_reg>
  if (ret == 0)
 8005f20:	b958      	cbnz	r0, 8005f3a <lps22hb_low_power_set+0x2a>
  {
    reg.res_conf.lc_en = val;
 8005f22:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005f26:	f365 0300 	bfi	r3, r5, #0, #1
 8005f2a:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lps22hb_write_reg(ctx, LPS22HB_RES_CONF, &(reg.byte), 1);
 8005f2e:	aa01      	add	r2, sp, #4
 8005f30:	2301      	movs	r3, #1
 8005f32:	211a      	movs	r1, #26
 8005f34:	4620      	mov	r0, r4
 8005f36:	f7ff ff6e 	bl	8005e16 <lps22hb_write_reg>
  }
  return ret;
}
 8005f3a:	b003      	add	sp, #12
 8005f3c:	bd30      	pop	{r4, r5, pc}

08005f3e <lps22hb_auto_add_inc_set>:
  * @param  lps22hb_ctx_t *ctx: read / write interface definitions
  * @param  uint8_t val: change the values of if_add_inc in reg CTRL_REG2
  *
  */
int32_t lps22hb_auto_add_inc_set(lps22hb_ctx_t *ctx, uint8_t val)
{
 8005f3e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lps22hb_reg_t reg;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG2, &(reg.byte), 1);
 8005f40:	2301      	movs	r3, #1
{
 8005f42:	460d      	mov	r5, r1
  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG2, &(reg.byte), 1);
 8005f44:	aa01      	add	r2, sp, #4
 8005f46:	2111      	movs	r1, #17
{
 8005f48:	4604      	mov	r4, r0
  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG2, &(reg.byte), 1);
 8005f4a:	f7ff ff5d 	bl	8005e08 <lps22hb_read_reg>
  if (ret == 0)
 8005f4e:	b958      	cbnz	r0, 8005f68 <lps22hb_auto_add_inc_set+0x2a>
  {
    reg.ctrl_reg2.if_add_inc = val;
 8005f50:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005f54:	f365 1304 	bfi	r3, r5, #4, #1
 8005f58:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG2, &(reg.byte), 1);
 8005f5c:	aa01      	add	r2, sp, #4
 8005f5e:	2301      	movs	r3, #1
 8005f60:	2111      	movs	r1, #17
 8005f62:	4620      	mov	r0, r4
 8005f64:	f7ff ff57 	bl	8005e16 <lps22hb_write_reg>
  }
  return ret;
}
 8005f68:	b003      	add	sp, #12
 8005f6a:	bd30      	pop	{r4, r5, pc}

08005f6c <LSM303AGR_ACC_GetCapabilities>:
  (void)(pObj);

  Capabilities->Acc          = 1;
  Capabilities->Gyro         = 0;
  Capabilities->Magneto      = 0;
  Capabilities->LowPower     = 0;
 8005f6c:	2000      	movs	r0, #0
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e9c1 3000 	strd	r3, r0, [r1]
  Capabilities->GyroMaxFS    = 0;
 8005f74:	2310      	movs	r3, #16
  Capabilities->AccMaxFS     = 16;
 8005f76:	e9c1 3002 	strd	r3, r0, [r1, #8]
  Capabilities->MagMaxFS     = 0;
  Capabilities->GyroMaxOdr   = 0.0f;
 8005f7a:	4b02      	ldr	r3, [pc, #8]	; (8005f84 <LSM303AGR_ACC_GetCapabilities+0x18>)
  Capabilities->MagMaxFS     = 0;
 8005f7c:	6108      	str	r0, [r1, #16]
  Capabilities->AccMaxOdr    = 400.0f;
 8005f7e:	e9c1 3005 	strd	r3, r0, [r1, #20]
  Capabilities->MagMaxOdr    = 0.0f;
  return LSM303AGR_OK;
}
 8005f82:	4770      	bx	lr
 8005f84:	43c80000 	.word	0x43c80000

08005f88 <LSM303AGR_MAG_GetCapabilities>:
  (void)(pObj);

  Capabilities->Acc          = 0;
  Capabilities->Gyro         = 0;
  Capabilities->Magneto      = 1;
  Capabilities->LowPower     = 0;
 8005f88:	2000      	movs	r0, #0
 8005f8a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005f8e:	e9c1 3000 	strd	r3, r0, [r1]
  Capabilities->GyroMaxFS    = 0;
  Capabilities->AccMaxFS     = 0;
 8005f92:	2332      	movs	r3, #50	; 0x32
  Capabilities->MagMaxFS     = 50;
 8005f94:	e9c1 3003 	strd	r3, r0, [r1, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
  Capabilities->AccMaxOdr    = 0.0f;
 8005f98:	4b02      	ldr	r3, [pc, #8]	; (8005fa4 <LSM303AGR_MAG_GetCapabilities+0x1c>)
  Capabilities->GyroMaxFS    = 0;
 8005f9a:	6088      	str	r0, [r1, #8]
  Capabilities->GyroMaxOdr   = 0.0f;
 8005f9c:	6148      	str	r0, [r1, #20]
  Capabilities->AccMaxOdr    = 0.0f;
 8005f9e:	618b      	str	r3, [r1, #24]
  Capabilities->MagMaxOdr    = 100.0f;
  return LSM303AGR_OK;
}
 8005fa0:	4770      	bx	lr
 8005fa2:	bf00      	nop
 8005fa4:	42c80000 	.word	0x42c80000

08005fa8 <LSM303AGR_MAG_GetSensitivity>:
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetSensitivity(LSM303AGR_MAG_Object_t *pObj, float *Sensitivity)
{
  *Sensitivity = LSM303AGR_MAG_SENSITIVITY_FS_50GAUSS;
 8005fa8:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8005fac:	600b      	str	r3, [r1, #0]

  return LSM303AGR_OK;
}
 8005fae:	2000      	movs	r0, #0
 8005fb0:	4770      	bx	lr

08005fb2 <LSM303AGR_MAG_GetFullScale>:
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetFullScale(LSM303AGR_MAG_Object_t *pObj, int32_t *FullScale)
{
  *FullScale = 50;
 8005fb2:	2332      	movs	r3, #50	; 0x32
 8005fb4:	600b      	str	r3, [r1, #0]

  return LSM303AGR_OK;
}
 8005fb6:	2000      	movs	r0, #0
 8005fb8:	4770      	bx	lr

08005fba <LSM303AGR_MAG_SetFullScale>:
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_SetFullScale(LSM303AGR_MAG_Object_t *pObj, int32_t FullScale)
{
  return LSM303AGR_OK;
}
 8005fba:	2000      	movs	r0, #0
 8005fbc:	4770      	bx	lr

08005fbe <LSM303AGR_ACC_Init>:
{
 8005fbe:	b538      	push	{r3, r4, r5, lr}
  if (lsm303agr_xl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 8005fc0:	f100 041c 	add.w	r4, r0, #28
 8005fc4:	2101      	movs	r1, #1
{
 8005fc6:	4605      	mov	r5, r0
  if (lsm303agr_xl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 8005fc8:	4620      	mov	r0, r4
 8005fca:	f000 fc65 	bl	8006898 <lsm303agr_xl_block_data_update_set>
 8005fce:	4601      	mov	r1, r0
 8005fd0:	b110      	cbz	r0, 8005fd8 <LSM303AGR_ACC_Init+0x1a>
    return LSM303AGR_ERROR;
 8005fd2:	f04f 30ff 	mov.w	r0, #4294967295
}
 8005fd6:	bd38      	pop	{r3, r4, r5, pc}
  if (lsm303agr_xl_fifo_mode_set(&(pObj->Ctx), LSM303AGR_BYPASS_MODE) != LSM303AGR_OK)
 8005fd8:	4620      	mov	r0, r4
 8005fda:	f000 fced 	bl	80069b8 <lsm303agr_xl_fifo_mode_set>
 8005fde:	4601      	mov	r1, r0
 8005fe0:	2800      	cmp	r0, #0
 8005fe2:	d1f6      	bne.n	8005fd2 <LSM303AGR_ACC_Init+0x14>
  pObj->acc_odr = LSM303AGR_XL_ODR_100Hz;
 8005fe4:	2305      	movs	r3, #5
 8005fe6:	f885 302a 	strb.w	r3, [r5, #42]	; 0x2a
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), LSM303AGR_XL_POWER_DOWN) != LSM303AGR_OK)
 8005fea:	4620      	mov	r0, r4
 8005fec:	f000 fc0c 	bl	8006808 <lsm303agr_xl_data_rate_set>
 8005ff0:	4601      	mov	r1, r0
 8005ff2:	2800      	cmp	r0, #0
 8005ff4:	d1ed      	bne.n	8005fd2 <LSM303AGR_ACC_Init+0x14>
  if (lsm303agr_xl_full_scale_set(&(pObj->Ctx), LSM303AGR_2g) != LSM303AGR_OK)
 8005ff6:	4620      	mov	r0, r4
 8005ff8:	f000 fc2a 	bl	8006850 <lsm303agr_xl_full_scale_set>
 8005ffc:	2800      	cmp	r0, #0
 8005ffe:	d1e8      	bne.n	8005fd2 <LSM303AGR_ACC_Init+0x14>
  pObj->is_initialized = 1;
 8006000:	2301      	movs	r3, #1
 8006002:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
  return LSM303AGR_OK;
 8006006:	e7e6      	b.n	8005fd6 <LSM303AGR_ACC_Init+0x18>

08006008 <LSM303AGR_ACC_SetFullScale>:
           : (FullScale <= 4) ? LSM303AGR_4g
 8006008:	2902      	cmp	r1, #2
{
 800600a:	b508      	push	{r3, lr}
           : (FullScale <= 4) ? LSM303AGR_4g
 800600c:	dd0d      	ble.n	800602a <LSM303AGR_ACC_SetFullScale+0x22>
 800600e:	2904      	cmp	r1, #4
 8006010:	dd0d      	ble.n	800602e <LSM303AGR_ACC_SetFullScale+0x26>
 8006012:	2909      	cmp	r1, #9
 8006014:	bfb4      	ite	lt
 8006016:	2102      	movlt	r1, #2
 8006018:	2103      	movge	r1, #3
  if (lsm303agr_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM303AGR_OK)
 800601a:	301c      	adds	r0, #28
 800601c:	f000 fc18 	bl	8006850 <lsm303agr_xl_full_scale_set>
 8006020:	3000      	adds	r0, #0
 8006022:	bf18      	it	ne
 8006024:	2001      	movne	r0, #1
}
 8006026:	4240      	negs	r0, r0
 8006028:	bd08      	pop	{r3, pc}
           : (FullScale <= 4) ? LSM303AGR_4g
 800602a:	2100      	movs	r1, #0
 800602c:	e7f5      	b.n	800601a <LSM303AGR_ACC_SetFullScale+0x12>
 800602e:	2101      	movs	r1, #1
 8006030:	e7f3      	b.n	800601a <LSM303AGR_ACC_SetFullScale+0x12>

08006032 <LSM303AGR_ACC_ReadID>:
{
 8006032:	b508      	push	{r3, lr}
  if (lsm303agr_xl_device_id_get(&(pObj->Ctx), Id) != LSM303AGR_OK)
 8006034:	301c      	adds	r0, #28
 8006036:	f000 fc9f 	bl	8006978 <lsm303agr_xl_device_id_get>
 800603a:	3000      	adds	r0, #0
 800603c:	bf18      	it	ne
 800603e:	2001      	movne	r0, #1
}
 8006040:	4240      	negs	r0, r0
 8006042:	bd08      	pop	{r3, pc}

08006044 <LSM303AGR_ACC_GetOutputDataRate>:
{
 8006044:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 8006046:	f100 051c 	add.w	r5, r0, #28
{
 800604a:	460c      	mov	r4, r1
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 800604c:	4628      	mov	r0, r5
 800604e:	f10d 0106 	add.w	r1, sp, #6
 8006052:	f000 fbb9 	bl	80067c8 <lsm303agr_xl_operating_mode_get>
 8006056:	b110      	cbz	r0, 800605e <LSM303AGR_ACC_GetOutputDataRate+0x1a>
        ret = LSM303AGR_ERROR;
 8006058:	f04f 30ff 	mov.w	r0, #4294967295
 800605c:	e017      	b.n	800608e <LSM303AGR_ACC_GetOutputDataRate+0x4a>
  if (lsm303agr_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM303AGR_OK)
 800605e:	f10d 0107 	add.w	r1, sp, #7
 8006062:	4628      	mov	r0, r5
 8006064:	f000 fbe6 	bl	8006834 <lsm303agr_xl_data_rate_get>
 8006068:	2800      	cmp	r0, #0
 800606a:	d1f5      	bne.n	8006058 <LSM303AGR_ACC_GetOutputDataRate+0x14>
  if (op_mode == LSM303AGR_LP_8bit) /* LP mode */
 800606c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8006070:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006074:	2a02      	cmp	r2, #2
 8006076:	d11f      	bne.n	80060b8 <LSM303AGR_ACC_GetOutputDataRate+0x74>
    switch (odr_low_level)
 8006078:	2b09      	cmp	r3, #9
 800607a:	d8ed      	bhi.n	8006058 <LSM303AGR_ACC_GetOutputDataRate+0x14>
 800607c:	e8df f003 	tbb	[pc, r3]
 8006080:	0e0c0905 	.word	0x0e0c0905
 8006084:	16141210 	.word	0x16141210
 8006088:	1a18      	.short	0x1a18
        *Odr = 0.0f;
 800608a:	2300      	movs	r3, #0
        *Odr = 1344.0f;
 800608c:	6023      	str	r3, [r4, #0]
}
 800608e:	b003      	add	sp, #12
 8006090:	bd30      	pop	{r4, r5, pc}
        *Odr = 1.0f;
 8006092:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8006096:	e7f9      	b.n	800608c <LSM303AGR_ACC_GetOutputDataRate+0x48>
        *Odr = 10.0f;
 8006098:	4b15      	ldr	r3, [pc, #84]	; (80060f0 <LSM303AGR_ACC_GetOutputDataRate+0xac>)
 800609a:	e7f7      	b.n	800608c <LSM303AGR_ACC_GetOutputDataRate+0x48>
        *Odr = 25.0f;
 800609c:	4b15      	ldr	r3, [pc, #84]	; (80060f4 <LSM303AGR_ACC_GetOutputDataRate+0xb0>)
 800609e:	e7f5      	b.n	800608c <LSM303AGR_ACC_GetOutputDataRate+0x48>
        *Odr = 50.0f;
 80060a0:	4b15      	ldr	r3, [pc, #84]	; (80060f8 <LSM303AGR_ACC_GetOutputDataRate+0xb4>)
 80060a2:	e7f3      	b.n	800608c <LSM303AGR_ACC_GetOutputDataRate+0x48>
        *Odr = 100.0f;
 80060a4:	4b15      	ldr	r3, [pc, #84]	; (80060fc <LSM303AGR_ACC_GetOutputDataRate+0xb8>)
 80060a6:	e7f1      	b.n	800608c <LSM303AGR_ACC_GetOutputDataRate+0x48>
        *Odr = 200.0f;
 80060a8:	4b15      	ldr	r3, [pc, #84]	; (8006100 <LSM303AGR_ACC_GetOutputDataRate+0xbc>)
 80060aa:	e7ef      	b.n	800608c <LSM303AGR_ACC_GetOutputDataRate+0x48>
        *Odr = 400.0f;
 80060ac:	4b15      	ldr	r3, [pc, #84]	; (8006104 <LSM303AGR_ACC_GetOutputDataRate+0xc0>)
 80060ae:	e7ed      	b.n	800608c <LSM303AGR_ACC_GetOutputDataRate+0x48>
        *Odr = 1620.0f;
 80060b0:	4b15      	ldr	r3, [pc, #84]	; (8006108 <LSM303AGR_ACC_GetOutputDataRate+0xc4>)
 80060b2:	e7eb      	b.n	800608c <LSM303AGR_ACC_GetOutputDataRate+0x48>
        *Odr = 5376.0f;
 80060b4:	4b15      	ldr	r3, [pc, #84]	; (800610c <LSM303AGR_ACC_GetOutputDataRate+0xc8>)
 80060b6:	e7e9      	b.n	800608c <LSM303AGR_ACC_GetOutputDataRate+0x48>
    switch (odr_low_level)
 80060b8:	2b09      	cmp	r3, #9
 80060ba:	d8cd      	bhi.n	8006058 <LSM303AGR_ACC_GetOutputDataRate+0x14>
 80060bc:	a201      	add	r2, pc, #4	; (adr r2, 80060c4 <LSM303AGR_ACC_GetOutputDataRate+0x80>)
 80060be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060c2:	bf00      	nop
 80060c4:	0800608b 	.word	0x0800608b
 80060c8:	08006093 	.word	0x08006093
 80060cc:	08006099 	.word	0x08006099
 80060d0:	0800609d 	.word	0x0800609d
 80060d4:	080060a1 	.word	0x080060a1
 80060d8:	080060a5 	.word	0x080060a5
 80060dc:	080060a9 	.word	0x080060a9
 80060e0:	080060ad 	.word	0x080060ad
 80060e4:	08006059 	.word	0x08006059
 80060e8:	080060ed 	.word	0x080060ed
        *Odr = 1344.0f;
 80060ec:	4b08      	ldr	r3, [pc, #32]	; (8006110 <LSM303AGR_ACC_GetOutputDataRate+0xcc>)
 80060ee:	e7cd      	b.n	800608c <LSM303AGR_ACC_GetOutputDataRate+0x48>
 80060f0:	41200000 	.word	0x41200000
 80060f4:	41c80000 	.word	0x41c80000
 80060f8:	42480000 	.word	0x42480000
 80060fc:	42c80000 	.word	0x42c80000
 8006100:	43480000 	.word	0x43480000
 8006104:	43c80000 	.word	0x43c80000
 8006108:	44ca8000 	.word	0x44ca8000
 800610c:	45a80000 	.word	0x45a80000
 8006110:	44a80000 	.word	0x44a80000

08006114 <LSM303AGR_ACC_GetFullScale>:
{
 8006114:	b513      	push	{r0, r1, r4, lr}
 8006116:	460c      	mov	r4, r1
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM303AGR_OK)
 8006118:	301c      	adds	r0, #28
 800611a:	f10d 0107 	add.w	r1, sp, #7
 800611e:	f000 fbad 	bl	800687c <lsm303agr_xl_full_scale_get>
 8006122:	b988      	cbnz	r0, 8006148 <LSM303AGR_ACC_GetFullScale+0x34>
  switch (fs_low_level)
 8006124:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006128:	2b03      	cmp	r3, #3
 800612a:	d80d      	bhi.n	8006148 <LSM303AGR_ACC_GetFullScale+0x34>
 800612c:	e8df f003 	tbb	[pc, r3]
 8006130:	0a080602 	.word	0x0a080602
      *FullScale =  2;
 8006134:	2302      	movs	r3, #2
      *FullScale = 16;
 8006136:	6023      	str	r3, [r4, #0]
}
 8006138:	b002      	add	sp, #8
 800613a:	bd10      	pop	{r4, pc}
      *FullScale =  4;
 800613c:	2304      	movs	r3, #4
 800613e:	e7fa      	b.n	8006136 <LSM303AGR_ACC_GetFullScale+0x22>
      *FullScale =  8;
 8006140:	2308      	movs	r3, #8
 8006142:	e7f8      	b.n	8006136 <LSM303AGR_ACC_GetFullScale+0x22>
      *FullScale = 16;
 8006144:	2310      	movs	r3, #16
 8006146:	e7f6      	b.n	8006136 <LSM303AGR_ACC_GetFullScale+0x22>
      ret = LSM303AGR_ERROR;
 8006148:	f04f 30ff 	mov.w	r0, #4294967295
 800614c:	e7f4      	b.n	8006138 <LSM303AGR_ACC_GetFullScale+0x24>

0800614e <LSM303AGR_ACC_GetAxesRaw>:
{
 800614e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 8006150:	f100 061c 	add.w	r6, r0, #28
{
 8006154:	460d      	mov	r5, r1
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 8006156:	4630      	mov	r0, r6
 8006158:	f10d 0107 	add.w	r1, sp, #7
 800615c:	f000 fb34 	bl	80067c8 <lsm303agr_xl_operating_mode_get>
 8006160:	b110      	cbz	r0, 8006168 <LSM303AGR_ACC_GetAxesRaw+0x1a>
      ret = LSM303AGR_ERROR;
 8006162:	f04f 30ff 	mov.w	r0, #4294967295
 8006166:	e01d      	b.n	80061a4 <LSM303AGR_ACC_GetAxesRaw+0x56>
  switch (op_mode)
 8006168:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800616c:	2b01      	cmp	r3, #1
 800616e:	d01b      	beq.n	80061a8 <LSM303AGR_ACC_GetAxesRaw+0x5a>
 8006170:	d31c      	bcc.n	80061ac <LSM303AGR_ACC_GetAxesRaw+0x5e>
 8006172:	2b02      	cmp	r3, #2
 8006174:	d1f5      	bne.n	8006162 <LSM303AGR_ACC_GetAxesRaw+0x14>
      divisor = 256;
 8006176:	f44f 7480 	mov.w	r4, #256	; 0x100
  if (lsm303agr_acceleration_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM303AGR_OK)
 800617a:	a902      	add	r1, sp, #8
 800617c:	4630      	mov	r0, r6
 800617e:	f000 fba1 	bl	80068c4 <lsm303agr_acceleration_raw_get>
 8006182:	2800      	cmp	r0, #0
 8006184:	d1ed      	bne.n	8006162 <LSM303AGR_ACC_GetAxesRaw+0x14>
  Value->x = (data_raw.i16bit[0] / divisor);
 8006186:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 800618a:	fb93 f3f4 	sdiv	r3, r3, r4
 800618e:	802b      	strh	r3, [r5, #0]
  Value->y = (data_raw.i16bit[1] / divisor);
 8006190:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8006194:	fb93 f3f4 	sdiv	r3, r3, r4
 8006198:	806b      	strh	r3, [r5, #2]
  Value->z = (data_raw.i16bit[2] / divisor);
 800619a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800619e:	fb93 f4f4 	sdiv	r4, r3, r4
 80061a2:	80ac      	strh	r4, [r5, #4]
}
 80061a4:	b004      	add	sp, #16
 80061a6:	bd70      	pop	{r4, r5, r6, pc}
      divisor = 64;
 80061a8:	2440      	movs	r4, #64	; 0x40
 80061aa:	e7e6      	b.n	800617a <LSM303AGR_ACC_GetAxesRaw+0x2c>
      divisor = 16;
 80061ac:	2410      	movs	r4, #16
 80061ae:	e7e4      	b.n	800617a <LSM303AGR_ACC_GetAxesRaw+0x2c>

080061b0 <LSM303AGR_MAG_SetOutputDataRate>:
            : (Odr <= 20.000f) ? LSM303AGR_MG_ODR_20Hz
 80061b0:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 80061b4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80061b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
 80061bc:	b508      	push	{r3, lr}
            : (Odr <= 20.000f) ? LSM303AGR_MG_ODR_20Hz
 80061be:	d917      	bls.n	80061f0 <LSM303AGR_MAG_SetOutputDataRate+0x40>
 80061c0:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 80061c4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80061c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061cc:	d912      	bls.n	80061f4 <LSM303AGR_MAG_SetOutputDataRate+0x44>
 80061ce:	eddf 7a0a 	vldr	s15, [pc, #40]	; 80061f8 <LSM303AGR_MAG_SetOutputDataRate+0x48>
 80061d2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80061d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061da:	bf94      	ite	ls
 80061dc:	2102      	movls	r1, #2
 80061de:	2103      	movhi	r1, #3
  if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), new_odr) != LSM303AGR_OK)
 80061e0:	301c      	adds	r0, #28
 80061e2:	f000 fb8a 	bl	80068fa <lsm303agr_mag_data_rate_set>
 80061e6:	3000      	adds	r0, #0
 80061e8:	bf18      	it	ne
 80061ea:	2001      	movne	r0, #1
}
 80061ec:	4240      	negs	r0, r0
 80061ee:	bd08      	pop	{r3, pc}
            : (Odr <= 20.000f) ? LSM303AGR_MG_ODR_20Hz
 80061f0:	2100      	movs	r1, #0
 80061f2:	e7f5      	b.n	80061e0 <LSM303AGR_MAG_SetOutputDataRate+0x30>
 80061f4:	2101      	movs	r1, #1
 80061f6:	e7f3      	b.n	80061e0 <LSM303AGR_MAG_SetOutputDataRate+0x30>
 80061f8:	42480000 	.word	0x42480000

080061fc <LSM303AGR_MAG_Init>:
{
 80061fc:	b538      	push	{r3, r4, r5, lr}
  if (lsm303agr_mag_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 80061fe:	f100 041c 	add.w	r4, r0, #28
{
 8006202:	4605      	mov	r5, r0
  if (lsm303agr_mag_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 8006204:	2101      	movs	r1, #1
 8006206:	4620      	mov	r0, r4
 8006208:	f000 fb9b 	bl	8006942 <lsm303agr_mag_block_data_update_set>
 800620c:	b110      	cbz	r0, 8006214 <LSM303AGR_MAG_Init+0x18>
    return LSM303AGR_ERROR;
 800620e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8006212:	bd38      	pop	{r3, r4, r5, pc}
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK)
 8006214:	2102      	movs	r1, #2
 8006216:	4620      	mov	r0, r4
 8006218:	f000 fb59 	bl	80068ce <lsm303agr_mag_operating_mode_set>
 800621c:	2800      	cmp	r0, #0
 800621e:	d1f6      	bne.n	800620e <LSM303AGR_MAG_Init+0x12>
  if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), LSM303AGR_MG_ODR_100Hz) != LSM303AGR_OK)
 8006220:	2103      	movs	r1, #3
 8006222:	4620      	mov	r0, r4
 8006224:	f000 fb69 	bl	80068fa <lsm303agr_mag_data_rate_set>
 8006228:	4601      	mov	r1, r0
 800622a:	2800      	cmp	r0, #0
 800622c:	d1ef      	bne.n	800620e <LSM303AGR_MAG_Init+0x12>
  if (lsm303agr_mag_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LSM303AGR_OK)
 800622e:	4620      	mov	r0, r4
 8006230:	f000 fbac 	bl	800698c <lsm303agr_mag_self_test_set>
 8006234:	2800      	cmp	r0, #0
 8006236:	d1ea      	bne.n	800620e <LSM303AGR_MAG_Init+0x12>
  pObj->is_initialized = 1;
 8006238:	2301      	movs	r3, #1
 800623a:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
  return LSM303AGR_OK;
 800623e:	e7e8      	b.n	8006212 <LSM303AGR_MAG_Init+0x16>

08006240 <LSM303AGR_MAG_ReadID>:
{
 8006240:	b508      	push	{r3, lr}
  if (lsm303agr_mag_device_id_get(&(pObj->Ctx), Id) != LSM303AGR_OK)
 8006242:	301c      	adds	r0, #28
 8006244:	f000 fb9d 	bl	8006982 <lsm303agr_mag_device_id_get>
 8006248:	3000      	adds	r0, #0
 800624a:	bf18      	it	ne
 800624c:	2001      	movne	r0, #1
}
 800624e:	4240      	negs	r0, r0
 8006250:	bd08      	pop	{r3, pc}
	...

08006254 <LSM303AGR_MAG_GetOutputDataRate>:
{
 8006254:	b513      	push	{r0, r1, r4, lr}
 8006256:	460c      	mov	r4, r1
  if (lsm303agr_mag_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM303AGR_OK)
 8006258:	301c      	adds	r0, #28
 800625a:	f10d 0107 	add.w	r1, sp, #7
 800625e:	f000 fb62 	bl	8006926 <lsm303agr_mag_data_rate_get>
 8006262:	b988      	cbnz	r0, 8006288 <LSM303AGR_MAG_GetOutputDataRate+0x34>
  switch (odr_low_level)
 8006264:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006268:	2b03      	cmp	r3, #3
 800626a:	d80d      	bhi.n	8006288 <LSM303AGR_MAG_GetOutputDataRate+0x34>
 800626c:	e8df f003 	tbb	[pc, r3]
 8006270:	0a080602 	.word	0x0a080602
      *Odr = 10.0f;
 8006274:	4b06      	ldr	r3, [pc, #24]	; (8006290 <LSM303AGR_MAG_GetOutputDataRate+0x3c>)
      *Odr = 100.0f;
 8006276:	6023      	str	r3, [r4, #0]
}
 8006278:	b002      	add	sp, #8
 800627a:	bd10      	pop	{r4, pc}
      *Odr = 20.0f;
 800627c:	4b05      	ldr	r3, [pc, #20]	; (8006294 <LSM303AGR_MAG_GetOutputDataRate+0x40>)
 800627e:	e7fa      	b.n	8006276 <LSM303AGR_MAG_GetOutputDataRate+0x22>
      *Odr = 50.0f;
 8006280:	4b05      	ldr	r3, [pc, #20]	; (8006298 <LSM303AGR_MAG_GetOutputDataRate+0x44>)
 8006282:	e7f8      	b.n	8006276 <LSM303AGR_MAG_GetOutputDataRate+0x22>
      *Odr = 100.0f;
 8006284:	4b05      	ldr	r3, [pc, #20]	; (800629c <LSM303AGR_MAG_GetOutputDataRate+0x48>)
 8006286:	e7f6      	b.n	8006276 <LSM303AGR_MAG_GetOutputDataRate+0x22>
      ret = LSM303AGR_ERROR;
 8006288:	f04f 30ff 	mov.w	r0, #4294967295
 800628c:	e7f4      	b.n	8006278 <LSM303AGR_MAG_GetOutputDataRate+0x24>
 800628e:	bf00      	nop
 8006290:	41200000 	.word	0x41200000
 8006294:	41a00000 	.word	0x41a00000
 8006298:	42480000 	.word	0x42480000
 800629c:	42c80000 	.word	0x42c80000

080062a0 <LSM303AGR_MAG_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetAxesRaw(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_AxesRaw_t *Value)
{
 80062a0:	b513      	push	{r0, r1, r4, lr}
 80062a2:	460c      	mov	r4, r1
  axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm303agr_magnetic_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM303AGR_OK)
 80062a4:	301c      	adds	r0, #28
 80062a6:	4669      	mov	r1, sp
 80062a8:	f000 fb61 	bl	800696e <lsm303agr_magnetic_raw_get>
 80062ac:	b950      	cbnz	r0, 80062c4 <LSM303AGR_MAG_GetAxesRaw+0x24>
  {
    return LSM303AGR_ERROR;
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 80062ae:	f8bd 3000 	ldrh.w	r3, [sp]
 80062b2:	8023      	strh	r3, [r4, #0]
  Value->y = data_raw.i16bit[1];
 80062b4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80062b8:	8063      	strh	r3, [r4, #2]
  Value->z = data_raw.i16bit[2];
 80062ba:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80062be:	80a3      	strh	r3, [r4, #4]

  return LSM303AGR_OK;
}
 80062c0:	b002      	add	sp, #8
 80062c2:	bd10      	pop	{r4, pc}
    return LSM303AGR_ERROR;
 80062c4:	f04f 30ff 	mov.w	r0, #4294967295
 80062c8:	e7fa      	b.n	80062c0 <LSM303AGR_MAG_GetAxesRaw+0x20>

080062ca <LSM303AGR_MAG_GetAxes>:
 * @param  pObj the device pObj
 * @param  MagneticField pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetAxes(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_Axes_t *MagneticField)
{
 80062ca:	b513      	push	{r0, r1, r4, lr}
 80062cc:	460c      	mov	r4, r1
  axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm303agr_magnetic_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM303AGR_OK)
 80062ce:	301c      	adds	r0, #28
 80062d0:	4669      	mov	r1, sp
 80062d2:	f000 fb4c 	bl	800696e <lsm303agr_magnetic_raw_get>
 80062d6:	bb38      	cbnz	r0, 8006328 <LSM303AGR_MAG_GetAxes+0x5e>

  /* Get LSM303AGR actual sensitivity. */
  (void)LSM303AGR_MAG_GetSensitivity(pObj, &sensitivity);

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80062d8:	f9bd 3000 	ldrsh.w	r3, [sp]
 80062dc:	ee07 3a10 	vmov	s14, r3
 80062e0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80062e4:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80062e8:	ee27 7a26 	vmul.f32	s14, s14, s13
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80062ec:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80062f0:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80062f4:	ed84 7a00 	vstr	s14, [r4]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80062f8:	ee07 3a10 	vmov	s14, r3
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80062fc:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8006300:	ee07 3a90 	vmov	s15, r3
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8006304:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8006308:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 800630c:	ee27 7a26 	vmul.f32	s14, s14, s13
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8006310:	ee67 7aa6 	vmul.f32	s15, s15, s13
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8006314:	eebd 7ac7 	vcvt.s32.f32	s14, s14
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8006318:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 800631c:	ed84 7a01 	vstr	s14, [r4, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8006320:	edc4 7a02 	vstr	s15, [r4, #8]

  return LSM303AGR_OK;
}
 8006324:	b002      	add	sp, #8
 8006326:	bd10      	pop	{r4, pc}
    return LSM303AGR_ERROR;
 8006328:	f04f 30ff 	mov.w	r0, #4294967295
 800632c:	e7fa      	b.n	8006324 <LSM303AGR_MAG_GetAxes+0x5a>
	...

08006330 <LSM303AGR_ACC_SetOutputDataRate>:
{
 8006330:	b508      	push	{r3, lr}
  if (pObj->acc_is_enabled == 1U)
 8006332:	f890 1029 	ldrb.w	r1, [r0, #41]	; 0x29
 8006336:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800633a:	2901      	cmp	r1, #1
static int32_t LSM303AGR_ACC_SetOutputDataRate_When_Enabled(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
  lsm303agr_odr_a_t new_odr;

  new_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
            : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
 800633c:	eeb4 0ae7 	vcmpe.f32	s0, s15
  if (pObj->acc_is_enabled == 1U)
 8006340:	d137      	bne.n	80063b2 <LSM303AGR_ACC_SetOutputDataRate+0x82>
            : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
 8006342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006346:	d924      	bls.n	8006392 <LSM303AGR_ACC_SetOutputDataRate+0x62>
 8006348:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 800634c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8006350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006354:	d925      	bls.n	80063a2 <LSM303AGR_ACC_SetOutputDataRate+0x72>
 8006356:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
 800635a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800635e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006362:	d920      	bls.n	80063a6 <LSM303AGR_ACC_SetOutputDataRate+0x76>
 8006364:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8006420 <LSM303AGR_ACC_SetOutputDataRate+0xf0>
 8006368:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800636c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006370:	d91b      	bls.n	80063aa <LSM303AGR_ACC_SetOutputDataRate+0x7a>
 8006372:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8006424 <LSM303AGR_ACC_SetOutputDataRate+0xf4>
 8006376:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800637a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800637e:	d916      	bls.n	80063ae <LSM303AGR_ACC_SetOutputDataRate+0x7e>
 8006380:	eddf 7a29 	vldr	s15, [pc, #164]	; 8006428 <LSM303AGR_ACC_SetOutputDataRate+0xf8>
 8006384:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8006388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800638c:	bf94      	ite	ls
 800638e:	2106      	movls	r1, #6
 8006390:	2107      	movhi	r1, #7
            : (Odr <=  100.0f) ? LSM303AGR_XL_ODR_100Hz
            : (Odr <=  200.0f) ? LSM303AGR_XL_ODR_200Hz
            :                    LSM303AGR_XL_ODR_400Hz;

  /* Output data rate selection. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM303AGR_OK)
 8006392:	301c      	adds	r0, #28
 8006394:	f000 fa38 	bl	8006808 <lsm303agr_xl_data_rate_set>
 8006398:	3000      	adds	r0, #0
 800639a:	bf18      	it	ne
 800639c:	2001      	movne	r0, #1
 800639e:	4240      	negs	r0, r0
}
 80063a0:	bd08      	pop	{r3, pc}
            : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
 80063a2:	2102      	movs	r1, #2
 80063a4:	e7f5      	b.n	8006392 <LSM303AGR_ACC_SetOutputDataRate+0x62>
 80063a6:	2103      	movs	r1, #3
 80063a8:	e7f3      	b.n	8006392 <LSM303AGR_ACC_SetOutputDataRate+0x62>
 80063aa:	2104      	movs	r1, #4
 80063ac:	e7f1      	b.n	8006392 <LSM303AGR_ACC_SetOutputDataRate+0x62>
 80063ae:	2105      	movs	r1, #5
 80063b0:	e7ef      	b.n	8006392 <LSM303AGR_ACC_SetOutputDataRate+0x62>
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_SetOutputDataRate_When_Disabled(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
  pObj->acc_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
                  : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
 80063b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063b6:	d928      	bls.n	800640a <LSM303AGR_ACC_SetOutputDataRate+0xda>
 80063b8:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 80063bc:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80063c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063c4:	d923      	bls.n	800640e <LSM303AGR_ACC_SetOutputDataRate+0xde>
 80063c6:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
 80063ca:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80063ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063d2:	d91e      	bls.n	8006412 <LSM303AGR_ACC_SetOutputDataRate+0xe2>
 80063d4:	eddf 7a12 	vldr	s15, [pc, #72]	; 8006420 <LSM303AGR_ACC_SetOutputDataRate+0xf0>
 80063d8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80063dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063e0:	d919      	bls.n	8006416 <LSM303AGR_ACC_SetOutputDataRate+0xe6>
 80063e2:	eddf 7a10 	vldr	s15, [pc, #64]	; 8006424 <LSM303AGR_ACC_SetOutputDataRate+0xf4>
 80063e6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80063ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063ee:	d914      	bls.n	800641a <LSM303AGR_ACC_SetOutputDataRate+0xea>
 80063f0:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8006428 <LSM303AGR_ACC_SetOutputDataRate+0xf8>
 80063f4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80063f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063fc:	bf94      	ite	ls
 80063fe:	2306      	movls	r3, #6
 8006400:	2307      	movhi	r3, #7
  pObj->acc_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
 8006402:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
    return LSM303AGR_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8006406:	2000      	movs	r0, #0
 8006408:	e7ca      	b.n	80063a0 <LSM303AGR_ACC_SetOutputDataRate+0x70>
                  : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
 800640a:	2301      	movs	r3, #1
 800640c:	e7f9      	b.n	8006402 <LSM303AGR_ACC_SetOutputDataRate+0xd2>
 800640e:	2302      	movs	r3, #2
 8006410:	e7f7      	b.n	8006402 <LSM303AGR_ACC_SetOutputDataRate+0xd2>
 8006412:	2303      	movs	r3, #3
 8006414:	e7f5      	b.n	8006402 <LSM303AGR_ACC_SetOutputDataRate+0xd2>
 8006416:	2304      	movs	r3, #4
 8006418:	e7f3      	b.n	8006402 <LSM303AGR_ACC_SetOutputDataRate+0xd2>
 800641a:	2305      	movs	r3, #5
 800641c:	e7f1      	b.n	8006402 <LSM303AGR_ACC_SetOutputDataRate+0xd2>
 800641e:	bf00      	nop
 8006420:	42480000 	.word	0x42480000
 8006424:	42c80000 	.word	0x42c80000
 8006428:	43480000 	.word	0x43480000

0800642c <ReadAccRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800642c:	b430      	push	{r4, r5}
 800642e:	4604      	mov	r4, r0
 8006430:	6945      	ldr	r5, [r0, #20]
  LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8006432:	68a4      	ldr	r4, [r4, #8]
 8006434:	7b00      	ldrb	r0, [r0, #12]
 8006436:	b924      	cbnz	r4, 8006442 <ReadAccRegWrap+0x16>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8006438:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800643c:	46ac      	mov	ip, r5
  }
}
 800643e:	bc30      	pop	{r4, r5}
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8006440:	4760      	bx	ip
 8006442:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8006446:	e7f9      	b.n	800643c <ReadAccRegWrap+0x10>

08006448 <WriteAccRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8006448:	b430      	push	{r4, r5}
 800644a:	4604      	mov	r4, r0
 800644c:	6905      	ldr	r5, [r0, #16]
  LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 800644e:	68a4      	ldr	r4, [r4, #8]
 8006450:	7b00      	ldrb	r0, [r0, #12]
 8006452:	b924      	cbnz	r4, 800645e <WriteAccRegWrap+0x16>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8006454:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8006458:	46ac      	mov	ip, r5
  }
}
 800645a:	bc30      	pop	{r4, r5}
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800645c:	4760      	bx	ip
 800645e:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8006462:	e7f9      	b.n	8006458 <WriteAccRegWrap+0x10>

08006464 <ReadMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8006464:	b430      	push	{r4, r5}
 8006466:	4604      	mov	r4, r0
 8006468:	6945      	ldr	r5, [r0, #20]
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 800646a:	68a4      	ldr	r4, [r4, #8]
 800646c:	7b00      	ldrb	r0, [r0, #12]
 800646e:	b924      	cbnz	r4, 800647a <ReadMagRegWrap+0x16>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8006470:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8006474:	46ac      	mov	ip, r5
  }
}
 8006476:	bc30      	pop	{r4, r5}
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8006478:	4760      	bx	ip
 800647a:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800647e:	e7f9      	b.n	8006474 <ReadMagRegWrap+0x10>

08006480 <WriteMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8006480:	b430      	push	{r4, r5}
 8006482:	4604      	mov	r4, r0
 8006484:	6905      	ldr	r5, [r0, #16]
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8006486:	68a4      	ldr	r4, [r4, #8]
 8006488:	7b00      	ldrb	r0, [r0, #12]
 800648a:	b924      	cbnz	r4, 8006496 <WriteMagRegWrap+0x16>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 800648c:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8006490:	46ac      	mov	ip, r5
  }
}
 8006492:	bc30      	pop	{r4, r5}
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8006494:	4760      	bx	ip
 8006496:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800649a:	e7f9      	b.n	8006490 <WriteMagRegWrap+0x10>

0800649c <LSM303AGR_ACC_Enable>:
{
 800649c:	b510      	push	{r4, lr}
  if (pObj->acc_is_enabled == 1U)
 800649e:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 80064a2:	2b01      	cmp	r3, #1
{
 80064a4:	4604      	mov	r4, r0
  if (pObj->acc_is_enabled == 1U)
 80064a6:	d009      	beq.n	80064bc <LSM303AGR_ACC_Enable+0x20>
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM303AGR_OK)
 80064a8:	f890 102a 	ldrb.w	r1, [r0, #42]	; 0x2a
 80064ac:	301c      	adds	r0, #28
 80064ae:	f000 f9ab 	bl	8006808 <lsm303agr_xl_data_rate_set>
 80064b2:	b928      	cbnz	r0, 80064c0 <LSM303AGR_ACC_Enable+0x24>
  pObj->acc_is_enabled = 1;
 80064b4:	2301      	movs	r3, #1
 80064b6:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
}
 80064ba:	bd10      	pop	{r4, pc}
    return LSM303AGR_OK;
 80064bc:	2000      	movs	r0, #0
 80064be:	e7fc      	b.n	80064ba <LSM303AGR_ACC_Enable+0x1e>
    return LSM303AGR_ERROR;
 80064c0:	f04f 30ff 	mov.w	r0, #4294967295
 80064c4:	e7f9      	b.n	80064ba <LSM303AGR_ACC_Enable+0x1e>

080064c6 <LSM303AGR_ACC_Disable>:
{
 80064c6:	b538      	push	{r3, r4, r5, lr}
 80064c8:	4604      	mov	r4, r0
  if (pObj->acc_is_enabled == 0U)
 80064ca:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
 80064ce:	b150      	cbz	r0, 80064e6 <LSM303AGR_ACC_Disable+0x20>
  if (lsm303agr_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM303AGR_OK)
 80064d0:	f104 051c 	add.w	r5, r4, #28
 80064d4:	f104 012a 	add.w	r1, r4, #42	; 0x2a
 80064d8:	4628      	mov	r0, r5
 80064da:	f000 f9ab 	bl	8006834 <lsm303agr_xl_data_rate_get>
 80064de:	4601      	mov	r1, r0
 80064e0:	b110      	cbz	r0, 80064e8 <LSM303AGR_ACC_Disable+0x22>
    return LSM303AGR_ERROR;
 80064e2:	f04f 30ff 	mov.w	r0, #4294967295
}
 80064e6:	bd38      	pop	{r3, r4, r5, pc}
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), LSM303AGR_XL_POWER_DOWN) != LSM303AGR_OK)
 80064e8:	4628      	mov	r0, r5
 80064ea:	f000 f98d 	bl	8006808 <lsm303agr_xl_data_rate_set>
 80064ee:	2800      	cmp	r0, #0
 80064f0:	d1f7      	bne.n	80064e2 <LSM303AGR_ACC_Disable+0x1c>
  pObj->acc_is_enabled = 0;
 80064f2:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
 80064f6:	e7f6      	b.n	80064e6 <LSM303AGR_ACC_Disable+0x20>

080064f8 <LSM303AGR_ACC_DeInit>:
{
 80064f8:	b510      	push	{r4, lr}
 80064fa:	4604      	mov	r4, r0
  if (LSM303AGR_ACC_Disable(pObj) != LSM303AGR_OK)
 80064fc:	f7ff ffe3 	bl	80064c6 <LSM303AGR_ACC_Disable>
 8006500:	b920      	cbnz	r0, 800650c <LSM303AGR_ACC_DeInit+0x14>
  pObj->acc_odr = LSM303AGR_XL_POWER_DOWN;
 8006502:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
  pObj->is_initialized = 0;
 8006506:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
}
 800650a:	bd10      	pop	{r4, pc}
    return LSM303AGR_ERROR;
 800650c:	f04f 30ff 	mov.w	r0, #4294967295
 8006510:	e7fb      	b.n	800650a <LSM303AGR_ACC_DeInit+0x12>
	...

08006514 <LSM303AGR_ACC_GetSensitivity>:
{
 8006514:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 8006516:	f100 051c 	add.w	r5, r0, #28
{
 800651a:	460c      	mov	r4, r1
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 800651c:	4628      	mov	r0, r5
 800651e:	f10d 0106 	add.w	r1, sp, #6
 8006522:	f000 f951 	bl	80067c8 <lsm303agr_xl_operating_mode_get>
 8006526:	b930      	cbnz	r0, 8006536 <LSM303AGR_ACC_GetSensitivity+0x22>
  switch (op_mode)
 8006528:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800652c:	2b01      	cmp	r3, #1
 800652e:	d01c      	beq.n	800656a <LSM303AGR_ACC_GetSensitivity+0x56>
 8006530:	d304      	bcc.n	800653c <LSM303AGR_ACC_GetSensitivity+0x28>
 8006532:	2b02      	cmp	r3, #2
 8006534:	d02e      	beq.n	8006594 <LSM303AGR_ACC_GetSensitivity+0x80>
      ret = LSM303AGR_ERROR;
 8006536:	f04f 30ff 	mov.w	r0, #4294967295
 800653a:	e010      	b.n	800655e <LSM303AGR_ACC_GetSensitivity+0x4a>
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 800653c:	f10d 0107 	add.w	r1, sp, #7
 8006540:	4628      	mov	r0, r5
 8006542:	f000 f99b 	bl	800687c <lsm303agr_xl_full_scale_get>
 8006546:	2800      	cmp	r0, #0
 8006548:	d1f5      	bne.n	8006536 <LSM303AGR_ACC_GetSensitivity+0x22>
  switch (fullscale)
 800654a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800654e:	2b03      	cmp	r3, #3
 8006550:	d8f1      	bhi.n	8006536 <LSM303AGR_ACC_GetSensitivity+0x22>
 8006552:	e8df f003 	tbb	[pc, r3]
 8006556:	0602      	.short	0x0602
 8006558:	0819      	.short	0x0819
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_HIGH_RESOLUTION_MODE;
 800655a:	4b1a      	ldr	r3, [pc, #104]	; (80065c4 <LSM303AGR_ACC_GetSensitivity+0xb0>)
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_LOW_POWER_MODE;
 800655c:	6023      	str	r3, [r4, #0]
}
 800655e:	b003      	add	sp, #12
 8006560:	bd30      	pop	{r4, r5, pc}
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_HIGH_RESOLUTION_MODE;
 8006562:	4b19      	ldr	r3, [pc, #100]	; (80065c8 <LSM303AGR_ACC_GetSensitivity+0xb4>)
 8006564:	e7fa      	b.n	800655c <LSM303AGR_ACC_GetSensitivity+0x48>
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_HIGH_RESOLUTION_MODE;
 8006566:	4b19      	ldr	r3, [pc, #100]	; (80065cc <LSM303AGR_ACC_GetSensitivity+0xb8>)
 8006568:	e7f8      	b.n	800655c <LSM303AGR_ACC_GetSensitivity+0x48>
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 800656a:	f10d 0107 	add.w	r1, sp, #7
 800656e:	4628      	mov	r0, r5
 8006570:	f000 f984 	bl	800687c <lsm303agr_xl_full_scale_get>
 8006574:	2800      	cmp	r0, #0
 8006576:	d1de      	bne.n	8006536 <LSM303AGR_ACC_GetSensitivity+0x22>
  switch (fullscale)
 8006578:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800657c:	2b03      	cmp	r3, #3
 800657e:	d8da      	bhi.n	8006536 <LSM303AGR_ACC_GetSensitivity+0x22>
 8006580:	e8df f003 	tbb	[pc, r3]
 8006584:	06170402 	.word	0x06170402
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_NORMAL_MODE;
 8006588:	4b11      	ldr	r3, [pc, #68]	; (80065d0 <LSM303AGR_ACC_GetSensitivity+0xbc>)
 800658a:	e7e7      	b.n	800655c <LSM303AGR_ACC_GetSensitivity+0x48>
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_NORMAL_MODE;
 800658c:	4b11      	ldr	r3, [pc, #68]	; (80065d4 <LSM303AGR_ACC_GetSensitivity+0xc0>)
 800658e:	e7e5      	b.n	800655c <LSM303AGR_ACC_GetSensitivity+0x48>
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_NORMAL_MODE;
 8006590:	4b11      	ldr	r3, [pc, #68]	; (80065d8 <LSM303AGR_ACC_GetSensitivity+0xc4>)
 8006592:	e7e3      	b.n	800655c <LSM303AGR_ACC_GetSensitivity+0x48>
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 8006594:	f10d 0107 	add.w	r1, sp, #7
 8006598:	4628      	mov	r0, r5
 800659a:	f000 f96f 	bl	800687c <lsm303agr_xl_full_scale_get>
 800659e:	2800      	cmp	r0, #0
 80065a0:	d1c9      	bne.n	8006536 <LSM303AGR_ACC_GetSensitivity+0x22>
  switch (fullscale)
 80065a2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80065a6:	2b03      	cmp	r3, #3
 80065a8:	d8c5      	bhi.n	8006536 <LSM303AGR_ACC_GetSensitivity+0x22>
 80065aa:	e8df f003 	tbb	[pc, r3]
 80065ae:	0402      	.short	0x0402
 80065b0:	0806      	.short	0x0806
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_LOW_POWER_MODE;
 80065b2:	4b0a      	ldr	r3, [pc, #40]	; (80065dc <LSM303AGR_ACC_GetSensitivity+0xc8>)
 80065b4:	e7d2      	b.n	800655c <LSM303AGR_ACC_GetSensitivity+0x48>
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_LOW_POWER_MODE;
 80065b6:	4b0a      	ldr	r3, [pc, #40]	; (80065e0 <LSM303AGR_ACC_GetSensitivity+0xcc>)
 80065b8:	e7d0      	b.n	800655c <LSM303AGR_ACC_GetSensitivity+0x48>
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_LOW_POWER_MODE;
 80065ba:	4b0a      	ldr	r3, [pc, #40]	; (80065e4 <LSM303AGR_ACC_GetSensitivity+0xd0>)
 80065bc:	e7ce      	b.n	800655c <LSM303AGR_ACC_GetSensitivity+0x48>
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_LOW_POWER_MODE;
 80065be:	4b0a      	ldr	r3, [pc, #40]	; (80065e8 <LSM303AGR_ACC_GetSensitivity+0xd4>)
 80065c0:	e7cc      	b.n	800655c <LSM303AGR_ACC_GetSensitivity+0x48>
 80065c2:	bf00      	nop
 80065c4:	3f7ae148 	.word	0x3f7ae148
 80065c8:	3ff9999a 	.word	0x3ff9999a
 80065cc:	413b851f 	.word	0x413b851f
 80065d0:	4079999a 	.word	0x4079999a
 80065d4:	40fa3d71 	.word	0x40fa3d71
 80065d8:	423b999a 	.word	0x423b999a
 80065dc:	417a147b 	.word	0x417a147b
 80065e0:	41fa147b 	.word	0x41fa147b
 80065e4:	427a147b 	.word	0x427a147b
 80065e8:	433b947b 	.word	0x433b947b

080065ec <LSM303AGR_ACC_GetAxes>:
{
 80065ec:	b530      	push	{r4, r5, lr}
 80065ee:	b085      	sub	sp, #20
 80065f0:	460c      	mov	r4, r1
  float sensitivity = 0.0f;
 80065f2:	2300      	movs	r3, #0
  if (LSM303AGR_ACC_GetAxesRaw(pObj, &data_raw) != LSM303AGR_OK)
 80065f4:	a902      	add	r1, sp, #8
{
 80065f6:	4605      	mov	r5, r0
  float sensitivity = 0.0f;
 80065f8:	9301      	str	r3, [sp, #4]
  if (LSM303AGR_ACC_GetAxesRaw(pObj, &data_raw) != LSM303AGR_OK)
 80065fa:	f7ff fda8 	bl	800614e <LSM303AGR_ACC_GetAxesRaw>
 80065fe:	b118      	cbz	r0, 8006608 <LSM303AGR_ACC_GetAxes+0x1c>
    return LSM303AGR_ERROR;
 8006600:	f04f 30ff 	mov.w	r0, #4294967295
}
 8006604:	b005      	add	sp, #20
 8006606:	bd30      	pop	{r4, r5, pc}
  if (LSM303AGR_ACC_GetSensitivity(pObj, &sensitivity) != LSM303AGR_OK)
 8006608:	a901      	add	r1, sp, #4
 800660a:	4628      	mov	r0, r5
 800660c:	f7ff ff82 	bl	8006514 <LSM303AGR_ACC_GetSensitivity>
 8006610:	2800      	cmp	r0, #0
 8006612:	d1f5      	bne.n	8006600 <LSM303AGR_ACC_GetAxes+0x14>
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 8006614:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8006618:	eddd 6a01 	vldr	s13, [sp, #4]
 800661c:	ee07 3a10 	vmov	s14, r3
 8006620:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 8006624:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 8006628:	ee27 7a26 	vmul.f32	s14, s14, s13
 800662c:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8006630:	ed84 7a00 	vstr	s14, [r4]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 8006634:	ee07 3a10 	vmov	s14, r3
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 8006638:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800663c:	ee07 3a90 	vmov	s15, r3
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 8006640:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 8006644:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 8006648:	ee27 7a26 	vmul.f32	s14, s14, s13
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 800664c:	ee67 7aa6 	vmul.f32	s15, s15, s13
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 8006650:	eebd 7ac7 	vcvt.s32.f32	s14, s14
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 8006654:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 8006658:	ed84 7a01 	vstr	s14, [r4, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 800665c:	edc4 7a02 	vstr	s15, [r4, #8]
  return LSM303AGR_OK;
 8006660:	e7d0      	b.n	8006604 <LSM303AGR_ACC_GetAxes+0x18>

08006662 <LSM303AGR_MAG_Enable>:
{
 8006662:	b510      	push	{r4, lr}
  if (pObj->mag_is_enabled == 1U)
 8006664:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8006668:	2b01      	cmp	r3, #1
{
 800666a:	4604      	mov	r4, r0
  if (pObj->mag_is_enabled == 1U)
 800666c:	d008      	beq.n	8006680 <LSM303AGR_MAG_Enable+0x1e>
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_CONTINUOUS_MODE) != LSM303AGR_OK)
 800666e:	2100      	movs	r1, #0
 8006670:	301c      	adds	r0, #28
 8006672:	f000 f92c 	bl	80068ce <lsm303agr_mag_operating_mode_set>
 8006676:	b928      	cbnz	r0, 8006684 <LSM303AGR_MAG_Enable+0x22>
  pObj->mag_is_enabled = 1;
 8006678:	2301      	movs	r3, #1
 800667a:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
}
 800667e:	bd10      	pop	{r4, pc}
    return LSM303AGR_OK;
 8006680:	2000      	movs	r0, #0
 8006682:	e7fc      	b.n	800667e <LSM303AGR_MAG_Enable+0x1c>
    return LSM303AGR_ERROR;
 8006684:	f04f 30ff 	mov.w	r0, #4294967295
 8006688:	e7f9      	b.n	800667e <LSM303AGR_MAG_Enable+0x1c>

0800668a <LSM303AGR_MAG_Disable>:
{
 800668a:	b510      	push	{r4, lr}
 800668c:	4604      	mov	r4, r0
  if (pObj->mag_is_enabled == 0U)
 800668e:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
 8006692:	b138      	cbz	r0, 80066a4 <LSM303AGR_MAG_Disable+0x1a>
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK)
 8006694:	2102      	movs	r1, #2
 8006696:	f104 001c 	add.w	r0, r4, #28
 800669a:	f000 f918 	bl	80068ce <lsm303agr_mag_operating_mode_set>
 800669e:	b910      	cbnz	r0, 80066a6 <LSM303AGR_MAG_Disable+0x1c>
  pObj->mag_is_enabled = 0;
 80066a0:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
}
 80066a4:	bd10      	pop	{r4, pc}
    return LSM303AGR_ERROR;
 80066a6:	f04f 30ff 	mov.w	r0, #4294967295
 80066aa:	e7fb      	b.n	80066a4 <LSM303AGR_MAG_Disable+0x1a>

080066ac <LSM303AGR_MAG_DeInit>:
{
 80066ac:	b510      	push	{r4, lr}
 80066ae:	4604      	mov	r4, r0
  if (LSM303AGR_MAG_Disable(pObj) != LSM303AGR_OK)
 80066b0:	f7ff ffeb 	bl	800668a <LSM303AGR_MAG_Disable>
 80066b4:	b910      	cbnz	r0, 80066bc <LSM303AGR_MAG_DeInit+0x10>
  pObj->is_initialized = 0;
 80066b6:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
}
 80066ba:	bd10      	pop	{r4, pc}
    return LSM303AGR_ERROR;
 80066bc:	f04f 30ff 	mov.w	r0, #4294967295
 80066c0:	e7fb      	b.n	80066ba <LSM303AGR_MAG_DeInit+0xe>

080066c2 <LSM303AGR_ACC_Write_Reg>:
{
 80066c2:	b513      	push	{r0, r1, r4, lr}
 80066c4:	ac02      	add	r4, sp, #8
  if (lsm303agr_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM303AGR_OK)
 80066c6:	2301      	movs	r3, #1
{
 80066c8:	f804 2d01 	strb.w	r2, [r4, #-1]!
  if (lsm303agr_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM303AGR_OK)
 80066cc:	301c      	adds	r0, #28
 80066ce:	4622      	mov	r2, r4
 80066d0:	f000 f873 	bl	80067ba <lsm303agr_write_reg>
 80066d4:	3000      	adds	r0, #0
 80066d6:	bf18      	it	ne
 80066d8:	2001      	movne	r0, #1
}
 80066da:	4240      	negs	r0, r0
 80066dc:	b002      	add	sp, #8
 80066de:	bd10      	pop	{r4, pc}

080066e0 <LSM303AGR_ACC_RegisterBusIO>:
{
 80066e0:	b510      	push	{r4, lr}
  if (pObj == NULL)
 80066e2:	4604      	mov	r4, r0
 80066e4:	b910      	cbnz	r0, 80066ec <LSM303AGR_ACC_RegisterBusIO+0xc>
    ret = LSM303AGR_ERROR;
 80066e6:	f04f 30ff 	mov.w	r0, #4294967295
}
 80066ea:	bd10      	pop	{r4, pc}
    pObj->IO.DeInit    = pIO->DeInit;
 80066ec:	684a      	ldr	r2, [r1, #4]
    pObj->IO.Init      = pIO->Init;
 80066ee:	680b      	ldr	r3, [r1, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80066f0:	6042      	str	r2, [r0, #4]
    pObj->IO.BusType   = pIO->BusType;
 80066f2:	688a      	ldr	r2, [r1, #8]
    pObj->IO.Init      = pIO->Init;
 80066f4:	6003      	str	r3, [r0, #0]
    pObj->IO.BusType   = pIO->BusType;
 80066f6:	6082      	str	r2, [r0, #8]
    pObj->IO.Address   = pIO->Address;
 80066f8:	7b0a      	ldrb	r2, [r1, #12]
 80066fa:	7302      	strb	r2, [r0, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80066fc:	690a      	ldr	r2, [r1, #16]
 80066fe:	6102      	str	r2, [r0, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8006700:	694a      	ldr	r2, [r1, #20]
 8006702:	6142      	str	r2, [r0, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8006704:	698a      	ldr	r2, [r1, #24]
 8006706:	6182      	str	r2, [r0, #24]
    pObj->Ctx.read_reg  = ReadAccRegWrap;
 8006708:	4a0c      	ldr	r2, [pc, #48]	; (800673c <LSM303AGR_ACC_RegisterBusIO+0x5c>)
 800670a:	6202      	str	r2, [r0, #32]
    pObj->Ctx.write_reg = WriteAccRegWrap;
 800670c:	4a0c      	ldr	r2, [pc, #48]	; (8006740 <LSM303AGR_ACC_RegisterBusIO+0x60>)
 800670e:	61c2      	str	r2, [r0, #28]
    pObj->Ctx.handle    = pObj;
 8006710:	6260      	str	r0, [r4, #36]	; 0x24
    if (pObj->IO.Init == NULL)
 8006712:	2b00      	cmp	r3, #0
 8006714:	d0e7      	beq.n	80066e6 <LSM303AGR_ACC_RegisterBusIO+0x6>
    else if (pObj->IO.Init() != LSM303AGR_OK)
 8006716:	4798      	blx	r3
 8006718:	2800      	cmp	r0, #0
 800671a:	d1e4      	bne.n	80066e6 <LSM303AGR_ACC_RegisterBusIO+0x6>
      if (pObj->IO.BusType == LSM303AGR_SPI_3WIRES_BUS) /* SPI 3-Wires */
 800671c:	68a2      	ldr	r2, [r4, #8]
 800671e:	2a01      	cmp	r2, #1
 8006720:	d1e3      	bne.n	80066ea <LSM303AGR_ACC_RegisterBusIO+0xa>
        if (pObj->is_initialized == 0U)
 8006722:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8006726:	2b00      	cmp	r3, #0
 8006728:	d1df      	bne.n	80066ea <LSM303AGR_ACC_RegisterBusIO+0xa>
          if (LSM303AGR_ACC_Write_Reg(pObj, LSM303AGR_CTRL_REG4_A, data) != LSM303AGR_OK)
 800672a:	2123      	movs	r1, #35	; 0x23
 800672c:	4620      	mov	r0, r4
 800672e:	f7ff ffc8 	bl	80066c2 <LSM303AGR_ACC_Write_Reg>
 8006732:	3000      	adds	r0, #0
 8006734:	bf18      	it	ne
 8006736:	2001      	movne	r0, #1
 8006738:	4240      	negs	r0, r0
 800673a:	e7d6      	b.n	80066ea <LSM303AGR_ACC_RegisterBusIO+0xa>
 800673c:	0800642d 	.word	0x0800642d
 8006740:	08006449 	.word	0x08006449

08006744 <LSM303AGR_MAG_RegisterBusIO>:
{
 8006744:	b510      	push	{r4, lr}
  if (pObj == NULL)
 8006746:	4604      	mov	r4, r0
 8006748:	b910      	cbnz	r0, 8006750 <LSM303AGR_MAG_RegisterBusIO+0xc>
    ret = LSM303AGR_ERROR;
 800674a:	f04f 30ff 	mov.w	r0, #4294967295
}
 800674e:	bd10      	pop	{r4, pc}
    pObj->IO.DeInit    = pIO->DeInit;
 8006750:	684a      	ldr	r2, [r1, #4]
    pObj->IO.Init      = pIO->Init;
 8006752:	680b      	ldr	r3, [r1, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8006754:	6042      	str	r2, [r0, #4]
    pObj->IO.BusType   = pIO->BusType;
 8006756:	688a      	ldr	r2, [r1, #8]
    pObj->IO.Init      = pIO->Init;
 8006758:	6003      	str	r3, [r0, #0]
    pObj->IO.BusType   = pIO->BusType;
 800675a:	6082      	str	r2, [r0, #8]
    pObj->IO.Address   = pIO->Address;
 800675c:	7b0a      	ldrb	r2, [r1, #12]
 800675e:	7302      	strb	r2, [r0, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8006760:	690a      	ldr	r2, [r1, #16]
 8006762:	6102      	str	r2, [r0, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8006764:	694a      	ldr	r2, [r1, #20]
 8006766:	6142      	str	r2, [r0, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8006768:	698a      	ldr	r2, [r1, #24]
 800676a:	6182      	str	r2, [r0, #24]
    pObj->Ctx.read_reg  = ReadMagRegWrap;
 800676c:	4a0d      	ldr	r2, [pc, #52]	; (80067a4 <LSM303AGR_MAG_RegisterBusIO+0x60>)
 800676e:	6202      	str	r2, [r0, #32]
    pObj->Ctx.write_reg = WriteMagRegWrap;
 8006770:	4a0d      	ldr	r2, [pc, #52]	; (80067a8 <LSM303AGR_MAG_RegisterBusIO+0x64>)
 8006772:	61c2      	str	r2, [r0, #28]
    pObj->Ctx.handle    = pObj;
 8006774:	6260      	str	r0, [r4, #36]	; 0x24
    if (pObj->IO.Init == NULL)
 8006776:	2b00      	cmp	r3, #0
 8006778:	d0e7      	beq.n	800674a <LSM303AGR_MAG_RegisterBusIO+0x6>
    else if (pObj->IO.Init() != LSM303AGR_OK)
 800677a:	4798      	blx	r3
 800677c:	2800      	cmp	r0, #0
 800677e:	d1e4      	bne.n	800674a <LSM303AGR_MAG_RegisterBusIO+0x6>
      if (pObj->IO.BusType != LSM303AGR_I2C_BUS) /* If the bus type is not I2C */
 8006780:	68a3      	ldr	r3, [r4, #8]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d0e3      	beq.n	800674e <LSM303AGR_MAG_RegisterBusIO+0xa>
        if (pObj->is_initialized == 0U)
 8006786:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800678a:	2b00      	cmp	r3, #0
 800678c:	d1df      	bne.n	800674e <LSM303AGR_MAG_RegisterBusIO+0xa>
          if (lsm303agr_mag_i2c_interface_set(&(pObj->Ctx), LSM303AGR_I2C_DISABLE) != LSM303AGR_OK)
 800678e:	2101      	movs	r1, #1
 8006790:	f104 001c 	add.w	r0, r4, #28
 8006794:	f000 f926 	bl	80069e4 <lsm303agr_mag_i2c_interface_set>
 8006798:	3000      	adds	r0, #0
 800679a:	bf18      	it	ne
 800679c:	2001      	movne	r0, #1
 800679e:	4240      	negs	r0, r0
 80067a0:	e7d5      	b.n	800674e <LSM303AGR_MAG_RegisterBusIO+0xa>
 80067a2:	bf00      	nop
 80067a4:	08006465 	.word	0x08006465
 80067a8:	08006481 	.word	0x08006481

080067ac <lsm303agr_read_reg>:
  * @param  uint16_t len: number of consecutive register to read
  *
  */
int32_t lsm303agr_read_reg(lsm303agr_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 80067ac:	b410      	push	{r4}
  return ctx->read_reg(ctx->handle, reg, data, len);
 80067ae:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 80067b2:	46a4      	mov	ip, r4
}
 80067b4:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->read_reg(ctx->handle, reg, data, len);
 80067b8:	4760      	bx	ip

080067ba <lsm303agr_write_reg>:
  * @param  uint16_t len: number of consecutive register to write
  *
*/
int32_t lsm303agr_write_reg(lsm303agr_ctx_t* ctx, uint8_t reg, uint8_t* data,
                           uint16_t len)
{
 80067ba:	b410      	push	{r4}
  return ctx->write_reg(ctx->handle, reg, data, len);
 80067bc:	6804      	ldr	r4, [r0, #0]
 80067be:	6880      	ldr	r0, [r0, #8]
 80067c0:	46a4      	mov	ip, r4
}
 80067c2:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->write_reg(ctx->handle, reg, data, len);
 80067c6:	4760      	bx	ip

080067c8 <lsm303agr_xl_operating_mode_get>:
  *                                  reg CTRL_REG4_AG1_A
  *
  */
int32_t lsm303agr_xl_operating_mode_get(lsm303agr_ctx_t *ctx,
                                        lsm303agr_op_md_a_t *val)
{
 80067c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  lsm303agr_reg_t reg;
  int32_t mm_error;
  uint8_t lpen, hr;

  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A, &reg.byte, 1);
 80067ca:	2301      	movs	r3, #1
 80067cc:	aa01      	add	r2, sp, #4
{
 80067ce:	460d      	mov	r5, r1
  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A, &reg.byte, 1);
 80067d0:	2120      	movs	r1, #32
{
 80067d2:	4607      	mov	r7, r0
  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A, &reg.byte, 1);
 80067d4:	f7ff ffea 	bl	80067ac <lsm303agr_read_reg>
  lpen = reg.ctrl_reg1_a.lpen;
 80067d8:	f89d 4004 	ldrb.w	r4, [sp, #4]
 80067dc:	f3c4 04c0 	ubfx	r4, r4, #3, #1
 80067e0:	b2e6      	uxtb	r6, r4
  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A, &reg.byte, 1);
 80067e2:	2301      	movs	r3, #1
 80067e4:	aa01      	add	r2, sp, #4
 80067e6:	2123      	movs	r1, #35	; 0x23
 80067e8:	4638      	mov	r0, r7
 80067ea:	f7ff ffdf 	bl	80067ac <lsm303agr_read_reg>
  hr = reg.ctrl_reg4_a.hr;

  if ( lpen ){
 80067ee:	b116      	cbz	r6, 80067f6 <lsm303agr_xl_operating_mode_get+0x2e>
    *val = LSM303AGR_LP_8bit;
 80067f0:	2302      	movs	r3, #2
  } else if (hr) {
    *val = LSM303AGR_HR_12bit;
  } else{
    *val = LSM303AGR_NM_10bit;
 80067f2:	702b      	strb	r3, [r5, #0]
  }

  return mm_error;
 80067f4:	e004      	b.n	8006800 <lsm303agr_xl_operating_mode_get+0x38>
  hr = reg.ctrl_reg4_a.hr;
 80067f6:	f89d 3004 	ldrb.w	r3, [sp, #4]
  } else if (hr) {
 80067fa:	071b      	lsls	r3, r3, #28
 80067fc:	d502      	bpl.n	8006804 <lsm303agr_xl_operating_mode_get+0x3c>
    *val = LSM303AGR_HR_12bit;
 80067fe:	702c      	strb	r4, [r5, #0]
}
 8006800:	b003      	add	sp, #12
 8006802:	bdf0      	pop	{r4, r5, r6, r7, pc}
    *val = LSM303AGR_NM_10bit;
 8006804:	2301      	movs	r3, #1
 8006806:	e7f4      	b.n	80067f2 <lsm303agr_xl_operating_mode_get+0x2a>

08006808 <lsm303agr_xl_data_rate_set>:
  * @param  lsm303agr_odr_a_t: change the values of odr in reg CTRL_REG1_A
  *
  */
int32_t lsm303agr_xl_data_rate_set(lsm303agr_ctx_t *ctx,
                                   lsm303agr_odr_a_t val)
{
 8006808:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lsm303agr_reg_t reg;
  int32_t mm_error;

  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 800680a:	2301      	movs	r3, #1
{
 800680c:	460d      	mov	r5, r1
  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 800680e:	aa01      	add	r2, sp, #4
 8006810:	2120      	movs	r1, #32
{
 8006812:	4604      	mov	r4, r0
  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8006814:	f7ff ffca 	bl	80067ac <lsm303agr_read_reg>
                                &reg.byte, 1);
  reg.ctrl_reg1_a.odr = val;
 8006818:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800681c:	f365 1307 	bfi	r3, r5, #4, #4
 8006820:	f88d 3004 	strb.w	r3, [sp, #4]
  mm_error = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8006824:	aa01      	add	r2, sp, #4
 8006826:	2301      	movs	r3, #1
 8006828:	2120      	movs	r1, #32
 800682a:	4620      	mov	r0, r4
 800682c:	f7ff ffc5 	bl	80067ba <lsm303agr_write_reg>
                                 &reg.byte, 1);

  return mm_error;
}
 8006830:	b003      	add	sp, #12
 8006832:	bd30      	pop	{r4, r5, pc}

08006834 <lsm303agr_xl_data_rate_get>:
  * @param  lsm303agr_odr_a_t: Get the values of odr in reg CTRL_REG1_A
  *
  */
int32_t lsm303agr_xl_data_rate_get(lsm303agr_ctx_t *ctx,
                                   lsm303agr_odr_a_t *val)
{
 8006834:	b513      	push	{r0, r1, r4, lr}
  lsm303agr_reg_t reg;
  int32_t mm_error;

  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A, &reg.byte, 1);
 8006836:	2301      	movs	r3, #1
{
 8006838:	460c      	mov	r4, r1
  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A, &reg.byte, 1);
 800683a:	aa01      	add	r2, sp, #4
 800683c:	2120      	movs	r1, #32
 800683e:	f7ff ffb5 	bl	80067ac <lsm303agr_read_reg>
  *val = (lsm303agr_odr_a_t) reg.ctrl_reg1_a.odr;
 8006842:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006846:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800684a:	7023      	strb	r3, [r4, #0]

  return mm_error;
}
 800684c:	b002      	add	sp, #8
 800684e:	bd10      	pop	{r4, pc}

08006850 <lsm303agr_xl_full_scale_set>:
  * @param  lsm303agr_fs_a_t: change the values of fs in reg CTRL_REG4_A
  *
  */
int32_t lsm303agr_xl_full_scale_set(lsm303agr_ctx_t *ctx,
                                    lsm303agr_fs_a_t val)
{
 8006850:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lsm303agr_reg_t reg;
  int32_t mm_error;

  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A, &reg.byte, 1);
 8006852:	2301      	movs	r3, #1
{
 8006854:	460d      	mov	r5, r1
  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A, &reg.byte, 1);
 8006856:	aa01      	add	r2, sp, #4
 8006858:	2123      	movs	r1, #35	; 0x23
{
 800685a:	4604      	mov	r4, r0
  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A, &reg.byte, 1);
 800685c:	f7ff ffa6 	bl	80067ac <lsm303agr_read_reg>
  reg.ctrl_reg4_a.fs = val;
 8006860:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006864:	f365 1305 	bfi	r3, r5, #4, #2
 8006868:	f88d 3004 	strb.w	r3, [sp, #4]
  mm_error = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A, &reg.byte, 1);
 800686c:	aa01      	add	r2, sp, #4
 800686e:	2301      	movs	r3, #1
 8006870:	2123      	movs	r1, #35	; 0x23
 8006872:	4620      	mov	r0, r4
 8006874:	f7ff ffa1 	bl	80067ba <lsm303agr_write_reg>

  return mm_error;
}
 8006878:	b003      	add	sp, #12
 800687a:	bd30      	pop	{r4, r5, pc}

0800687c <lsm303agr_xl_full_scale_get>:
  * @param  lsm303agr_fs_a_t: Get the values of fs in reg CTRL_REG4_A
  *
  */
int32_t lsm303agr_xl_full_scale_get(lsm303agr_ctx_t *ctx,
                                    lsm303agr_fs_a_t *val)
{
 800687c:	b513      	push	{r0, r1, r4, lr}
  lsm303agr_reg_t reg;
  int32_t mm_error;

  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A, &reg.byte, 1);
 800687e:	2301      	movs	r3, #1
{
 8006880:	460c      	mov	r4, r1
  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A, &reg.byte, 1);
 8006882:	aa01      	add	r2, sp, #4
 8006884:	2123      	movs	r1, #35	; 0x23
 8006886:	f7ff ff91 	bl	80067ac <lsm303agr_read_reg>
  *val = (lsm303agr_fs_a_t) reg.ctrl_reg4_a.fs;
 800688a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800688e:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8006892:	7023      	strb	r3, [r4, #0]

  return mm_error;
}
 8006894:	b002      	add	sp, #8
 8006896:	bd10      	pop	{r4, pc}

08006898 <lsm303agr_xl_block_data_update_set>:
  * @param  uint8_t val: change the values of bdu in reg CTRL_REG4_A
  *
  */
int32_t lsm303agr_xl_block_data_update_set(lsm303agr_ctx_t *ctx,
                                           uint8_t val)
{
 8006898:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lsm303agr_reg_t reg;
  int32_t mm_error;

  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A, &reg.byte, 1);
 800689a:	2301      	movs	r3, #1
{
 800689c:	460d      	mov	r5, r1
  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A, &reg.byte, 1);
 800689e:	aa01      	add	r2, sp, #4
 80068a0:	2123      	movs	r1, #35	; 0x23
{
 80068a2:	4604      	mov	r4, r0
  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A, &reg.byte, 1);
 80068a4:	f7ff ff82 	bl	80067ac <lsm303agr_read_reg>
  reg.ctrl_reg4_a.bdu = val;
 80068a8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80068ac:	f365 13c7 	bfi	r3, r5, #7, #1
 80068b0:	f88d 3004 	strb.w	r3, [sp, #4]
  mm_error = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A, &reg.byte, 1);
 80068b4:	aa01      	add	r2, sp, #4
 80068b6:	2301      	movs	r3, #1
 80068b8:	2123      	movs	r1, #35	; 0x23
 80068ba:	4620      	mov	r0, r4
 80068bc:	f7ff ff7d 	bl	80067ba <lsm303agr_write_reg>

  return mm_error;
}
 80068c0:	b003      	add	sp, #12
 80068c2:	bd30      	pop	{r4, r5, pc}

080068c4 <lsm303agr_acceleration_raw_get>:
  * @param  uint8_t * : buffer that stores data read
  *
  */
int32_t lsm303agr_acceleration_raw_get(lsm303agr_ctx_t *ctx, uint8_t *buff)
{
  return lsm303agr_read_reg(ctx, LSM303AGR_OUT_X_L_A, buff, 6);
 80068c4:	460a      	mov	r2, r1
 80068c6:	2306      	movs	r3, #6
 80068c8:	2128      	movs	r1, #40	; 0x28
 80068ca:	f7ff bf6f 	b.w	80067ac <lsm303agr_read_reg>

080068ce <lsm303agr_mag_operating_mode_set>:
  * @param  lsm303agr_md_t: change the values of md in reg CFG_REG_A_M
  *
  */
int32_t lsm303agr_mag_operating_mode_set(lsm303agr_ctx_t *ctx,
                                         lsm303agr_md_m_t val)
{
 80068ce:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lsm303agr_reg_t reg;
  int32_t mm_error;

  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M, &reg.byte, 1);
 80068d0:	2301      	movs	r3, #1
{
 80068d2:	460d      	mov	r5, r1
  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M, &reg.byte, 1);
 80068d4:	aa01      	add	r2, sp, #4
 80068d6:	2160      	movs	r1, #96	; 0x60
{
 80068d8:	4604      	mov	r4, r0
  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M, &reg.byte, 1);
 80068da:	f7ff ff67 	bl	80067ac <lsm303agr_read_reg>
  reg.cfg_reg_a_m.md = val;
 80068de:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80068e2:	f365 0301 	bfi	r3, r5, #0, #2
 80068e6:	f88d 3004 	strb.w	r3, [sp, #4]
  mm_error = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M, &reg.byte, 1);
 80068ea:	aa01      	add	r2, sp, #4
 80068ec:	2301      	movs	r3, #1
 80068ee:	2160      	movs	r1, #96	; 0x60
 80068f0:	4620      	mov	r0, r4
 80068f2:	f7ff ff62 	bl	80067ba <lsm303agr_write_reg>

  return mm_error;
}
 80068f6:	b003      	add	sp, #12
 80068f8:	bd30      	pop	{r4, r5, pc}

080068fa <lsm303agr_mag_data_rate_set>:
  * @param  lsm303agr_mg_odr_m_t: change the values of odr in reg CFG_REG_A_M
  *
  */
int32_t lsm303agr_mag_data_rate_set(lsm303agr_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t val)
{
 80068fa:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lsm303agr_reg_t reg;
  int32_t mm_error;

  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M, &reg.byte, 1);
 80068fc:	2301      	movs	r3, #1
{
 80068fe:	460d      	mov	r5, r1
  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M, &reg.byte, 1);
 8006900:	aa01      	add	r2, sp, #4
 8006902:	2160      	movs	r1, #96	; 0x60
{
 8006904:	4604      	mov	r4, r0
  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M, &reg.byte, 1);
 8006906:	f7ff ff51 	bl	80067ac <lsm303agr_read_reg>
  reg.cfg_reg_a_m.odr = val;
 800690a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800690e:	f365 0383 	bfi	r3, r5, #2, #2
 8006912:	f88d 3004 	strb.w	r3, [sp, #4]
  mm_error = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M, &reg.byte, 1);
 8006916:	aa01      	add	r2, sp, #4
 8006918:	2301      	movs	r3, #1
 800691a:	2160      	movs	r1, #96	; 0x60
 800691c:	4620      	mov	r0, r4
 800691e:	f7ff ff4c 	bl	80067ba <lsm303agr_write_reg>

  return mm_error;
}
 8006922:	b003      	add	sp, #12
 8006924:	bd30      	pop	{r4, r5, pc}

08006926 <lsm303agr_mag_data_rate_get>:
  * @param  lsm303agr_mg_odr_m_tv: Get the values of odr in reg CFG_REG_A_M
  *
  */
int32_t lsm303agr_mag_data_rate_get(lsm303agr_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t *val)
{
 8006926:	b513      	push	{r0, r1, r4, lr}
  lsm303agr_reg_t reg;
  int32_t mm_error;

  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M, &reg.byte, 1);
 8006928:	2301      	movs	r3, #1
{
 800692a:	460c      	mov	r4, r1
  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M, &reg.byte, 1);
 800692c:	aa01      	add	r2, sp, #4
 800692e:	2160      	movs	r1, #96	; 0x60
 8006930:	f7ff ff3c 	bl	80067ac <lsm303agr_read_reg>
  *val = (lsm303agr_mg_odr_m_t) reg.cfg_reg_a_m.odr;
 8006934:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006938:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800693c:	7023      	strb	r3, [r4, #0]

  return mm_error;
}
 800693e:	b002      	add	sp, #8
 8006940:	bd10      	pop	{r4, pc}

08006942 <lsm303agr_mag_block_data_update_set>:
  * @param  uint8_t val: change the values of bdu in reg CFG_REG_C_M
  *
  */
int32_t lsm303agr_mag_block_data_update_set(lsm303agr_ctx_t *ctx,
                                            uint8_t val)
{
 8006942:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lsm303agr_reg_t reg;
  int32_t mm_error;

  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M, &reg.byte, 1);
 8006944:	2301      	movs	r3, #1
{
 8006946:	460d      	mov	r5, r1
  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M, &reg.byte, 1);
 8006948:	aa01      	add	r2, sp, #4
 800694a:	2162      	movs	r1, #98	; 0x62
{
 800694c:	4604      	mov	r4, r0
  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M, &reg.byte, 1);
 800694e:	f7ff ff2d 	bl	80067ac <lsm303agr_read_reg>
  reg.cfg_reg_c_m.bdu = val;
 8006952:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006956:	f365 1304 	bfi	r3, r5, #4, #1
 800695a:	f88d 3004 	strb.w	r3, [sp, #4]
  mm_error = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M, &reg.byte, 1);
 800695e:	aa01      	add	r2, sp, #4
 8006960:	2301      	movs	r3, #1
 8006962:	2162      	movs	r1, #98	; 0x62
 8006964:	4620      	mov	r0, r4
 8006966:	f7ff ff28 	bl	80067ba <lsm303agr_write_reg>

  return mm_error;
}
 800696a:	b003      	add	sp, #12
 800696c:	bd30      	pop	{r4, r5, pc}

0800696e <lsm303agr_magnetic_raw_get>:
  * @param  uint8_t * : buffer that stores data read
  *
  */
int32_t lsm303agr_magnetic_raw_get(lsm303agr_ctx_t *ctx, uint8_t *buff)
{
  return lsm303agr_read_reg(ctx, LSM303AGR_OUTX_L_REG_M, buff, 6);
 800696e:	460a      	mov	r2, r1
 8006970:	2306      	movs	r3, #6
 8006972:	2168      	movs	r1, #104	; 0x68
 8006974:	f7ff bf1a 	b.w	80067ac <lsm303agr_read_reg>

08006978 <lsm303agr_xl_device_id_get>:
  * @param  uint8_t * : buffer that stores data read
  *
  */
int32_t lsm303agr_xl_device_id_get(lsm303agr_ctx_t *ctx, uint8_t *buff)
{
  return lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_A, buff, 1);
 8006978:	460a      	mov	r2, r1
 800697a:	2301      	movs	r3, #1
 800697c:	210f      	movs	r1, #15
 800697e:	f7ff bf15 	b.w	80067ac <lsm303agr_read_reg>

08006982 <lsm303agr_mag_device_id_get>:
  * @param  uint8_t * : buffer that stores data read
  *
  */
int32_t lsm303agr_mag_device_id_get(lsm303agr_ctx_t *ctx, uint8_t *buff)
{
  return lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_M, buff, 1);
 8006982:	460a      	mov	r2, r1
 8006984:	2301      	movs	r3, #1
 8006986:	214f      	movs	r1, #79	; 0x4f
 8006988:	f7ff bf10 	b.w	80067ac <lsm303agr_read_reg>

0800698c <lsm303agr_mag_self_test_set>:
  * @param  lsm303agr_ctx_t *ctx: read / write interface definitions
  * @param  uint8_t val: change the values of self_test in reg CFG_REG_C_M
  *
  */
int32_t lsm303agr_mag_self_test_set(lsm303agr_ctx_t *ctx, uint8_t val)
{
 800698c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lsm303agr_reg_t reg;
  int32_t mm_error;

  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M, &reg.byte, 1);
 800698e:	2301      	movs	r3, #1
{
 8006990:	460d      	mov	r5, r1
  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M, &reg.byte, 1);
 8006992:	aa01      	add	r2, sp, #4
 8006994:	2162      	movs	r1, #98	; 0x62
{
 8006996:	4604      	mov	r4, r0
  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M, &reg.byte, 1);
 8006998:	f7ff ff08 	bl	80067ac <lsm303agr_read_reg>
  reg.cfg_reg_c_m.self_test = val;
 800699c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80069a0:	f365 0341 	bfi	r3, r5, #1, #1
 80069a4:	f88d 3004 	strb.w	r3, [sp, #4]
  mm_error = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M, &reg.byte, 1);
 80069a8:	aa01      	add	r2, sp, #4
 80069aa:	2301      	movs	r3, #1
 80069ac:	2162      	movs	r1, #98	; 0x62
 80069ae:	4620      	mov	r0, r4
 80069b0:	f7ff ff03 	bl	80067ba <lsm303agr_write_reg>

  return mm_error;
}
 80069b4:	b003      	add	sp, #12
 80069b6:	bd30      	pop	{r4, r5, pc}

080069b8 <lsm303agr_xl_fifo_mode_set>:
  * @param  lsm303agr_fm_a_t: change the values of fm in reg FIFO_CTRL_REG_A
  *
  */
int32_t lsm303agr_xl_fifo_mode_set(lsm303agr_ctx_t *ctx,
                                   lsm303agr_fm_a_t val)
{
 80069b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lsm303agr_reg_t reg;
  int32_t mm_error;

  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 80069ba:	2301      	movs	r3, #1
{
 80069bc:	460d      	mov	r5, r1
  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 80069be:	aa01      	add	r2, sp, #4
 80069c0:	212e      	movs	r1, #46	; 0x2e
{
 80069c2:	4604      	mov	r4, r0
  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 80069c4:	f7ff fef2 	bl	80067ac <lsm303agr_read_reg>
                                &reg.byte, 1);
  reg.fifo_ctrl_reg_a.fm = val;
 80069c8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80069cc:	f365 1387 	bfi	r3, r5, #6, #2
 80069d0:	f88d 3004 	strb.w	r3, [sp, #4]
  mm_error = lsm303agr_write_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 80069d4:	aa01      	add	r2, sp, #4
 80069d6:	2301      	movs	r3, #1
 80069d8:	212e      	movs	r1, #46	; 0x2e
 80069da:	4620      	mov	r0, r4
 80069dc:	f7ff feed 	bl	80067ba <lsm303agr_write_reg>
                                 &reg.byte, 1);

  return mm_error;
}
 80069e0:	b003      	add	sp, #12
 80069e2:	bd30      	pop	{r4, r5, pc}

080069e4 <lsm303agr_mag_i2c_interface_set>:
  *                                reg CFG_REG_C_M
  *
  */
int32_t lsm303agr_mag_i2c_interface_set(lsm303agr_ctx_t *ctx,
                                        lsm303agr_i2c_dis_m_t val)
{
 80069e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lsm303agr_reg_t reg;
  int32_t mm_error;

  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M, &reg.byte, 1);
 80069e6:	2301      	movs	r3, #1
{
 80069e8:	460d      	mov	r5, r1
  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M, &reg.byte, 1);
 80069ea:	aa01      	add	r2, sp, #4
 80069ec:	2162      	movs	r1, #98	; 0x62
{
 80069ee:	4604      	mov	r4, r0
  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M, &reg.byte, 1);
 80069f0:	f7ff fedc 	bl	80067ac <lsm303agr_read_reg>
  reg.cfg_reg_c_m.i2c_dis = val;
 80069f4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80069f8:	f365 1345 	bfi	r3, r5, #5, #1
 80069fc:	f88d 3004 	strb.w	r3, [sp, #4]
  mm_error = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M, &reg.byte, 1);
 8006a00:	aa01      	add	r2, sp, #4
 8006a02:	2301      	movs	r3, #1
 8006a04:	2162      	movs	r1, #98	; 0x62
 8006a06:	4620      	mov	r0, r4
 8006a08:	f7ff fed7 	bl	80067ba <lsm303agr_write_reg>

  return mm_error;
}
 8006a0c:	b003      	add	sp, #12
 8006a0e:	bd30      	pop	{r4, r5, pc}

08006a10 <BSP_LED_Init>:
  * @param  Led: Specifies the Led to be configured. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8006a10:	b570      	push	{r4, r5, r6, lr}
 8006a12:	b086      	sub	sp, #24
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8006a14:	2500      	movs	r5, #0
 8006a16:	4b10      	ldr	r3, [pc, #64]	; (8006a58 <BSP_LED_Init+0x48>)
 8006a18:	9500      	str	r5, [sp, #0]
 8006a1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8006a1c:	4c0f      	ldr	r4, [pc, #60]	; (8006a5c <BSP_LED_Init+0x4c>)
  LEDx_GPIO_CLK_ENABLE(Led);
 8006a1e:	f042 0201 	orr.w	r2, r2, #1
 8006a22:	631a      	str	r2, [r3, #48]	; 0x30
 8006a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a26:	9503      	str	r5, [sp, #12]
  LEDx_GPIO_CLK_ENABLE(Led);
 8006a28:	f003 0301 	and.w	r3, r3, #1
 8006a2c:	9300      	str	r3, [sp, #0]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8006a2e:	eb04 0480 	add.w	r4, r4, r0, lsl #2
  LEDx_GPIO_CLK_ENABLE(Led);
 8006a32:	9b00      	ldr	r3, [sp, #0]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8006a34:	6860      	ldr	r0, [r4, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006a36:	2620      	movs	r6, #32
 8006a38:	2301      	movs	r3, #1
 8006a3a:	e9cd 6301 	strd	r6, r3, [sp, #4]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8006a3e:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8006a40:	2302      	movs	r3, #2
 8006a42:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8006a44:	f001 fc14 	bl	8008270 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8006a48:	462a      	mov	r2, r5
 8006a4a:	4631      	mov	r1, r6
 8006a4c:	6860      	ldr	r0, [r4, #4]
 8006a4e:	f001 fd83 	bl	8008558 <HAL_GPIO_WritePin>
}
 8006a52:	b006      	add	sp, #24
 8006a54:	bd70      	pop	{r4, r5, r6, pc}
 8006a56:	bf00      	nop
 8006a58:	40023800 	.word	0x40023800
 8006a5c:	200000d8 	.word	0x200000d8

08006a60 <BSP_LED_On>:
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8006a60:	4b03      	ldr	r3, [pc, #12]	; (8006a70 <BSP_LED_On+0x10>)
 8006a62:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006a66:	2201      	movs	r2, #1
 8006a68:	2120      	movs	r1, #32
 8006a6a:	6840      	ldr	r0, [r0, #4]
 8006a6c:	f001 bd74 	b.w	8008558 <HAL_GPIO_WritePin>
 8006a70:	200000d8 	.word	0x200000d8

08006a74 <BSP_LED_Off>:
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_Off(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8006a74:	4b03      	ldr	r3, [pc, #12]	; (8006a84 <BSP_LED_Off+0x10>)
 8006a76:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	2120      	movs	r1, #32
 8006a7e:	6840      	ldr	r0, [r0, #4]
 8006a80:	f001 bd6a 	b.w	8008558 <HAL_GPIO_WritePin>
 8006a84:	200000d8 	.word	0x200000d8

08006a88 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_GPIO: Button will be used as simple IO 
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8006a88:	b510      	push	{r4, lr}
 8006a8a:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8006a8c:	4b1a      	ldr	r3, [pc, #104]	; (8006af8 <BSP_PB_Init+0x70>)
 8006a8e:	2400      	movs	r4, #0
 8006a90:	9400      	str	r4, [sp, #0]
 8006a92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a94:	f042 0204 	orr.w	r2, r2, #4
 8006a98:	631a      	str	r2, [r3, #48]	; 0x30
 8006a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a9c:	f003 0304 	and.w	r3, r3, #4
 8006aa0:	9300      	str	r3, [sp, #0]
 8006aa2:	9b00      	ldr	r3, [sp, #0]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8006aa4:	b979      	cbnz	r1, 8006ac6 <BSP_PB_Init+0x3e>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8006aa6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006aaa:	e9cd 3101 	strd	r3, r1, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006aae:	2302      	movs	r3, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8006ab0:	e9cd 3303 	strd	r3, r3, [sp, #12]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8006ab4:	4b11      	ldr	r3, [pc, #68]	; (8006afc <BSP_PB_Init+0x74>)
 8006ab6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006aba:	a901      	add	r1, sp, #4
 8006abc:	6880      	ldr	r0, [r0, #8]
 8006abe:	f001 fbd7 	bl	8008270 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
  }
}
 8006ac2:	b006      	add	sp, #24
 8006ac4:	bd10      	pop	{r4, pc}
  if(ButtonMode == BUTTON_MODE_EXTI)
 8006ac6:	2901      	cmp	r1, #1
 8006ac8:	d1fb      	bne.n	8006ac2 <BSP_PB_Init+0x3a>
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8006aca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006ace:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING; 
 8006ad0:	4b0b      	ldr	r3, [pc, #44]	; (8006b00 <BSP_PB_Init+0x78>)
 8006ad2:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8006ad4:	4b09      	ldr	r3, [pc, #36]	; (8006afc <BSP_PB_Init+0x74>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ad6:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8006ad8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006adc:	a901      	add	r1, sp, #4
 8006ade:	6880      	ldr	r0, [r0, #8]
 8006ae0:	f001 fbc6 	bl	8008270 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8006ae4:	4622      	mov	r2, r4
 8006ae6:	210f      	movs	r1, #15
 8006ae8:	2028      	movs	r0, #40	; 0x28
 8006aea:	f000 ff65 	bl	80079b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8006aee:	2028      	movs	r0, #40	; 0x28
 8006af0:	f000 ff96 	bl	8007a20 <HAL_NVIC_EnableIRQ>
}
 8006af4:	e7e5      	b.n	8006ac2 <BSP_PB_Init+0x3a>
 8006af6:	bf00      	nop
 8006af8:	40023800 	.word	0x40023800
 8006afc:	200000d8 	.word	0x200000d8
 8006b00:	10210000 	.word	0x10210000

08006b04 <BSP_AUDIO_IN_DeInit>:
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    if(Instance == 0U)
 8006b04:	b910      	cbnz	r0, 8006b0c <BSP_AUDIO_IN_DeInit+0x8>
#else
      return BSP_ERROR_WRONG_PARAM;
#endif
    }
    /* Update BSP AUDIO IN state */     
    AudioInCtx[Instance].State = AUDIO_IN_STATE_RESET;   
 8006b06:	4b03      	ldr	r3, [pc, #12]	; (8006b14 <BSP_AUDIO_IN_DeInit+0x10>)
 8006b08:	6258      	str	r0, [r3, #36]	; 0x24
 8006b0a:	4770      	bx	lr
      return BSP_ERROR_WRONG_PARAM;
 8006b0c:	f06f 0001 	mvn.w	r0, #1
  }
  /* Return BSP status */
  return ret;
}
 8006b10:	4770      	bx	lr
 8006b12:	bf00      	nop
 8006b14:	20000acc 	.word	0x20000acc

08006b18 <MX_I2S_ClockConfig>:
* @note   This API is called by BSP_AUDIO_IN_Init() 
*         Being __weak it can be overwritten by the application     
* @retval HAL_OK if no problem during execution, HAL_ERROR otherwise
*/
__weak HAL_StatusTypeDef MX_I2S_ClockConfig(I2S_HandleTypeDef *hi2s, uint32_t PDM_rate)
{ 
 8006b18:	b510      	push	{r4, lr}
 8006b1a:	b098      	sub	sp, #96	; 0x60
  
  HAL_StatusTypeDef ret = HAL_OK;
  /*I2S PLL Configuration*/
  RCC_PeriphCLKInitTypeDef rccclkinit;
  HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit); 
 8006b1c:	a801      	add	r0, sp, #4
{ 
 8006b1e:	460c      	mov	r4, r1
  HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit); 
 8006b20:	f002 fdb4 	bl	800968c <HAL_RCCEx_GetPeriphCLKConfig>
  
#if defined(STM32F446xx)
  rccclkinit.PLLI2S.PLLI2SQ = 2;
 8006b24:	2302      	movs	r3, #2
  rccclkinit.PLLI2SDivQ = 1;
#endif
  if (PDM_rate % 1280 == 0)
 8006b26:	f44f 62a0 	mov.w	r2, #1280	; 0x500
  rccclkinit.PLLI2S.PLLI2SQ = 2;
 8006b2a:	9305      	str	r3, [sp, #20]
  rccclkinit.PLLI2SDivQ = 1;
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	930b      	str	r3, [sp, #44]	; 0x2c
  if (PDM_rate % 1280 == 0)
 8006b30:	fbb4 f3f2 	udiv	r3, r4, r2
 8006b34:	fb02 4313 	mls	r3, r2, r3, r4
 8006b38:	b96b      	cbnz	r3, 8006b56 <MX_I2S_ClockConfig+0x3e>
  {
#if defined(STM32F411xE) || defined (STM32F446xx)    
    rccclkinit.PLLI2S.PLLI2SM = 10;
    rccclkinit.PLLI2S.PLLI2SN = 96;
 8006b3a:	2360      	movs	r3, #96	; 0x60
 8006b3c:	210a      	movs	r1, #10
 8006b3e:	e9cd 1302 	strd	r1, r3, [sp, #8]
#else
    rccclkinit.PLLI2S.PLLI2SN = 192;
#endif
    rccclkinit.PLLI2S.PLLI2SR = 5;
 8006b42:	2305      	movs	r3, #5
#if defined(STM32F411xE) || defined (STM32F446xx)
    
    rccclkinit.PLLI2S.PLLI2SM = 8;
#endif
    rccclkinit.PLLI2S.PLLI2SN = 258;
    rccclkinit.PLLI2S.PLLI2SR = 3;
 8006b44:	9306      	str	r3, [sp, #24]
  rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S_APB2;
#else
  rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
#endif
  
  if(HAL_RCCEx_PeriphCLKConfig(&rccclkinit) != HAL_OK)
 8006b46:	a801      	add	r0, sp, #4
  rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S_APB2;
 8006b48:	2302      	movs	r3, #2
 8006b4a:	9301      	str	r3, [sp, #4]
  if(HAL_RCCEx_PeriphCLKConfig(&rccclkinit) != HAL_OK)
 8006b4c:	f002 fb96 	bl	800927c <HAL_RCCEx_PeriphCLKConfig>
    ret = HAL_ERROR;
  }
  ret = HAL_OK;
  
  return ret;
}
 8006b50:	2000      	movs	r0, #0
 8006b52:	b018      	add	sp, #96	; 0x60
 8006b54:	bd10      	pop	{r4, pc}
    rccclkinit.PLLI2S.PLLI2SN = 258;
 8006b56:	f44f 7381 	mov.w	r3, #258	; 0x102
 8006b5a:	2208      	movs	r2, #8
 8006b5c:	e9cd 2302 	strd	r2, r3, [sp, #8]
    rccclkinit.PLLI2S.PLLI2SR = 3;
 8006b60:	2303      	movs	r3, #3
 8006b62:	e7ef      	b.n	8006b44 <MX_I2S_ClockConfig+0x2c>

08006b64 <MX_SPI_Init>:


__weak HAL_StatusTypeDef MX_SPI_Init(SPI_HandleTypeDef* hspi, MX_SPI_Config *MXConfig)
{  
 8006b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  static DMA_HandleTypeDef hdma_rx;
  HAL_StatusTypeDef ret = HAL_OK;
       
  hspi->Init.BaudRatePrescaler = MXConfig->BaudRatePrescaler; 
 8006b66:	698b      	ldr	r3, [r1, #24]
 8006b68:	61c3      	str	r3, [r0, #28]
  hspi->Init.Direction         = MXConfig->Direction;         
 8006b6a:	684b      	ldr	r3, [r1, #4]
 8006b6c:	6083      	str	r3, [r0, #8]
  hspi->Init.CLKPhase          = MXConfig->CLKPhase;          
 8006b6e:	690b      	ldr	r3, [r1, #16]
 8006b70:	6143      	str	r3, [r0, #20]
  hspi->Init.CLKPolarity       = MXConfig->CLKPolarity;       
 8006b72:	68cb      	ldr	r3, [r1, #12]
 8006b74:	6103      	str	r3, [r0, #16]
  hspi->Init.CRCCalculation    = MXConfig->CRCCalculation;    
 8006b76:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8006b78:	6283      	str	r3, [r0, #40]	; 0x28
  hspi->Init.CRCPolynomial     = MXConfig->CRCPolynomial;     
 8006b7a:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8006b7c:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi->Init.DataSize          = MXConfig->DataSize;          
 8006b7e:	688b      	ldr	r3, [r1, #8]
 8006b80:	60c3      	str	r3, [r0, #12]
  hspi->Init.FirstBit          = MXConfig->FirstBit;         
 8006b82:	69cb      	ldr	r3, [r1, #28]
 8006b84:	6203      	str	r3, [r0, #32]
  hspi->Init.NSS               = MXConfig->NSS;               
 8006b86:	694b      	ldr	r3, [r1, #20]
 8006b88:	6183      	str	r3, [r0, #24]
  hspi->Init.TIMode            = MXConfig->TIMode;            
 8006b8a:	6a0b      	ldr	r3, [r1, #32]
  hspi->Init.Mode              = MXConfig->Mode; 
  
    /* Configure the DMA handler for Transmission process */
  hdma_rx.Instance                 = AUDIO_IN_SPI_RX_DMA_STREAM;
 8006b8c:	4c1d      	ldr	r4, [pc, #116]	; (8006c04 <MX_SPI_Init+0xa0>)
  hspi->Init.TIMode            = MXConfig->TIMode;            
 8006b8e:	6243      	str	r3, [r0, #36]	; 0x24
  hspi->Init.Mode              = MXConfig->Mode; 
 8006b90:	680b      	ldr	r3, [r1, #0]
 8006b92:	6043      	str	r3, [r0, #4]
  hdma_rx.Instance                 = AUDIO_IN_SPI_RX_DMA_STREAM;
 8006b94:	4b1c      	ldr	r3, [pc, #112]	; (8006c08 <MX_SPI_Init+0xa4>)
 8006b96:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
  hdma_rx.Init.Channel             = AUDIO_IN_SPI_RX_DMA_CHANNEL;
 8006b9a:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8006b9e:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
  hdma_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
  hdma_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
  hdma_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8006ba2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ba6:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
  hdma_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006baa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006bae:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
  hdma_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_HALFWORD;
 8006bb2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006bb6:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
  hdma_rx.Init.Mode                = DMA_CIRCULAR;
 8006bba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006bbe:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  hdma_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 8006bc2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  hdma_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8006bc6:	2600      	movs	r6, #0
  hdma_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 8006bc8:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
  hdma_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
  hdma_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8006bcc:	2303      	movs	r3, #3
{  
 8006bce:	4605      	mov	r5, r0
  hdma_rx.Init.MemBurst            = DMA_MBURST_INC4;
  hdma_rx.Init.PeriphBurst         = DMA_PBURST_INC4;

  /* Configure the DMA Stream */ 
  HAL_DMA_Init(&hdma_rx);
 8006bd0:	f504 7796 	add.w	r7, r4, #300	; 0x12c
  hdma_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8006bd4:	f8c4 6134 	str.w	r6, [r4, #308]	; 0x134
  hdma_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8006bd8:	f8c4 6138 	str.w	r6, [r4, #312]	; 0x138
  hdma_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8006bdc:	f8c4 6150 	str.w	r6, [r4, #336]	; 0x150
  hdma_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8006be0:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
  hdma_rx.Init.MemBurst            = DMA_MBURST_INC4;
 8006be4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8006be8:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
  HAL_DMA_Init(&hdma_rx);
 8006bec:	4638      	mov	r0, r7
  hdma_rx.Init.PeriphBurst         = DMA_PBURST_INC4;
 8006bee:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006bf2:	f8c4 315c 	str.w	r3, [r4, #348]	; 0x15c
  HAL_DMA_Init(&hdma_rx);
 8006bf6:	f000 ff9d 	bl	8007b34 <HAL_DMA_Init>
    
  /* Associate the initialized DMA handle to the the SPI handle */
  __HAL_LINKDMA(hspi, hdmarx, hdma_rx);      
 8006bfa:	64ef      	str	r7, [r5, #76]	; 0x4c
 8006bfc:	f8c4 5164 	str.w	r5, [r4, #356]	; 0x164

  return ret;
}
 8006c00:	4630      	mov	r0, r6
 8006c02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c04:	20000acc 	.word	0x20000acc
 8006c08:	40026440 	.word	0x40026440

08006c0c <MX_I2S_Init>:
__weak HAL_StatusTypeDef MX_I2S_Init(I2S_HandleTypeDef* hi2s, MX_I2S_Config *MXConfig)
{
  static DMA_HandleTypeDef hdma_i2sRx;
  HAL_StatusTypeDef ret = HAL_OK;
  
  hi2s->Init.DataFormat = MXConfig->DataFormat;
 8006c0c:	688b      	ldr	r3, [r1, #8]
{
 8006c0e:	b513      	push	{r0, r1, r4, lr}
  hi2s->Init.DataFormat = MXConfig->DataFormat;
 8006c10:	60c3      	str	r3, [r0, #12]
  hi2s->Init.AudioFreq = MXConfig->AudioFreq;
 8006c12:	690b      	ldr	r3, [r1, #16]
 8006c14:	6143      	str	r3, [r0, #20]
  hi2s->Init.ClockSource = MXConfig->ClockSource;
 8006c16:	698b      	ldr	r3, [r1, #24]
 8006c18:	61c3      	str	r3, [r0, #28]
  hi2s->Init.CPOL = MXConfig->CPOL;
 8006c1a:	694b      	ldr	r3, [r1, #20]
 8006c1c:	6183      	str	r3, [r0, #24]
  hi2s->Init.MCLKOutput = MXConfig->MCLKOutput;
 8006c1e:	68cb      	ldr	r3, [r1, #12]
 8006c20:	6103      	str	r3, [r0, #16]
  hi2s->Init.Mode = MXConfig->Mode;
 8006c22:	680b      	ldr	r3, [r1, #0]
 8006c24:	6043      	str	r3, [r0, #4]
  hi2s->Init.Standard = MXConfig->Standard;
 8006c26:	684b      	ldr	r3, [r1, #4]
 8006c28:	6083      	str	r3, [r0, #8]
#ifdef USE_STM32F4XX_NUCLEO
  hi2s->Init.FullDuplexMode = MXConfig->FullDuplexMode;  
 8006c2a:	69cb      	ldr	r3, [r1, #28]
 8006c2c:	6203      	str	r3, [r0, #32]
#endif
  
  /* Enable the DMA clock */
  AUDIO_IN_I2S_DMAx_CLK_ENABLE();
 8006c2e:	2200      	movs	r2, #0
 8006c30:	4b25      	ldr	r3, [pc, #148]	; (8006cc8 <MX_I2S_Init+0xbc>)
 8006c32:	9201      	str	r2, [sp, #4]
 8006c34:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006c36:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
 8006c3a:	6319      	str	r1, [r3, #48]	; 0x30
 8006c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  
  if(hi2s->Instance == AUDIO_IN_I2S_INSTANCE)
 8006c3e:	6801      	ldr	r1, [r0, #0]
  AUDIO_IN_I2S_DMAx_CLK_ENABLE();
 8006c40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006c44:	9301      	str	r3, [sp, #4]
 8006c46:	9b01      	ldr	r3, [sp, #4]
  if(hi2s->Instance == AUDIO_IN_I2S_INSTANCE)
 8006c48:	4b20      	ldr	r3, [pc, #128]	; (8006ccc <MX_I2S_Init+0xc0>)
 8006c4a:	4299      	cmp	r1, r3
 8006c4c:	d131      	bne.n	8006cb2 <MX_I2S_Init+0xa6>
  {
    /* Configure the hdma_i2sRx handle parameters */
    hdma_i2sRx.Init.Channel             = AUDIO_IN_I2S_DMAx_CHANNEL;
 8006c4e:	4b20      	ldr	r3, [pc, #128]	; (8006cd0 <MX_I2S_Init+0xc4>)
    hdma_i2sRx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
    hdma_i2sRx.Init.PeriphInc           = DMA_PINC_DISABLE;
    hdma_i2sRx.Init.MemInc              = DMA_MINC_ENABLE;
 8006c50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006c54:	f8c3 119c 	str.w	r1, [r3, #412]	; 0x19c
    hdma_i2sRx.Init.PeriphDataAlignment = AUDIO_IN_I2S_DMAx_PERIPH_DATA_SIZE;
 8006c58:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006c5c:	f8c3 11a0 	str.w	r1, [r3, #416]	; 0x1a0
    hdma_i2sRx.Init.MemDataAlignment    = AUDIO_IN_I2S_DMAx_MEM_DATA_SIZE;
 8006c60:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006c64:	f8c3 11a4 	str.w	r1, [r3, #420]	; 0x1a4
    hdma_i2sRx.Init.Mode                = DMA_CIRCULAR;
 8006c68:	f44f 7180 	mov.w	r1, #256	; 0x100
    hdma_i2sRx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
    
    hdma_i2sRx.Instance = AUDIO_IN_I2S_DMAx_STREAM;
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hi2s, hdmarx, hdma_i2sRx);
 8006c6c:	f503 74c6 	add.w	r4, r3, #396	; 0x18c
    hdma_i2sRx.Init.Mode                = DMA_CIRCULAR;
 8006c70:	f8c3 11a8 	str.w	r1, [r3, #424]	; 0x1a8
    hdma_i2sRx.Init.Priority            = DMA_PRIORITY_HIGH;
 8006c74:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    hdma_i2sRx.Init.Channel             = AUDIO_IN_I2S_DMAx_CHANNEL;
 8006c78:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    hdma_i2sRx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8006c7c:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    hdma_i2sRx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8006c80:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    hdma_i2sRx.Init.Priority            = DMA_PRIORITY_HIGH;
 8006c84:	f8c3 11ac 	str.w	r1, [r3, #428]	; 0x1ac
    hdma_i2sRx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8006c88:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
    hdma_i2sRx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8006c8c:	2103      	movs	r1, #3
    hdma_i2sRx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8006c8e:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
    hdma_i2sRx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
 8006c92:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
    __HAL_LINKDMA(hi2s, hdmarx, hdma_i2sRx);
 8006c96:	63c4      	str	r4, [r0, #60]	; 0x3c
    hdma_i2sRx.Instance = AUDIO_IN_I2S_DMAx_STREAM;
 8006c98:	4a0e      	ldr	r2, [pc, #56]	; (8006cd4 <MX_I2S_Init+0xc8>)
    __HAL_LINKDMA(hi2s, hdmarx, hdma_i2sRx);
 8006c9a:	f8c3 01c4 	str.w	r0, [r3, #452]	; 0x1c4
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_i2sRx);
 8006c9e:	4620      	mov	r0, r4
    hdma_i2sRx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8006ca0:	f8c3 11b4 	str.w	r1, [r3, #436]	; 0x1b4
    hdma_i2sRx.Instance = AUDIO_IN_I2S_DMAx_STREAM;
 8006ca4:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    HAL_DMA_DeInit(&hdma_i2sRx);
 8006ca8:	f000 ffc2 	bl	8007c30 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_i2sRx);
 8006cac:	4620      	mov	r0, r4
 8006cae:	f000 ff41 	bl	8007b34 <HAL_DMA_Init>
  }
  
  /* I2S DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_IN_I2S_DMAx_IRQ, BSP_AUDIO_IN_IT_PRIORITY, BSP_AUDIO_IN_IT_PRIORITY);
 8006cb2:	2206      	movs	r2, #6
 8006cb4:	4611      	mov	r1, r2
 8006cb6:	200e      	movs	r0, #14
 8006cb8:	f000 fe7e 	bl	80079b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_I2S_DMAx_IRQ); 
 8006cbc:	200e      	movs	r0, #14
 8006cbe:	f000 feaf 	bl	8007a20 <HAL_NVIC_EnableIRQ>
  
  return ret;
}
 8006cc2:	2000      	movs	r0, #0
 8006cc4:	b002      	add	sp, #8
 8006cc6:	bd10      	pop	{r4, pc}
 8006cc8:	40023800 	.word	0x40023800
 8006ccc:	40003800 	.word	0x40003800
 8006cd0:	20000acc 	.word	0x20000acc
 8006cd4:	40026058 	.word	0x40026058

08006cd8 <BSP_AUDIO_IN_PDMToPCM_Init>:
* @param  ChnlNbrIn  Number of input audio channels in the PDM buffer
* @param  ChnlNbrOut Number of desired output audio channels in the  resulting PCM buffer
* @retval BSP status
*/
__weak int32_t BSP_AUDIO_IN_PDMToPCM_Init(uint32_t Instance, uint32_t AudioFreq, uint32_t ChnlNbrIn, uint32_t ChnlNbrOut)
{
 8006cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cdc:	4690      	mov	r8, r2
 8006cde:	b087      	sub	sp, #28
 8006ce0:	4699      	mov	r9, r3
  
  if(Instance != 0U)
 8006ce2:	4606      	mov	r6, r0
 8006ce4:	2800      	cmp	r0, #0
 8006ce6:	d177      	bne.n	8006dd8 <BSP_AUDIO_IN_PDMToPCM_Init+0x100>
#else
    
    uint32_t index = 0;
    
    /* Enable CRC peripheral to unlock the PDM library */
    __HAL_RCC_CRC_CLK_ENABLE();
 8006ce8:	4b3d      	ldr	r3, [pc, #244]	; (8006de0 <BSP_AUDIO_IN_PDMToPCM_Init+0x108>)
 8006cea:	9004      	str	r0, [sp, #16]
 8006cec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006cee:	4d3d      	ldr	r5, [pc, #244]	; (8006de4 <BSP_AUDIO_IN_PDMToPCM_Init+0x10c>)
 8006cf0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006cf4:	631a      	str	r2, [r3, #48]	; 0x30
 8006cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cf8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
      PDM_FilterHandler[index].high_pass_tap = 2122358088;
      PDM_FilterHandler[index].out_ptr_channels = ChnlNbrOut;
      PDM_FilterHandler[index].in_ptr_channels  = ChnlNbrIn;
      
      /* PDM lib config phase */
      PDM_FilterConfig[index].output_samples_number = (AudioFreq/1000) * N_MS_PER_INTERRUPT;
 8006cfc:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
    __HAL_RCC_CRC_CLK_ENABLE();
 8006d00:	9304      	str	r3, [sp, #16]
      PDM_FilterConfig[index].output_samples_number = (AudioFreq/1000) * N_MS_PER_INTERRUPT;
 8006d02:	fbb1 f1f7 	udiv	r1, r1, r7
 8006d06:	b28f      	uxth	r7, r1
    __HAL_RCC_CRC_CLK_ENABLE();
 8006d08:	9b04      	ldr	r3, [sp, #16]
      case 128:
        PDM_FilterConfig[index].decimation_factor = PDM_FILTER_DEC_FACTOR_128;
        break;
      case 160:
        PDM_FilterConfig[index].decimation_factor = PDM_FILTER_DEC_FACTOR_80;
        PDM_FilterConfig[index].output_samples_number *= 2;        
 8006d0a:	007b      	lsls	r3, r7, #1
 8006d0c:	b29b      	uxth	r3, r3
 8006d0e:	9303      	str	r3, [sp, #12]
 8006d10:	f505 7498 	add.w	r4, r5, #304	; 0x130
        PDM_FilterHandler[index].out_ptr_channels = 1;
        arm_fir_decimate_init_q15  (&ARM_Decimator_State[index], DECIMATOR_NUM_TAPS, DECIMATOR_FACTOR,
 8006d14:	f505 7aa4 	add.w	sl, r5, #328	; 0x148
 8006d18:	f505 7bbc 	add.w	fp, r5, #376	; 0x178
    for(index = 0; index < ChnlNbrIn; index++)
 8006d1c:	45b0      	cmp	r8, r6
 8006d1e:	f04f 0000 	mov.w	r0, #0
 8006d22:	d102      	bne.n	8006d2a <BSP_AUDIO_IN_PDMToPCM_Init+0x52>
      }
    }
    return BSP_ERROR_NONE;
#endif
  }  
}
 8006d24:	b007      	add	sp, #28
 8006d26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      PDM_FilterHandler[index].high_pass_tap = 2122358088;
 8006d2a:	4b2f      	ldr	r3, [pc, #188]	; (8006de8 <BSP_AUDIO_IN_PDMToPCM_Init+0x110>)
 8006d2c:	606b      	str	r3, [r5, #4]
      PDM_FilterConfig[index].mic_gain = 24;
 8006d2e:	2318      	movs	r3, #24
 8006d30:	80a3      	strh	r3, [r4, #4]
      switch (AudioInCtx[0].DecimationFactor)
 8006d32:	4b2e      	ldr	r3, [pc, #184]	; (8006dec <BSP_AUDIO_IN_PDMToPCM_Init+0x114>)
      volatile uint32_t error = 0;
 8006d34:	9005      	str	r0, [sp, #20]
      switch (AudioInCtx[0].DecimationFactor)
 8006d36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
      PDM_FilterHandler[index].bit_order  = PDM_FILTER_BIT_ORDER_LSB;
 8006d38:	8028      	strh	r0, [r5, #0]
      switch (AudioInCtx[0].DecimationFactor)
 8006d3a:	2b30      	cmp	r3, #48	; 0x30
      PDM_FilterHandler[index].endianness = PDM_FILTER_ENDIANNESS_LE;
 8006d3c:	8068      	strh	r0, [r5, #2]
      PDM_FilterHandler[index].out_ptr_channels = ChnlNbrOut;
 8006d3e:	f8a5 900a 	strh.w	r9, [r5, #10]
      PDM_FilterHandler[index].in_ptr_channels  = ChnlNbrIn;
 8006d42:	f8a5 8008 	strh.w	r8, [r5, #8]
      PDM_FilterConfig[index].output_samples_number = (AudioFreq/1000) * N_MS_PER_INTERRUPT;
 8006d46:	8067      	strh	r7, [r4, #2]
      switch (AudioInCtx[0].DecimationFactor)
 8006d48:	d032      	beq.n	8006db0 <BSP_AUDIO_IN_PDMToPCM_Init+0xd8>
 8006d4a:	d80e      	bhi.n	8006d6a <BSP_AUDIO_IN_PDMToPCM_Init+0x92>
 8006d4c:	2b18      	cmp	r3, #24
 8006d4e:	d02b      	beq.n	8006da8 <BSP_AUDIO_IN_PDMToPCM_Init+0xd0>
 8006d50:	2b20      	cmp	r3, #32
 8006d52:	d02b      	beq.n	8006dac <BSP_AUDIO_IN_PDMToPCM_Init+0xd4>
 8006d54:	2b10      	cmp	r3, #16
 8006d56:	d10d      	bne.n	8006d74 <BSP_AUDIO_IN_PDMToPCM_Init+0x9c>
        PDM_FilterConfig[index].decimation_factor = PDM_FILTER_DEC_FACTOR_16;
 8006d58:	2305      	movs	r3, #5
        PDM_FilterConfig[index].decimation_factor = PDM_FILTER_DEC_FACTOR_24;
 8006d5a:	8023      	strh	r3, [r4, #0]
      error = PDM_Filter_Init((PDM_Filter_Handler_t *)(&PDM_FilterHandler[index]));
 8006d5c:	4628      	mov	r0, r5
 8006d5e:	f00e fd8f 	bl	8015880 <PDM_Filter_Init>
 8006d62:	9005      	str	r0, [sp, #20]
      if (error!=0)
 8006d64:	9b05      	ldr	r3, [sp, #20]
 8006d66:	b35b      	cbz	r3, 8006dc0 <BSP_AUDIO_IN_PDMToPCM_Init+0xe8>
 8006d68:	e7fe      	b.n	8006d68 <BSP_AUDIO_IN_PDMToPCM_Init+0x90>
      switch (AudioInCtx[0].DecimationFactor)
 8006d6a:	2b50      	cmp	r3, #80	; 0x50
 8006d6c:	d024      	beq.n	8006db8 <BSP_AUDIO_IN_PDMToPCM_Init+0xe0>
 8006d6e:	d803      	bhi.n	8006d78 <BSP_AUDIO_IN_PDMToPCM_Init+0xa0>
 8006d70:	2b40      	cmp	r3, #64	; 0x40
 8006d72:	d01f      	beq.n	8006db4 <BSP_AUDIO_IN_PDMToPCM_Init+0xdc>
        return HAL_ERROR;
 8006d74:	2001      	movs	r0, #1
 8006d76:	e7d5      	b.n	8006d24 <BSP_AUDIO_IN_PDMToPCM_Init+0x4c>
      switch (AudioInCtx[0].DecimationFactor)
 8006d78:	2b80      	cmp	r3, #128	; 0x80
 8006d7a:	d01f      	beq.n	8006dbc <BSP_AUDIO_IN_PDMToPCM_Init+0xe4>
 8006d7c:	2ba0      	cmp	r3, #160	; 0xa0
 8006d7e:	d1f9      	bne.n	8006d74 <BSP_AUDIO_IN_PDMToPCM_Init+0x9c>
        PDM_FilterConfig[index].decimation_factor = PDM_FILTER_DEC_FACTOR_80;
 8006d80:	2303      	movs	r3, #3
 8006d82:	8023      	strh	r3, [r4, #0]
        PDM_FilterConfig[index].output_samples_number *= 2;        
 8006d84:	9b03      	ldr	r3, [sp, #12]
 8006d86:	8063      	strh	r3, [r4, #2]
        PDM_FilterHandler[index].out_ptr_channels = 1;
 8006d88:	2301      	movs	r3, #1
 8006d8a:	816b      	strh	r3, [r5, #10]
        arm_fir_decimate_init_q15  (&ARM_Decimator_State[index], DECIMATOR_NUM_TAPS, DECIMATOR_FACTOR,
 8006d8c:	233e      	movs	r3, #62	; 0x3e
 8006d8e:	fb03 b306 	mla	r3, r3, r6, fp
 8006d92:	2110      	movs	r1, #16
 8006d94:	200c      	movs	r0, #12
 8006d96:	9300      	str	r3, [sp, #0]
 8006d98:	9101      	str	r1, [sp, #4]
 8006d9a:	4b15      	ldr	r3, [pc, #84]	; (8006df0 <BSP_AUDIO_IN_PDMToPCM_Init+0x118>)
 8006d9c:	2202      	movs	r2, #2
 8006d9e:	fb00 a006 	mla	r0, r0, r6, sl
 8006da2:	f00c fbb1 	bl	8013508 <arm_fir_decimate_init_q15>
 8006da6:	e7d9      	b.n	8006d5c <BSP_AUDIO_IN_PDMToPCM_Init+0x84>
        PDM_FilterConfig[index].decimation_factor = PDM_FILTER_DEC_FACTOR_24;
 8006da8:	2306      	movs	r3, #6
 8006daa:	e7d6      	b.n	8006d5a <BSP_AUDIO_IN_PDMToPCM_Init+0x82>
        PDM_FilterConfig[index].decimation_factor = PDM_FILTER_DEC_FACTOR_32;
 8006dac:	2307      	movs	r3, #7
 8006dae:	e7d4      	b.n	8006d5a <BSP_AUDIO_IN_PDMToPCM_Init+0x82>
        PDM_FilterConfig[index].decimation_factor = PDM_FILTER_DEC_FACTOR_48;
 8006db0:	2301      	movs	r3, #1
 8006db2:	e7d2      	b.n	8006d5a <BSP_AUDIO_IN_PDMToPCM_Init+0x82>
        PDM_FilterConfig[index].decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 8006db4:	2302      	movs	r3, #2
 8006db6:	e7d0      	b.n	8006d5a <BSP_AUDIO_IN_PDMToPCM_Init+0x82>
        PDM_FilterConfig[index].decimation_factor = PDM_FILTER_DEC_FACTOR_80;
 8006db8:	2303      	movs	r3, #3
 8006dba:	e7ce      	b.n	8006d5a <BSP_AUDIO_IN_PDMToPCM_Init+0x82>
        PDM_FilterConfig[index].decimation_factor = PDM_FILTER_DEC_FACTOR_128;
 8006dbc:	2304      	movs	r3, #4
 8006dbe:	e7cc      	b.n	8006d5a <BSP_AUDIO_IN_PDMToPCM_Init+0x82>
      error = PDM_Filter_setConfig((PDM_Filter_Handler_t *)&PDM_FilterHandler[index], &PDM_FilterConfig[index]);
 8006dc0:	4621      	mov	r1, r4
 8006dc2:	4628      	mov	r0, r5
 8006dc4:	f00e fde6 	bl	8015994 <PDM_Filter_setConfig>
 8006dc8:	9005      	str	r0, [sp, #20]
      if (error!=0)
 8006dca:	9b05      	ldr	r3, [sp, #20]
 8006dcc:	354c      	adds	r5, #76	; 0x4c
 8006dce:	3406      	adds	r4, #6
 8006dd0:	b103      	cbz	r3, 8006dd4 <BSP_AUDIO_IN_PDMToPCM_Init+0xfc>
 8006dd2:	e7fe      	b.n	8006dd2 <BSP_AUDIO_IN_PDMToPCM_Init+0xfa>
    for(index = 0; index < ChnlNbrIn; index++)
 8006dd4:	3601      	adds	r6, #1
 8006dd6:	e7a1      	b.n	8006d1c <BSP_AUDIO_IN_PDMToPCM_Init+0x44>
    return BSP_ERROR_WRONG_PARAM;
 8006dd8:	f06f 0001 	mvn.w	r0, #1
 8006ddc:	e7a2      	b.n	8006d24 <BSP_AUDIO_IN_PDMToPCM_Init+0x4c>
 8006dde:	bf00      	nop
 8006de0:	40023800 	.word	0x40023800
 8006de4:	20000cb8 	.word	0x20000cb8
 8006de8:	7e809d48 	.word	0x7e809d48
 8006dec:	20000acc 	.word	0x20000acc
 8006df0:	200000e4 	.word	0x200000e4

08006df4 <BSP_AUDIO_IN_Init>:
{
 8006df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(Instance >= AUDIO_IN_INSTANCES_NBR)
 8006df8:	2802      	cmp	r0, #2
{
 8006dfa:	b09f      	sub	sp, #124	; 0x7c
 8006dfc:	4680      	mov	r8, r0
  if(Instance >= AUDIO_IN_INSTANCES_NBR)
 8006dfe:	d902      	bls.n	8006e06 <BSP_AUDIO_IN_Init+0x12>
        return BSP_ERROR_WRONG_PARAM;
 8006e00:	f06f 0001 	mvn.w	r0, #1
 8006e04:	e093      	b.n	8006f2e <BSP_AUDIO_IN_Init+0x13a>
    AudioInCtx[Instance].Device          = AudioInit->Device;
 8006e06:	4c4b      	ldr	r4, [pc, #300]	; (8006f34 <BSP_AUDIO_IN_Init+0x140>)
 8006e08:	680b      	ldr	r3, [r1, #0]
 8006e0a:	2264      	movs	r2, #100	; 0x64
 8006e0c:	fb02 4200 	mla	r2, r2, r0, r4
    AudioInCtx[Instance].BitsPerSample   = AudioInit->BitsPerSample;
 8006e10:	6888      	ldr	r0, [r1, #8]
    AudioInCtx[Instance].Device          = AudioInit->Device;
 8006e12:	6053      	str	r3, [r2, #4]
    AudioInCtx[Instance].ChannelsNbr     = AudioInit->ChannelsNbr;  
 8006e14:	68cb      	ldr	r3, [r1, #12]
 8006e16:	6113      	str	r3, [r2, #16]
    AudioInCtx[Instance].SampleRate      = AudioInit->SampleRate; 
 8006e18:	684b      	ldr	r3, [r1, #4]
    AudioInCtx[Instance].Volume          = AudioInit->Volume;
 8006e1a:	6909      	ldr	r1, [r1, #16]
 8006e1c:	6211      	str	r1, [r2, #32]
    AudioInCtx[Instance].State           = AUDIO_IN_STATE_RESET;
 8006e1e:	2100      	movs	r1, #0
    AudioInCtx[Instance].SampleRate      = AudioInit->SampleRate; 
 8006e20:	6093      	str	r3, [r2, #8]
    AudioInCtx[Instance].BitsPerSample   = AudioInit->BitsPerSample;
 8006e22:	60d0      	str	r0, [r2, #12]
    AudioInCtx[Instance].State           = AUDIO_IN_STATE_RESET;
 8006e24:	6251      	str	r1, [r2, #36]	; 0x24
    if(Instance == 0U)
 8006e26:	f1b8 0f00 	cmp.w	r8, #0
 8006e2a:	f040 818a 	bne.w	8007142 <BSP_AUDIO_IN_Init+0x34e>
      switch (AudioInit->SampleRate)
 8006e2e:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8006e32:	d003      	beq.n	8006e3c <BSP_AUDIO_IN_Init+0x48>
 8006e34:	d805      	bhi.n	8006e42 <BSP_AUDIO_IN_Init+0x4e>
 8006e36:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8006e3a:	d1e1      	bne.n	8006e00 <BSP_AUDIO_IN_Init+0xc>
        PDM_Clock_Freq = 1280;
 8006e3c:	f44f 66a0 	mov.w	r6, #1280	; 0x500
 8006e40:	e00b      	b.n	8006e5a <BSP_AUDIO_IN_Init+0x66>
      switch (AudioInit->SampleRate)
 8006e42:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8006e46:	d006      	beq.n	8006e56 <BSP_AUDIO_IN_Init+0x62>
 8006e48:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d1d7      	bne.n	8006e00 <BSP_AUDIO_IN_Init+0xc>
        PDM_Clock_Freq = 3072;
 8006e50:	f44f 6640 	mov.w	r6, #3072	; 0xc00
        break;
 8006e54:	e001      	b.n	8006e5a <BSP_AUDIO_IN_Init+0x66>
        PDM_Clock_Freq = 2048;
 8006e56:	f44f 6600 	mov.w	r6, #2048	; 0x800
      AudioInCtx[Instance].DecimationFactor = (PDM_Clock_Freq * 1000)/AudioInit->SampleRate;
 8006e5a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006e5e:	4372      	muls	r2, r6
 8006e60:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e64:	6623      	str	r3, [r4, #96]	; 0x60
      AudioInCtx[Instance].Size = (PDM_Clock_Freq/8) * 2 * N_MS_PER_INTERRUPT;
 8006e66:	08f3      	lsrs	r3, r6, #3
 8006e68:	005b      	lsls	r3, r3, #1
 8006e6a:	61e3      	str	r3, [r4, #28]
      if(AudioInCtx[0].ChannelsNbr == 1)
 8006e6c:	6923      	ldr	r3, [r4, #16]
      i2s_config.AudioFreq = ((PDM_Clock_Freq * 1000) / 32);
 8006e6e:	0952      	lsrs	r2, r2, #5
      if(AudioInCtx[0].ChannelsNbr == 1)
 8006e70:	2b01      	cmp	r3, #1
        i2s_config.DataFormat   = I2S_DATAFORMAT_16B;
 8006e72:	bf0c      	ite	eq
 8006e74:	2100      	moveq	r1, #0
        i2s_config.DataFormat   = I2S_DATAFORMAT_32B;
 8006e76:	2105      	movne	r1, #5
      i2s_config.AudioFreq = ((PDM_Clock_Freq * 1000) / 32);
 8006e78:	920f      	str	r2, [sp, #60]	; 0x3c
      i2s_config.CPOL         = I2S_CPOL_HIGH;
 8006e7a:	2208      	movs	r2, #8
      i2s_config.MCLKOutput   = I2S_MCLKOUTPUT_DISABLE;
 8006e7c:	2500      	movs	r5, #0
        i2s_config.DataFormat   = I2S_DATAFORMAT_32B;
 8006e7e:	910d      	str	r1, [sp, #52]	; 0x34
      i2s_config.CPOL         = I2S_CPOL_HIGH;
 8006e80:	9210      	str	r2, [sp, #64]	; 0x40
      i2s_config.Standard     = I2S_STANDARD_MSB;
 8006e82:	2110      	movs	r1, #16
 8006e84:	f44f 7240 	mov.w	r2, #768	; 0x300
      if (AudioInCtx[0].ChannelsNbr>1)
 8006e88:	2b01      	cmp	r3, #1
      i2s_config.MCLKOutput   = I2S_MCLKOUTPUT_DISABLE;
 8006e8a:	950e      	str	r5, [sp, #56]	; 0x38
      i2s_config.Standard     = I2S_STANDARD_MSB;
 8006e8c:	e9cd 210b 	strd	r2, r1, [sp, #44]	; 0x2c
      i2s_config.ClockSource  = I2S_CLOCK_PLL;
 8006e90:	e9cd 5511 	strd	r5, r5, [sp, #68]	; 0x44
      if (AudioInCtx[0].ChannelsNbr>1)
 8006e94:	f240 8083 	bls.w	8006f9e <BSP_AUDIO_IN_Init+0x1aa>
{
  
  GPIO_InitTypeDef   GPIO_InitStruct;
  
  /* Enable AUDIO_TIMER clock*/
  AUDIO_IN_TIMER_CLK_ENABLE();
 8006e98:	4b27      	ldr	r3, [pc, #156]	; (8006f38 <BSP_AUDIO_IN_Init+0x144>)
 8006e9a:	9500      	str	r5, [sp, #0]
 8006e9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
  
  GPIO_InitStruct.Alternate = AUDIO_IN_TIMER_CHIN_AF;
  GPIO_InitStruct.Pin = AUDIO_IN_TIMER_CHIN_PIN;
  HAL_GPIO_Init(AUDIO_IN_TIMER_CHIN_GPIO_PORT, &GPIO_InitStruct);
 8006e9e:	4827      	ldr	r0, [pc, #156]	; (8006f3c <BSP_AUDIO_IN_Init+0x148>)
  AUDIO_IN_TIMER_CLK_ENABLE();
 8006ea0:	f042 0202 	orr.w	r2, r2, #2
 8006ea4:	641a      	str	r2, [r3, #64]	; 0x40
 8006ea6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ea8:	f002 0202 	and.w	r2, r2, #2
 8006eac:	9200      	str	r2, [sp, #0]
 8006eae:	9a00      	ldr	r2, [sp, #0]
  AUDIO_IN_TIMER_CHOUT_GPIO_PORT_CLK_ENABLE();
 8006eb0:	9501      	str	r5, [sp, #4]
 8006eb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006eb4:	f042 0202 	orr.w	r2, r2, #2
 8006eb8:	631a      	str	r2, [r3, #48]	; 0x30
 8006eba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ebc:	f002 0202 	and.w	r2, r2, #2
 8006ec0:	9201      	str	r2, [sp, #4]
 8006ec2:	9a01      	ldr	r2, [sp, #4]
  AUDIO_IN_TIMER_CHIN_GPIO_PORT_CLK_ENABLE();
 8006ec4:	9502      	str	r5, [sp, #8]
 8006ec6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ec8:	f042 0202 	orr.w	r2, r2, #2
 8006ecc:	631a      	str	r2, [r3, #48]	; 0x30
 8006ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  GPIO_InitStruct.Pin = AUDIO_IN_TIMER_CHIN_PIN;
 8006ed0:	af1e      	add	r7, sp, #120	; 0x78
  AUDIO_IN_TIMER_CHIN_GPIO_PORT_CLK_ENABLE();
 8006ed2:	f003 0302 	and.w	r3, r3, #2
  GPIO_InitStruct.Pin = AUDIO_IN_TIMER_CHIN_PIN;
 8006ed6:	f847 1d2c 	str.w	r1, [r7, #-44]!
  AUDIO_IN_TIMER_CHIN_GPIO_PORT_CLK_ENABLE();
 8006eda:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006edc:	f04f 0a02 	mov.w	sl, #2
  HAL_GPIO_Init(AUDIO_IN_TIMER_CHIN_GPIO_PORT, &GPIO_InitStruct);
 8006ee0:	4639      	mov	r1, r7
  AUDIO_IN_TIMER_CHIN_GPIO_PORT_CLK_ENABLE();
 8006ee2:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006ee4:	f04f 0901 	mov.w	r9, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8006ee8:	2303      	movs	r3, #3
  GPIO_InitStruct.Alternate = AUDIO_IN_TIMER_CHIN_AF;
 8006eea:	e9cd 3a16 	strd	r3, sl, [sp, #88]	; 0x58
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006eee:	e9cd a914 	strd	sl, r9, [sp, #80]	; 0x50
  HAL_GPIO_Init(AUDIO_IN_TIMER_CHIN_GPIO_PORT, &GPIO_InitStruct);
 8006ef2:	f001 f9bd 	bl	8008270 <HAL_GPIO_Init>
  
  GPIO_InitStruct.Alternate = AUDIO_IN_TIMER_CHOUT_AF;
  GPIO_InitStruct.Pin = AUDIO_IN_TIMER_CHOUT_PIN;
  HAL_GPIO_Init(AUDIO_IN_TIMER_CHOUT_GPIO_PORT, &GPIO_InitStruct);
 8006ef6:	4639      	mov	r1, r7
  /* Configure the Input: channel_1 */
  sICConfig.ICPolarity  = TIM_ICPOLARITY_RISING;
  sICConfig.ICSelection = TIM_ICSELECTION_DIRECTTI;
  sICConfig.ICPrescaler = TIM_ICPSC_DIV1;
  sICConfig.ICFilter = 0;
  if(HAL_TIM_IC_ConfigChannel(&TimDividerHandle, &sICConfig, TIM_CHANNEL_1) != HAL_OK)
 8006ef8:	4f11      	ldr	r7, [pc, #68]	; (8006f40 <BSP_AUDIO_IN_Init+0x14c>)
  HAL_GPIO_Init(AUDIO_IN_TIMER_CHOUT_GPIO_PORT, &GPIO_InitStruct);
 8006efa:	4810      	ldr	r0, [pc, #64]	; (8006f3c <BSP_AUDIO_IN_Init+0x148>)
  GPIO_InitStruct.Alternate = AUDIO_IN_TIMER_CHOUT_AF;
 8006efc:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
  GPIO_InitStruct.Pin = AUDIO_IN_TIMER_CHOUT_PIN;
 8006f00:	2320      	movs	r3, #32
 8006f02:	9313      	str	r3, [sp, #76]	; 0x4c
  HAL_GPIO_Init(AUDIO_IN_TIMER_CHOUT_GPIO_PORT, &GPIO_InitStruct);
 8006f04:	f001 f9b4 	bl	8008270 <HAL_GPIO_Init>
  TimDividerHandle.Instance = AUDIO_IN_TIMER;
 8006f08:	4b0e      	ldr	r3, [pc, #56]	; (8006f44 <BSP_AUDIO_IN_Init+0x150>)
 8006f0a:	f8c4 345c 	str.w	r3, [r4, #1116]	; 0x45c
  if(HAL_TIM_IC_ConfigChannel(&TimDividerHandle, &sICConfig, TIM_CHANNEL_1) != HAL_OK)
 8006f0e:	462a      	mov	r2, r5
 8006f10:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8006f14:	4638      	mov	r0, r7
  sICConfig.ICPolarity  = TIM_ICPOLARITY_RISING;
 8006f16:	f8c4 5498 	str.w	r5, [r4, #1176]	; 0x498
  sICConfig.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8006f1a:	f8c4 949c 	str.w	r9, [r4, #1180]	; 0x49c
  sICConfig.ICPrescaler = TIM_ICPSC_DIV1;
 8006f1e:	f8c4 54a0 	str.w	r5, [r4, #1184]	; 0x4a0
  sICConfig.ICFilter = 0;
 8006f22:	f8c4 54a4 	str.w	r5, [r4, #1188]	; 0x4a4
  if(HAL_TIM_IC_ConfigChannel(&TimDividerHandle, &sICConfig, TIM_CHANNEL_1) != HAL_OK)
 8006f26:	f003 fd73 	bl	800aa10 <HAL_TIM_IC_ConfigChannel>
 8006f2a:	b168      	cbz	r0, 8006f48 <BSP_AUDIO_IN_Init+0x154>
          return HAL_ERROR;
 8006f2c:	2001      	movs	r0, #1
}
 8006f2e:	b01f      	add	sp, #124	; 0x7c
 8006f30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f34:	20000acc 	.word	0x20000acc
 8006f38:	40023800 	.word	0x40023800
 8006f3c:	40020400 	.word	0x40020400
 8006f40:	20000f28 	.word	0x20000f28
 8006f44:	40000400 	.word	0x40000400
    return HAL_ERROR;
  }
  
  /* Configure TIM1 in Gated Slave mode for the external trigger (Filtered Timer
  Input 1) */
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8006f48:	2350      	movs	r3, #80	; 0x50
 8006f4a:	f8c4 34ac 	str.w	r3, [r4, #1196]	; 0x4ac
  sSlaveConfig.SlaveMode    = TIM_SLAVEMODE_EXTERNAL1;
  if( HAL_TIM_SlaveConfigSynchronization(&TimDividerHandle, &sSlaveConfig) != HAL_OK)
 8006f4e:	f107 014c 	add.w	r1, r7, #76	; 0x4c
  sSlaveConfig.SlaveMode    = TIM_SLAVEMODE_EXTERNAL1;
 8006f52:	2307      	movs	r3, #7
  if( HAL_TIM_SlaveConfigSynchronization(&TimDividerHandle, &sSlaveConfig) != HAL_OK)
 8006f54:	4638      	mov	r0, r7
  sSlaveConfig.SlaveMode    = TIM_SLAVEMODE_EXTERNAL1;
 8006f56:	f8c4 34a8 	str.w	r3, [r4, #1192]	; 0x4a8
  if( HAL_TIM_SlaveConfigSynchronization(&TimDividerHandle, &sSlaveConfig) != HAL_OK)
 8006f5a:	f003 fb87 	bl	800a66c <HAL_TIM_SlaveConfigSynchronization>
 8006f5e:	2800      	cmp	r0, #0
 8006f60:	d1e4      	bne.n	8006f2c <BSP_AUDIO_IN_Init+0x138>
    return HAL_ERROR;
  }
  
  /* Initialize TIM3 peripheral in PWM mode*/
  TimDividerHandle.Init.Period            = 1;
  TimDividerHandle.Init.Prescaler         = 0;
 8006f62:	f8c4 0460 	str.w	r0, [r4, #1120]	; 0x460
  TimDividerHandle.Init.ClockDivision     = 0;
 8006f66:	f8c4 046c 	str.w	r0, [r4, #1132]	; 0x46c
  TimDividerHandle.Init.CounterMode       = TIM_COUNTERMODE_UP;
 8006f6a:	f8c4 0464 	str.w	r0, [r4, #1124]	; 0x464
  TimDividerHandle.Init.RepetitionCounter = 0;
 8006f6e:	f8c4 0470 	str.w	r0, [r4, #1136]	; 0x470
  if(HAL_TIM_PWM_Init(&TimDividerHandle) != HAL_OK)
 8006f72:	4638      	mov	r0, r7
  TimDividerHandle.Init.Period            = 1;
 8006f74:	f8c4 9468 	str.w	r9, [r4, #1128]	; 0x468
  if(HAL_TIM_PWM_Init(&TimDividerHandle) != HAL_OK)
 8006f78:	f003 fcf6 	bl	800a968 <HAL_TIM_PWM_Init>
 8006f7c:	2800      	cmp	r0, #0
 8006f7e:	d1d5      	bne.n	8006f2c <BSP_AUDIO_IN_Init+0x138>
  {
    return HAL_ERROR;
  }
  
  /* Configure the PWM_channel_1  */
  sOCConfig.OCMode     = TIM_OCMODE_PWM1;
 8006f80:	2360      	movs	r3, #96	; 0x60
  sOCConfig.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006f82:	f8c4 04c4 	str.w	r0, [r4, #1220]	; 0x4c4
  sOCConfig.Pulse = 1;
  if(HAL_TIM_PWM_ConfigChannel(&TimDividerHandle, &sOCConfig, TIM_CHANNEL_2) != HAL_OK)
 8006f86:	2204      	movs	r2, #4
 8006f88:	18f9      	adds	r1, r7, r3
 8006f8a:	4638      	mov	r0, r7
  sOCConfig.OCMode     = TIM_OCMODE_PWM1;
 8006f8c:	f8c4 34bc 	str.w	r3, [r4, #1212]	; 0x4bc
  sOCConfig.Pulse = 1;
 8006f90:	f8c4 94c0 	str.w	r9, [r4, #1216]	; 0x4c0
  if(HAL_TIM_PWM_ConfigChannel(&TimDividerHandle, &sOCConfig, TIM_CHANNEL_2) != HAL_OK)
 8006f94:	f003 fe20 	bl	800abd8 <HAL_TIM_PWM_ConfigChannel>
 8006f98:	2800      	cmp	r0, #0
 8006f9a:	d1c7      	bne.n	8006f2c <BSP_AUDIO_IN_Init+0x138>
        PDM_Clock_Freq *=2;
 8006f9c:	0076      	lsls	r6, r6, #1
      if(MX_I2S_ClockConfig(&hAudioInI2s, PDM_Clock_Freq) != HAL_OK)
 8006f9e:	4f6e      	ldr	r7, [pc, #440]	; (8007158 <BSP_AUDIO_IN_Init+0x364>)
 8006fa0:	4631      	mov	r1, r6
 8006fa2:	4638      	mov	r0, r7
 8006fa4:	f7ff fdb8 	bl	8006b18 <MX_I2S_ClockConfig>
 8006fa8:	2800      	cmp	r0, #0
 8006faa:	f040 80c4 	bne.w	8007136 <BSP_AUDIO_IN_Init+0x342>
      hAudioInI2s.Instance          = AUDIO_IN_I2S_INSTANCE;
 8006fae:	4b6b      	ldr	r3, [pc, #428]	; (800715c <BSP_AUDIO_IN_Init+0x368>)
  AUDIO_IN_I2S_CLK_ENABLE();
 8006fb0:	4d6b      	ldr	r5, [pc, #428]	; (8007160 <BSP_AUDIO_IN_Init+0x36c>)
      __HAL_I2S_DISABLE(&hAudioInI2s);
 8006fb2:	69da      	ldr	r2, [r3, #28]
      hAudioInI2s.Instance          = AUDIO_IN_I2S_INSTANCE;
 8006fb4:	603b      	str	r3, [r7, #0]
      __HAL_I2S_DISABLE(&hAudioInI2s);
 8006fb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006fba:	0412      	lsls	r2, r2, #16
 8006fbc:	0c12      	lsrs	r2, r2, #16
 8006fbe:	61da      	str	r2, [r3, #28]
  AUDIO_IN_I2S_CLK_ENABLE();
 8006fc0:	9003      	str	r0, [sp, #12]
 8006fc2:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8006fc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006fc8:	642b      	str	r3, [r5, #64]	; 0x40
 8006fca:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8006fcc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006fd0:	9303      	str	r3, [sp, #12]
 8006fd2:	9b03      	ldr	r3, [sp, #12]
  AUDIO_IN_I2S_SCK_GPIO_CLK_ENABLE();
 8006fd4:	9004      	str	r0, [sp, #16]
 8006fd6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8006fd8:	f043 0302 	orr.w	r3, r3, #2
 8006fdc:	632b      	str	r3, [r5, #48]	; 0x30
 8006fde:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8006fe0:	f003 0302 	and.w	r3, r3, #2
 8006fe4:	9304      	str	r3, [sp, #16]
 8006fe6:	9b04      	ldr	r3, [sp, #16]
  AUDIO_IN_I2S_MOSI_GPIO_CLK_ENABLE();
 8006fe8:	9005      	str	r0, [sp, #20]
 8006fea:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8006fec:	f043 0302 	orr.w	r3, r3, #2
 8006ff0:	632b      	str	r3, [r5, #48]	; 0x30
 8006ff2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8006ff4:	f003 0302 	and.w	r3, r3, #2
 8006ff8:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(AUDIO_IN_I2S_SCK_GPIO_PORT, &GPIO_InitStruct);
 8006ffa:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
  AUDIO_IN_I2S_MOSI_GPIO_CLK_ENABLE();
 8006ffe:	9b05      	ldr	r3, [sp, #20]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8007000:	f04f 0902 	mov.w	r9, #2
  GPIO_InitStruct.Pin       = AUDIO_IN_I2S_SCK_PIN;
 8007004:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Alternate = AUDIO_IN_I2S_SCK_AF;
 8007008:	f04f 0a05 	mov.w	sl, #5
  HAL_GPIO_Init(AUDIO_IN_I2S_SCK_GPIO_PORT, &GPIO_InitStruct);
 800700c:	a913      	add	r1, sp, #76	; 0x4c
 800700e:	f500 3001 	add.w	r0, r0, #132096	; 0x20400
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8007012:	2601      	movs	r6, #1
  GPIO_InitStruct.Pin       = AUDIO_IN_I2S_SCK_PIN;
 8007014:	9313      	str	r3, [sp, #76]	; 0x4c
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8007016:	e9cd 9614 	strd	r9, r6, [sp, #80]	; 0x50
  GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 800701a:	f8cd 9058 	str.w	r9, [sp, #88]	; 0x58
  GPIO_InitStruct.Alternate = AUDIO_IN_I2S_SCK_AF;
 800701e:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
  HAL_GPIO_Init(AUDIO_IN_I2S_SCK_GPIO_PORT, &GPIO_InitStruct);
 8007022:	f001 f925 	bl	8008270 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = AUDIO_IN_I2S_MOSI_PIN ;
 8007026:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  HAL_GPIO_Init(AUDIO_IN_I2S_MOSI_GPIO_PORT, &GPIO_InitStruct);
 800702a:	a913      	add	r1, sp, #76	; 0x4c
 800702c:	484d      	ldr	r0, [pc, #308]	; (8007164 <BSP_AUDIO_IN_Init+0x370>)
  GPIO_InitStruct.Pin       = AUDIO_IN_I2S_MOSI_PIN ;
 800702e:	9313      	str	r3, [sp, #76]	; 0x4c
  GPIO_InitStruct.Alternate = AUDIO_IN_I2S_MOSI_AF;
 8007030:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
  HAL_GPIO_Init(AUDIO_IN_I2S_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8007034:	f001 f91c 	bl	8008270 <HAL_GPIO_Init>
      if (MX_I2S_Init(&hAudioInI2s, &i2s_config)!= HAL_OK)
 8007038:	a90b      	add	r1, sp, #44	; 0x2c
 800703a:	4638      	mov	r0, r7
 800703c:	f7ff fde6 	bl	8006c0c <MX_I2S_Init>
 8007040:	2800      	cmp	r0, #0
 8007042:	d17b      	bne.n	800713c <BSP_AUDIO_IN_Init+0x348>
      if (HAL_I2S_Init(&hAudioInI2s) != HAL_OK)
 8007044:	4638      	mov	r0, r7
 8007046:	f001 ff4d 	bl	8008ee4 <HAL_I2S_Init>
 800704a:	4607      	mov	r7, r0
 800704c:	2800      	cmp	r0, #0
 800704e:	f47f af6d 	bne.w	8006f2c <BSP_AUDIO_IN_Init+0x138>
      if (AudioInCtx[0].ChannelsNbr>2)
 8007052:	6923      	ldr	r3, [r4, #16]
 8007054:	454b      	cmp	r3, r9
 8007056:	d964      	bls.n	8007122 <BSP_AUDIO_IN_Init+0x32e>
        hAudioInSPI.Instance               = AUDIO_IN_SPI_INSTANCE;
 8007058:	4b43      	ldr	r3, [pc, #268]	; (8007168 <BSP_AUDIO_IN_Init+0x374>)
 800705a:	f8df b114 	ldr.w	fp, [pc, #276]	; 8007170 <BSP_AUDIO_IN_Init+0x37c>
        __HAL_SPI_DISABLE(&hAudioInSPI);
 800705e:	681a      	ldr	r2, [r3, #0]
        hAudioInSPI.Instance               = AUDIO_IN_SPI_INSTANCE;
 8007060:	f8cb 3000 	str.w	r3, [fp]
        __HAL_SPI_DISABLE(&hAudioInSPI);
 8007064:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007068:	601a      	str	r2, [r3, #0]
  AUDIO_IN_SPI_SCK_GPIO_CLK_ENABLE();
 800706a:	9006      	str	r0, [sp, #24]
 800706c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800706e:	4333      	orrs	r3, r6
 8007070:	632b      	str	r3, [r5, #48]	; 0x30
 8007072:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8007074:	4033      	ands	r3, r6
 8007076:	9306      	str	r3, [sp, #24]
 8007078:	9b06      	ldr	r3, [sp, #24]
  AUDIO_IN_SPI_MISO_GPIO_CLK_ENABLE();
 800707a:	9007      	str	r0, [sp, #28]
 800707c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800707e:	4333      	orrs	r3, r6
 8007080:	632b      	str	r3, [r5, #48]	; 0x30
 8007082:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8007084:	4033      	ands	r3, r6
 8007086:	9307      	str	r3, [sp, #28]
 8007088:	9b07      	ldr	r3, [sp, #28]
  AUDIO_IN_SPI_MOSI_GPIO_CLK_ENABLE();
 800708a:	9008      	str	r0, [sp, #32]
 800708c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800708e:	4333      	orrs	r3, r6
 8007090:	632b      	str	r3, [r5, #48]	; 0x30
 8007092:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8007094:	4033      	ands	r3, r6
 8007096:	9308      	str	r3, [sp, #32]
 8007098:	9b08      	ldr	r3, [sp, #32]
  AUDIO_IN_SPI_CLK_ENABLE();
 800709a:	9009      	str	r0, [sp, #36]	; 0x24
 800709c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800709e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80070a2:	646b      	str	r3, [r5, #68]	; 0x44
 80070a4:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80070a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80070aa:	9309      	str	r3, [sp, #36]	; 0x24
 80070ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
  AUDIO_IN_SPI_DMAx_CLK_ENABLE();
 80070ae:	900a      	str	r0, [sp, #40]	; 0x28
 80070b0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  HAL_GPIO_Init(AUDIO_IN_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 80070b2:	482e      	ldr	r0, [pc, #184]	; (800716c <BSP_AUDIO_IN_Init+0x378>)
  AUDIO_IN_SPI_DMAx_CLK_ENABLE();
 80070b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80070b8:	632b      	str	r3, [r5, #48]	; 0x30
 80070ba:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80070bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80070c0:	930a      	str	r3, [sp, #40]	; 0x28
 80070c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = AUDIO_IN_SPI_SCK_AF;
 80070c4:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
  GPIO_InitStruct.Pin       = AUDIO_IN_SPI_SCK_PIN;
 80070c8:	2320      	movs	r3, #32
  HAL_GPIO_Init(AUDIO_IN_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 80070ca:	a913      	add	r1, sp, #76	; 0x4c
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80070cc:	e9cd 3913 	strd	r3, r9, [sp, #76]	; 0x4c
  GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 80070d0:	e9cd 6915 	strd	r6, r9, [sp, #84]	; 0x54
  HAL_GPIO_Init(AUDIO_IN_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 80070d4:	f001 f8cc 	bl	8008270 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = AUDIO_IN_SPI_MOSI_PIN;
 80070d8:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(AUDIO_IN_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 80070da:	a913      	add	r1, sp, #76	; 0x4c
 80070dc:	4823      	ldr	r0, [pc, #140]	; (800716c <BSP_AUDIO_IN_Init+0x378>)
  GPIO_InitStruct.Pin = AUDIO_IN_SPI_MOSI_PIN;
 80070de:	9313      	str	r3, [sp, #76]	; 0x4c
  GPIO_InitStruct.Alternate = AUDIO_IN_SPI_MOSI_AF;
 80070e0:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
  HAL_GPIO_Init(AUDIO_IN_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 80070e4:	f001 f8c4 	bl	8008270 <HAL_GPIO_Init>
        spi_config.Direction         = SPI_DIRECTION_2LINES_RXONLY;
 80070e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80070ec:	9314      	str	r3, [sp, #80]	; 0x50
        spi_config.CRCPolynomial     = 7;
 80070ee:	2307      	movs	r3, #7
 80070f0:	931d      	str	r3, [sp, #116]	; 0x74
        spi_config.DataSize          = SPI_DATASIZE_16BIT;
 80070f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80070f6:	9315      	str	r3, [sp, #84]	; 0x54
        if (MX_SPI_Init(&hAudioInSPI, &spi_config)!= HAL_OK)
 80070f8:	a913      	add	r1, sp, #76	; 0x4c
        spi_config.NSS               = SPI_NSS_SOFT;
 80070fa:	f44f 7300 	mov.w	r3, #512	; 0x200
        if (MX_SPI_Init(&hAudioInSPI, &spi_config)!= HAL_OK)
 80070fe:	4658      	mov	r0, fp
        spi_config.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007100:	9719      	str	r7, [sp, #100]	; 0x64
        spi_config.CLKPolarity       = SPI_POLARITY_HIGH;
 8007102:	e9cd 9616 	strd	r9, r6, [sp, #88]	; 0x58
        spi_config.CRCCalculation    = SPI_CRCCALCULATION_DISABLED;
 8007106:	971c      	str	r7, [sp, #112]	; 0x70
        spi_config.FirstBit          = SPI_FIRSTBIT_MSB;
 8007108:	971a      	str	r7, [sp, #104]	; 0x68
        spi_config.NSS               = SPI_NSS_SOFT;
 800710a:	9318      	str	r3, [sp, #96]	; 0x60
        spi_config.TIMode            = SPI_TIMODE_DISABLED;
 800710c:	971b      	str	r7, [sp, #108]	; 0x6c
        spi_config.Mode              = SPI_MODE_SLAVE;
 800710e:	9713      	str	r7, [sp, #76]	; 0x4c
        if (MX_SPI_Init(&hAudioInSPI, &spi_config)!= HAL_OK)
 8007110:	f7ff fd28 	bl	8006b64 <MX_SPI_Init>
 8007114:	b990      	cbnz	r0, 800713c <BSP_AUDIO_IN_Init+0x348>
        if (HAL_SPI_Init(&hAudioInSPI) != HAL_OK)
 8007116:	4658      	mov	r0, fp
 8007118:	f002 fe46 	bl	8009da8 <HAL_SPI_Init>
 800711c:	2800      	cmp	r0, #0
 800711e:	f47f af05 	bne.w	8006f2c <BSP_AUDIO_IN_Init+0x138>
      if (BSP_AUDIO_IN_PDMToPCM_Init(Instance, AudioInCtx[0].SampleRate, AudioInCtx[0].ChannelsNbr, AudioInCtx[0].ChannelsNbr)!= HAL_OK)
 8007122:	6923      	ldr	r3, [r4, #16]
 8007124:	68a1      	ldr	r1, [r4, #8]
 8007126:	461a      	mov	r2, r3
 8007128:	2000      	movs	r0, #0
 800712a:	f7ff fdd5 	bl	8006cd8 <BSP_AUDIO_IN_PDMToPCM_Init>
 800712e:	b160      	cbz	r0, 800714a <BSP_AUDIO_IN_Init+0x356>
        return BSP_ERROR_NO_INIT;
 8007130:	f04f 30ff 	mov.w	r0, #4294967295
 8007134:	e6fb      	b.n	8006f2e <BSP_AUDIO_IN_Init+0x13a>
        return BSP_ERROR_CLOCK_FAILURE;
 8007136:	f06f 0008 	mvn.w	r0, #8
 800713a:	e6f8      	b.n	8006f2e <BSP_AUDIO_IN_Init+0x13a>
        return BSP_ERROR_PERIPH_FAILURE;
 800713c:	f06f 0003 	mvn.w	r0, #3
 8007140:	e6f5      	b.n	8006f2e <BSP_AUDIO_IN_Init+0x13a>
    else if(Instance == 1U)
 8007142:	f1b8 0f01 	cmp.w	r8, #1
 8007146:	f43f ae5b 	beq.w	8006e00 <BSP_AUDIO_IN_Init+0xc>
    AudioInCtx[Instance].State = AUDIO_IN_STATE_STOP; 
 800714a:	2364      	movs	r3, #100	; 0x64
 800714c:	fb03 4408 	mla	r4, r3, r8, r4
 8007150:	2302      	movs	r3, #2
 8007152:	6263      	str	r3, [r4, #36]	; 0x24
    return BSP_ERROR_NONE; 
 8007154:	2000      	movs	r0, #0
 8007156:	e6ea      	b.n	8006f2e <BSP_AUDIO_IN_Init+0x13a>
 8007158:	2000852c 	.word	0x2000852c
 800715c:	40003800 	.word	0x40003800
 8007160:	40023800 	.word	0x40023800
 8007164:	40020400 	.word	0x40020400
 8007168:	40013000 	.word	0x40013000
 800716c:	40020000 	.word	0x40020000
 8007170:	200084d4 	.word	0x200084d4

08007174 <BSP_AUDIO_IN_PDMToPCM>:
{  
 8007174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007178:	460f      	mov	r7, r1
 800717a:	b08c      	sub	sp, #48	; 0x30
 800717c:	4690      	mov	r8, r2
  if(Instance != 0U)
 800717e:	bb98      	cbnz	r0, 80071e8 <BSP_AUDIO_IN_PDMToPCM+0x74>
    for(index = 0; index < AudioInCtx[Instance].ChannelsNbr; index++)
 8007180:	4d1b      	ldr	r5, [pc, #108]	; (80071f0 <BSP_AUDIO_IN_PDMToPCM+0x7c>)
 8007182:	4604      	mov	r4, r0
 8007184:	f505 79f6 	add.w	r9, r5, #492	; 0x1ec
        arm_fir_decimate_q15 (&ARM_Decimator_State[index], (q15_t *)&(PDM_Filter_Out), (q15_t*)&(Decimate_Out), DECIMATOR_BLOCK_SIZE);
 8007188:	f505 7a4d 	add.w	sl, r5, #820	; 0x334
    for(index = 0; index < AudioInCtx[Instance].ChannelsNbr; index++)
 800718c:	692b      	ldr	r3, [r5, #16]
 800718e:	42a3      	cmp	r3, r4
 8007190:	d803      	bhi.n	800719a <BSP_AUDIO_IN_PDMToPCM+0x26>
    return BSP_ERROR_NONE;
 8007192:	2000      	movs	r0, #0
}
 8007194:	b00c      	add	sp, #48	; 0x30
 8007196:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (AudioInCtx[Instance].SampleRate == 8000)
 800719a:	68ab      	ldr	r3, [r5, #8]
 800719c:	224c      	movs	r2, #76	; 0x4c
 800719e:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80071a2:	eb07 0004 	add.w	r0, r7, r4
 80071a6:	fb02 9204 	mla	r2, r2, r4, r9
 80071aa:	eb08 0644 	add.w	r6, r8, r4, lsl #1
 80071ae:	d117      	bne.n	80071e0 <BSP_AUDIO_IN_PDMToPCM+0x6c>
        PDM_Filter(&((uint8_t*)(PDMBuf))[index], (uint16_t*)&(PDM_Filter_Out), &PDM_FilterHandler[index]);
 80071b0:	a904      	add	r1, sp, #16
 80071b2:	f00e fce1 	bl	8015b78 <PDM_Filter>
        arm_fir_decimate_q15 (&ARM_Decimator_State[index], (q15_t *)&(PDM_Filter_Out), (q15_t*)&(Decimate_Out), DECIMATOR_BLOCK_SIZE);
 80071b6:	2310      	movs	r3, #16
 80071b8:	200c      	movs	r0, #12
 80071ba:	466a      	mov	r2, sp
 80071bc:	eb0d 0103 	add.w	r1, sp, r3
 80071c0:	fb00 a004 	mla	r0, r0, r4, sl
 80071c4:	f00b ff88 	bl	80130d8 <arm_fir_decimate_q15>
 80071c8:	692b      	ldr	r3, [r5, #16]
 80071ca:	005a      	lsls	r2, r3, #1
        for (ii=0; ii<8; ii++)
 80071cc:	2300      	movs	r3, #0
          PCMBuf[ii * AudioInCtx[Instance].ChannelsNbr + index] = Decimate_Out[ii];
 80071ce:	f83d 1013 	ldrh.w	r1, [sp, r3, lsl #1]
 80071d2:	8031      	strh	r1, [r6, #0]
        for (ii=0; ii<8; ii++)
 80071d4:	3301      	adds	r3, #1
 80071d6:	2b08      	cmp	r3, #8
 80071d8:	4416      	add	r6, r2
 80071da:	d1f8      	bne.n	80071ce <BSP_AUDIO_IN_PDMToPCM+0x5a>
    for(index = 0; index < AudioInCtx[Instance].ChannelsNbr; index++)
 80071dc:	3401      	adds	r4, #1
 80071de:	e7d5      	b.n	800718c <BSP_AUDIO_IN_PDMToPCM+0x18>
        PDM_Filter(&((uint8_t*)(PDMBuf))[index], (uint16_t*)&(PCMBuf[index]), &PDM_FilterHandler[index]);
 80071e0:	4631      	mov	r1, r6
 80071e2:	f00e fcc9 	bl	8015b78 <PDM_Filter>
 80071e6:	e7f9      	b.n	80071dc <BSP_AUDIO_IN_PDMToPCM+0x68>
    return BSP_ERROR_WRONG_PARAM;
 80071e8:	f06f 0001 	mvn.w	r0, #1
 80071ec:	e7d2      	b.n	8007194 <BSP_AUDIO_IN_PDMToPCM+0x20>
 80071ee:	bf00      	nop
 80071f0:	20000acc 	.word	0x20000acc

080071f4 <BSP_AUDIO_IN_Record>:
  if(Instance >= AUDIO_IN_INSTANCES_NBR - 1)
 80071f4:	2801      	cmp	r0, #1
{
 80071f6:	b510      	push	{r4, lr}
  if(Instance >= AUDIO_IN_INSTANCES_NBR - 1)
 80071f8:	d902      	bls.n	8007200 <BSP_AUDIO_IN_Record+0xc>
    ret = BSP_ERROR_WRONG_PARAM;
 80071fa:	f06f 0001 	mvn.w	r0, #1
}
 80071fe:	bd10      	pop	{r4, pc}
    AudioInCtx[Instance].pBuff = (uint16_t*)pBuf;
 8007200:	4c13      	ldr	r4, [pc, #76]	; (8007250 <BSP_AUDIO_IN_Record+0x5c>)
 8007202:	2364      	movs	r3, #100	; 0x64
 8007204:	fb03 4300 	mla	r3, r3, r0, r4
 8007208:	6159      	str	r1, [r3, #20]
    if(Instance == 0U)
 800720a:	2800      	cmp	r0, #0
 800720c:	d1f5      	bne.n	80071fa <BSP_AUDIO_IN_Record+0x6>
      if(AudioInCtx[Instance].ChannelsNbr > 2)
 800720e:	6923      	ldr	r3, [r4, #16]
 8007210:	2b02      	cmp	r3, #2
 8007212:	d905      	bls.n	8007220 <BSP_AUDIO_IN_Record+0x2c>
        if(HAL_SPI_Receive_DMA(&hAudioInSPI, (uint8_t *)SPI_InternalBuffer, AudioInCtx[Instance].Size) != HAL_OK)
 8007214:	8ba2      	ldrh	r2, [r4, #28]
 8007216:	480f      	ldr	r0, [pc, #60]	; (8007254 <BSP_AUDIO_IN_Record+0x60>)
 8007218:	f504 619b 	add.w	r1, r4, #1240	; 0x4d8
 800721c:	f002 ffe6 	bl	800a1ec <HAL_SPI_Receive_DMA>
      if(AudioInCtx[Instance].ChannelsNbr != 1)
 8007220:	6923      	ldr	r3, [r4, #16]
 8007222:	2b01      	cmp	r3, #1
 8007224:	d008      	beq.n	8007238 <BSP_AUDIO_IN_Record+0x44>
* @param None
* @retval None
*/
static uint8_t AUDIO_IN_Timer_Start(){
  
  if(HAL_TIM_IC_Start(&TimDividerHandle, TIM_CHANNEL_1) != HAL_OK)
 8007226:	2100      	movs	r1, #0
 8007228:	480b      	ldr	r0, [pc, #44]	; (8007258 <BSP_AUDIO_IN_Record+0x64>)
 800722a:	f003 fddd 	bl	800ade8 <HAL_TIM_IC_Start>
 800722e:	b918      	cbnz	r0, 8007238 <BSP_AUDIO_IN_Record+0x44>
  {
    return HAL_ERROR;
  }
  /* Start the Output Compare */
  if(HAL_TIM_OC_Start(&TimDividerHandle, TIM_CHANNEL_2) != HAL_OK)
 8007230:	2104      	movs	r1, #4
 8007232:	4809      	ldr	r0, [pc, #36]	; (8007258 <BSP_AUDIO_IN_Record+0x64>)
 8007234:	f003 fd3e 	bl	800acb4 <HAL_TIM_OC_Start>
      if(HAL_I2S_Receive_DMA(&hAudioInI2s, I2S_InternalBuffer, AudioInCtx[Instance].Size/2) != HAL_OK)
 8007238:	69e2      	ldr	r2, [r4, #28]
 800723a:	4908      	ldr	r1, [pc, #32]	; (800725c <BSP_AUDIO_IN_Record+0x68>)
 800723c:	4808      	ldr	r0, [pc, #32]	; (8007260 <BSP_AUDIO_IN_Record+0x6c>)
 800723e:	f3c2 024f 	ubfx	r2, r2, #1, #16
 8007242:	f001 fda7 	bl	8008d94 <HAL_I2S_Receive_DMA>
      AudioInCtx[Instance].State = AUDIO_IN_STATE_RECORDING;
 8007246:	2301      	movs	r3, #1
 8007248:	6263      	str	r3, [r4, #36]	; 0x24
      ret = BSP_ERROR_NONE;
 800724a:	2000      	movs	r0, #0
  return ret;
 800724c:	e7d7      	b.n	80071fe <BSP_AUDIO_IN_Record+0xa>
 800724e:	bf00      	nop
 8007250:	20000acc 	.word	0x20000acc
 8007254:	200084d4 	.word	0x200084d4
 8007258:	20000f28 	.word	0x20000f28
 800725c:	200015a4 	.word	0x200015a4
 8007260:	2000852c 	.word	0x2000852c

08007264 <BSP_AUDIO_IN_Stop>:
{
 8007264:	b510      	push	{r4, lr}
    if(Instance == 0U)
 8007266:	b988      	cbnz	r0, 800728c <BSP_AUDIO_IN_Stop+0x28>
      if(AudioInCtx[Instance].ChannelsNbr > 2)
 8007268:	4c0a      	ldr	r4, [pc, #40]	; (8007294 <BSP_AUDIO_IN_Stop+0x30>)
 800726a:	6922      	ldr	r2, [r4, #16]
 800726c:	2a02      	cmp	r2, #2
 800726e:	d902      	bls.n	8007276 <BSP_AUDIO_IN_Stop+0x12>
        if(HAL_SPI_DMAStop(&hAudioInSPI)!= HAL_OK)
 8007270:	4809      	ldr	r0, [pc, #36]	; (8007298 <BSP_AUDIO_IN_Stop+0x34>)
 8007272:	f003 f82d 	bl	800a2d0 <HAL_SPI_DMAStop>
      if(HAL_I2S_DMAStop(&hAudioInI2s) != HAL_OK)
 8007276:	4809      	ldr	r0, [pc, #36]	; (800729c <BSP_AUDIO_IN_Stop+0x38>)
 8007278:	f001 fdea 	bl	8008e50 <HAL_I2S_DMAStop>
    AudioInCtx[Instance].State = AUDIO_IN_STATE_STOP;
 800727c:	2302      	movs	r3, #2
        ret = BSP_ERROR_NONE;
 800727e:	2800      	cmp	r0, #0
 8007280:	bf14      	ite	ne
 8007282:	f06f 0003 	mvnne.w	r0, #3
 8007286:	2000      	moveq	r0, #0
    AudioInCtx[Instance].State = AUDIO_IN_STATE_STOP;
 8007288:	6263      	str	r3, [r4, #36]	; 0x24
}
 800728a:	bd10      	pop	{r4, pc}
      return BSP_ERROR_WRONG_PARAM;
 800728c:	f06f 0001 	mvn.w	r0, #1
 8007290:	e7fb      	b.n	800728a <BSP_AUDIO_IN_Stop+0x26>
 8007292:	bf00      	nop
 8007294:	20000acc 	.word	0x20000acc
 8007298:	200084d4 	.word	0x200084d4
 800729c:	2000852c 	.word	0x2000852c

080072a0 <BSP_AUDIO_IN_SetVolume>:
  if(Instance >= AUDIO_IN_INSTANCES_NBR)
 80072a0:	2802      	cmp	r0, #2
{
 80072a2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072a6:	4604      	mov	r4, r0
 80072a8:	460e      	mov	r6, r1
  if(Instance >= AUDIO_IN_INSTANCES_NBR)
 80072aa:	d823      	bhi.n	80072f4 <BSP_AUDIO_IN_SetVolume+0x54>
 80072ac:	4d13      	ldr	r5, [pc, #76]	; (80072fc <BSP_AUDIO_IN_SetVolume+0x5c>)
  else if (Instance == 0U)
 80072ae:	b9e0      	cbnz	r0, 80072ea <BSP_AUDIO_IN_SetVolume+0x4a>
      if (PDM_FilterConfig[index].mic_gain != VolumeGain[Volume])
 80072b0:	f8df 804c 	ldr.w	r8, [pc, #76]	; 8007300 <BSP_AUDIO_IN_SetVolume+0x60>
 80072b4:	f505 7747 	add.w	r7, r5, #796	; 0x31c
        PDM_Filter_setConfig((PDM_Filter_Handler_t *)&PDM_FilterHandler[index], &PDM_FilterConfig[index]);
 80072b8:	f505 79f6 	add.w	r9, r5, #492	; 0x1ec
    for (index = 0; index < AudioInCtx[Instance].ChannelsNbr; index++)
 80072bc:	692b      	ldr	r3, [r5, #16]
 80072be:	42a3      	cmp	r3, r4
 80072c0:	d802      	bhi.n	80072c8 <BSP_AUDIO_IN_SetVolume+0x28>
  int32_t ret = BSP_ERROR_NONE;
 80072c2:	2000      	movs	r0, #0
}
 80072c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072c8:	2106      	movs	r1, #6
 80072ca:	fb01 7104 	mla	r1, r1, r4, r7
      if (PDM_FilterConfig[index].mic_gain != VolumeGain[Volume])
 80072ce:	f938 3016 	ldrsh.w	r3, [r8, r6, lsl #1]
 80072d2:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
 80072d6:	429a      	cmp	r2, r3
 80072d8:	d005      	beq.n	80072e6 <BSP_AUDIO_IN_SetVolume+0x46>
        PDM_Filter_setConfig((PDM_Filter_Handler_t *)&PDM_FilterHandler[index], &PDM_FilterConfig[index]);
 80072da:	204c      	movs	r0, #76	; 0x4c
        PDM_FilterConfig[index].mic_gain = VolumeGain[Volume];
 80072dc:	808b      	strh	r3, [r1, #4]
        PDM_Filter_setConfig((PDM_Filter_Handler_t *)&PDM_FilterHandler[index], &PDM_FilterConfig[index]);
 80072de:	fb00 9004 	mla	r0, r0, r4, r9
 80072e2:	f00e fb57 	bl	8015994 <PDM_Filter_setConfig>
    for (index = 0; index < AudioInCtx[Instance].ChannelsNbr; index++)
 80072e6:	3401      	adds	r4, #1
 80072e8:	e7e8      	b.n	80072bc <BSP_AUDIO_IN_SetVolume+0x1c>
    AudioInCtx[Instance].Volume = Volume;
 80072ea:	2364      	movs	r3, #100	; 0x64
 80072ec:	fb03 5400 	mla	r4, r3, r0, r5
 80072f0:	6221      	str	r1, [r4, #32]
 80072f2:	e7e6      	b.n	80072c2 <BSP_AUDIO_IN_SetVolume+0x22>
    ret = BSP_ERROR_WRONG_PARAM;
 80072f4:	f06f 0001 	mvn.w	r0, #1
  return ret;  
 80072f8:	e7e4      	b.n	80072c4 <BSP_AUDIO_IN_SetVolume+0x24>
 80072fa:	bf00      	nop
 80072fc:	20000acc 	.word	0x20000acc
 8007300:	08019380 	.word	0x08019380

08007304 <HAL_I2S_RxCpltCallback>:
  switch(AudioInCtx[0].ChannelsNbr){
 8007304:	4a58      	ldr	r2, [pc, #352]	; (8007468 <HAL_I2S_RxCpltCallback+0x164>)
 8007306:	6911      	ldr	r1, [r2, #16]
 8007308:	2902      	cmp	r1, #2
{
 800730a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800730e:	4613      	mov	r3, r2
  switch(AudioInCtx[0].ChannelsNbr){
 8007310:	d01b      	beq.n	800734a <HAL_I2S_RxCpltCallback+0x46>
 8007312:	2904      	cmp	r1, #4
 8007314:	d04b      	beq.n	80073ae <HAL_I2S_RxCpltCallback+0xaa>
 8007316:	2901      	cmp	r1, #1
 8007318:	d109      	bne.n	800732e <HAL_I2S_RxCpltCallback+0x2a>
      uint16_t * DataTempI2S = &I2S_InternalBuffer[AudioInCtx[0].Size/4] ;
 800731a:	69d1      	ldr	r1, [r2, #28]
        AudioInCtx[0].pBuff[index] = HTONS(DataTempI2S[index]);
 800731c:	6955      	ldr	r5, [r2, #20]
      uint16_t * DataTempI2S = &I2S_InternalBuffer[AudioInCtx[0].Size/4] ;
 800731e:	0889      	lsrs	r1, r1, #2
 8007320:	f602 20d8 	addw	r0, r2, #2776	; 0xad8
 8007324:	eb00 0041 	add.w	r0, r0, r1, lsl #1
      for(index = 0; index < AudioInCtx[0].Size/4; index++)
 8007328:	2300      	movs	r3, #0
 800732a:	4299      	cmp	r1, r3
 800732c:	d104      	bne.n	8007338 <HAL_I2S_RxCpltCallback+0x34>
  BSP_AUDIO_IN_TransferComplete_CallBack(0);
 800732e:	2000      	movs	r0, #0
 8007330:	f006 ffaa 	bl	800e288 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 8007334:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        AudioInCtx[0].pBuff[index] = HTONS(DataTempI2S[index]);
 8007338:	f830 4013 	ldrh.w	r4, [r0, r3, lsl #1]
 800733c:	0222      	lsls	r2, r4, #8
 800733e:	ea42 2214 	orr.w	r2, r2, r4, lsr #8
 8007342:	f825 2013 	strh.w	r2, [r5, r3, lsl #1]
      for(index = 0; index < AudioInCtx[0].Size/4; index++)
 8007346:	3301      	adds	r3, #1
 8007348:	e7ef      	b.n	800732a <HAL_I2S_RxCpltCallback+0x26>
      uint16_t * DataTempI2S = &(I2S_InternalBuffer[AudioInCtx[0].Size/2]);
 800734a:	f602 25d8 	addw	r5, r2, #2776	; 0xad8
 800734e:	69d2      	ldr	r2, [r2, #28]
        ((uint8_t *)(AudioInCtx[0].pBuff))[(index*2)] = Channel_Demux[a & CHANNEL_DEMUX_MASK] | Channel_Demux[b & CHANNEL_DEMUX_MASK] << 4;;
 8007350:	4f46      	ldr	r7, [pc, #280]	; (800746c <HAL_I2S_RxCpltCallback+0x168>)
      uint16_t * DataTempI2S = &(I2S_InternalBuffer[AudioInCtx[0].Size/2]);
 8007352:	f022 0201 	bic.w	r2, r2, #1
 8007356:	4415      	add	r5, r2
      for(index=0; index<AudioInCtx[0].Size/2; index++) {
 8007358:	2601      	movs	r6, #1
 800735a:	2400      	movs	r4, #0
 800735c:	69da      	ldr	r2, [r3, #28]
 800735e:	ebb4 0f52 	cmp.w	r4, r2, lsr #1
 8007362:	d2e4      	bcs.n	800732e <HAL_I2S_RxCpltCallback+0x2a>
        a = ((uint8_t *)(DataTempI2S))[(index*2)];
 8007364:	f815 2014 	ldrb.w	r2, [r5, r4, lsl #1]
        b = ((uint8_t *)(DataTempI2S))[(index*2)+1];
 8007368:	5da9      	ldrb	r1, [r5, r6]
        ((uint8_t *)(AudioInCtx[0].pBuff))[(index*2)] = Channel_Demux[a & CHANNEL_DEMUX_MASK] | Channel_Demux[b & CHANNEL_DEMUX_MASK] << 4;;
 800736a:	6958      	ldr	r0, [r3, #20]
 800736c:	f001 0c55 	and.w	ip, r1, #85	; 0x55
 8007370:	f002 0e55 	and.w	lr, r2, #85	; 0x55
 8007374:	44bc      	add	ip, r7
 8007376:	44be      	add	lr, r7
 8007378:	f89c 8020 	ldrb.w	r8, [ip, #32]
 800737c:	f89e c020 	ldrb.w	ip, [lr, #32]
        ((uint8_t *)(AudioInCtx[0].pBuff))[(index*2)+1] = Channel_Demux[(a>>1) & CHANNEL_DEMUX_MASK] |Channel_Demux[(b>>1) & CHANNEL_DEMUX_MASK] << 4;
 8007380:	0849      	lsrs	r1, r1, #1
 8007382:	0852      	lsrs	r2, r2, #1
        ((uint8_t *)(AudioInCtx[0].pBuff))[(index*2)] = Channel_Demux[a & CHANNEL_DEMUX_MASK] | Channel_Demux[b & CHANNEL_DEMUX_MASK] << 4;;
 8007384:	ea4c 1c08 	orr.w	ip, ip, r8, lsl #4
        ((uint8_t *)(AudioInCtx[0].pBuff))[(index*2)+1] = Channel_Demux[(a>>1) & CHANNEL_DEMUX_MASK] |Channel_Demux[(b>>1) & CHANNEL_DEMUX_MASK] << 4;
 8007388:	f001 0155 	and.w	r1, r1, #85	; 0x55
 800738c:	f002 0255 	and.w	r2, r2, #85	; 0x55
        ((uint8_t *)(AudioInCtx[0].pBuff))[(index*2)] = Channel_Demux[a & CHANNEL_DEMUX_MASK] | Channel_Demux[b & CHANNEL_DEMUX_MASK] << 4;;
 8007390:	f800 c014 	strb.w	ip, [r0, r4, lsl #1]
        ((uint8_t *)(AudioInCtx[0].pBuff))[(index*2)+1] = Channel_Demux[(a>>1) & CHANNEL_DEMUX_MASK] |Channel_Demux[(b>>1) & CHANNEL_DEMUX_MASK] << 4;
 8007394:	4439      	add	r1, r7
 8007396:	443a      	add	r2, r7
 8007398:	f891 1020 	ldrb.w	r1, [r1, #32]
 800739c:	f892 2020 	ldrb.w	r2, [r2, #32]
 80073a0:	6958      	ldr	r0, [r3, #20]
 80073a2:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 80073a6:	5582      	strb	r2, [r0, r6]
      for(index=0; index<AudioInCtx[0].Size/2; index++) {
 80073a8:	3401      	adds	r4, #1
 80073aa:	3602      	adds	r6, #2
 80073ac:	e7d6      	b.n	800735c <HAL_I2S_RxCpltCallback+0x58>
      uint16_t * DataTempI2S = &(I2S_InternalBuffer[AudioInCtx[0].Size/2]);
 80073ae:	69d2      	ldr	r2, [r2, #28]
 80073b0:	f603 26d8 	addw	r6, r3, #2776	; 0xad8
 80073b4:	f022 0201 	bic.w	r2, r2, #1
      uint16_t * DataTempSPI = &(SPI_InternalBuffer[AudioInCtx[0].Size/2]);
 80073b8:	f503 6c9b 	add.w	ip, r3, #1240	; 0x4d8
      uint16_t * DataTempI2S = &(I2S_InternalBuffer[AudioInCtx[0].Size/2]);
 80073bc:	4416      	add	r6, r2
      uint16_t * DataTempSPI = &(SPI_InternalBuffer[AudioInCtx[0].Size/2]);
 80073be:	4494      	add	ip, r2
          Channel_Demux[b & CHANNEL_DEMUX_MASK] << 4;;
 80073c0:	4a2a      	ldr	r2, [pc, #168]	; (800746c <HAL_I2S_RxCpltCallback+0x168>)
      for(index=0; index<AudioInCtx[0].Size/2; index++) {
 80073c2:	2501      	movs	r5, #1
 80073c4:	2400      	movs	r4, #0
 80073c6:	69d9      	ldr	r1, [r3, #28]
 80073c8:	ebb4 0f51 	cmp.w	r4, r1, lsr #1
 80073cc:	d2af      	bcs.n	800732e <HAL_I2S_RxCpltCallback+0x2a>
        a = ((uint8_t *)(DataTempI2S))[(index*2)];
 80073ce:	f816 1014 	ldrb.w	r1, [r6, r4, lsl #1]
        b = ((uint8_t *)(DataTempI2S))[(index*2)+1];
 80073d2:	5d77      	ldrb	r7, [r6, r5]
        ((uint8_t *)(AudioInCtx[0].pBuff))[(index*4)] = Channel_Demux[a & CHANNEL_DEMUX_MASK] |
 80073d4:	6958      	ldr	r0, [r3, #20]
          Channel_Demux[b & CHANNEL_DEMUX_MASK] << 4;;
 80073d6:	f007 0855 	and.w	r8, r7, #85	; 0x55
        ((uint8_t *)(AudioInCtx[0].pBuff))[(index*4)] = Channel_Demux[a & CHANNEL_DEMUX_MASK] |
 80073da:	f001 0955 	and.w	r9, r1, #85	; 0x55
          Channel_Demux[b & CHANNEL_DEMUX_MASK] << 4;;
 80073de:	4490      	add	r8, r2
        ((uint8_t *)(AudioInCtx[0].pBuff))[(index*4)] = Channel_Demux[a & CHANNEL_DEMUX_MASK] |
 80073e0:	4491      	add	r9, r2
          Channel_Demux[b & CHANNEL_DEMUX_MASK] << 4;;
 80073e2:	f898 a020 	ldrb.w	sl, [r8, #32]
        ((uint8_t *)(AudioInCtx[0].pBuff))[(index*4)] = Channel_Demux[a & CHANNEL_DEMUX_MASK] |
 80073e6:	f899 8020 	ldrb.w	r8, [r9, #32]
            Channel_Demux[(b>>1) & CHANNEL_DEMUX_MASK] << 4;
 80073ea:	087f      	lsrs	r7, r7, #1
        ((uint8_t *)(AudioInCtx[0].pBuff))[(index*4)] = Channel_Demux[a & CHANNEL_DEMUX_MASK] |
 80073ec:	ea48 180a 	orr.w	r8, r8, sl, lsl #4
          ((uint8_t *)(AudioInCtx[0].pBuff))[(index*4)+1] = Channel_Demux[(a>>1) & CHANNEL_DEMUX_MASK] |
 80073f0:	0849      	lsrs	r1, r1, #1
        ((uint8_t *)(AudioInCtx[0].pBuff))[(index*4)] = Channel_Demux[a & CHANNEL_DEMUX_MASK] |
 80073f2:	f800 8024 	strb.w	r8, [r0, r4, lsl #2]
            Channel_Demux[(b>>1) & CHANNEL_DEMUX_MASK] << 4;
 80073f6:	f007 0755 	and.w	r7, r7, #85	; 0x55
          ((uint8_t *)(AudioInCtx[0].pBuff))[(index*4)+1] = Channel_Demux[(a>>1) & CHANNEL_DEMUX_MASK] |
 80073fa:	f001 0155 	and.w	r1, r1, #85	; 0x55
            Channel_Demux[(b>>1) & CHANNEL_DEMUX_MASK] << 4;
 80073fe:	4417      	add	r7, r2
          ((uint8_t *)(AudioInCtx[0].pBuff))[(index*4)+1] = Channel_Demux[(a>>1) & CHANNEL_DEMUX_MASK] |
 8007400:	4411      	add	r1, r2
 8007402:	6958      	ldr	r0, [r3, #20]
            Channel_Demux[(b>>1) & CHANNEL_DEMUX_MASK] << 4;
 8007404:	f897 7020 	ldrb.w	r7, [r7, #32]
          ((uint8_t *)(AudioInCtx[0].pBuff))[(index*4)+1] = Channel_Demux[(a>>1) & CHANNEL_DEMUX_MASK] |
 8007408:	f891 1020 	ldrb.w	r1, [r1, #32]
 800740c:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8007410:	4470      	add	r0, lr
 8007412:	ea41 1107 	orr.w	r1, r1, r7, lsl #4
 8007416:	7041      	strb	r1, [r0, #1]
            a = ((uint8_t *)(DataTempSPI))[(index*2)];
 8007418:	f81c 1014 	ldrb.w	r1, [ip, r4, lsl #1]
            b = ((uint8_t *)(DataTempSPI))[(index*2)+1];
 800741c:	f81c 0005 	ldrb.w	r0, [ip, r5]
            ((uint8_t *)(AudioInCtx[0].pBuff))[(index*4)+2] = Channel_Demux[a & CHANNEL_DEMUX_MASK] |
 8007420:	f001 0855 	and.w	r8, r1, #85	; 0x55
              Channel_Demux[b & CHANNEL_DEMUX_MASK] << 4;;
 8007424:	f000 0755 	and.w	r7, r0, #85	; 0x55
 8007428:	4417      	add	r7, r2
            ((uint8_t *)(AudioInCtx[0].pBuff))[(index*4)+2] = Channel_Demux[a & CHANNEL_DEMUX_MASK] |
 800742a:	4490      	add	r8, r2
              Channel_Demux[b & CHANNEL_DEMUX_MASK] << 4;;
 800742c:	f897 9020 	ldrb.w	r9, [r7, #32]
            ((uint8_t *)(AudioInCtx[0].pBuff))[(index*4)+2] = Channel_Demux[a & CHANNEL_DEMUX_MASK] |
 8007430:	f898 7020 	ldrb.w	r7, [r8, #32]
 8007434:	ea47 1809 	orr.w	r8, r7, r9, lsl #4
 8007438:	695f      	ldr	r7, [r3, #20]
                Channel_Demux[(b>>1) & CHANNEL_DEMUX_MASK] << 4;
 800743a:	0840      	lsrs	r0, r0, #1
              ((uint8_t *)(AudioInCtx[0].pBuff))[(index*4)+3] = Channel_Demux[(a>>1) & CHANNEL_DEMUX_MASK] |
 800743c:	0849      	lsrs	r1, r1, #1
            ((uint8_t *)(AudioInCtx[0].pBuff))[(index*4)+2] = Channel_Demux[a & CHANNEL_DEMUX_MASK] |
 800743e:	f807 8015 	strb.w	r8, [r7, r5, lsl #1]
                Channel_Demux[(b>>1) & CHANNEL_DEMUX_MASK] << 4;
 8007442:	f000 0055 	and.w	r0, r0, #85	; 0x55
              ((uint8_t *)(AudioInCtx[0].pBuff))[(index*4)+3] = Channel_Demux[(a>>1) & CHANNEL_DEMUX_MASK] |
 8007446:	f001 0155 	and.w	r1, r1, #85	; 0x55
                Channel_Demux[(b>>1) & CHANNEL_DEMUX_MASK] << 4;
 800744a:	4410      	add	r0, r2
              ((uint8_t *)(AudioInCtx[0].pBuff))[(index*4)+3] = Channel_Demux[(a>>1) & CHANNEL_DEMUX_MASK] |
 800744c:	4411      	add	r1, r2
 800744e:	695f      	ldr	r7, [r3, #20]
                Channel_Demux[(b>>1) & CHANNEL_DEMUX_MASK] << 4;
 8007450:	f890 0020 	ldrb.w	r0, [r0, #32]
              ((uint8_t *)(AudioInCtx[0].pBuff))[(index*4)+3] = Channel_Demux[(a>>1) & CHANNEL_DEMUX_MASK] |
 8007454:	f891 1020 	ldrb.w	r1, [r1, #32]
 8007458:	4477      	add	r7, lr
 800745a:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 800745e:	70f9      	strb	r1, [r7, #3]
      for(index=0; index<AudioInCtx[0].Size/2; index++) {
 8007460:	3401      	adds	r4, #1
 8007462:	3502      	adds	r5, #2
 8007464:	e7af      	b.n	80073c6 <HAL_I2S_RxCpltCallback+0xc2>
 8007466:	bf00      	nop
 8007468:	20000acc 	.word	0x20000acc
 800746c:	200000e4 	.word	0x200000e4

08007470 <HAL_I2S_RxHalfCpltCallback>:
  switch(AudioInCtx[0].ChannelsNbr){
 8007470:	4a54      	ldr	r2, [pc, #336]	; (80075c4 <HAL_I2S_RxHalfCpltCallback+0x154>)
 8007472:	6911      	ldr	r1, [r2, #16]
 8007474:	2902      	cmp	r1, #2
{
 8007476:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800747a:	4613      	mov	r3, r2
  switch(AudioInCtx[0].ChannelsNbr){
 800747c:	d043      	beq.n	8007506 <HAL_I2S_RxHalfCpltCallback+0x96>
 800747e:	2904      	cmp	r1, #4
 8007480:	f000 8098 	beq.w	80075b4 <HAL_I2S_RxHalfCpltCallback+0x144>
 8007484:	2901      	cmp	r1, #1
 8007486:	d107      	bne.n	8007498 <HAL_I2S_RxHalfCpltCallback+0x28>
      for(index = 0; index < AudioInCtx[0].Size/4; index++)
 8007488:	69d3      	ldr	r3, [r2, #28]
        AudioInCtx[0].pBuff[index] = HTONS(DataTempI2S[index]);
 800748a:	6955      	ldr	r5, [r2, #20]
      for(index = 0; index < AudioInCtx[0].Size/4; index++)
 800748c:	0899      	lsrs	r1, r3, #2
        AudioInCtx[0].pBuff[index] = HTONS(DataTempI2S[index]);
 800748e:	f602 22d8 	addw	r2, r2, #2776	; 0xad8
      for(index = 0; index < AudioInCtx[0].Size/4; index++)
 8007492:	2300      	movs	r3, #0
 8007494:	4299      	cmp	r1, r3
 8007496:	d104      	bne.n	80074a2 <HAL_I2S_RxHalfCpltCallback+0x32>
  BSP_AUDIO_IN_HalfTransfer_CallBack(0);
 8007498:	2000      	movs	r0, #0
 800749a:	f006 fef3 	bl	800e284 <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 800749e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        AudioInCtx[0].pBuff[index] = HTONS(DataTempI2S[index]);
 80074a2:	f832 4013 	ldrh.w	r4, [r2, r3, lsl #1]
 80074a6:	0220      	lsls	r0, r4, #8
 80074a8:	ea40 2014 	orr.w	r0, r0, r4, lsr #8
 80074ac:	f825 0013 	strh.w	r0, [r5, r3, lsl #1]
      for(index = 0; index < AudioInCtx[0].Size/4; index++)
 80074b0:	3301      	adds	r3, #1
 80074b2:	e7ef      	b.n	8007494 <HAL_I2S_RxHalfCpltCallback+0x24>
        a = ((uint8_t *)(DataTempI2S))[(index*2)];
 80074b4:	f817 2014 	ldrb.w	r2, [r7, r4, lsl #1]
        b = ((uint8_t *)(DataTempI2S))[(index*2)+1];
 80074b8:	5de9      	ldrb	r1, [r5, r7]
        ((uint8_t *)(AudioInCtx[0].pBuff))[(index*2)] = Channel_Demux[a & CHANNEL_DEMUX_MASK] |
 80074ba:	6958      	ldr	r0, [r3, #20]
          Channel_Demux[b & CHANNEL_DEMUX_MASK] << 4;;
 80074bc:	f001 0c55 	and.w	ip, r1, #85	; 0x55
        ((uint8_t *)(AudioInCtx[0].pBuff))[(index*2)] = Channel_Demux[a & CHANNEL_DEMUX_MASK] |
 80074c0:	f002 0e55 	and.w	lr, r2, #85	; 0x55
          Channel_Demux[b & CHANNEL_DEMUX_MASK] << 4;;
 80074c4:	44b4      	add	ip, r6
        ((uint8_t *)(AudioInCtx[0].pBuff))[(index*2)] = Channel_Demux[a & CHANNEL_DEMUX_MASK] |
 80074c6:	44b6      	add	lr, r6
          Channel_Demux[b & CHANNEL_DEMUX_MASK] << 4;;
 80074c8:	f89c 8020 	ldrb.w	r8, [ip, #32]
        ((uint8_t *)(AudioInCtx[0].pBuff))[(index*2)] = Channel_Demux[a & CHANNEL_DEMUX_MASK] |
 80074cc:	f89e c020 	ldrb.w	ip, [lr, #32]
            Channel_Demux[(b>>1) & CHANNEL_DEMUX_MASK] << 4;
 80074d0:	0849      	lsrs	r1, r1, #1
          ((uint8_t *)(AudioInCtx[0].pBuff))[(index*2)+1] = Channel_Demux[(a>>1) & CHANNEL_DEMUX_MASK] |
 80074d2:	0852      	lsrs	r2, r2, #1
        ((uint8_t *)(AudioInCtx[0].pBuff))[(index*2)] = Channel_Demux[a & CHANNEL_DEMUX_MASK] |
 80074d4:	ea4c 1c08 	orr.w	ip, ip, r8, lsl #4
            Channel_Demux[(b>>1) & CHANNEL_DEMUX_MASK] << 4;
 80074d8:	f001 0155 	and.w	r1, r1, #85	; 0x55
          ((uint8_t *)(AudioInCtx[0].pBuff))[(index*2)+1] = Channel_Demux[(a>>1) & CHANNEL_DEMUX_MASK] |
 80074dc:	f002 0255 	and.w	r2, r2, #85	; 0x55
        ((uint8_t *)(AudioInCtx[0].pBuff))[(index*2)] = Channel_Demux[a & CHANNEL_DEMUX_MASK] |
 80074e0:	f800 c014 	strb.w	ip, [r0, r4, lsl #1]
            Channel_Demux[(b>>1) & CHANNEL_DEMUX_MASK] << 4;
 80074e4:	4431      	add	r1, r6
          ((uint8_t *)(AudioInCtx[0].pBuff))[(index*2)+1] = Channel_Demux[(a>>1) & CHANNEL_DEMUX_MASK] |
 80074e6:	4432      	add	r2, r6
            Channel_Demux[(b>>1) & CHANNEL_DEMUX_MASK] << 4;
 80074e8:	f891 1020 	ldrb.w	r1, [r1, #32]
          ((uint8_t *)(AudioInCtx[0].pBuff))[(index*2)+1] = Channel_Demux[(a>>1) & CHANNEL_DEMUX_MASK] |
 80074ec:	f892 2020 	ldrb.w	r2, [r2, #32]
 80074f0:	6958      	ldr	r0, [r3, #20]
 80074f2:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 80074f6:	5542      	strb	r2, [r0, r5]
      for(index=0; index<AudioInCtx[0].Size/2; index++) {
 80074f8:	3401      	adds	r4, #1
 80074fa:	3502      	adds	r5, #2
 80074fc:	69da      	ldr	r2, [r3, #28]
 80074fe:	ebb4 0f52 	cmp.w	r4, r2, lsr #1
 8007502:	d3d7      	bcc.n	80074b4 <HAL_I2S_RxHalfCpltCallback+0x44>
 8007504:	e7c8      	b.n	8007498 <HAL_I2S_RxHalfCpltCallback+0x28>
  switch(AudioInCtx[0].ChannelsNbr){
 8007506:	2501      	movs	r5, #1
      for(index=0; index<AudioInCtx[0].Size/2; index++) {
 8007508:	2400      	movs	r4, #0
        a = ((uint8_t *)(DataTempI2S))[(index*2)];
 800750a:	f602 27d8 	addw	r7, r2, #2776	; 0xad8
          Channel_Demux[b & CHANNEL_DEMUX_MASK] << 4;;
 800750e:	4e2e      	ldr	r6, [pc, #184]	; (80075c8 <HAL_I2S_RxHalfCpltCallback+0x158>)
 8007510:	e7f4      	b.n	80074fc <HAL_I2S_RxHalfCpltCallback+0x8c>
        a = ((uint8_t *)(DataTempI2S))[(index*2)];
 8007512:	f81b 1014 	ldrb.w	r1, [fp, r4, lsl #1]
        b = ((uint8_t *)(DataTempI2S))[(index*2)+1];
 8007516:	f815 700b 	ldrb.w	r7, [r5, fp]
        ((uint8_t *)(AudioInCtx[0].pBuff))[(index*4)] = Channel_Demux[a & CHANNEL_DEMUX_MASK] |
 800751a:	6958      	ldr	r0, [r3, #20]
          Channel_Demux[b & CHANNEL_DEMUX_MASK] << 4;;
 800751c:	f007 0855 	and.w	r8, r7, #85	; 0x55
        ((uint8_t *)(AudioInCtx[0].pBuff))[(index*4)] = Channel_Demux[a & CHANNEL_DEMUX_MASK] |
 8007520:	f001 0955 	and.w	r9, r1, #85	; 0x55
          Channel_Demux[b & CHANNEL_DEMUX_MASK] << 4;;
 8007524:	4490      	add	r8, r2
        ((uint8_t *)(AudioInCtx[0].pBuff))[(index*4)] = Channel_Demux[a & CHANNEL_DEMUX_MASK] |
 8007526:	4491      	add	r9, r2
          Channel_Demux[b & CHANNEL_DEMUX_MASK] << 4;;
 8007528:	f898 a020 	ldrb.w	sl, [r8, #32]
        ((uint8_t *)(AudioInCtx[0].pBuff))[(index*4)] = Channel_Demux[a & CHANNEL_DEMUX_MASK] |
 800752c:	f899 8020 	ldrb.w	r8, [r9, #32]
            Channel_Demux[(b>>1) & CHANNEL_DEMUX_MASK] << 4;
 8007530:	087f      	lsrs	r7, r7, #1
        ((uint8_t *)(AudioInCtx[0].pBuff))[(index*4)] = Channel_Demux[a & CHANNEL_DEMUX_MASK] |
 8007532:	ea48 180a 	orr.w	r8, r8, sl, lsl #4
          ((uint8_t *)(AudioInCtx[0].pBuff))[(index*4)+1] = Channel_Demux[(a>>1) & CHANNEL_DEMUX_MASK] |
 8007536:	0849      	lsrs	r1, r1, #1
        ((uint8_t *)(AudioInCtx[0].pBuff))[(index*4)] = Channel_Demux[a & CHANNEL_DEMUX_MASK] |
 8007538:	f800 8024 	strb.w	r8, [r0, r4, lsl #2]
            Channel_Demux[(b>>1) & CHANNEL_DEMUX_MASK] << 4;
 800753c:	f007 0755 	and.w	r7, r7, #85	; 0x55
          ((uint8_t *)(AudioInCtx[0].pBuff))[(index*4)+1] = Channel_Demux[(a>>1) & CHANNEL_DEMUX_MASK] |
 8007540:	f001 0155 	and.w	r1, r1, #85	; 0x55
            Channel_Demux[(b>>1) & CHANNEL_DEMUX_MASK] << 4;
 8007544:	4417      	add	r7, r2
          ((uint8_t *)(AudioInCtx[0].pBuff))[(index*4)+1] = Channel_Demux[(a>>1) & CHANNEL_DEMUX_MASK] |
 8007546:	4411      	add	r1, r2
 8007548:	6958      	ldr	r0, [r3, #20]
            Channel_Demux[(b>>1) & CHANNEL_DEMUX_MASK] << 4;
 800754a:	f897 7020 	ldrb.w	r7, [r7, #32]
          ((uint8_t *)(AudioInCtx[0].pBuff))[(index*4)+1] = Channel_Demux[(a>>1) & CHANNEL_DEMUX_MASK] |
 800754e:	f891 1020 	ldrb.w	r1, [r1, #32]
 8007552:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8007556:	4470      	add	r0, lr
 8007558:	ea41 1107 	orr.w	r1, r1, r7, lsl #4
 800755c:	7041      	strb	r1, [r0, #1]
            a = ((uint8_t *)(DataTempSPI))[(index*2)];
 800755e:	f81c 1014 	ldrb.w	r1, [ip, r4, lsl #1]
            b = ((uint8_t *)(DataTempSPI))[(index*2)+1];
 8007562:	f815 000c 	ldrb.w	r0, [r5, ip]
            ((uint8_t *)(AudioInCtx[0].pBuff))[(index*4)+2] = Channel_Demux[a & CHANNEL_DEMUX_MASK] |
 8007566:	695e      	ldr	r6, [r3, #20]
              Channel_Demux[b & CHANNEL_DEMUX_MASK] << 4;;
 8007568:	f000 0755 	and.w	r7, r0, #85	; 0x55
            ((uint8_t *)(AudioInCtx[0].pBuff))[(index*4)+2] = Channel_Demux[a & CHANNEL_DEMUX_MASK] |
 800756c:	f001 0855 	and.w	r8, r1, #85	; 0x55
              Channel_Demux[b & CHANNEL_DEMUX_MASK] << 4;;
 8007570:	4417      	add	r7, r2
            ((uint8_t *)(AudioInCtx[0].pBuff))[(index*4)+2] = Channel_Demux[a & CHANNEL_DEMUX_MASK] |
 8007572:	4490      	add	r8, r2
              Channel_Demux[b & CHANNEL_DEMUX_MASK] << 4;;
 8007574:	f897 9020 	ldrb.w	r9, [r7, #32]
            ((uint8_t *)(AudioInCtx[0].pBuff))[(index*4)+2] = Channel_Demux[a & CHANNEL_DEMUX_MASK] |
 8007578:	f898 7020 	ldrb.w	r7, [r8, #32]
                Channel_Demux[(b>>1) & CHANNEL_DEMUX_MASK] << 4;
 800757c:	0840      	lsrs	r0, r0, #1
            ((uint8_t *)(AudioInCtx[0].pBuff))[(index*4)+2] = Channel_Demux[a & CHANNEL_DEMUX_MASK] |
 800757e:	ea47 1709 	orr.w	r7, r7, r9, lsl #4
              ((uint8_t *)(AudioInCtx[0].pBuff))[(index*4)+3] = Channel_Demux[(a>>1) & CHANNEL_DEMUX_MASK] |
 8007582:	0849      	lsrs	r1, r1, #1
            ((uint8_t *)(AudioInCtx[0].pBuff))[(index*4)+2] = Channel_Demux[a & CHANNEL_DEMUX_MASK] |
 8007584:	f806 7015 	strb.w	r7, [r6, r5, lsl #1]
                Channel_Demux[(b>>1) & CHANNEL_DEMUX_MASK] << 4;
 8007588:	f000 0055 	and.w	r0, r0, #85	; 0x55
              ((uint8_t *)(AudioInCtx[0].pBuff))[(index*4)+3] = Channel_Demux[(a>>1) & CHANNEL_DEMUX_MASK] |
 800758c:	f001 0155 	and.w	r1, r1, #85	; 0x55
                Channel_Demux[(b>>1) & CHANNEL_DEMUX_MASK] << 4;
 8007590:	4410      	add	r0, r2
              ((uint8_t *)(AudioInCtx[0].pBuff))[(index*4)+3] = Channel_Demux[(a>>1) & CHANNEL_DEMUX_MASK] |
 8007592:	4411      	add	r1, r2
 8007594:	695f      	ldr	r7, [r3, #20]
                Channel_Demux[(b>>1) & CHANNEL_DEMUX_MASK] << 4;
 8007596:	f890 0020 	ldrb.w	r0, [r0, #32]
              ((uint8_t *)(AudioInCtx[0].pBuff))[(index*4)+3] = Channel_Demux[(a>>1) & CHANNEL_DEMUX_MASK] |
 800759a:	f891 1020 	ldrb.w	r1, [r1, #32]
 800759e:	4477      	add	r7, lr
 80075a0:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 80075a4:	70f9      	strb	r1, [r7, #3]
      for(index=0; index<AudioInCtx[0].Size/2; index++) 
 80075a6:	3401      	adds	r4, #1
 80075a8:	3502      	adds	r5, #2
 80075aa:	69d9      	ldr	r1, [r3, #28]
 80075ac:	ebb4 0f51 	cmp.w	r4, r1, lsr #1
 80075b0:	d3af      	bcc.n	8007512 <HAL_I2S_RxHalfCpltCallback+0xa2>
 80075b2:	e771      	b.n	8007498 <HAL_I2S_RxHalfCpltCallback+0x28>
        a = ((uint8_t *)(DataTempI2S))[(index*2)];
 80075b4:	f602 2bd8 	addw	fp, r2, #2776	; 0xad8
  switch(AudioInCtx[0].ChannelsNbr){
 80075b8:	2501      	movs	r5, #1
      for(index=0; index<AudioInCtx[0].Size/2; index++) 
 80075ba:	2400      	movs	r4, #0
          Channel_Demux[b & CHANNEL_DEMUX_MASK] << 4;;
 80075bc:	4a02      	ldr	r2, [pc, #8]	; (80075c8 <HAL_I2S_RxHalfCpltCallback+0x158>)
            a = ((uint8_t *)(DataTempSPI))[(index*2)];
 80075be:	f503 6c9b 	add.w	ip, r3, #1240	; 0x4d8
 80075c2:	e7f2      	b.n	80075aa <HAL_I2S_RxHalfCpltCallback+0x13a>
 80075c4:	20000acc 	.word	0x20000acc
 80075c8:	200000e4 	.word	0x200000e4

080075cc <IKS01A2_ENV_SENSOR_Init>:
 *         - ENV_TEMPERATURE and/or ENV_HUMIDITY for instance 0
 *         - ENV_TEMPERATURE and/or ENV_PRESSURE for instance 1
 * @retval BSP status
 */
int32_t IKS01A2_ENV_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 80075cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075d0:	460f      	mov	r7, r1
 80075d2:	b08d      	sub	sp, #52	; 0x34
  uint32_t function = ENV_TEMPERATURE;
  uint32_t i;
  uint32_t component_functions = 0;
  IKS01A2_ENV_SENSOR_Capabilities_t cap;

  switch (Instance)
 80075d4:	4606      	mov	r6, r0
 80075d6:	b120      	cbz	r0, 80075e2 <IKS01A2_ENV_SENSOR_Init+0x16>
 80075d8:	2801      	cmp	r0, #1
 80075da:	d063      	beq.n	80076a4 <IKS01A2_ENV_SENSOR_Init+0xd8>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 80075dc:	f06f 0001 	mvn.w	r0, #1
 80075e0:	e059      	b.n	8007696 <IKS01A2_ENV_SENSOR_Init+0xca>
  static HTS221_Object_t hts221_obj_0;
  HTS221_Capabilities_t  cap;

  /* Configure the environmental sensor driver */
  io_ctx.BusType     = HTS221_I2C_BUS; /* I2C */
  io_ctx.Address     = HTS221_I2C_ADDRESS;
 80075e2:	23bf      	movs	r3, #191	; 0xbf
 80075e4:	f88d 3020 	strb.w	r3, [sp, #32]
  io_ctx.Init        = IKS01A2_I2C_Init;
 80075e8:	4b78      	ldr	r3, [pc, #480]	; (80077cc <IKS01A2_ENV_SENSOR_Init+0x200>)
 80075ea:	9305      	str	r3, [sp, #20]
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 80075ec:	4b78      	ldr	r3, [pc, #480]	; (80077d0 <IKS01A2_ENV_SENSOR_Init+0x204>)
 80075ee:	9306      	str	r3, [sp, #24]
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
  io_ctx.GetTick     = IKS01A2_GetTick;

  if (HTS221_RegisterBusIO(&hts221_obj_0, &io_ctx) != HTS221_OK)
 80075f0:	4c78      	ldr	r4, [pc, #480]	; (80077d4 <IKS01A2_ENV_SENSOR_Init+0x208>)
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 80075f2:	4b79      	ldr	r3, [pc, #484]	; (80077d8 <IKS01A2_ENV_SENSOR_Init+0x20c>)
 80075f4:	930a      	str	r3, [sp, #40]	; 0x28
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 80075f6:	4b79      	ldr	r3, [pc, #484]	; (80077dc <IKS01A2_ENV_SENSOR_Init+0x210>)
  io_ctx.BusType     = HTS221_I2C_BUS; /* I2C */
 80075f8:	9007      	str	r0, [sp, #28]
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 80075fa:	9309      	str	r3, [sp, #36]	; 0x24
  if (HTS221_RegisterBusIO(&hts221_obj_0, &io_ctx) != HTS221_OK)
 80075fc:	a905      	add	r1, sp, #20
  io_ctx.GetTick     = IKS01A2_GetTick;
 80075fe:	4b78      	ldr	r3, [pc, #480]	; (80077e0 <IKS01A2_ENV_SENSOR_Init+0x214>)
 8007600:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HTS221_RegisterBusIO(&hts221_obj_0, &io_ctx) != HTS221_OK)
 8007602:	4620      	mov	r0, r4
 8007604:	f7fd ff0a 	bl	800541c <HTS221_RegisterBusIO>
 8007608:	b110      	cbz	r0, 8007610 <IKS01A2_ENV_SENSOR_Init+0x44>
        return BSP_ERROR_NO_INIT;
 800760a:	f04f 30ff 	mov.w	r0, #4294967295
 800760e:	e042      	b.n	8007696 <IKS01A2_ENV_SENSOR_Init+0xca>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (HTS221_ReadID(&hts221_obj_0, &id) != HTS221_OK)
 8007610:	f10d 0103 	add.w	r1, sp, #3
 8007614:	4620      	mov	r0, r4
 8007616:	f7fd fd79 	bl	800510c <HTS221_ReadID>
 800761a:	4680      	mov	r8, r0
 800761c:	2800      	cmp	r0, #0
 800761e:	d1f4      	bne.n	800760a <IKS01A2_ENV_SENSOR_Init+0x3e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (id != HTS221_ID)
 8007620:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007624:	2bbc      	cmp	r3, #188	; 0xbc
 8007626:	d1f0      	bne.n	800760a <IKS01A2_ENV_SENSOR_Init+0x3e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else
  {
    (void)HTS221_GetCapabilities(&hts221_obj_0, &cap);
 8007628:	a901      	add	r1, sp, #4
 800762a:	4620      	mov	r0, r4
 800762c:	f7fd fd24 	bl	8005078 <HTS221_GetCapabilities>
    EnvCtx[IKS01A2_HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8007630:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8007634:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8007638:	f89d 2004 	ldrb.w	r2, [sp, #4]
                                           uint32_t)cap.Humidity << 2);

    EnvCompObj[IKS01A2_HTS221_0] = &hts221_obj_0;
 800763c:	4d69      	ldr	r5, [pc, #420]	; (80077e4 <IKS01A2_ENV_SENSOR_Init+0x218>)
                                           uint32_t)cap.Humidity << 2);
 800763e:	009b      	lsls	r3, r3, #2
    EnvCtx[IKS01A2_HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8007640:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8007644:	4313      	orrs	r3, r2
 8007646:	62e3      	str	r3, [r4, #44]	; 0x2c
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A2_HTS221_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&HTS221_COMMON_Driver;

    if (((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8007648:	07f9      	lsls	r1, r7, #31
    EnvDrv[IKS01A2_HTS221_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&HTS221_COMMON_Driver;
 800764a:	4b67      	ldr	r3, [pc, #412]	; (80077e8 <IKS01A2_ENV_SENSOR_Init+0x21c>)
    EnvCompObj[IKS01A2_HTS221_0] = &hts221_obj_0;
 800764c:	602c      	str	r4, [r5, #0]
    EnvDrv[IKS01A2_HTS221_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&HTS221_COMMON_Driver;
 800764e:	6363      	str	r3, [r4, #52]	; 0x34
    if (((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8007650:	d50a      	bpl.n	8007668 <IKS01A2_ENV_SENSOR_Init+0x9c>
 8007652:	2a01      	cmp	r2, #1
 8007654:	d108      	bne.n	8007668 <IKS01A2_ENV_SENSOR_Init+0x9c>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A2_HTS221_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_TEMP_Driver;
 8007656:	4a65      	ldr	r2, [pc, #404]	; (80077ec <IKS01A2_ENV_SENSOR_Init+0x220>)

      if (EnvDrv[IKS01A2_HTS221_0]->Init(EnvCompObj[IKS01A2_HTS221_0]) != HTS221_OK)
 8007658:	681b      	ldr	r3, [r3, #0]
      EnvFuncDrv[IKS01A2_HTS221_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_TEMP_Driver;
 800765a:	63e2      	str	r2, [r4, #60]	; 0x3c
      if (EnvDrv[IKS01A2_HTS221_0]->Init(EnvCompObj[IKS01A2_HTS221_0]) != HTS221_OK)
 800765c:	4620      	mov	r0, r4
 800765e:	4798      	blx	r3
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007660:	2800      	cmp	r0, #0
 8007662:	bf18      	it	ne
 8007664:	f06f 0804 	mvnne.w	r8, #4
      else
      {
        ret = BSP_ERROR_NONE;
      }
    }
    if (((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 8007668:	0778      	lsls	r0, r7, #29
 800766a:	d517      	bpl.n	800769c <IKS01A2_ENV_SENSOR_Init+0xd0>
 800766c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8007670:	2b01      	cmp	r3, #1
 8007672:	d113      	bne.n	800769c <IKS01A2_ENV_SENSOR_Init+0xd0>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A2_HTS221_0][FunctionIndex[ENV_HUMIDITY]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_HUM_Driver;
 8007674:	4b5e      	ldr	r3, [pc, #376]	; (80077f0 <IKS01A2_ENV_SENSOR_Init+0x224>)
 8007676:	6463      	str	r3, [r4, #68]	; 0x44

      if (EnvDrv[IKS01A2_HTS221_0]->Init(EnvCompObj[IKS01A2_HTS221_0]) != HTS221_OK)
 8007678:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800767a:	6828      	ldr	r0, [r5, #0]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4798      	blx	r3
 8007680:	2800      	cmp	r0, #0
 8007682:	d1c2      	bne.n	800760a <IKS01A2_ENV_SENSOR_Init+0x3e>
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8007684:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007686:	6828      	ldr	r0, [r5, #0]
 8007688:	68db      	ldr	r3, [r3, #12]
 800768a:	a905      	add	r1, sp, #20
 800768c:	4798      	blx	r3
 800768e:	2800      	cmp	r0, #0
 8007690:	d065      	beq.n	800775e <IKS01A2_ENV_SENSOR_Init+0x192>
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8007692:	f06f 0006 	mvn.w	r0, #6
}
 8007696:	b00d      	add	sp, #52	; 0x34
 8007698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (HTS221_0_Probe(Functions) != BSP_ERROR_NONE)
 800769c:	f1b8 0f00 	cmp.w	r8, #0
 80076a0:	d0f0      	beq.n	8007684 <IKS01A2_ENV_SENSOR_Init+0xb8>
 80076a2:	e7b2      	b.n	800760a <IKS01A2_ENV_SENSOR_Init+0x3e>
  int32_t                 ret = BSP_ERROR_NONE;
  static LPS22HB_Object_t lps22hb_obj_0;
  LPS22HB_Capabilities_t  cap;

  /* Configure the pressure driver */
  io_ctx.BusType     = LPS22HB_I2C_BUS; /* I2C */
 80076a4:	2300      	movs	r3, #0
 80076a6:	9307      	str	r3, [sp, #28]
  io_ctx.Address     = LPS22HB_I2C_ADD_H;
 80076a8:	23bb      	movs	r3, #187	; 0xbb
 80076aa:	f88d 3020 	strb.w	r3, [sp, #32]
  io_ctx.Init        = IKS01A2_I2C_Init;
 80076ae:	4b47      	ldr	r3, [pc, #284]	; (80077cc <IKS01A2_ENV_SENSOR_Init+0x200>)
 80076b0:	9305      	str	r3, [sp, #20]
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
  io_ctx.GetTick     = IKS01A2_GetTick;

  if (LPS22HB_RegisterBusIO(&lps22hb_obj_0, &io_ctx) != LPS22HB_OK)
 80076b2:	4c48      	ldr	r4, [pc, #288]	; (80077d4 <IKS01A2_ENV_SENSOR_Init+0x208>)
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 80076b4:	4b46      	ldr	r3, [pc, #280]	; (80077d0 <IKS01A2_ENV_SENSOR_Init+0x204>)
 80076b6:	9306      	str	r3, [sp, #24]
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 80076b8:	4b47      	ldr	r3, [pc, #284]	; (80077d8 <IKS01A2_ENV_SENSOR_Init+0x20c>)
 80076ba:	930a      	str	r3, [sp, #40]	; 0x28
  if (LPS22HB_RegisterBusIO(&lps22hb_obj_0, &io_ctx) != LPS22HB_OK)
 80076bc:	f104 0854 	add.w	r8, r4, #84	; 0x54
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 80076c0:	4b46      	ldr	r3, [pc, #280]	; (80077dc <IKS01A2_ENV_SENSOR_Init+0x210>)
 80076c2:	9309      	str	r3, [sp, #36]	; 0x24
  if (LPS22HB_RegisterBusIO(&lps22hb_obj_0, &io_ctx) != LPS22HB_OK)
 80076c4:	a905      	add	r1, sp, #20
  io_ctx.GetTick     = IKS01A2_GetTick;
 80076c6:	4b46      	ldr	r3, [pc, #280]	; (80077e0 <IKS01A2_ENV_SENSOR_Init+0x214>)
 80076c8:	930b      	str	r3, [sp, #44]	; 0x2c
  if (LPS22HB_RegisterBusIO(&lps22hb_obj_0, &io_ctx) != LPS22HB_OK)
 80076ca:	4640      	mov	r0, r8
 80076cc:	f7fe fb68 	bl	8005da0 <LPS22HB_RegisterBusIO>
 80076d0:	2800      	cmp	r0, #0
 80076d2:	d19a      	bne.n	800760a <IKS01A2_ENV_SENSOR_Init+0x3e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (LPS22HB_ReadID(&lps22hb_obj_0, &id) != LPS22HB_OK)
 80076d4:	f10d 0103 	add.w	r1, sp, #3
 80076d8:	4640      	mov	r0, r8
 80076da:	f7fe f987 	bl	80059ec <LPS22HB_ReadID>
 80076de:	4681      	mov	r9, r0
 80076e0:	2800      	cmp	r0, #0
 80076e2:	d192      	bne.n	800760a <IKS01A2_ENV_SENSOR_Init+0x3e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (id != LPS22HB_ID)
 80076e4:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80076e8:	2bb1      	cmp	r3, #177	; 0xb1
 80076ea:	d18e      	bne.n	800760a <IKS01A2_ENV_SENSOR_Init+0x3e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else
  {
    (void)LPS22HB_GetCapabilities(&lps22hb_obj_0, &cap);
 80076ec:	a901      	add	r1, sp, #4
 80076ee:	4640      	mov	r0, r8
 80076f0:	f7fe f93e 	bl	8005970 <LPS22HB_GetCapabilities>

    EnvCtx[IKS01A2_LPS22HB_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 80076f4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80076f8:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80076fc:	f89d 2004 	ldrb.w	r2, [sp, #4]
                                            uint32_t)cap.Humidity << 2);

    EnvCompObj[IKS01A2_LPS22HB_0] = &lps22hb_obj_0;
 8007700:	4d38      	ldr	r5, [pc, #224]	; (80077e4 <IKS01A2_ENV_SENSOR_Init+0x218>)
                                            uint32_t)cap.Humidity << 2);
 8007702:	009b      	lsls	r3, r3, #2
    EnvCtx[IKS01A2_LPS22HB_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8007704:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8007708:	4313      	orrs	r3, r2
 800770a:	6323      	str	r3, [r4, #48]	; 0x30
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A2_LPS22HB_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&LPS22HB_COMMON_Driver;

    if (((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 800770c:	07f9      	lsls	r1, r7, #31
    EnvDrv[IKS01A2_LPS22HB_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&LPS22HB_COMMON_Driver;
 800770e:	4b39      	ldr	r3, [pc, #228]	; (80077f4 <IKS01A2_ENV_SENSOR_Init+0x228>)
    EnvCompObj[IKS01A2_LPS22HB_0] = &lps22hb_obj_0;
 8007710:	f8c5 8004 	str.w	r8, [r5, #4]
    EnvDrv[IKS01A2_LPS22HB_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&LPS22HB_COMMON_Driver;
 8007714:	63a3      	str	r3, [r4, #56]	; 0x38
    if (((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8007716:	d50a      	bpl.n	800772e <IKS01A2_ENV_SENSOR_Init+0x162>
 8007718:	2a01      	cmp	r2, #1
 800771a:	d108      	bne.n	800772e <IKS01A2_ENV_SENSOR_Init+0x162>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A2_LPS22HB_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HB_TEMP_Driver;
 800771c:	4a36      	ldr	r2, [pc, #216]	; (80077f8 <IKS01A2_ENV_SENSOR_Init+0x22c>)

      if (EnvDrv[IKS01A2_LPS22HB_0]->Init(EnvCompObj[IKS01A2_LPS22HB_0]) != LPS22HB_OK)
 800771e:	681b      	ldr	r3, [r3, #0]
      EnvFuncDrv[IKS01A2_LPS22HB_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HB_TEMP_Driver;
 8007720:	64a2      	str	r2, [r4, #72]	; 0x48
      if (EnvDrv[IKS01A2_LPS22HB_0]->Init(EnvCompObj[IKS01A2_LPS22HB_0]) != LPS22HB_OK)
 8007722:	4640      	mov	r0, r8
 8007724:	4798      	blx	r3
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007726:	2800      	cmp	r0, #0
 8007728:	bf18      	it	ne
 800772a:	f06f 0904 	mvnne.w	r9, #4
      else
      {
        ret = BSP_ERROR_NONE;
      }
    }
    if (((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 1U))
 800772e:	07ba      	lsls	r2, r7, #30
 8007730:	d511      	bpl.n	8007756 <IKS01A2_ENV_SENSOR_Init+0x18a>
 8007732:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8007736:	2b01      	cmp	r3, #1
 8007738:	d10d      	bne.n	8007756 <IKS01A2_ENV_SENSOR_Init+0x18a>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A2_LPS22HB_0][FunctionIndex[ENV_PRESSURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HB_PRESS_Driver;
 800773a:	4b30      	ldr	r3, [pc, #192]	; (80077fc <IKS01A2_ENV_SENSOR_Init+0x230>)
 800773c:	64e3      	str	r3, [r4, #76]	; 0x4c

      if (EnvDrv[IKS01A2_LPS22HB_0]->Init(EnvCompObj[IKS01A2_LPS22HB_0]) != LPS22HB_OK)
 800773e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007740:	6868      	ldr	r0, [r5, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4798      	blx	r3
 8007746:	2800      	cmp	r0, #0
 8007748:	f47f af5f 	bne.w	800760a <IKS01A2_ENV_SENSOR_Init+0x3e>
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800774c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800774e:	6868      	ldr	r0, [r5, #4]
 8007750:	68db      	ldr	r3, [r3, #12]
 8007752:	a905      	add	r1, sp, #20
 8007754:	e79a      	b.n	800768c <IKS01A2_ENV_SENSOR_Init+0xc0>
      if (LPS22HB_0_Probe(Functions) != BSP_ERROR_NONE)
 8007756:	f1b9 0f00 	cmp.w	r9, #0
 800775a:	d0f7      	beq.n	800774c <IKS01A2_ENV_SENSOR_Init+0x180>
 800775c:	e755      	b.n	800760a <IKS01A2_ENV_SENSOR_Init+0x3e>
      if (cap.Temperature == 1U)
 800775e:	f89d 4014 	ldrb.w	r4, [sp, #20]
 8007762:	1e63      	subs	r3, r4, #1
 8007764:	425c      	negs	r4, r3
 8007766:	415c      	adcs	r4, r3
      if (cap.Humidity == 1U)
 8007768:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800776c:	2b01      	cmp	r3, #1
      if (cap.Pressure == 1U)
 800776e:	f89d 3015 	ldrb.w	r3, [sp, #21]
        component_functions |= ENV_HUMIDITY;
 8007772:	bf08      	it	eq
 8007774:	f044 0404 	orreq.w	r4, r4, #4
      if (cap.Pressure == 1U)
 8007778:	2b01      	cmp	r3, #1
 800777a:	d101      	bne.n	8007780 <IKS01A2_ENV_SENSOR_Init+0x1b4>
        component_functions |= ENV_PRESSURE;
 800777c:	f044 0402 	orr.w	r4, r4, #2
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 8007780:	f8df b060 	ldr.w	fp, [pc, #96]	; 80077e4 <IKS01A2_ENV_SENSOR_Init+0x218>
 8007784:	f8df a04c 	ldr.w	sl, [pc, #76]	; 80077d4 <IKS01A2_ENV_SENSOR_Init+0x208>
 8007788:	f8df 9074 	ldr.w	r9, [pc, #116]	; 8007800 <IKS01A2_ENV_SENSOR_Init+0x234>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800778c:	2503      	movs	r5, #3
 800778e:	f04f 0801 	mov.w	r8, #1
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8007792:	ea38 0307 	bics.w	r3, r8, r7
 8007796:	d005      	beq.n	80077a4 <IKS01A2_ENV_SENSOR_Init+0x1d8>
  for (i = 0; i < IKS01A2_ENV_FUNCTIONS_NBR; i++)
 8007798:	3d01      	subs	r5, #1
    function = function << 1;
 800779a:	ea4f 0848 	mov.w	r8, r8, lsl #1
  for (i = 0; i < IKS01A2_ENV_FUNCTIONS_NBR; i++)
 800779e:	d1f8      	bne.n	8007792 <IKS01A2_ENV_SENSOR_Init+0x1c6>
 80077a0:	4628      	mov	r0, r5
 80077a2:	e778      	b.n	8007696 <IKS01A2_ENV_SENSOR_Init+0xca>
    if (((Functions & function) == function) && ((component_functions & function) == function))
 80077a4:	ea38 0304 	bics.w	r3, r8, r4
 80077a8:	d1f6      	bne.n	8007798 <IKS01A2_ENV_SENSOR_Init+0x1cc>
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 80077aa:	f859 2028 	ldr.w	r2, [r9, r8, lsl #2]
 80077ae:	f85b 0026 	ldr.w	r0, [fp, r6, lsl #2]
 80077b2:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 80077b6:	4413      	add	r3, r2
 80077b8:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 80077bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4798      	blx	r3
 80077c2:	2800      	cmp	r0, #0
 80077c4:	d0e8      	beq.n	8007798 <IKS01A2_ENV_SENSOR_Init+0x1cc>
        return BSP_ERROR_COMPONENT_FAILURE;
 80077c6:	f06f 0004 	mvn.w	r0, #4
 80077ca:	e764      	b.n	8007696 <IKS01A2_ENV_SENSOR_Init+0xca>
 80077cc:	0800eef5 	.word	0x0800eef5
 80077d0:	0800ee09 	.word	0x0800ee09
 80077d4:	20001dbc 	.word	0x20001dbc
 80077d8:	0800ee69 	.word	0x0800ee69
 80077dc:	0800ee3d 	.word	0x0800ee3d
 80077e0:	0800eebd 	.word	0x0800eebd
 80077e4:	20008574 	.word	0x20008574
 80077e8:	20000028 	.word	0x20000028
 80077ec:	20000000 	.word	0x20000000
 80077f0:	20000014 	.word	0x20000014
 80077f4:	20000060 	.word	0x20000060
 80077f8:	20000038 	.word	0x20000038
 80077fc:	2000004c 	.word	0x2000004c
 8007800:	08019484 	.word	0x08019484

08007804 <IKS01A2_ENV_SENSOR_Enable>:
  if (Instance >= IKS01A2_ENV_INSTANCES_NBR)
 8007804:	2801      	cmp	r0, #1
{
 8007806:	b510      	push	{r4, lr}
  if (Instance >= IKS01A2_ENV_INSTANCES_NBR)
 8007808:	d819      	bhi.n	800783e <IKS01A2_ENV_SENSOR_Enable+0x3a>
    if ((EnvCtx[Instance].Functions & Function) == Function)
 800780a:	4b0e      	ldr	r3, [pc, #56]	; (8007844 <IKS01A2_ENV_SENSOR_Enable+0x40>)
 800780c:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8007810:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007812:	400a      	ands	r2, r1
 8007814:	428a      	cmp	r2, r1
 8007816:	d112      	bne.n	800783e <IKS01A2_ENV_SENSOR_Enable+0x3a>
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 8007818:	4c0b      	ldr	r4, [pc, #44]	; (8007848 <IKS01A2_ENV_SENSOR_Enable+0x44>)
 800781a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800781e:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 8007822:	440a      	add	r2, r1
 8007824:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8007828:	4a08      	ldr	r2, [pc, #32]	; (800784c <IKS01A2_ENV_SENSOR_Enable+0x48>)
 800782a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800782c:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	4798      	blx	r3
 8007834:	2800      	cmp	r0, #0
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007836:	bf18      	it	ne
 8007838:	f06f 0004 	mvnne.w	r0, #4
}
 800783c:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800783e:	f06f 0001 	mvn.w	r0, #1
 8007842:	e7fb      	b.n	800783c <IKS01A2_ENV_SENSOR_Enable+0x38>
 8007844:	20001dbc 	.word	0x20001dbc
 8007848:	08019484 	.word	0x08019484
 800784c:	20008574 	.word	0x20008574

08007850 <IKS01A2_ENV_SENSOR_GetValue>:
  if (Instance >= IKS01A2_ENV_INSTANCES_NBR)
 8007850:	2801      	cmp	r0, #1
{
 8007852:	b538      	push	{r3, r4, r5, lr}
  if (Instance >= IKS01A2_ENV_INSTANCES_NBR)
 8007854:	d81a      	bhi.n	800788c <IKS01A2_ENV_SENSOR_GetValue+0x3c>
    if ((EnvCtx[Instance].Functions & Function) == Function)
 8007856:	4b0f      	ldr	r3, [pc, #60]	; (8007894 <IKS01A2_ENV_SENSOR_GetValue+0x44>)
 8007858:	eb03 0480 	add.w	r4, r3, r0, lsl #2
 800785c:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 800785e:	400c      	ands	r4, r1
 8007860:	428c      	cmp	r4, r1
 8007862:	d113      	bne.n	800788c <IKS01A2_ENV_SENSOR_GetValue+0x3c>
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->GetValue(EnvCompObj[Instance], Value) != BSP_ERROR_NONE)
 8007864:	490c      	ldr	r1, [pc, #48]	; (8007898 <IKS01A2_ENV_SENSOR_GetValue+0x48>)
 8007866:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 800786a:	eb00 0540 	add.w	r5, r0, r0, lsl #1
 800786e:	442c      	add	r4, r5
 8007870:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8007874:	4611      	mov	r1, r2
 8007876:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007878:	4a08      	ldr	r2, [pc, #32]	; (800789c <IKS01A2_ENV_SENSOR_GetValue+0x4c>)
 800787a:	691b      	ldr	r3, [r3, #16]
 800787c:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8007880:	4798      	blx	r3
 8007882:	2800      	cmp	r0, #0
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007884:	bf18      	it	ne
 8007886:	f06f 0004 	mvnne.w	r0, #4
}
 800788a:	bd38      	pop	{r3, r4, r5, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800788c:	f06f 0001 	mvn.w	r0, #1
 8007890:	e7fb      	b.n	800788a <IKS01A2_ENV_SENSOR_GetValue+0x3a>
 8007892:	bf00      	nop
 8007894:	20001dbc 	.word	0x20001dbc
 8007898:	08019484 	.word	0x08019484
 800789c:	20008574 	.word	0x20008574

080078a0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80078a0:	490e      	ldr	r1, [pc, #56]	; (80078dc <SystemInit+0x3c>)
 80078a2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80078a6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80078aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80078ae:	4b0c      	ldr	r3, [pc, #48]	; (80078e0 <SystemInit+0x40>)
 80078b0:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80078b2:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 80078b4:	f042 0201 	orr.w	r2, r2, #1
 80078b8:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80078ba:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80078bc:	681a      	ldr	r2, [r3, #0]
 80078be:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80078c2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80078c6:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80078c8:	4a06      	ldr	r2, [pc, #24]	; (80078e4 <SystemInit+0x44>)
 80078ca:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80078cc:	681a      	ldr	r2, [r3, #0]
 80078ce:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80078d2:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80078d4:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80078d6:	4b04      	ldr	r3, [pc, #16]	; (80078e8 <SystemInit+0x48>)
 80078d8:	608b      	str	r3, [r1, #8]
#endif
}
 80078da:	4770      	bx	lr
 80078dc:	e000ed00 	.word	0xe000ed00
 80078e0:	40023800 	.word	0x40023800
 80078e4:	24003010 	.word	0x24003010
 80078e8:	08004000 	.word	0x08004000

080078ec <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80078ec:	4770      	bx	lr
	...

080078f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80078f0:	b570      	push	{r4, r5, r6, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80078f2:	4a0e      	ldr	r2, [pc, #56]	; (800792c <HAL_InitTick+0x3c>)
 80078f4:	4e0e      	ldr	r6, [pc, #56]	; (8007930 <HAL_InitTick+0x40>)
{
 80078f6:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80078f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80078fc:	7830      	ldrb	r0, [r6, #0]
 80078fe:	fbb3 f3f0 	udiv	r3, r3, r0
 8007902:	6810      	ldr	r0, [r2, #0]
 8007904:	fbb0 f0f3 	udiv	r0, r0, r3
 8007908:	f000 f8a8 	bl	8007a5c <HAL_SYSTICK_Config>
 800790c:	4604      	mov	r4, r0
 800790e:	b950      	cbnz	r0, 8007926 <HAL_InitTick+0x36>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007910:	2d0f      	cmp	r5, #15
 8007912:	d808      	bhi.n	8007926 <HAL_InitTick+0x36>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007914:	4602      	mov	r2, r0
 8007916:	4629      	mov	r1, r5
 8007918:	f04f 30ff 	mov.w	r0, #4294967295
 800791c:	f000 f84c 	bl	80079b8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007920:	6075      	str	r5, [r6, #4]
 8007922:	4620      	mov	r0, r4
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8007924:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8007926:	2001      	movs	r0, #1
 8007928:	e7fc      	b.n	8007924 <HAL_InitTick+0x34>
 800792a:	bf00      	nop
 800792c:	20000184 	.word	0x20000184
 8007930:	20000188 	.word	0x20000188

08007934 <HAL_Init>:
{
 8007934:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007936:	4b0b      	ldr	r3, [pc, #44]	; (8007964 <HAL_Init+0x30>)
 8007938:	681a      	ldr	r2, [r3, #0]
 800793a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800793e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007940:	681a      	ldr	r2, [r3, #0]
 8007942:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007946:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007948:	681a      	ldr	r2, [r3, #0]
 800794a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800794e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007950:	2003      	movs	r0, #3
 8007952:	f000 f81f 	bl	8007994 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8007956:	200d      	movs	r0, #13
 8007958:	f7ff ffca 	bl	80078f0 <HAL_InitTick>
  HAL_MspInit();
 800795c:	f7ff ffc6 	bl	80078ec <HAL_MspInit>
}
 8007960:	2000      	movs	r0, #0
 8007962:	bd08      	pop	{r3, pc}
 8007964:	40023c00 	.word	0x40023c00

08007968 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8007968:	4a03      	ldr	r2, [pc, #12]	; (8007978 <HAL_IncTick+0x10>)
 800796a:	4b04      	ldr	r3, [pc, #16]	; (800797c <HAL_IncTick+0x14>)
 800796c:	6811      	ldr	r1, [r2, #0]
 800796e:	781b      	ldrb	r3, [r3, #0]
 8007970:	440b      	add	r3, r1
 8007972:	6013      	str	r3, [r2, #0]
}
 8007974:	4770      	bx	lr
 8007976:	bf00      	nop
 8007978:	2000857c 	.word	0x2000857c
 800797c:	20000188 	.word	0x20000188

08007980 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8007980:	4b01      	ldr	r3, [pc, #4]	; (8007988 <HAL_GetTick+0x8>)
 8007982:	6818      	ldr	r0, [r3, #0]
}
 8007984:	4770      	bx	lr
 8007986:	bf00      	nop
 8007988:	2000857c 	.word	0x2000857c

0800798c <HAL_GetHalVersion>:
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
  return __STM32F4xx_HAL_VERSION;
}
 800798c:	4800      	ldr	r0, [pc, #0]	; (8007990 <HAL_GetHalVersion+0x4>)
 800798e:	4770      	bx	lr
 8007990:	01070400 	.word	0x01070400

08007994 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007994:	4a07      	ldr	r2, [pc, #28]	; (80079b4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8007996:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007998:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800799c:	041b      	lsls	r3, r3, #16
 800799e:	0c1b      	lsrs	r3, r3, #16
 80079a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80079a4:	0200      	lsls	r0, r0, #8
 80079a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079aa:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80079ae:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80079b0:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80079b2:	4770      	bx	lr
 80079b4:	e000ed00 	.word	0xe000ed00

080079b8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80079b8:	4b17      	ldr	r3, [pc, #92]	; (8007a18 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80079ba:	b570      	push	{r4, r5, r6, lr}
 80079bc:	68dc      	ldr	r4, [r3, #12]
 80079be:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80079c2:	f1c4 0507 	rsb	r5, r4, #7
 80079c6:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80079c8:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80079cc:	bf28      	it	cs
 80079ce:	2504      	movcs	r5, #4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80079d0:	f04f 36ff 	mov.w	r6, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80079d4:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80079d6:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80079da:	bf8c      	ite	hi
 80079dc:	3c03      	subhi	r4, #3
 80079de:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80079e0:	ea21 0303 	bic.w	r3, r1, r3
 80079e4:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80079e6:	fa06 f404 	lsl.w	r4, r6, r4
 80079ea:	ea22 0404 	bic.w	r4, r2, r4
  if ((int32_t)(IRQn) < 0)
 80079ee:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80079f0:	ea43 0304 	orr.w	r3, r3, r4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80079f4:	bfa8      	it	ge
 80079f6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 80079fa:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80079fe:	bfbc      	itt	lt
 8007a00:	f000 000f 	andlt.w	r0, r0, #15
 8007a04:	4a05      	ldrlt	r2, [pc, #20]	; (8007a1c <HAL_NVIC_SetPriority+0x64>)
 8007a06:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007a08:	bfaa      	itet	ge
 8007a0a:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007a0e:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007a10:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8007a14:	bd70      	pop	{r4, r5, r6, pc}
 8007a16:	bf00      	nop
 8007a18:	e000ed00 	.word	0xe000ed00
 8007a1c:	e000ed14 	.word	0xe000ed14

08007a20 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8007a20:	0942      	lsrs	r2, r0, #5
 8007a22:	2301      	movs	r3, #1
 8007a24:	f000 001f 	and.w	r0, r0, #31
 8007a28:	fa03 f000 	lsl.w	r0, r3, r0
 8007a2c:	4b01      	ldr	r3, [pc, #4]	; (8007a34 <HAL_NVIC_EnableIRQ+0x14>)
 8007a2e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8007a32:	4770      	bx	lr
 8007a34:	e000e100 	.word	0xe000e100

08007a38 <HAL_NVIC_SystemReset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8007a38:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8007a3c:	4905      	ldr	r1, [pc, #20]	; (8007a54 <HAL_NVIC_SystemReset+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8007a3e:	4b06      	ldr	r3, [pc, #24]	; (8007a58 <HAL_NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8007a40:	68ca      	ldr	r2, [r1, #12]
 8007a42:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8007a46:	4313      	orrs	r3, r2
 8007a48:	60cb      	str	r3, [r1, #12]
 8007a4a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8007a4e:	bf00      	nop
 8007a50:	e7fd      	b.n	8007a4e <HAL_NVIC_SystemReset+0x16>
 8007a52:	bf00      	nop
 8007a54:	e000ed00 	.word	0xe000ed00
 8007a58:	05fa0004 	.word	0x05fa0004

08007a5c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007a5c:	3801      	subs	r0, #1
 8007a5e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8007a62:	d20a      	bcs.n	8007a7a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007a64:	4b06      	ldr	r3, [pc, #24]	; (8007a80 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007a66:	4a07      	ldr	r2, [pc, #28]	; (8007a84 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007a68:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007a6a:	21f0      	movs	r1, #240	; 0xf0
 8007a6c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007a70:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007a72:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007a74:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007a76:	601a      	str	r2, [r3, #0]
 8007a78:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8007a7a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8007a7c:	4770      	bx	lr
 8007a7e:	bf00      	nop
 8007a80:	e000e010 	.word	0xe000e010
 8007a84:	e000ed00 	.word	0xe000ed00

08007a88 <HAL_CRC_Init>:
  * @param  hcrc pointer to a CRC_HandleTypeDef structure that contains
  *         the configuration information for CRC
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8007a88:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if(hcrc == NULL)
 8007a8a:	4604      	mov	r4, r0
 8007a8c:	b160      	cbz	r0, 8007aa8 <HAL_CRC_Init+0x20>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if(hcrc->State == HAL_CRC_STATE_RESET)
 8007a8e:	7943      	ldrb	r3, [r0, #5]
 8007a90:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007a94:	b913      	cbnz	r3, 8007a9c <HAL_CRC_Init+0x14>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8007a96:	7102      	strb	r2, [r0, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8007a98:	f009 fcc2 	bl	8011420 <HAL_CRC_MspInit>
  }
  
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8007a9c:	2302      	movs	r3, #2
 8007a9e:	7163      	strb	r3, [r4, #5]
   
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	7163      	strb	r3, [r4, #5]
  
  /* Return function status */
  return HAL_OK;
 8007aa4:	2000      	movs	r0, #0
}
 8007aa6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8007aa8:	2001      	movs	r0, #1
 8007aaa:	e7fc      	b.n	8007aa6 <HAL_CRC_Init+0x1e>

08007aac <HAL_CRC_DeInit>:
  * @param  hcrc pointer to a CRC_HandleTypeDef structure that contains
  *         the configuration information for CRC
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_DeInit(CRC_HandleTypeDef *hcrc)
{
 8007aac:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if(hcrc == NULL)
 8007aae:	4604      	mov	r4, r0
 8007ab0:	b138      	cbz	r0, 8007ac2 <HAL_CRC_DeInit+0x16>

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8007ab2:	2302      	movs	r3, #2
 8007ab4:	7143      	strb	r3, [r0, #5]

  /* DeInit the low level hardware */
  HAL_CRC_MspDeInit(hcrc);
 8007ab6:	f009 fcc5 	bl	8011444 <HAL_CRC_MspDeInit>

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_RESET;
 8007aba:	2000      	movs	r0, #0
 8007abc:	7160      	strb	r0, [r4, #5]

  /* Release Lock */
  __HAL_UNLOCK(hcrc);
 8007abe:	7120      	strb	r0, [r4, #4]

  /* Return function status */
  return HAL_OK;
}
 8007ac0:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8007ac2:	2001      	movs	r0, #1
 8007ac4:	e7fc      	b.n	8007ac0 <HAL_CRC_DeInit+0x14>

08007ac6 <HAL_CRC_Calculate>:
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
  uint32_t index = 0U;

  /* Process Locked */
  __HAL_LOCK(hcrc); 
 8007ac6:	7903      	ldrb	r3, [r0, #4]
 8007ac8:	2b01      	cmp	r3, #1
{
 8007aca:	b510      	push	{r4, lr}
 8007acc:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(hcrc); 
 8007ad0:	d015      	beq.n	8007afe <HAL_CRC_Calculate+0x38>

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8007ad2:	7143      	strb	r3, [r0, #5]

  /* Reset CRC Calculation Unit */
  __HAL_CRC_DR_RESET(hcrc);
 8007ad4:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hcrc); 
 8007ad6:	2401      	movs	r4, #1
 8007ad8:	7104      	strb	r4, [r0, #4]
  __HAL_CRC_DR_RESET(hcrc);
 8007ada:	689c      	ldr	r4, [r3, #8]
 8007adc:	f044 0401 	orr.w	r4, r4, #1
 8007ae0:	609c      	str	r4, [r3, #8]
 8007ae2:	eb01 0282 	add.w	r2, r1, r2, lsl #2

  /* Enter Data to the CRC calculator */
  for(index = 0U; index < BufferLength; index++)
 8007ae6:	4291      	cmp	r1, r2
 8007ae8:	d105      	bne.n	8007af6 <HAL_CRC_Calculate+0x30>
  {
    hcrc->Instance->DR = pBuffer[index];
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8007aea:	2201      	movs	r2, #1
 8007aec:	7142      	strb	r2, [r0, #5]

  /* Process Unlocked */
  __HAL_UNLOCK(hcrc);
 8007aee:	2200      	movs	r2, #0
 8007af0:	7102      	strb	r2, [r0, #4]

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8007af2:	6818      	ldr	r0, [r3, #0]
}
 8007af4:	bd10      	pop	{r4, pc}
    hcrc->Instance->DR = pBuffer[index];
 8007af6:	f851 4b04 	ldr.w	r4, [r1], #4
 8007afa:	601c      	str	r4, [r3, #0]
 8007afc:	e7f3      	b.n	8007ae6 <HAL_CRC_Calculate+0x20>
  __HAL_LOCK(hcrc); 
 8007afe:	4618      	mov	r0, r3
 8007b00:	e7f8      	b.n	8007af4 <HAL_CRC_Calculate+0x2e>

08007b02 <HAL_CRC_GetState>:
  *         the configuration information for CRC
  * @retval HAL state
  */
HAL_CRC_StateTypeDef HAL_CRC_GetState(CRC_HandleTypeDef *hcrc)
{
  return hcrc->State;
 8007b02:	7940      	ldrb	r0, [r0, #5]
}
 8007b04:	4770      	bx	lr
	...

08007b08 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007b08:	6803      	ldr	r3, [r0, #0]
 8007b0a:	b2da      	uxtb	r2, r3
 8007b0c:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007b10:	f023 0303 	bic.w	r3, r3, #3
 8007b14:	2118      	movs	r1, #24
 8007b16:	3a10      	subs	r2, #16
 8007b18:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007b1c:	4904      	ldr	r1, [pc, #16]	; (8007b30 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 8007b1e:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007b20:	bf88      	it	hi
 8007b22:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007b24:	5c89      	ldrb	r1, [r1, r2]
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007b26:	6583      	str	r3, [r0, #88]	; 0x58
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007b28:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  
  return hdma->StreamBaseAddress;
}
 8007b2a:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8007b2c:	4770      	bx	lr
 8007b2e:	bf00      	nop
 8007b30:	080194b0 	.word	0x080194b0

08007b34 <HAL_DMA_Init>:
{
 8007b34:	b570      	push	{r4, r5, r6, lr}
 8007b36:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8007b38:	f7ff ff22 	bl	8007980 <HAL_GetTick>
 8007b3c:	4605      	mov	r5, r0
  if(hdma == NULL)
 8007b3e:	2c00      	cmp	r4, #0
 8007b40:	d071      	beq.n	8007c26 <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 8007b42:	2300      	movs	r3, #0
 8007b44:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8007b48:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8007b4a:	2302      	movs	r3, #2
 8007b4c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8007b50:	6813      	ldr	r3, [r2, #0]
 8007b52:	f023 0301 	bic.w	r3, r3, #1
 8007b56:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007b58:	6821      	ldr	r1, [r4, #0]
 8007b5a:	680b      	ldr	r3, [r1, #0]
 8007b5c:	07d8      	lsls	r0, r3, #31
 8007b5e:	d43c      	bmi.n	8007bda <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 8007b60:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007b62:	4d32      	ldr	r5, [pc, #200]	; (8007c2c <HAL_DMA_Init+0xf8>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007b64:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007b66:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007b68:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8007b6c:	4313      	orrs	r3, r2
 8007b6e:	68e2      	ldr	r2, [r4, #12]
 8007b70:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007b72:	6922      	ldr	r2, [r4, #16]
 8007b74:	4313      	orrs	r3, r2
 8007b76:	6962      	ldr	r2, [r4, #20]
 8007b78:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007b7a:	69e2      	ldr	r2, [r4, #28]
 8007b7c:	4303      	orrs	r3, r0
 8007b7e:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8007b80:	6a22      	ldr	r2, [r4, #32]
 8007b82:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007b84:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007b86:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007b88:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007b8c:	bf02      	ittt	eq
 8007b8e:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	; 0x2c
 8007b92:	4335      	orreq	r5, r6
 8007b94:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 8007b96:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8007b98:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007b9a:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007b9c:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8007ba0:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007ba4:	d10b      	bne.n	8007bbe <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 8007ba6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007ba8:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8007baa:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007bac:	b13d      	cbz	r5, 8007bbe <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007bae:	b9f8      	cbnz	r0, 8007bf0 <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 8007bb0:	2a01      	cmp	r2, #1
 8007bb2:	d02d      	beq.n	8007c10 <HAL_DMA_Init+0xdc>
 8007bb4:	d301      	bcc.n	8007bba <HAL_DMA_Init+0x86>
 8007bb6:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007bb8:	d101      	bne.n	8007bbe <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007bba:	01ea      	lsls	r2, r5, #7
 8007bbc:	d42b      	bmi.n	8007c16 <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 8007bbe:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007bc0:	4620      	mov	r0, r4
 8007bc2:	f7ff ffa1 	bl	8007b08 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007bc6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8007bc8:	233f      	movs	r3, #63	; 0x3f
 8007bca:	4093      	lsls	r3, r2
 8007bcc:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007bce:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8007bd0:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007bd2:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8007bd4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8007bd8:	e009      	b.n	8007bee <HAL_DMA_Init+0xba>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007bda:	f7ff fed1 	bl	8007980 <HAL_GetTick>
 8007bde:	1b40      	subs	r0, r0, r5
 8007be0:	2805      	cmp	r0, #5
 8007be2:	d9b9      	bls.n	8007b58 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007be4:	2320      	movs	r3, #32
 8007be6:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007be8:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 8007bea:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8007bee:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007bf0:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8007bf4:	d113      	bne.n	8007c1e <HAL_DMA_Init+0xea>
    switch (tmp)
 8007bf6:	2a03      	cmp	r2, #3
 8007bf8:	d8e1      	bhi.n	8007bbe <HAL_DMA_Init+0x8a>
 8007bfa:	a001      	add	r0, pc, #4	; (adr r0, 8007c00 <HAL_DMA_Init+0xcc>)
 8007bfc:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8007c00:	08007c17 	.word	0x08007c17
 8007c04:	08007bbb 	.word	0x08007bbb
 8007c08:	08007c17 	.word	0x08007c17
 8007c0c:	08007c11 	.word	0x08007c11
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007c10:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8007c14:	d1d3      	bne.n	8007bbe <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007c16:	2340      	movs	r3, #64	; 0x40
 8007c18:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8007c1a:	2001      	movs	r0, #1
 8007c1c:	e7e5      	b.n	8007bea <HAL_DMA_Init+0xb6>
    switch (tmp)
 8007c1e:	2a02      	cmp	r2, #2
 8007c20:	d9f9      	bls.n	8007c16 <HAL_DMA_Init+0xe2>
 8007c22:	2a03      	cmp	r2, #3
 8007c24:	e7c8      	b.n	8007bb8 <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 8007c26:	2001      	movs	r0, #1
 8007c28:	e7e1      	b.n	8007bee <HAL_DMA_Init+0xba>
 8007c2a:	bf00      	nop
 8007c2c:	f010803f 	.word	0xf010803f

08007c30 <HAL_DMA_DeInit>:
{
 8007c30:	b538      	push	{r3, r4, r5, lr}
  if(hdma == NULL)
 8007c32:	4605      	mov	r5, r0
 8007c34:	b1f0      	cbz	r0, 8007c74 <HAL_DMA_DeInit+0x44>
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8007c36:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 8007c3a:	b2e4      	uxtb	r4, r4
 8007c3c:	2c02      	cmp	r4, #2
 8007c3e:	d017      	beq.n	8007c70 <HAL_DMA_DeInit+0x40>
  __HAL_DMA_DISABLE(hdma);
 8007c40:	6803      	ldr	r3, [r0, #0]
 8007c42:	681a      	ldr	r2, [r3, #0]
 8007c44:	f022 0201 	bic.w	r2, r2, #1
 8007c48:	601a      	str	r2, [r3, #0]
  hdma->Instance->CR   = 0U;
 8007c4a:	2400      	movs	r4, #0
  hdma->Instance->FCR  = 0x00000021U;
 8007c4c:	2221      	movs	r2, #33	; 0x21
  hdma->Instance->CR   = 0U;
 8007c4e:	601c      	str	r4, [r3, #0]
  hdma->Instance->NDTR = 0U;
 8007c50:	605c      	str	r4, [r3, #4]
  hdma->Instance->PAR  = 0U;
 8007c52:	609c      	str	r4, [r3, #8]
  hdma->Instance->M0AR = 0U;
 8007c54:	60dc      	str	r4, [r3, #12]
  hdma->Instance->M1AR = 0U;
 8007c56:	611c      	str	r4, [r3, #16]
  hdma->Instance->FCR  = 0x00000021U;
 8007c58:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007c5a:	f7ff ff55 	bl	8007b08 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007c5e:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8007c60:	233f      	movs	r3, #63	; 0x3f
 8007c62:	4093      	lsls	r3, r2
 8007c64:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007c66:	656c      	str	r4, [r5, #84]	; 0x54
  __HAL_UNLOCK(hdma);
 8007c68:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 8007c6c:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
    return HAL_BUSY;
 8007c70:	4620      	mov	r0, r4
 8007c72:	e000      	b.n	8007c76 <HAL_DMA_DeInit+0x46>
    return HAL_ERROR;
 8007c74:	2001      	movs	r0, #1
}
 8007c76:	bd38      	pop	{r3, r4, r5, pc}

08007c78 <HAL_DMA_Start_IT>:
{
 8007c78:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 8007c7a:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8007c7e:	2c01      	cmp	r4, #1
 8007c80:	d036      	beq.n	8007cf0 <HAL_DMA_Start_IT+0x78>
 8007c82:	2401      	movs	r4, #1
 8007c84:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8007c88:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007c8c:	6d86      	ldr	r6, [r0, #88]	; 0x58
  if(HAL_DMA_STATE_READY == hdma->State)
 8007c8e:	2c01      	cmp	r4, #1
 8007c90:	f04f 0500 	mov.w	r5, #0
 8007c94:	f04f 0402 	mov.w	r4, #2
 8007c98:	d128      	bne.n	8007cec <HAL_DMA_Start_IT+0x74>
    hdma->State = HAL_DMA_STATE_BUSY;
 8007c9a:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007c9e:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007ca0:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007ca2:	6825      	ldr	r5, [r4, #0]
 8007ca4:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8007ca8:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8007caa:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007cac:	6883      	ldr	r3, [r0, #8]
 8007cae:	2b40      	cmp	r3, #64	; 0x40
    hdma->Instance->PAR = DstAddress;
 8007cb0:	bf0e      	itee	eq
 8007cb2:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 8007cb4:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8007cb6:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007cb8:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = SrcAddress;
 8007cba:	bf08      	it	eq
 8007cbc:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007cbe:	233f      	movs	r3, #63	; 0x3f
 8007cc0:	4093      	lsls	r3, r2
 8007cc2:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007cc4:	6823      	ldr	r3, [r4, #0]
 8007cc6:	f043 0316 	orr.w	r3, r3, #22
 8007cca:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8007ccc:	6963      	ldr	r3, [r4, #20]
 8007cce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cd2:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8007cd4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8007cd6:	b11b      	cbz	r3, 8007ce0 <HAL_DMA_Start_IT+0x68>
      hdma->Instance->CR  |= DMA_IT_HT;
 8007cd8:	6823      	ldr	r3, [r4, #0]
 8007cda:	f043 0308 	orr.w	r3, r3, #8
 8007cde:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8007ce0:	6823      	ldr	r3, [r4, #0]
 8007ce2:	f043 0301 	orr.w	r3, r3, #1
 8007ce6:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007ce8:	2000      	movs	r0, #0
}
 8007cea:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hdma);	  
 8007cec:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 8007cf0:	2002      	movs	r0, #2
 8007cf2:	e7fa      	b.n	8007cea <HAL_DMA_Start_IT+0x72>

08007cf4 <HAL_DMA_Abort>:
{
 8007cf4:	b570      	push	{r4, r5, r6, lr}
 8007cf6:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007cf8:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 8007cfa:	f7ff fe41 	bl	8007980 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007cfe:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8007d02:	2b02      	cmp	r3, #2
  uint32_t tickstart = HAL_GetTick();
 8007d04:	4606      	mov	r6, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007d06:	d006      	beq.n	8007d16 <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007d08:	2380      	movs	r3, #128	; 0x80
 8007d0a:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 8007d12:	2001      	movs	r0, #1
}
 8007d14:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007d16:	6823      	ldr	r3, [r4, #0]
 8007d18:	681a      	ldr	r2, [r3, #0]
 8007d1a:	f022 0216 	bic.w	r2, r2, #22
 8007d1e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007d20:	695a      	ldr	r2, [r3, #20]
 8007d22:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007d26:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007d28:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007d2a:	b90a      	cbnz	r2, 8007d30 <HAL_DMA_Abort+0x3c>
 8007d2c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8007d2e:	b11a      	cbz	r2, 8007d38 <HAL_DMA_Abort+0x44>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007d30:	681a      	ldr	r2, [r3, #0]
 8007d32:	f022 0208 	bic.w	r2, r2, #8
 8007d36:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8007d38:	681a      	ldr	r2, [r3, #0]
 8007d3a:	f022 0201 	bic.w	r2, r2, #1
 8007d3e:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007d40:	6823      	ldr	r3, [r4, #0]
 8007d42:	6818      	ldr	r0, [r3, #0]
 8007d44:	f010 0001 	ands.w	r0, r0, #1
 8007d48:	d109      	bne.n	8007d5e <HAL_DMA_Abort+0x6a>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007d4a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8007d4c:	233f      	movs	r3, #63	; 0x3f
 8007d4e:	4093      	lsls	r3, r2
 8007d50:	60ab      	str	r3, [r5, #8]
    hdma->State = HAL_DMA_STATE_READY;
 8007d52:	2301      	movs	r3, #1
    __HAL_UNLOCK(hdma);
 8007d54:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 8007d58:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8007d5c:	e7da      	b.n	8007d14 <HAL_DMA_Abort+0x20>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007d5e:	f7ff fe0f 	bl	8007980 <HAL_GetTick>
 8007d62:	1b80      	subs	r0, r0, r6
 8007d64:	2805      	cmp	r0, #5
 8007d66:	d9eb      	bls.n	8007d40 <HAL_DMA_Abort+0x4c>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007d68:	2320      	movs	r3, #32
 8007d6a:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007d6c:	2003      	movs	r0, #3
        __HAL_UNLOCK(hdma);
 8007d6e:	2300      	movs	r3, #0
 8007d70:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007d74:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_TIMEOUT;
 8007d78:	e7cc      	b.n	8007d14 <HAL_DMA_Abort+0x20>
	...

08007d7c <HAL_DMA_IRQHandler>:
{
 8007d7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 8007d7e:	2300      	movs	r3, #0
 8007d80:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007d82:	4b5c      	ldr	r3, [pc, #368]	; (8007ef4 <HAL_DMA_IRQHandler+0x178>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007d84:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 8007d86:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007d88:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8007d8a:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007d8c:	2208      	movs	r2, #8
 8007d8e:	409a      	lsls	r2, r3
 8007d90:	4232      	tst	r2, r6
{
 8007d92:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007d94:	d00c      	beq.n	8007db0 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007d96:	6801      	ldr	r1, [r0, #0]
 8007d98:	6808      	ldr	r0, [r1, #0]
 8007d9a:	0740      	lsls	r0, r0, #29
 8007d9c:	d508      	bpl.n	8007db0 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007d9e:	6808      	ldr	r0, [r1, #0]
 8007da0:	f020 0004 	bic.w	r0, r0, #4
 8007da4:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007da6:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007da8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8007daa:	f042 0201 	orr.w	r2, r2, #1
 8007dae:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007db0:	2201      	movs	r2, #1
 8007db2:	409a      	lsls	r2, r3
 8007db4:	4232      	tst	r2, r6
 8007db6:	d008      	beq.n	8007dca <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007db8:	6821      	ldr	r1, [r4, #0]
 8007dba:	6949      	ldr	r1, [r1, #20]
 8007dbc:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007dbe:	bf41      	itttt	mi
 8007dc0:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007dc2:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8007dc4:	f042 0202 	orrmi.w	r2, r2, #2
 8007dc8:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007dca:	2204      	movs	r2, #4
 8007dcc:	409a      	lsls	r2, r3
 8007dce:	4232      	tst	r2, r6
 8007dd0:	d008      	beq.n	8007de4 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007dd2:	6821      	ldr	r1, [r4, #0]
 8007dd4:	6809      	ldr	r1, [r1, #0]
 8007dd6:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007dd8:	bf41      	itttt	mi
 8007dda:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007ddc:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8007dde:	f042 0204 	orrmi.w	r2, r2, #4
 8007de2:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007de4:	2210      	movs	r2, #16
 8007de6:	409a      	lsls	r2, r3
 8007de8:	4232      	tst	r2, r6
 8007dea:	d010      	beq.n	8007e0e <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007dec:	6823      	ldr	r3, [r4, #0]
 8007dee:	6819      	ldr	r1, [r3, #0]
 8007df0:	0709      	lsls	r1, r1, #28
 8007df2:	d50c      	bpl.n	8007e0e <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007df4:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007df6:	681a      	ldr	r2, [r3, #0]
 8007df8:	0350      	lsls	r0, r2, #13
 8007dfa:	d537      	bpl.n	8007e6c <HAL_DMA_IRQHandler+0xf0>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	0319      	lsls	r1, r3, #12
 8007e00:	d401      	bmi.n	8007e06 <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 8007e02:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007e04:	e000      	b.n	8007e08 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007e06:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8007e08:	b10b      	cbz	r3, 8007e0e <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 8007e0a:	4620      	mov	r0, r4
 8007e0c:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007e0e:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007e10:	2220      	movs	r2, #32
 8007e12:	408a      	lsls	r2, r1
 8007e14:	4232      	tst	r2, r6
 8007e16:	d03a      	beq.n	8007e8e <HAL_DMA_IRQHandler+0x112>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007e18:	6823      	ldr	r3, [r4, #0]
 8007e1a:	6818      	ldr	r0, [r3, #0]
 8007e1c:	06c6      	lsls	r6, r0, #27
 8007e1e:	d536      	bpl.n	8007e8e <HAL_DMA_IRQHandler+0x112>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007e20:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007e22:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8007e26:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007e28:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007e2a:	d127      	bne.n	8007e7c <HAL_DMA_IRQHandler+0x100>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007e2c:	f022 0216 	bic.w	r2, r2, #22
 8007e30:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007e32:	695a      	ldr	r2, [r3, #20]
 8007e34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007e38:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007e3a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007e3c:	b90a      	cbnz	r2, 8007e42 <HAL_DMA_IRQHandler+0xc6>
 8007e3e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8007e40:	b11a      	cbz	r2, 8007e4a <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007e42:	681a      	ldr	r2, [r3, #0]
 8007e44:	f022 0208 	bic.w	r2, r2, #8
 8007e48:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007e4a:	233f      	movs	r3, #63	; 0x3f
 8007e4c:	408b      	lsls	r3, r1
 8007e4e:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 8007e50:	2300      	movs	r3, #0
 8007e52:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8007e56:	2301      	movs	r3, #1
 8007e58:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8007e5c:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d045      	beq.n	8007eee <HAL_DMA_IRQHandler+0x172>
      hdma->XferErrorCallback(hdma);
 8007e62:	4620      	mov	r0, r4
}
 8007e64:	b003      	add	sp, #12
 8007e66:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 8007e6a:	4718      	bx	r3
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007e6c:	681a      	ldr	r2, [r3, #0]
 8007e6e:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007e70:	bf5e      	ittt	pl
 8007e72:	681a      	ldrpl	r2, [r3, #0]
 8007e74:	f022 0208 	bicpl.w	r2, r2, #8
 8007e78:	601a      	strpl	r2, [r3, #0]
 8007e7a:	e7c2      	b.n	8007e02 <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007e7c:	0350      	lsls	r0, r2, #13
 8007e7e:	d527      	bpl.n	8007ed0 <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	0319      	lsls	r1, r3, #12
 8007e84:	d431      	bmi.n	8007eea <HAL_DMA_IRQHandler+0x16e>
          if(hdma->XferM1CpltCallback != NULL)
 8007e86:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 8007e88:	b10b      	cbz	r3, 8007e8e <HAL_DMA_IRQHandler+0x112>
          hdma->XferCpltCallback(hdma);
 8007e8a:	4620      	mov	r0, r4
 8007e8c:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007e8e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007e90:	b36b      	cbz	r3, 8007eee <HAL_DMA_IRQHandler+0x172>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007e92:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007e94:	07da      	lsls	r2, r3, #31
 8007e96:	d519      	bpl.n	8007ecc <HAL_DMA_IRQHandler+0x150>
      hdma->State = HAL_DMA_STATE_ABORT;
 8007e98:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 8007e9a:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 8007e9c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8007ea0:	6813      	ldr	r3, [r2, #0]
 8007ea2:	f023 0301 	bic.w	r3, r3, #1
 8007ea6:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007ea8:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8007eac:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 8007eb0:	9b01      	ldr	r3, [sp, #4]
 8007eb2:	3301      	adds	r3, #1
 8007eb4:	42bb      	cmp	r3, r7
 8007eb6:	9301      	str	r3, [sp, #4]
 8007eb8:	d802      	bhi.n	8007ec0 <HAL_DMA_IRQHandler+0x144>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007eba:	6813      	ldr	r3, [r2, #0]
 8007ebc:	07db      	lsls	r3, r3, #31
 8007ebe:	d4f7      	bmi.n	8007eb0 <HAL_DMA_IRQHandler+0x134>
      __HAL_UNLOCK(hdma);
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8007ecc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8007ece:	e7c6      	b.n	8007e5e <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007ed0:	681a      	ldr	r2, [r3, #0]
 8007ed2:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8007ed6:	d108      	bne.n	8007eea <HAL_DMA_IRQHandler+0x16e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007ed8:	6819      	ldr	r1, [r3, #0]
 8007eda:	f021 0110 	bic.w	r1, r1, #16
 8007ede:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8007ee0:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8007ee2:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8007ee6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8007eea:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007eec:	e7cc      	b.n	8007e88 <HAL_DMA_IRQHandler+0x10c>
}
 8007eee:	b003      	add	sp, #12
 8007ef0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ef2:	bf00      	nop
 8007ef4:	20000184 	.word	0x20000184

08007ef8 <FLASH_Program_DoubleWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007ef8:	4908      	ldr	r1, [pc, #32]	; (8007f1c <FLASH_Program_DoubleWord+0x24>)
{
 8007efa:	b510      	push	{r4, lr}
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007efc:	690c      	ldr	r4, [r1, #16]
 8007efe:	f424 7440 	bic.w	r4, r4, #768	; 0x300
 8007f02:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8007f04:	690c      	ldr	r4, [r1, #16]
 8007f06:	f444 7440 	orr.w	r4, r4, #768	; 0x300
 8007f0a:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_CR_PG;
 8007f0c:	690c      	ldr	r4, [r1, #16]
 8007f0e:	f044 0401 	orr.w	r4, r4, #1
 8007f12:	610c      	str	r4, [r1, #16]

  /* Program the double-word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8007f14:	6002      	str	r2, [r0, #0]
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8007f16:	6043      	str	r3, [r0, #4]
}
 8007f18:	bd10      	pop	{r4, pc}
 8007f1a:	bf00      	nop
 8007f1c:	40023c00 	.word	0x40023c00

08007f20 <FLASH_Program_Word>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007f20:	4b07      	ldr	r3, [pc, #28]	; (8007f40 <FLASH_Program_Word+0x20>)
 8007f22:	691a      	ldr	r2, [r3, #16]
 8007f24:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8007f28:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8007f2a:	691a      	ldr	r2, [r3, #16]
 8007f2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f30:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8007f32:	691a      	ldr	r2, [r3, #16]
 8007f34:	f042 0201 	orr.w	r2, r2, #1
 8007f38:	611a      	str	r2, [r3, #16]

  *(__IO uint32_t*)Address = Data;
 8007f3a:	6001      	str	r1, [r0, #0]
}
 8007f3c:	4770      	bx	lr
 8007f3e:	bf00      	nop
 8007f40:	40023c00 	.word	0x40023c00

08007f44 <FLASH_Program_HalfWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007f44:	4b07      	ldr	r3, [pc, #28]	; (8007f64 <FLASH_Program_HalfWord+0x20>)
 8007f46:	691a      	ldr	r2, [r3, #16]
 8007f48:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8007f4c:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8007f4e:	691a      	ldr	r2, [r3, #16]
 8007f50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007f54:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8007f56:	691a      	ldr	r2, [r3, #16]
 8007f58:	f042 0201 	orr.w	r2, r2, #1
 8007f5c:	611a      	str	r2, [r3, #16]

  *(__IO uint16_t*)Address = Data;
 8007f5e:	8001      	strh	r1, [r0, #0]
}
 8007f60:	4770      	bx	lr
 8007f62:	bf00      	nop
 8007f64:	40023c00 	.word	0x40023c00

08007f68 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8007f68:	4b20      	ldr	r3, [pc, #128]	; (8007fec <FLASH_SetErrorCode+0x84>)
 8007f6a:	68da      	ldr	r2, [r3, #12]
 8007f6c:	06d0      	lsls	r0, r2, #27
 8007f6e:	d506      	bpl.n	8007f7e <FLASH_SetErrorCode+0x16>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8007f70:	491f      	ldr	r1, [pc, #124]	; (8007ff0 <FLASH_SetErrorCode+0x88>)
 8007f72:	69ca      	ldr	r2, [r1, #28]
 8007f74:	f042 0210 	orr.w	r2, r2, #16
 8007f78:	61ca      	str	r2, [r1, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8007f7a:	2210      	movs	r2, #16
 8007f7c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8007f7e:	68da      	ldr	r2, [r3, #12]
 8007f80:	0691      	lsls	r1, r2, #26
 8007f82:	d506      	bpl.n	8007f92 <FLASH_SetErrorCode+0x2a>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8007f84:	491a      	ldr	r1, [pc, #104]	; (8007ff0 <FLASH_SetErrorCode+0x88>)
 8007f86:	69ca      	ldr	r2, [r1, #28]
 8007f88:	f042 0208 	orr.w	r2, r2, #8
 8007f8c:	61ca      	str	r2, [r1, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8007f8e:	2220      	movs	r2, #32
 8007f90:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8007f92:	4b16      	ldr	r3, [pc, #88]	; (8007fec <FLASH_SetErrorCode+0x84>)
 8007f94:	68da      	ldr	r2, [r3, #12]
 8007f96:	0652      	lsls	r2, r2, #25
 8007f98:	d506      	bpl.n	8007fa8 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8007f9a:	4915      	ldr	r1, [pc, #84]	; (8007ff0 <FLASH_SetErrorCode+0x88>)
 8007f9c:	69ca      	ldr	r2, [r1, #28]
 8007f9e:	f042 0204 	orr.w	r2, r2, #4
 8007fa2:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8007fa4:	2240      	movs	r2, #64	; 0x40
 8007fa6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8007fa8:	68da      	ldr	r2, [r3, #12]
 8007faa:	0610      	lsls	r0, r2, #24
 8007fac:	d506      	bpl.n	8007fbc <FLASH_SetErrorCode+0x54>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8007fae:	4910      	ldr	r1, [pc, #64]	; (8007ff0 <FLASH_SetErrorCode+0x88>)
 8007fb0:	69ca      	ldr	r2, [r1, #28]
 8007fb2:	f042 0202 	orr.w	r2, r2, #2
 8007fb6:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8007fb8:	2280      	movs	r2, #128	; 0x80
 8007fba:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8007fbc:	4b0b      	ldr	r3, [pc, #44]	; (8007fec <FLASH_SetErrorCode+0x84>)
 8007fbe:	68da      	ldr	r2, [r3, #12]
 8007fc0:	05d1      	lsls	r1, r2, #23
 8007fc2:	d507      	bpl.n	8007fd4 <FLASH_SetErrorCode+0x6c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8007fc4:	490a      	ldr	r1, [pc, #40]	; (8007ff0 <FLASH_SetErrorCode+0x88>)
 8007fc6:	69ca      	ldr	r2, [r1, #28]
 8007fc8:	f042 0201 	orr.w	r2, r2, #1
 8007fcc:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8007fce:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007fd2:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8007fd4:	68da      	ldr	r2, [r3, #12]
 8007fd6:	0792      	lsls	r2, r2, #30
 8007fd8:	d506      	bpl.n	8007fe8 <FLASH_SetErrorCode+0x80>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8007fda:	4905      	ldr	r1, [pc, #20]	; (8007ff0 <FLASH_SetErrorCode+0x88>)
 8007fdc:	69ca      	ldr	r2, [r1, #28]
 8007fde:	f042 0220 	orr.w	r2, r2, #32
 8007fe2:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8007fe4:	2202      	movs	r2, #2
 8007fe6:	60da      	str	r2, [r3, #12]
  }
}
 8007fe8:	4770      	bx	lr
 8007fea:	bf00      	nop
 8007fec:	40023c00 	.word	0x40023c00
 8007ff0:	20008580 	.word	0x20008580

08007ff4 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8007ff4:	4b06      	ldr	r3, [pc, #24]	; (8008010 <HAL_FLASH_Unlock+0x1c>)
 8007ff6:	691a      	ldr	r2, [r3, #16]
 8007ff8:	2a00      	cmp	r2, #0
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8007ffa:	bfbf      	itttt	lt
 8007ffc:	4a05      	ldrlt	r2, [pc, #20]	; (8008014 <HAL_FLASH_Unlock+0x20>)
 8007ffe:	605a      	strlt	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8008000:	f102 3288 	addlt.w	r2, r2, #2290649224	; 0x88888888
 8008004:	605a      	strlt	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8008006:	bfba      	itte	lt
 8008008:	6918      	ldrlt	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 800800a:	0fc0      	lsrlt	r0, r0, #31
 800800c:	2000      	movge	r0, #0
}
 800800e:	4770      	bx	lr
 8008010:	40023c00 	.word	0x40023c00
 8008014:	45670123 	.word	0x45670123

08008018 <HAL_FLASH_Lock>:
  FLASH->CR |= FLASH_CR_LOCK;
 8008018:	4a03      	ldr	r2, [pc, #12]	; (8008028 <HAL_FLASH_Lock+0x10>)
 800801a:	6913      	ldr	r3, [r2, #16]
 800801c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008020:	6113      	str	r3, [r2, #16]
}
 8008022:	2000      	movs	r0, #0
 8008024:	4770      	bx	lr
 8008026:	bf00      	nop
 8008028:	40023c00 	.word	0x40023c00

0800802c <FLASH_WaitForLastOperation>:
{ 
 800802c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800802e:	4b12      	ldr	r3, [pc, #72]	; (8008078 <FLASH_WaitForLastOperation+0x4c>)
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8008030:	4c12      	ldr	r4, [pc, #72]	; (800807c <FLASH_WaitForLastOperation+0x50>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8008032:	2200      	movs	r2, #0
{ 
 8008034:	4605      	mov	r5, r0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8008036:	61da      	str	r2, [r3, #28]
  tickstart = HAL_GetTick();
 8008038:	f7ff fca2 	bl	8007980 <HAL_GetTick>
 800803c:	4626      	mov	r6, r4
 800803e:	4607      	mov	r7, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8008040:	68e3      	ldr	r3, [r4, #12]
 8008042:	03da      	lsls	r2, r3, #15
 8008044:	d40c      	bmi.n	8008060 <FLASH_WaitForLastOperation+0x34>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8008046:	68e3      	ldr	r3, [r4, #12]
 8008048:	07db      	lsls	r3, r3, #31
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800804a:	bf44      	itt	mi
 800804c:	2301      	movmi	r3, #1
 800804e:	60e3      	strmi	r3, [r4, #12]
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8008050:	68f0      	ldr	r0, [r6, #12]
 8008052:	f410 70f9 	ands.w	r0, r0, #498	; 0x1f2
 8008056:	d007      	beq.n	8008068 <FLASH_WaitForLastOperation+0x3c>
    FLASH_SetErrorCode();
 8008058:	f7ff ff86 	bl	8007f68 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800805c:	2001      	movs	r0, #1
 800805e:	e003      	b.n	8008068 <FLASH_WaitForLastOperation+0x3c>
    if(Timeout != HAL_MAX_DELAY)
 8008060:	1c69      	adds	r1, r5, #1
 8008062:	d0ed      	beq.n	8008040 <FLASH_WaitForLastOperation+0x14>
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8008064:	b90d      	cbnz	r5, 800806a <FLASH_WaitForLastOperation+0x3e>
        return HAL_TIMEOUT;
 8008066:	2003      	movs	r0, #3
}  
 8008068:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800806a:	f7ff fc89 	bl	8007980 <HAL_GetTick>
 800806e:	1bc0      	subs	r0, r0, r7
 8008070:	42a8      	cmp	r0, r5
 8008072:	d9e5      	bls.n	8008040 <FLASH_WaitForLastOperation+0x14>
 8008074:	e7f7      	b.n	8008066 <FLASH_WaitForLastOperation+0x3a>
 8008076:	bf00      	nop
 8008078:	20008580 	.word	0x20008580
 800807c:	40023c00 	.word	0x40023c00

08008080 <HAL_FLASH_Program>:
{
 8008080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 8008084:	4d1f      	ldr	r5, [pc, #124]	; (8008104 <HAL_FLASH_Program+0x84>)
{
 8008086:	4698      	mov	r8, r3
  __HAL_LOCK(&pFlash);
 8008088:	7e2b      	ldrb	r3, [r5, #24]
 800808a:	2b01      	cmp	r3, #1
{
 800808c:	4607      	mov	r7, r0
 800808e:	460e      	mov	r6, r1
 8008090:	4614      	mov	r4, r2
  __HAL_LOCK(&pFlash);
 8008092:	d035      	beq.n	8008100 <HAL_FLASH_Program+0x80>
 8008094:	2301      	movs	r3, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008096:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 800809a:	762b      	strb	r3, [r5, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800809c:	f7ff ffc6 	bl	800802c <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 80080a0:	b9b0      	cbnz	r0, 80080d0 <HAL_FLASH_Program+0x50>
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80080a2:	b9cf      	cbnz	r7, 80080d8 <HAL_FLASH_Program+0x58>
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80080a4:	4b18      	ldr	r3, [pc, #96]	; (8008108 <HAL_FLASH_Program+0x88>)
 80080a6:	691a      	ldr	r2, [r3, #16]
 80080a8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80080ac:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80080ae:	691a      	ldr	r2, [r3, #16]
 80080b0:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 80080b2:	691a      	ldr	r2, [r3, #16]
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80080b4:	b2e4      	uxtb	r4, r4
  FLASH->CR |= FLASH_CR_PG;
 80080b6:	f042 0201 	orr.w	r2, r2, #1
 80080ba:	611a      	str	r2, [r3, #16]
  *(__IO uint8_t*)Address = Data;
 80080bc:	7034      	strb	r4, [r6, #0]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80080be:	f24c 3050 	movw	r0, #50000	; 0xc350
 80080c2:	f7ff ffb3 	bl	800802c <FLASH_WaitForLastOperation>
    FLASH->CR &= (~FLASH_CR_PG);  
 80080c6:	4a10      	ldr	r2, [pc, #64]	; (8008108 <HAL_FLASH_Program+0x88>)
 80080c8:	6913      	ldr	r3, [r2, #16]
 80080ca:	f023 0301 	bic.w	r3, r3, #1
 80080ce:	6113      	str	r3, [r2, #16]
  __HAL_UNLOCK(&pFlash);
 80080d0:	2300      	movs	r3, #0
 80080d2:	762b      	strb	r3, [r5, #24]
}
 80080d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80080d8:	2f01      	cmp	r7, #1
 80080da:	d104      	bne.n	80080e6 <HAL_FLASH_Program+0x66>
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80080dc:	b2a1      	uxth	r1, r4
 80080de:	4630      	mov	r0, r6
 80080e0:	f7ff ff30 	bl	8007f44 <FLASH_Program_HalfWord>
 80080e4:	e7eb      	b.n	80080be <HAL_FLASH_Program+0x3e>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80080e6:	2f02      	cmp	r7, #2
 80080e8:	d104      	bne.n	80080f4 <HAL_FLASH_Program+0x74>
      FLASH_Program_Word(Address, (uint32_t) Data);
 80080ea:	4621      	mov	r1, r4
 80080ec:	4630      	mov	r0, r6
 80080ee:	f7ff ff17 	bl	8007f20 <FLASH_Program_Word>
 80080f2:	e7e4      	b.n	80080be <HAL_FLASH_Program+0x3e>
      FLASH_Program_DoubleWord(Address, Data);
 80080f4:	4622      	mov	r2, r4
 80080f6:	4643      	mov	r3, r8
 80080f8:	4630      	mov	r0, r6
 80080fa:	f7ff fefd 	bl	8007ef8 <FLASH_Program_DoubleWord>
 80080fe:	e7de      	b.n	80080be <HAL_FLASH_Program+0x3e>
  __HAL_LOCK(&pFlash);
 8008100:	2002      	movs	r0, #2
 8008102:	e7e7      	b.n	80080d4 <HAL_FLASH_Program+0x54>
 8008104:	20008580 	.word	0x20008580
 8008108:	40023c00 	.word	0x40023c00

0800810c <FLASH_MassErase.isra.0>:
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800810c:	4b07      	ldr	r3, [pc, #28]	; (800812c <FLASH_MassErase.isra.0+0x20>)
 800810e:	691a      	ldr	r2, [r3, #16]
 8008110:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8008114:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_MER;
 8008116:	691a      	ldr	r2, [r3, #16]
 8008118:	f042 0204 	orr.w	r2, r2, #4
 800811c:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 800811e:	691a      	ldr	r2, [r3, #16]
 8008120:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008124:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 8008128:	6118      	str	r0, [r3, #16]
}
 800812a:	4770      	bx	lr
 800812c:	40023c00 	.word	0x40023c00

08008130 <FLASH_Erase_Sector>:

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8008130:	b139      	cbz	r1, 8008142 <FLASH_Erase_Sector+0x12>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8008132:	2901      	cmp	r1, #1
 8008134:	d01c      	beq.n	8008170 <FLASH_Erase_Sector+0x40>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8008136:	2902      	cmp	r1, #2
  {
    tmp_psize = FLASH_PSIZE_WORD;
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8008138:	bf0c      	ite	eq
 800813a:	f44f 7100 	moveq.w	r1, #512	; 0x200
 800813e:	f44f 7140 	movne.w	r1, #768	; 0x300
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8008142:	4b0d      	ldr	r3, [pc, #52]	; (8008178 <FLASH_Erase_Sector+0x48>)
 8008144:	691a      	ldr	r2, [r3, #16]
 8008146:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800814a:	611a      	str	r2, [r3, #16]
  FLASH->CR |= tmp_psize;
 800814c:	691a      	ldr	r2, [r3, #16]
 800814e:	4311      	orrs	r1, r2
 8008150:	6119      	str	r1, [r3, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8008152:	691a      	ldr	r2, [r3, #16]
 8008154:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8008158:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800815a:	691a      	ldr	r2, [r3, #16]
 800815c:	f042 0202 	orr.w	r2, r2, #2
 8008160:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
 8008164:	6118      	str	r0, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8008166:	691a      	ldr	r2, [r3, #16]
 8008168:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800816c:	611a      	str	r2, [r3, #16]
}
 800816e:	4770      	bx	lr
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8008170:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008174:	e7e5      	b.n	8008142 <FLASH_Erase_Sector+0x12>
 8008176:	bf00      	nop
 8008178:	40023c00 	.word	0x40023c00

0800817c <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 800817c:	4b14      	ldr	r3, [pc, #80]	; (80081d0 <FLASH_FlushCaches+0x54>)
 800817e:	681a      	ldr	r2, [r3, #0]
 8008180:	0591      	lsls	r1, r2, #22
 8008182:	d50f      	bpl.n	80081a4 <FLASH_FlushCaches+0x28>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8008184:	681a      	ldr	r2, [r3, #0]
 8008186:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800818a:	601a      	str	r2, [r3, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800818c:	681a      	ldr	r2, [r3, #0]
 800818e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008192:	601a      	str	r2, [r3, #0]
 8008194:	681a      	ldr	r2, [r3, #0]
 8008196:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800819a:	601a      	str	r2, [r3, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800819c:	681a      	ldr	r2, [r3, #0]
 800819e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80081a2:	601a      	str	r2, [r3, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80081a4:	4b0a      	ldr	r3, [pc, #40]	; (80081d0 <FLASH_FlushCaches+0x54>)
 80081a6:	681a      	ldr	r2, [r3, #0]
 80081a8:	0552      	lsls	r2, r2, #21
 80081aa:	d50f      	bpl.n	80081cc <FLASH_FlushCaches+0x50>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80081ac:	681a      	ldr	r2, [r3, #0]
 80081ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80081b2:	601a      	str	r2, [r3, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80081b4:	681a      	ldr	r2, [r3, #0]
 80081b6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80081ba:	601a      	str	r2, [r3, #0]
 80081bc:	681a      	ldr	r2, [r3, #0]
 80081be:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80081c2:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80081c4:	681a      	ldr	r2, [r3, #0]
 80081c6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80081ca:	601a      	str	r2, [r3, #0]
  }
}
 80081cc:	4770      	bx	lr
 80081ce:	bf00      	nop
 80081d0:	40023c00 	.word	0x40023c00

080081d4 <HAL_FLASHEx_Erase>:
{
 80081d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(&pFlash);
 80081d8:	4e23      	ldr	r6, [pc, #140]	; (8008268 <HAL_FLASHEx_Erase+0x94>)
 80081da:	7e33      	ldrb	r3, [r6, #24]
 80081dc:	2b01      	cmp	r3, #1
{
 80081de:	4604      	mov	r4, r0
 80081e0:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 80081e2:	d03f      	beq.n	8008264 <HAL_FLASHEx_Erase+0x90>
 80081e4:	2301      	movs	r3, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80081e6:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 80081ea:	7633      	strb	r3, [r6, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80081ec:	f7ff ff1e 	bl	800802c <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 80081f0:	4605      	mov	r5, r0
 80081f2:	b9a8      	cbnz	r0, 8008220 <HAL_FLASHEx_Erase+0x4c>
    *SectorError = 0xFFFFFFFFU;
 80081f4:	f04f 33ff 	mov.w	r3, #4294967295
 80081f8:	f8c8 3000 	str.w	r3, [r8]
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80081fc:	6823      	ldr	r3, [r4, #0]
 80081fe:	2b01      	cmp	r3, #1
 8008200:	d113      	bne.n	800822a <HAL_FLASHEx_Erase+0x56>
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8008202:	7c20      	ldrb	r0, [r4, #16]
 8008204:	f7ff ff82 	bl	800810c <FLASH_MassErase.isra.0>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008208:	f24c 3050 	movw	r0, #50000	; 0xc350
 800820c:	f7ff ff0e 	bl	800802c <FLASH_WaitForLastOperation>
      FLASH->CR &= (~FLASH_MER_BIT);
 8008210:	4a16      	ldr	r2, [pc, #88]	; (800826c <HAL_FLASHEx_Erase+0x98>)
 8008212:	6913      	ldr	r3, [r2, #16]
 8008214:	f023 0304 	bic.w	r3, r3, #4
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008218:	4605      	mov	r5, r0
      FLASH->CR &= (~FLASH_MER_BIT);
 800821a:	6113      	str	r3, [r2, #16]
    FLASH_FlushCaches();    
 800821c:	f7ff ffae 	bl	800817c <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 8008220:	2300      	movs	r3, #0
 8008222:	7633      	strb	r3, [r6, #24]
}
 8008224:	4628      	mov	r0, r5
 8008226:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800822a:	68a7      	ldr	r7, [r4, #8]
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800822c:	f8df 903c 	ldr.w	r9, [pc, #60]	; 800826c <HAL_FLASHEx_Erase+0x98>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8008230:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8008234:	4413      	add	r3, r2
 8008236:	42bb      	cmp	r3, r7
 8008238:	d9f0      	bls.n	800821c <HAL_FLASHEx_Erase+0x48>
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800823a:	7c21      	ldrb	r1, [r4, #16]
 800823c:	4638      	mov	r0, r7
 800823e:	f7ff ff77 	bl	8008130 <FLASH_Erase_Sector>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008242:	f24c 3050 	movw	r0, #50000	; 0xc350
 8008246:	f7ff fef1 	bl	800802c <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800824a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800824e:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8008252:	f8c9 3010 	str.w	r3, [r9, #16]
        if(status != HAL_OK) 
 8008256:	b118      	cbz	r0, 8008260 <HAL_FLASHEx_Erase+0x8c>
          *SectorError = index;
 8008258:	f8c8 7000 	str.w	r7, [r8]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800825c:	4605      	mov	r5, r0
          break;
 800825e:	e7dd      	b.n	800821c <HAL_FLASHEx_Erase+0x48>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8008260:	3701      	adds	r7, #1
 8008262:	e7e5      	b.n	8008230 <HAL_FLASHEx_Erase+0x5c>
  __HAL_LOCK(&pFlash);
 8008264:	2502      	movs	r5, #2
 8008266:	e7dd      	b.n	8008224 <HAL_FLASHEx_Erase+0x50>
 8008268:	20008580 	.word	0x20008580
 800826c:	40023c00 	.word	0x40023c00

08008270 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008274:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008276:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008278:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800841c <HAL_GPIO_Init+0x1ac>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800827c:	4a65      	ldr	r2, [pc, #404]	; (8008414 <HAL_GPIO_Init+0x1a4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800827e:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 8008420 <HAL_GPIO_Init+0x1b0>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008282:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008284:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8008286:	f04f 0c01 	mov.w	ip, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800828a:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 800828c:	fa0c fc03 	lsl.w	ip, ip, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008290:	ea04 060c 	and.w	r6, r4, ip
    if(iocurrent == ioposition)
 8008294:	45b4      	cmp	ip, r6
 8008296:	f040 80aa 	bne.w	80083ee <HAL_GPIO_Init+0x17e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800829a:	684c      	ldr	r4, [r1, #4]
 800829c:	f024 0710 	bic.w	r7, r4, #16
 80082a0:	2f02      	cmp	r7, #2
 80082a2:	d116      	bne.n	80082d2 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 80082a4:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80082a8:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80082ac:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80082b0:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80082b4:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80082b8:	f04f 0e0f 	mov.w	lr, #15
 80082bc:	fa0e fe0b 	lsl.w	lr, lr, fp
 80082c0:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80082c4:	690d      	ldr	r5, [r1, #16]
 80082c6:	fa05 f50b 	lsl.w	r5, r5, fp
 80082ca:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3U] = temp;
 80082ce:	f8ca 5020 	str.w	r5, [sl, #32]
 80082d2:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80082d6:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80082d8:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80082dc:	fa05 f50a 	lsl.w	r5, r5, sl
 80082e0:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80082e2:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80082e6:	ea05 0b0b 	and.w	fp, r5, fp
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80082ea:	fa0e fe0a 	lsl.w	lr, lr, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80082ee:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80082f0:	ea4e 0e0b 	orr.w	lr, lr, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80082f4:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 80082f6:	f8c0 e000 	str.w	lr, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80082fa:	d811      	bhi.n	8008320 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 80082fc:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80082fe:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008302:	68cf      	ldr	r7, [r1, #12]
 8008304:	fa07 fe0a 	lsl.w	lr, r7, sl
 8008308:	ea4e 070b 	orr.w	r7, lr, fp
        GPIOx->OSPEEDR = temp;
 800830c:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800830e:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008310:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8008314:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8008318:	409f      	lsls	r7, r3
 800831a:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->OTYPER = temp;
 800831e:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8008320:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008322:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008324:	688f      	ldr	r7, [r1, #8]
 8008326:	fa07 f70a 	lsl.w	r7, r7, sl
 800832a:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 800832c:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800832e:	00e5      	lsls	r5, r4, #3
 8008330:	d55d      	bpl.n	80083ee <HAL_GPIO_Init+0x17e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008332:	f04f 0b00 	mov.w	fp, #0
 8008336:	f8cd b00c 	str.w	fp, [sp, #12]
 800833a:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800833e:	4d36      	ldr	r5, [pc, #216]	; (8008418 <HAL_GPIO_Init+0x1a8>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008340:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8008344:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8008348:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 800834c:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8008350:	9703      	str	r7, [sp, #12]
 8008352:	9f03      	ldr	r7, [sp, #12]
 8008354:	f023 0703 	bic.w	r7, r3, #3
 8008358:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 800835c:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008360:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8008364:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008368:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800836c:	f04f 0c0f 	mov.w	ip, #15
 8008370:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008374:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008376:	ea2a 0c0c 	bic.w	ip, sl, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800837a:	d03f      	beq.n	80083fc <HAL_GPIO_Init+0x18c>
 800837c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008380:	42a8      	cmp	r0, r5
 8008382:	d03d      	beq.n	8008400 <HAL_GPIO_Init+0x190>
 8008384:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008388:	42a8      	cmp	r0, r5
 800838a:	d03b      	beq.n	8008404 <HAL_GPIO_Init+0x194>
 800838c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008390:	42a8      	cmp	r0, r5
 8008392:	d039      	beq.n	8008408 <HAL_GPIO_Init+0x198>
 8008394:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008398:	42a8      	cmp	r0, r5
 800839a:	d037      	beq.n	800840c <HAL_GPIO_Init+0x19c>
 800839c:	4548      	cmp	r0, r9
 800839e:	d037      	beq.n	8008410 <HAL_GPIO_Init+0x1a0>
 80083a0:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80083a4:	42a8      	cmp	r0, r5
 80083a6:	bf14      	ite	ne
 80083a8:	2507      	movne	r5, #7
 80083aa:	2506      	moveq	r5, #6
 80083ac:	fa05 f50e 	lsl.w	r5, r5, lr
 80083b0:	ea45 050c 	orr.w	r5, r5, ip
        SYSCFG->EXTICR[position >> 2U] = temp;
 80083b4:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 80083b6:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80083b8:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80083ba:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80083be:	bf0c      	ite	eq
 80083c0:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80083c2:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 80083c4:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 80083c6:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80083c8:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80083cc:	bf0c      	ite	eq
 80083ce:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80083d0:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 80083d2:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80083d4:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80083d6:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80083da:	bf0c      	ite	eq
 80083dc:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80083de:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 80083e0:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 80083e2:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80083e4:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80083e6:	bf54      	ite	pl
 80083e8:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 80083ea:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 80083ec:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80083ee:	3301      	adds	r3, #1
 80083f0:	2b10      	cmp	r3, #16
 80083f2:	f47f af48 	bne.w	8008286 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80083f6:	b005      	add	sp, #20
 80083f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80083fc:	465d      	mov	r5, fp
 80083fe:	e7d5      	b.n	80083ac <HAL_GPIO_Init+0x13c>
 8008400:	2501      	movs	r5, #1
 8008402:	e7d3      	b.n	80083ac <HAL_GPIO_Init+0x13c>
 8008404:	2502      	movs	r5, #2
 8008406:	e7d1      	b.n	80083ac <HAL_GPIO_Init+0x13c>
 8008408:	2503      	movs	r5, #3
 800840a:	e7cf      	b.n	80083ac <HAL_GPIO_Init+0x13c>
 800840c:	2504      	movs	r5, #4
 800840e:	e7cd      	b.n	80083ac <HAL_GPIO_Init+0x13c>
 8008410:	2505      	movs	r5, #5
 8008412:	e7cb      	b.n	80083ac <HAL_GPIO_Init+0x13c>
 8008414:	40013c00 	.word	0x40013c00
 8008418:	40020000 	.word	0x40020000
 800841c:	40023800 	.word	0x40023800
 8008420:	40021400 	.word	0x40021400

08008424 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8008424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8008428:	4e43      	ldr	r6, [pc, #268]	; (8008538 <HAL_GPIO_DeInit+0x114>)
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800842a:	f8df 9114 	ldr.w	r9, [pc, #276]	; 8008540 <HAL_GPIO_DeInit+0x11c>
 800842e:	f8df a114 	ldr.w	sl, [pc, #276]	; 8008544 <HAL_GPIO_DeInit+0x120>
 8008432:	f8df b114 	ldr.w	fp, [pc, #276]	; 8008548 <HAL_GPIO_DeInit+0x124>
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008436:	2400      	movs	r4, #0
    ioposition = 0x01U << position;
 8008438:	f04f 0801 	mov.w	r8, #1
 800843c:	fa08 f204 	lsl.w	r2, r8, r4
    if(iocurrent == ioposition)
 8008440:	ea32 0301 	bics.w	r3, r2, r1
 8008444:	d166      	bne.n	8008514 <HAL_GPIO_DeInit+0xf0>
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008446:	2303      	movs	r3, #3
 8008448:	0065      	lsls	r5, r4, #1
 800844a:	6807      	ldr	r7, [r0, #0]
 800844c:	fa03 f505 	lsl.w	r5, r3, r5
 8008450:	43ed      	mvns	r5, r5
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008452:	fa24 fe03 	lsr.w	lr, r4, r3
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008456:	402f      	ands	r7, r5
 8008458:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 800845c:	6007      	str	r7, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800845e:	f8de 7020 	ldr.w	r7, [lr, #32]
 8008462:	f004 0c07 	and.w	ip, r4, #7
 8008466:	463b      	mov	r3, r7
 8008468:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800846c:	270f      	movs	r7, #15
 800846e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8008472:	ea23 0c0c 	bic.w	ip, r3, ip
 8008476:	f8ce c020 	str.w	ip, [lr, #32]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800847a:	f8d0 c008 	ldr.w	ip, [r0, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800847e:	4b2f      	ldr	r3, [pc, #188]	; (800853c <HAL_GPIO_DeInit+0x118>)
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008480:	ea05 0c0c 	and.w	ip, r5, ip
 8008484:	f8c0 c008 	str.w	ip, [r0, #8]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008488:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800848c:	43d2      	mvns	r2, r2
 800848e:	ea02 0c0c 	and.w	ip, r2, ip
 8008492:	f8c0 c004 	str.w	ip, [r0, #4]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008496:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 800849a:	ea05 050c 	and.w	r5, r5, ip
 800849e:	60c5      	str	r5, [r0, #12]
 80084a0:	f024 0503 	bic.w	r5, r4, #3
 80084a4:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 80084a8:	f505 359c 	add.w	r5, r5, #79872	; 0x13800
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80084ac:	f004 0c03 	and.w	ip, r4, #3
      tmp = SYSCFG->EXTICR[position >> 2U];
 80084b0:	f8d5 e008 	ldr.w	lr, [r5, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80084b4:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80084b8:	fa07 f70c 	lsl.w	r7, r7, ip
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80084bc:	4298      	cmp	r0, r3
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80084be:	ea07 0e0e 	and.w	lr, r7, lr
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80084c2:	d02c      	beq.n	800851e <HAL_GPIO_DeInit+0xfa>
 80084c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80084c8:	4298      	cmp	r0, r3
 80084ca:	d02a      	beq.n	8008522 <HAL_GPIO_DeInit+0xfe>
 80084cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80084d0:	4298      	cmp	r0, r3
 80084d2:	d028      	beq.n	8008526 <HAL_GPIO_DeInit+0x102>
 80084d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80084d8:	4298      	cmp	r0, r3
 80084da:	d026      	beq.n	800852a <HAL_GPIO_DeInit+0x106>
 80084dc:	4548      	cmp	r0, r9
 80084de:	d026      	beq.n	800852e <HAL_GPIO_DeInit+0x10a>
 80084e0:	4550      	cmp	r0, sl
 80084e2:	d026      	beq.n	8008532 <HAL_GPIO_DeInit+0x10e>
 80084e4:	4558      	cmp	r0, fp
 80084e6:	bf0c      	ite	eq
 80084e8:	2306      	moveq	r3, #6
 80084ea:	2307      	movne	r3, #7
 80084ec:	fa03 f30c 	lsl.w	r3, r3, ip
 80084f0:	4573      	cmp	r3, lr
 80084f2:	d10f      	bne.n	8008514 <HAL_GPIO_DeInit+0xf0>
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80084f4:	68ab      	ldr	r3, [r5, #8]
 80084f6:	ea23 0707 	bic.w	r7, r3, r7
 80084fa:	60af      	str	r7, [r5, #8]
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80084fc:	6833      	ldr	r3, [r6, #0]
 80084fe:	4013      	ands	r3, r2
 8008500:	6033      	str	r3, [r6, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8008502:	6873      	ldr	r3, [r6, #4]
 8008504:	4013      	ands	r3, r2
 8008506:	6073      	str	r3, [r6, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8008508:	68b3      	ldr	r3, [r6, #8]
 800850a:	4013      	ands	r3, r2
 800850c:	60b3      	str	r3, [r6, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800850e:	68f3      	ldr	r3, [r6, #12]
 8008510:	401a      	ands	r2, r3
 8008512:	60f2      	str	r2, [r6, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008514:	3401      	adds	r4, #1
 8008516:	2c10      	cmp	r4, #16
 8008518:	d190      	bne.n	800843c <HAL_GPIO_DeInit+0x18>
      }
    }
  }
}
 800851a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800851e:	2300      	movs	r3, #0
 8008520:	e7e4      	b.n	80084ec <HAL_GPIO_DeInit+0xc8>
 8008522:	2301      	movs	r3, #1
 8008524:	e7e2      	b.n	80084ec <HAL_GPIO_DeInit+0xc8>
 8008526:	2302      	movs	r3, #2
 8008528:	e7e0      	b.n	80084ec <HAL_GPIO_DeInit+0xc8>
 800852a:	2303      	movs	r3, #3
 800852c:	e7de      	b.n	80084ec <HAL_GPIO_DeInit+0xc8>
 800852e:	2304      	movs	r3, #4
 8008530:	e7dc      	b.n	80084ec <HAL_GPIO_DeInit+0xc8>
 8008532:	2305      	movs	r3, #5
 8008534:	e7da      	b.n	80084ec <HAL_GPIO_DeInit+0xc8>
 8008536:	bf00      	nop
 8008538:	40013c00 	.word	0x40013c00
 800853c:	40020000 	.word	0x40020000
 8008540:	40021000 	.word	0x40021000
 8008544:	40021400 	.word	0x40021400
 8008548:	40021800 	.word	0x40021800

0800854c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800854c:	6903      	ldr	r3, [r0, #16]
 800854e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8008550:	bf14      	ite	ne
 8008552:	2001      	movne	r0, #1
 8008554:	2000      	moveq	r0, #0
 8008556:	4770      	bx	lr

08008558 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008558:	b10a      	cbz	r2, 800855e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800855a:	6181      	str	r1, [r0, #24]
  }
}
 800855c:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800855e:	0409      	lsls	r1, r1, #16
 8008560:	e7fb      	b.n	800855a <HAL_GPIO_WritePin+0x2>
	...

08008564 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008564:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8008566:	4b04      	ldr	r3, [pc, #16]	; (8008578 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8008568:	6959      	ldr	r1, [r3, #20]
 800856a:	4201      	tst	r1, r0
 800856c:	d002      	beq.n	8008574 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800856e:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008570:	f005 fe8c 	bl	800e28c <HAL_GPIO_EXTI_Callback>
  }
}
 8008574:	bd08      	pop	{r3, pc}
 8008576:	bf00      	nop
 8008578:	40013c00 	.word	0x40013c00

0800857c <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800857c:	6802      	ldr	r2, [r0, #0]
 800857e:	6953      	ldr	r3, [r2, #20]
 8008580:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8008584:	d00d      	beq.n	80085a2 <I2C_IsAcknowledgeFailed+0x26>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008586:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 800858a:	6153      	str	r3, [r2, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800858c:	2304      	movs	r3, #4
 800858e:	6403      	str	r3, [r0, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State= HAL_I2C_STATE_READY;
 8008590:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 8008592:	2300      	movs	r3, #0
 8008594:	6303      	str	r3, [r0, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008596:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    hi2c->State= HAL_I2C_STATE_READY;
 800859a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

    return HAL_ERROR;
 800859e:	2001      	movs	r0, #1
 80085a0:	4770      	bx	lr
  }
  return HAL_OK;
 80085a2:	4618      	mov	r0, r3
}
 80085a4:	4770      	bx	lr

080085a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 80085a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085aa:	4604      	mov	r4, r0
 80085ac:	4616      	mov	r6, r2
 80085ae:	4698      	mov	r8, r3
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80085b0:	b28f      	uxth	r7, r1
 80085b2:	6825      	ldr	r5, [r4, #0]
 80085b4:	6968      	ldr	r0, [r5, #20]
 80085b6:	ea37 0000 	bics.w	r0, r7, r0
 80085ba:	d013      	beq.n	80085e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3e>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80085bc:	696b      	ldr	r3, [r5, #20]
 80085be:	055a      	lsls	r2, r3, #21
 80085c0:	d512      	bpl.n	80085e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x42>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80085c2:	682b      	ldr	r3, [r5, #0]
 80085c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80085c8:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80085ca:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80085ce:	616b      	str	r3, [r5, #20]
      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80085d0:	2304      	movs	r3, #4
 80085d2:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 80085d4:	2220      	movs	r2, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 80085d6:	2300      	movs	r3, #0
 80085d8:	6323      	str	r3, [r4, #48]	; 0x30
      __HAL_UNLOCK(hi2c);
 80085da:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->State= HAL_I2C_STATE_READY;
 80085de:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 80085e2:	2001      	movs	r0, #1
}
 80085e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 80085e8:	1c73      	adds	r3, r6, #1
 80085ea:	d0e3      	beq.n	80085b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80085ec:	b946      	cbnz	r6, 8008600 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5a>
        hi2c->PreviousState = I2C_STATE_NONE;
 80085ee:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 80085f0:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 80085f2:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 80085f4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 80085f8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        return HAL_TIMEOUT;
 80085fc:	2003      	movs	r0, #3
 80085fe:	e7f1      	b.n	80085e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3e>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8008600:	f7ff f9be 	bl	8007980 <HAL_GetTick>
 8008604:	eba0 0008 	sub.w	r0, r0, r8
 8008608:	42b0      	cmp	r0, r6
 800860a:	d9d2      	bls.n	80085b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
 800860c:	e7ef      	b.n	80085ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x48>

0800860e <I2C_WaitOnFlagUntilTimeout>:
{
 800860e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008612:	9e08      	ldr	r6, [sp, #32]
 8008614:	4605      	mov	r5, r0
 8008616:	4690      	mov	r8, r2
 8008618:	461f      	mov	r7, r3
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 800861a:	ea4f 4911 	mov.w	r9, r1, lsr #16
 800861e:	b28c      	uxth	r4, r1
 8008620:	6829      	ldr	r1, [r5, #0]
 8008622:	f1b9 0f01 	cmp.w	r9, #1
 8008626:	bf0c      	ite	eq
 8008628:	694b      	ldreq	r3, [r1, #20]
 800862a:	698b      	ldrne	r3, [r1, #24]
 800862c:	ea34 0303 	bics.w	r3, r4, r3
 8008630:	bf0c      	ite	eq
 8008632:	2301      	moveq	r3, #1
 8008634:	2300      	movne	r3, #0
 8008636:	4598      	cmp	r8, r3
 8008638:	d001      	beq.n	800863e <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 800863a:	2000      	movs	r0, #0
 800863c:	e00c      	b.n	8008658 <I2C_WaitOnFlagUntilTimeout+0x4a>
    if(Timeout != HAL_MAX_DELAY)
 800863e:	1c7b      	adds	r3, r7, #1
 8008640:	d0ef      	beq.n	8008622 <I2C_WaitOnFlagUntilTimeout+0x14>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8008642:	b95f      	cbnz	r7, 800865c <I2C_WaitOnFlagUntilTimeout+0x4e>
        hi2c->PreviousState = I2C_STATE_NONE;
 8008644:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8008646:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8008648:	632b      	str	r3, [r5, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 800864a:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 800864e:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8008652:	2003      	movs	r0, #3
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008654:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
}
 8008658:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800865c:	f7ff f990 	bl	8007980 <HAL_GetTick>
 8008660:	1b80      	subs	r0, r0, r6
 8008662:	42b8      	cmp	r0, r7
 8008664:	d9dc      	bls.n	8008620 <I2C_WaitOnFlagUntilTimeout+0x12>
 8008666:	e7ed      	b.n	8008644 <I2C_WaitOnFlagUntilTimeout+0x36>

08008668 <I2C_WaitOnTXEFlagUntilTimeout>:
{    
 8008668:	b570      	push	{r4, r5, r6, lr}
 800866a:	4604      	mov	r4, r0
 800866c:	460d      	mov	r5, r1
 800866e:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008670:	6823      	ldr	r3, [r4, #0]
 8008672:	695b      	ldr	r3, [r3, #20]
 8008674:	061b      	lsls	r3, r3, #24
 8008676:	d501      	bpl.n	800867c <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;      
 8008678:	2000      	movs	r0, #0
 800867a:	e012      	b.n	80086a2 <I2C_WaitOnTXEFlagUntilTimeout+0x3a>
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800867c:	4620      	mov	r0, r4
 800867e:	f7ff ff7d 	bl	800857c <I2C_IsAcknowledgeFailed>
 8008682:	b9a8      	cbnz	r0, 80086b0 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 8008684:	1c6a      	adds	r2, r5, #1
 8008686:	d0f3      	beq.n	8008670 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8008688:	b965      	cbnz	r5, 80086a4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800868a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800868c:	f043 0320 	orr.w	r3, r3, #32
 8008690:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 8008692:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8008694:	2300      	movs	r3, #0
 8008696:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8008698:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 800869c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 80086a0:	2003      	movs	r0, #3
}
 80086a2:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80086a4:	f7ff f96c 	bl	8007980 <HAL_GetTick>
 80086a8:	1b80      	subs	r0, r0, r6
 80086aa:	42a8      	cmp	r0, r5
 80086ac:	d9e0      	bls.n	8008670 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
 80086ae:	e7ec      	b.n	800868a <I2C_WaitOnTXEFlagUntilTimeout+0x22>
      return HAL_ERROR;
 80086b0:	2001      	movs	r0, #1
 80086b2:	e7f6      	b.n	80086a2 <I2C_WaitOnTXEFlagUntilTimeout+0x3a>

080086b4 <I2C_RequestMemoryWrite>:
{
 80086b4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80086b8:	4615      	mov	r5, r2
  hi2c->Instance->CR1 |= I2C_CR1_START;
 80086ba:	6802      	ldr	r2, [r0, #0]
{
 80086bc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80086be:	4698      	mov	r8, r3
  hi2c->Instance->CR1 |= I2C_CR1_START;
 80086c0:	6813      	ldr	r3, [r2, #0]
 80086c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80086c6:	6013      	str	r3, [r2, #0]
{
 80086c8:	460f      	mov	r7, r1
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80086ca:	9600      	str	r6, [sp, #0]
 80086cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086ce:	2200      	movs	r2, #0
 80086d0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 80086d4:	4604      	mov	r4, r0
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80086d6:	f7ff ff9a 	bl	800860e <I2C_WaitOnFlagUntilTimeout>
 80086da:	b968      	cbnz	r0, 80086f8 <I2C_RequestMemoryWrite+0x44>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80086dc:	6823      	ldr	r3, [r4, #0]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80086de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80086e0:	491c      	ldr	r1, [pc, #112]	; (8008754 <I2C_RequestMemoryWrite+0xa0>)
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80086e2:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 80086e6:	611f      	str	r7, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80086e8:	4620      	mov	r0, r4
 80086ea:	4633      	mov	r3, r6
 80086ec:	f7ff ff5b 	bl	80085a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80086f0:	b130      	cbz	r0, 8008700 <I2C_RequestMemoryWrite+0x4c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80086f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80086f4:	2b04      	cmp	r3, #4
 80086f6:	d018      	beq.n	800872a <I2C_RequestMemoryWrite+0x76>
      return HAL_TIMEOUT;
 80086f8:	2003      	movs	r0, #3
}
 80086fa:	b004      	add	sp, #16
 80086fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008700:	6823      	ldr	r3, [r4, #0]
 8008702:	9003      	str	r0, [sp, #12]
 8008704:	695a      	ldr	r2, [r3, #20]
 8008706:	9203      	str	r2, [sp, #12]
 8008708:	699b      	ldr	r3, [r3, #24]
 800870a:	9303      	str	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800870c:	4632      	mov	r2, r6
 800870e:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008710:	9b03      	ldr	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008712:	4620      	mov	r0, r4
 8008714:	f7ff ffa8 	bl	8008668 <I2C_WaitOnTXEFlagUntilTimeout>
 8008718:	b148      	cbz	r0, 800872e <I2C_RequestMemoryWrite+0x7a>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800871a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800871c:	2b04      	cmp	r3, #4
 800871e:	d1eb      	bne.n	80086f8 <I2C_RequestMemoryWrite+0x44>
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8008720:	6822      	ldr	r2, [r4, #0]
 8008722:	6813      	ldr	r3, [r2, #0]
 8008724:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008728:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 800872a:	2001      	movs	r0, #1
 800872c:	e7e5      	b.n	80086fa <I2C_RequestMemoryWrite+0x46>
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800872e:	f1b8 0f01 	cmp.w	r8, #1
 8008732:	6823      	ldr	r3, [r4, #0]
 8008734:	d102      	bne.n	800873c <I2C_RequestMemoryWrite+0x88>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008736:	b2ed      	uxtb	r5, r5
 8008738:	611d      	str	r5, [r3, #16]
 800873a:	e7de      	b.n	80086fa <I2C_RequestMemoryWrite+0x46>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800873c:	0a2a      	lsrs	r2, r5, #8
 800873e:	611a      	str	r2, [r3, #16]
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008740:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008742:	4632      	mov	r2, r6
 8008744:	4620      	mov	r0, r4
 8008746:	f7ff ff8f 	bl	8008668 <I2C_WaitOnTXEFlagUntilTimeout>
 800874a:	2800      	cmp	r0, #0
 800874c:	d1e5      	bne.n	800871a <I2C_RequestMemoryWrite+0x66>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800874e:	6823      	ldr	r3, [r4, #0]
 8008750:	e7f1      	b.n	8008736 <I2C_RequestMemoryWrite+0x82>
 8008752:	bf00      	nop
 8008754:	00010002 	.word	0x00010002

08008758 <I2C_RequestMemoryRead>:
{
 8008758:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800875c:	4698      	mov	r8, r3
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 800875e:	6803      	ldr	r3, [r0, #0]
{
 8008760:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8008762:	4616      	mov	r6, r2
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8008764:	681a      	ldr	r2, [r3, #0]
 8008766:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800876a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_START;
 800876c:	681a      	ldr	r2, [r3, #0]
 800876e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008772:	601a      	str	r2, [r3, #0]
{
 8008774:	460f      	mov	r7, r1
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008776:	9500      	str	r5, [sp, #0]
 8008778:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800877a:	2200      	movs	r2, #0
 800877c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 8008780:	4604      	mov	r4, r0
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008782:	f7ff ff44 	bl	800860e <I2C_WaitOnFlagUntilTimeout>
 8008786:	b980      	cbnz	r0, 80087aa <I2C_RequestMemoryRead+0x52>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008788:	6823      	ldr	r3, [r4, #0]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800878a:	492f      	ldr	r1, [pc, #188]	; (8008848 <I2C_RequestMemoryRead+0xf0>)
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800878c:	b2ff      	uxtb	r7, r7
 800878e:	f007 02fe 	and.w	r2, r7, #254	; 0xfe
 8008792:	611a      	str	r2, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008794:	4620      	mov	r0, r4
 8008796:	462b      	mov	r3, r5
 8008798:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800879a:	f7ff ff04 	bl	80085a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800879e:	b140      	cbz	r0, 80087b2 <I2C_RequestMemoryRead+0x5a>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80087a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80087a2:	2b04      	cmp	r3, #4
 80087a4:	d101      	bne.n	80087aa <I2C_RequestMemoryRead+0x52>
      return HAL_ERROR;
 80087a6:	2001      	movs	r0, #1
 80087a8:	e000      	b.n	80087ac <I2C_RequestMemoryRead+0x54>
      return HAL_TIMEOUT;
 80087aa:	2003      	movs	r0, #3
}
 80087ac:	b004      	add	sp, #16
 80087ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80087b2:	6823      	ldr	r3, [r4, #0]
 80087b4:	9003      	str	r0, [sp, #12]
 80087b6:	695a      	ldr	r2, [r3, #20]
 80087b8:	9203      	str	r2, [sp, #12]
 80087ba:	699b      	ldr	r3, [r3, #24]
 80087bc:	9303      	str	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80087be:	462a      	mov	r2, r5
 80087c0:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80087c2:	9b03      	ldr	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80087c4:	4620      	mov	r0, r4
 80087c6:	f7ff ff4f 	bl	8008668 <I2C_WaitOnTXEFlagUntilTimeout>
 80087ca:	b140      	cbz	r0, 80087de <I2C_RequestMemoryRead+0x86>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80087cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80087ce:	2b04      	cmp	r3, #4
 80087d0:	d1eb      	bne.n	80087aa <I2C_RequestMemoryRead+0x52>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80087d2:	6822      	ldr	r2, [r4, #0]
 80087d4:	6813      	ldr	r3, [r2, #0]
 80087d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80087da:	6013      	str	r3, [r2, #0]
 80087dc:	e7e3      	b.n	80087a6 <I2C_RequestMemoryRead+0x4e>
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80087de:	f1b8 0f01 	cmp.w	r8, #1
 80087e2:	6823      	ldr	r3, [r4, #0]
 80087e4:	d124      	bne.n	8008830 <I2C_RequestMemoryRead+0xd8>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80087e6:	b2f6      	uxtb	r6, r6
 80087e8:	611e      	str	r6, [r3, #16]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80087ea:	462a      	mov	r2, r5
 80087ec:	990a      	ldr	r1, [sp, #40]	; 0x28
 80087ee:	4620      	mov	r0, r4
 80087f0:	f7ff ff3a 	bl	8008668 <I2C_WaitOnTXEFlagUntilTimeout>
 80087f4:	4602      	mov	r2, r0
 80087f6:	2800      	cmp	r0, #0
 80087f8:	d1e8      	bne.n	80087cc <I2C_RequestMemoryRead+0x74>
  hi2c->Instance->CR1 |= I2C_CR1_START;
 80087fa:	6821      	ldr	r1, [r4, #0]
 80087fc:	680b      	ldr	r3, [r1, #0]
 80087fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008802:	600b      	str	r3, [r1, #0]
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008804:	4620      	mov	r0, r4
 8008806:	9500      	str	r5, [sp, #0]
 8008808:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800880a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800880e:	f7ff fefe 	bl	800860e <I2C_WaitOnFlagUntilTimeout>
 8008812:	2800      	cmp	r0, #0
 8008814:	d1c9      	bne.n	80087aa <I2C_RequestMemoryRead+0x52>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008816:	6823      	ldr	r3, [r4, #0]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008818:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800881a:	490b      	ldr	r1, [pc, #44]	; (8008848 <I2C_RequestMemoryRead+0xf0>)
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800881c:	f047 0701 	orr.w	r7, r7, #1
 8008820:	611f      	str	r7, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008822:	4620      	mov	r0, r4
 8008824:	462b      	mov	r3, r5
 8008826:	f7ff febe 	bl	80085a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800882a:	2800      	cmp	r0, #0
 800882c:	d1b8      	bne.n	80087a0 <I2C_RequestMemoryRead+0x48>
 800882e:	e7bd      	b.n	80087ac <I2C_RequestMemoryRead+0x54>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008830:	0a32      	lsrs	r2, r6, #8
 8008832:	611a      	str	r2, [r3, #16]
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008834:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008836:	462a      	mov	r2, r5
 8008838:	4620      	mov	r0, r4
 800883a:	f7ff ff15 	bl	8008668 <I2C_WaitOnTXEFlagUntilTimeout>
 800883e:	2800      	cmp	r0, #0
 8008840:	d1c4      	bne.n	80087cc <I2C_RequestMemoryRead+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008842:	6823      	ldr	r3, [r4, #0]
 8008844:	e7cf      	b.n	80087e6 <I2C_RequestMemoryRead+0x8e>
 8008846:	bf00      	nop
 8008848:	00010002 	.word	0x00010002

0800884c <I2C_WaitOnRXNEFlagUntilTimeout>:
{  
 800884c:	b570      	push	{r4, r5, r6, lr}
 800884e:	4604      	mov	r4, r0
 8008850:	460d      	mov	r5, r1
 8008852:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008854:	6820      	ldr	r0, [r4, #0]
 8008856:	6943      	ldr	r3, [r0, #20]
 8008858:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 800885c:	d001      	beq.n	8008862 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 800885e:	2000      	movs	r0, #0
 8008860:	e00d      	b.n	800887e <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008862:	6942      	ldr	r2, [r0, #20]
 8008864:	06d2      	lsls	r2, r2, #27
 8008866:	d50b      	bpl.n	8008880 <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008868:	f06f 0210 	mvn.w	r2, #16
 800886c:	6142      	str	r2, [r0, #20]
      hi2c->State= HAL_I2C_STATE_READY;
 800886e:	2220      	movs	r2, #32
      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008870:	6423      	str	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8008872:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->PreviousState = I2C_STATE_NONE;
 8008876:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8008878:	2001      	movs	r0, #1
      hi2c->State= HAL_I2C_STATE_READY;
 800887a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
}
 800887e:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8008880:	b95d      	cbnz	r5, 800889a <I2C_WaitOnRXNEFlagUntilTimeout+0x4e>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008882:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008884:	f043 0320 	orr.w	r3, r3, #32
 8008888:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 800888a:	2320      	movs	r3, #32
 800888c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      __HAL_UNLOCK(hi2c);
 8008890:	2300      	movs	r3, #0
 8008892:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8008896:	2003      	movs	r0, #3
 8008898:	e7f1      	b.n	800887e <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800889a:	f7ff f871 	bl	8007980 <HAL_GetTick>
 800889e:	1b80      	subs	r0, r0, r6
 80088a0:	42a8      	cmp	r0, r5
 80088a2:	d9d7      	bls.n	8008854 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
 80088a4:	e7ed      	b.n	8008882 <I2C_WaitOnRXNEFlagUntilTimeout+0x36>

080088a6 <I2C_WaitOnBTFFlagUntilTimeout>:
{  
 80088a6:	b570      	push	{r4, r5, r6, lr}
 80088a8:	4604      	mov	r4, r0
 80088aa:	460d      	mov	r5, r1
 80088ac:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80088ae:	6823      	ldr	r3, [r4, #0]
 80088b0:	695b      	ldr	r3, [r3, #20]
 80088b2:	075b      	lsls	r3, r3, #29
 80088b4:	d501      	bpl.n	80088ba <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 80088b6:	2000      	movs	r0, #0
 80088b8:	e012      	b.n	80088e0 <I2C_WaitOnBTFFlagUntilTimeout+0x3a>
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80088ba:	4620      	mov	r0, r4
 80088bc:	f7ff fe5e 	bl	800857c <I2C_IsAcknowledgeFailed>
 80088c0:	b9a8      	cbnz	r0, 80088ee <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 80088c2:	1c6a      	adds	r2, r5, #1
 80088c4:	d0f3      	beq.n	80088ae <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80088c6:	b965      	cbnz	r5, 80088e2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80088c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80088ca:	f043 0320 	orr.w	r3, r3, #32
 80088ce:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 80088d0:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 80088d2:	2300      	movs	r3, #0
 80088d4:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 80088d6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 80088da:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 80088de:	2003      	movs	r0, #3
}
 80088e0:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80088e2:	f7ff f84d 	bl	8007980 <HAL_GetTick>
 80088e6:	1b80      	subs	r0, r0, r6
 80088e8:	42a8      	cmp	r0, r5
 80088ea:	d9e0      	bls.n	80088ae <I2C_WaitOnBTFFlagUntilTimeout+0x8>
 80088ec:	e7ec      	b.n	80088c8 <I2C_WaitOnBTFFlagUntilTimeout+0x22>
      return HAL_ERROR;
 80088ee:	2001      	movs	r0, #1
 80088f0:	e7f6      	b.n	80088e0 <I2C_WaitOnBTFFlagUntilTimeout+0x3a>
	...

080088f4 <HAL_I2C_Init>:
{
 80088f4:	b570      	push	{r4, r5, r6, lr}
  if(hi2c == NULL)
 80088f6:	4604      	mov	r4, r0
 80088f8:	2800      	cmp	r0, #0
 80088fa:	d062      	beq.n	80089c2 <HAL_I2C_Init+0xce>
  if(hi2c->State == HAL_I2C_STATE_RESET)
 80088fc:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8008900:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8008904:	b91b      	cbnz	r3, 800890e <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8008906:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 800890a:	f008 fc43 	bl	8011194 <HAL_I2C_MspInit>
  __HAL_I2C_DISABLE(hi2c);
 800890e:	6822      	ldr	r2, [r4, #0]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8008910:	4e2d      	ldr	r6, [pc, #180]	; (80089c8 <HAL_I2C_Init+0xd4>)
  freqrange = I2C_FREQRANGE(pclk1);
 8008912:	4d2e      	ldr	r5, [pc, #184]	; (80089cc <HAL_I2C_Init+0xd8>)
  hi2c->State = HAL_I2C_STATE_BUSY;
 8008914:	2324      	movs	r3, #36	; 0x24
 8008916:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 800891a:	6813      	ldr	r3, [r2, #0]
 800891c:	f023 0301 	bic.w	r3, r3, #1
 8008920:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008922:	f000 fc8b 	bl	800923c <HAL_RCC_GetPCLK1Freq>
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8008926:	6863      	ldr	r3, [r4, #4]
  hi2c->Instance->CR2 = freqrange;
 8008928:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 800892a:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800892e:	42b3      	cmp	r3, r6
 8008930:	bf84      	itt	hi
 8008932:	f44f 7196 	movhi.w	r1, #300	; 0x12c
 8008936:	4369      	mulhi	r1, r5
  hi2c->Instance->CR2 = freqrange;
 8008938:	6055      	str	r5, [r2, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800893a:	bf91      	iteee	ls
 800893c:	1c69      	addls	r1, r5, #1
 800893e:	f44f 757a 	movhi.w	r5, #1000	; 0x3e8
 8008942:	fbb1 f1f5 	udivhi	r1, r1, r5
 8008946:	3101      	addhi	r1, #1
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8008948:	42b3      	cmp	r3, r6
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800894a:	6211      	str	r1, [r2, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 800894c:	d821      	bhi.n	8008992 <HAL_I2C_Init+0x9e>
 800894e:	005b      	lsls	r3, r3, #1
 8008950:	fbb0 f0f3 	udiv	r0, r0, r3
 8008954:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8008958:	2b03      	cmp	r3, #3
 800895a:	bf98      	it	ls
 800895c:	2004      	movls	r0, #4
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800895e:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 8008962:	430b      	orrs	r3, r1
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8008964:	61d0      	str	r0, [r2, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008966:	6013      	str	r3, [r2, #0]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8008968:	e9d4 1303 	ldrd	r1, r3, [r4, #12]
 800896c:	430b      	orrs	r3, r1
 800896e:	6093      	str	r3, [r2, #8]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8008970:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 8008974:	430b      	orrs	r3, r1
 8008976:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8008978:	6813      	ldr	r3, [r2, #0]
 800897a:	f043 0301 	orr.w	r3, r3, #1
 800897e:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008980:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8008982:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008984:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008986:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800898a:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800898c:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 8008990:	bd70      	pop	{r4, r5, r6, pc}
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8008992:	68a1      	ldr	r1, [r4, #8]
 8008994:	b949      	cbnz	r1, 80089aa <HAL_I2C_Init+0xb6>
 8008996:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800899a:	fbb0 f0f3 	udiv	r0, r0, r3
 800899e:	f3c0 030b 	ubfx	r3, r0, #0, #12
 80089a2:	b163      	cbz	r3, 80089be <HAL_I2C_Init+0xca>
 80089a4:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 80089a8:	e7d9      	b.n	800895e <HAL_I2C_Init+0x6a>
 80089aa:	2119      	movs	r1, #25
 80089ac:	434b      	muls	r3, r1
 80089ae:	fbb0 f0f3 	udiv	r0, r0, r3
 80089b2:	f3c0 030b 	ubfx	r3, r0, #0, #12
 80089b6:	b113      	cbz	r3, 80089be <HAL_I2C_Init+0xca>
 80089b8:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 80089bc:	e7cf      	b.n	800895e <HAL_I2C_Init+0x6a>
 80089be:	2001      	movs	r0, #1
 80089c0:	e7cd      	b.n	800895e <HAL_I2C_Init+0x6a>
    return HAL_ERROR;
 80089c2:	2001      	movs	r0, #1
 80089c4:	e7e4      	b.n	8008990 <HAL_I2C_Init+0x9c>
 80089c6:	bf00      	nop
 80089c8:	000186a0 	.word	0x000186a0
 80089cc:	000f4240 	.word	0x000f4240

080089d0 <HAL_I2C_MspDeInit>:
 80089d0:	4770      	bx	lr

080089d2 <HAL_I2C_DeInit>:
{
 80089d2:	b510      	push	{r4, lr}
  if(hi2c == NULL)
 80089d4:	4604      	mov	r4, r0
 80089d6:	b198      	cbz	r0, 8008a00 <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 80089d8:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80089da:	2324      	movs	r3, #36	; 0x24
 80089dc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80089e0:	6813      	ldr	r3, [r2, #0]
 80089e2:	f023 0301 	bic.w	r3, r3, #1
 80089e6:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 80089e8:	f7ff fff2 	bl	80089d0 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80089ec:	2000      	movs	r0, #0
 80089ee:	6420      	str	r0, [r4, #64]	; 0x40
  __HAL_UNLOCK(hi2c);
 80089f0:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  hi2c->State         = HAL_I2C_STATE_RESET;
 80089f4:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80089f8:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80089fa:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 80089fe:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8008a00:	2001      	movs	r0, #1
 8008a02:	e7fc      	b.n	80089fe <HAL_I2C_DeInit+0x2c>

08008a04 <HAL_I2C_Mem_Write>:
{
 8008a04:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a08:	4604      	mov	r4, r0
 8008a0a:	469a      	mov	sl, r3
 8008a0c:	4688      	mov	r8, r1
 8008a0e:	4691      	mov	r9, r2
 8008a10:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  tickstart = HAL_GetTick();
 8008a12:	f7fe ffb5 	bl	8007980 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8008a16:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8008a1a:	2b20      	cmp	r3, #32
  tickstart = HAL_GetTick();
 8008a1c:	4605      	mov	r5, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8008a1e:	d003      	beq.n	8008a28 <HAL_I2C_Mem_Write+0x24>
    return HAL_BUSY;
 8008a20:	2002      	movs	r0, #2
}
 8008a22:	b002      	add	sp, #8
 8008a24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008a28:	9000      	str	r0, [sp, #0]
 8008a2a:	2319      	movs	r3, #25
 8008a2c:	2201      	movs	r2, #1
 8008a2e:	493e      	ldr	r1, [pc, #248]	; (8008b28 <HAL_I2C_Mem_Write+0x124>)
 8008a30:	4620      	mov	r0, r4
 8008a32:	f7ff fdec 	bl	800860e <I2C_WaitOnFlagUntilTimeout>
 8008a36:	2800      	cmp	r0, #0
 8008a38:	d1f2      	bne.n	8008a20 <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 8008a3a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8008a3e:	2b01      	cmp	r3, #1
 8008a40:	d0ee      	beq.n	8008a20 <HAL_I2C_Mem_Write+0x1c>
 8008a42:	2301      	movs	r3, #1
 8008a44:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008a48:	6823      	ldr	r3, [r4, #0]
 8008a4a:	681a      	ldr	r2, [r3, #0]
 8008a4c:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8008a4e:	bf5e      	ittt	pl
 8008a50:	681a      	ldrpl	r2, [r3, #0]
 8008a52:	f042 0201 	orrpl.w	r2, r2, #1
 8008a56:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8008a58:	681a      	ldr	r2, [r3, #0]
 8008a5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008a5e:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008a60:	2321      	movs	r3, #33	; 0x21
 8008a62:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008a66:	2340      	movs	r3, #64	; 0x40
 8008a68:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->pBuffPtr    = pData;
 8008a6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a6e:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008a70:	2700      	movs	r7, #0
    hi2c->XferCount   = Size;
 8008a72:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008a76:	6427      	str	r7, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8008a78:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008a7a:	4b2c      	ldr	r3, [pc, #176]	; (8008b2c <HAL_I2C_Mem_Write+0x128>)
 8008a7c:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8008a7e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008a80:	8523      	strh	r3, [r4, #40]	; 0x28
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008a82:	e9cd 6500 	strd	r6, r5, [sp]
 8008a86:	4653      	mov	r3, sl
 8008a88:	464a      	mov	r2, r9
 8008a8a:	4641      	mov	r1, r8
 8008a8c:	4620      	mov	r0, r4
 8008a8e:	f7ff fe11 	bl	80086b4 <I2C_RequestMemoryWrite>
 8008a92:	2800      	cmp	r0, #0
 8008a94:	d02a      	beq.n	8008aec <HAL_I2C_Mem_Write+0xe8>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008a96:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8008a98:	f884 703c 	strb.w	r7, [r4, #60]	; 0x3c
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008a9c:	2b04      	cmp	r3, #4
 8008a9e:	d107      	bne.n	8008ab0 <HAL_I2C_Mem_Write+0xac>
        return HAL_ERROR;
 8008aa0:	2001      	movs	r0, #1
 8008aa2:	e7be      	b.n	8008a22 <HAL_I2C_Mem_Write+0x1e>
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008aa4:	f7ff fde0 	bl	8008668 <I2C_WaitOnTXEFlagUntilTimeout>
 8008aa8:	b120      	cbz	r0, 8008ab4 <HAL_I2C_Mem_Write+0xb0>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008aaa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008aac:	2b04      	cmp	r3, #4
 8008aae:	d034      	beq.n	8008b1a <HAL_I2C_Mem_Write+0x116>
          return HAL_TIMEOUT;
 8008ab0:	2003      	movs	r0, #3
 8008ab2:	e7b6      	b.n	8008a22 <HAL_I2C_Mem_Write+0x1e>
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8008ab4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008ab6:	6827      	ldr	r7, [r4, #0]
      hi2c->XferSize--;
 8008ab8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8008aba:	1c4b      	adds	r3, r1, #1
 8008abc:	6263      	str	r3, [r4, #36]	; 0x24
 8008abe:	780b      	ldrb	r3, [r1, #0]
 8008ac0:	613b      	str	r3, [r7, #16]
      hi2c->XferCount--;
 8008ac2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008ac4:	3b01      	subs	r3, #1
 8008ac6:	b29b      	uxth	r3, r3
 8008ac8:	8563      	strh	r3, [r4, #42]	; 0x2a
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008aca:	697b      	ldr	r3, [r7, #20]
      hi2c->XferSize--;
 8008acc:	1e50      	subs	r0, r2, #1
 8008ace:	b280      	uxth	r0, r0
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008ad0:	075b      	lsls	r3, r3, #29
      hi2c->XferSize--;
 8008ad2:	8520      	strh	r0, [r4, #40]	; 0x28
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008ad4:	d50a      	bpl.n	8008aec <HAL_I2C_Mem_Write+0xe8>
 8008ad6:	b148      	cbz	r0, 8008aec <HAL_I2C_Mem_Write+0xe8>
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8008ad8:	1c8b      	adds	r3, r1, #2
 8008ada:	6263      	str	r3, [r4, #36]	; 0x24
 8008adc:	784b      	ldrb	r3, [r1, #1]
 8008ade:	613b      	str	r3, [r7, #16]
        hi2c->XferCount--;
 8008ae0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008ae2:	3b01      	subs	r3, #1
        hi2c->XferSize--;
 8008ae4:	3a02      	subs	r2, #2
        hi2c->XferCount--;
 8008ae6:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8008ae8:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8008aea:	8563      	strh	r3, [r4, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 8008aec:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008aee:	462a      	mov	r2, r5
 8008af0:	4631      	mov	r1, r6
 8008af2:	4620      	mov	r0, r4
    while(hi2c->XferSize > 0U)
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d1d5      	bne.n	8008aa4 <HAL_I2C_Mem_Write+0xa0>
    if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008af8:	f7ff fed5 	bl	80088a6 <I2C_WaitOnBTFFlagUntilTimeout>
 8008afc:	2800      	cmp	r0, #0
 8008afe:	d1d4      	bne.n	8008aaa <HAL_I2C_Mem_Write+0xa6>
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8008b00:	6822      	ldr	r2, [r4, #0]
 8008b02:	6813      	ldr	r3, [r2, #0]
 8008b04:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008b08:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8008b0a:	2320      	movs	r3, #32
 8008b0c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8008b10:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b14:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 8008b18:	e783      	b.n	8008a22 <HAL_I2C_Mem_Write+0x1e>
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8008b1a:	6822      	ldr	r2, [r4, #0]
 8008b1c:	6813      	ldr	r3, [r2, #0]
 8008b1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008b22:	6013      	str	r3, [r2, #0]
 8008b24:	e7bc      	b.n	8008aa0 <HAL_I2C_Mem_Write+0x9c>
 8008b26:	bf00      	nop
 8008b28:	00100002 	.word	0x00100002
 8008b2c:	ffff0000 	.word	0xffff0000

08008b30 <HAL_I2C_Mem_Read>:
{
 8008b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b34:	4604      	mov	r4, r0
 8008b36:	b086      	sub	sp, #24
 8008b38:	469a      	mov	sl, r3
 8008b3a:	460d      	mov	r5, r1
 8008b3c:	4691      	mov	r9, r2
 8008b3e:	9f10      	ldr	r7, [sp, #64]	; 0x40
  tickstart = HAL_GetTick();
 8008b40:	f7fe ff1e 	bl	8007980 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8008b44:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8008b48:	2b20      	cmp	r3, #32
  tickstart = HAL_GetTick();
 8008b4a:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8008b4c:	d004      	beq.n	8008b58 <HAL_I2C_Mem_Read+0x28>
    return HAL_BUSY;
 8008b4e:	2502      	movs	r5, #2
}
 8008b50:	4628      	mov	r0, r5
 8008b52:	b006      	add	sp, #24
 8008b54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008b58:	9000      	str	r0, [sp, #0]
 8008b5a:	2319      	movs	r3, #25
 8008b5c:	2201      	movs	r2, #1
 8008b5e:	4978      	ldr	r1, [pc, #480]	; (8008d40 <HAL_I2C_Mem_Read+0x210>)
 8008b60:	4620      	mov	r0, r4
 8008b62:	f7ff fd54 	bl	800860e <I2C_WaitOnFlagUntilTimeout>
 8008b66:	2800      	cmp	r0, #0
 8008b68:	d1f1      	bne.n	8008b4e <HAL_I2C_Mem_Read+0x1e>
    __HAL_LOCK(hi2c);
 8008b6a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8008b6e:	2b01      	cmp	r3, #1
 8008b70:	d0ed      	beq.n	8008b4e <HAL_I2C_Mem_Read+0x1e>
 8008b72:	2301      	movs	r3, #1
 8008b74:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008b78:	6823      	ldr	r3, [r4, #0]
 8008b7a:	681a      	ldr	r2, [r3, #0]
 8008b7c:	07d1      	lsls	r1, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8008b7e:	bf5e      	ittt	pl
 8008b80:	681a      	ldrpl	r2, [r3, #0]
 8008b82:	f042 0201 	orrpl.w	r2, r2, #1
 8008b86:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8008b88:	681a      	ldr	r2, [r3, #0]
 8008b8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008b8e:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008b90:	2322      	movs	r3, #34	; 0x22
 8008b92:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008b96:	2340      	movs	r3, #64	; 0x40
 8008b98:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->pBuffPtr    = pData;
 8008b9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b9e:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008ba0:	f04f 0800 	mov.w	r8, #0
    hi2c->XferCount   = Size;
 8008ba4:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008ba8:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8008bac:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008bae:	4b65      	ldr	r3, [pc, #404]	; (8008d44 <HAL_I2C_Mem_Read+0x214>)
 8008bb0:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8008bb2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008bb4:	8523      	strh	r3, [r4, #40]	; 0x28
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008bb6:	4629      	mov	r1, r5
 8008bb8:	e9cd 7600 	strd	r7, r6, [sp]
 8008bbc:	4653      	mov	r3, sl
 8008bbe:	464a      	mov	r2, r9
 8008bc0:	4620      	mov	r0, r4
 8008bc2:	f7ff fdc9 	bl	8008758 <I2C_RequestMemoryRead>
 8008bc6:	4605      	mov	r5, r0
 8008bc8:	b130      	cbz	r0, 8008bd8 <HAL_I2C_Mem_Read+0xa8>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008bca:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8008bcc:	f884 803c 	strb.w	r8, [r4, #60]	; 0x3c
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008bd0:	2b04      	cmp	r3, #4
 8008bd2:	d13a      	bne.n	8008c4a <HAL_I2C_Mem_Read+0x11a>
              return HAL_ERROR;
 8008bd4:	2501      	movs	r5, #1
 8008bd6:	e7bb      	b.n	8008b50 <HAL_I2C_Mem_Read+0x20>
    if(hi2c->XferSize == 0U)
 8008bd8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8008bda:	6823      	ldr	r3, [r4, #0]
 8008bdc:	b992      	cbnz	r2, 8008c04 <HAL_I2C_Mem_Read+0xd4>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008bde:	9002      	str	r0, [sp, #8]
 8008be0:	695a      	ldr	r2, [r3, #20]
 8008be2:	9202      	str	r2, [sp, #8]
 8008be4:	699a      	ldr	r2, [r3, #24]
 8008be6:	9202      	str	r2, [sp, #8]
 8008be8:	9a02      	ldr	r2, [sp, #8]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8008bea:	681a      	ldr	r2, [r3, #0]
 8008bec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008bf0:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8008bf2:	2320      	movs	r3, #32
 8008bf4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8008bfe:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8008c02:	e7a5      	b.n	8008b50 <HAL_I2C_Mem_Read+0x20>
    else if(hi2c->XferSize == 1U)
 8008c04:	2a01      	cmp	r2, #1
 8008c06:	d122      	bne.n	8008c4e <HAL_I2C_Mem_Read+0x11e>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8008c08:	681a      	ldr	r2, [r3, #0]
 8008c0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008c0e:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008c10:	9003      	str	r0, [sp, #12]
 8008c12:	695a      	ldr	r2, [r3, #20]
 8008c14:	9203      	str	r2, [sp, #12]
 8008c16:	699a      	ldr	r2, [r3, #24]
 8008c18:	9203      	str	r2, [sp, #12]
 8008c1a:	9a03      	ldr	r2, [sp, #12]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8008c1c:	681a      	ldr	r2, [r3, #0]
 8008c1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c22:	601a      	str	r2, [r3, #0]
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008c24:	f8df 8120 	ldr.w	r8, [pc, #288]	; 8008d48 <HAL_I2C_Mem_Read+0x218>
    while(hi2c->XferSize > 0U)
 8008c28:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d0e1      	beq.n	8008bf2 <HAL_I2C_Mem_Read+0xc2>
      if(hi2c->XferSize <= 3U)
 8008c2e:	2b03      	cmp	r3, #3
 8008c30:	d86b      	bhi.n	8008d0a <HAL_I2C_Mem_Read+0x1da>
        if(hi2c->XferSize== 1U)
 8008c32:	2b01      	cmp	r3, #1
 8008c34:	d123      	bne.n	8008c7e <HAL_I2C_Mem_Read+0x14e>
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8008c36:	4632      	mov	r2, r6
 8008c38:	4639      	mov	r1, r7
 8008c3a:	4620      	mov	r0, r4
 8008c3c:	f7ff fe06 	bl	800884c <I2C_WaitOnRXNEFlagUntilTimeout>
 8008c40:	2800      	cmp	r0, #0
 8008c42:	d039      	beq.n	8008cb8 <HAL_I2C_Mem_Read+0x188>
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8008c44:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008c46:	2b20      	cmp	r3, #32
 8008c48:	d1c4      	bne.n	8008bd4 <HAL_I2C_Mem_Read+0xa4>
              return HAL_TIMEOUT;
 8008c4a:	2503      	movs	r5, #3
 8008c4c:	e780      	b.n	8008b50 <HAL_I2C_Mem_Read+0x20>
    else if(hi2c->XferSize == 2U)
 8008c4e:	2a02      	cmp	r2, #2
 8008c50:	d10e      	bne.n	8008c70 <HAL_I2C_Mem_Read+0x140>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8008c52:	681a      	ldr	r2, [r3, #0]
 8008c54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008c58:	601a      	str	r2, [r3, #0]
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 8008c5a:	681a      	ldr	r2, [r3, #0]
 8008c5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008c60:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008c62:	9004      	str	r0, [sp, #16]
 8008c64:	695a      	ldr	r2, [r3, #20]
 8008c66:	9204      	str	r2, [sp, #16]
 8008c68:	699b      	ldr	r3, [r3, #24]
 8008c6a:	9304      	str	r3, [sp, #16]
 8008c6c:	9b04      	ldr	r3, [sp, #16]
 8008c6e:	e7d9      	b.n	8008c24 <HAL_I2C_Mem_Read+0xf4>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008c70:	9005      	str	r0, [sp, #20]
 8008c72:	695a      	ldr	r2, [r3, #20]
 8008c74:	9205      	str	r2, [sp, #20]
 8008c76:	699b      	ldr	r3, [r3, #24]
 8008c78:	9305      	str	r3, [sp, #20]
 8008c7a:	9b05      	ldr	r3, [sp, #20]
 8008c7c:	e7d2      	b.n	8008c24 <HAL_I2C_Mem_Read+0xf4>
        else if(hi2c->XferSize == 2U)
 8008c7e:	2b02      	cmp	r3, #2
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008c80:	9600      	str	r6, [sp, #0]
 8008c82:	463b      	mov	r3, r7
 8008c84:	f04f 0200 	mov.w	r2, #0
 8008c88:	4641      	mov	r1, r8
 8008c8a:	4620      	mov	r0, r4
        else if(hi2c->XferSize == 2U)
 8008c8c:	d122      	bne.n	8008cd4 <HAL_I2C_Mem_Read+0x1a4>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008c8e:	f7ff fcbe 	bl	800860e <I2C_WaitOnFlagUntilTimeout>
 8008c92:	2800      	cmp	r0, #0
 8008c94:	d1d9      	bne.n	8008c4a <HAL_I2C_Mem_Read+0x11a>
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8008c96:	6823      	ldr	r3, [r4, #0]
 8008c98:	681a      	ldr	r2, [r3, #0]
 8008c9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c9e:	601a      	str	r2, [r3, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8008ca0:	691a      	ldr	r2, [r3, #16]
 8008ca2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ca4:	1c59      	adds	r1, r3, #1
 8008ca6:	6261      	str	r1, [r4, #36]	; 0x24
 8008ca8:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8008caa:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8008cac:	3b01      	subs	r3, #1
 8008cae:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8008cb0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008cb2:	3b01      	subs	r3, #1
 8008cb4:	b29b      	uxth	r3, r3
 8008cb6:	8563      	strh	r3, [r4, #42]	; 0x2a
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8008cb8:	6823      	ldr	r3, [r4, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8008cba:	691a      	ldr	r2, [r3, #16]
 8008cbc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008cbe:	1c59      	adds	r1, r3, #1
 8008cc0:	6261      	str	r1, [r4, #36]	; 0x24
 8008cc2:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8008cc4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8008cc6:	3b01      	subs	r3, #1
 8008cc8:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8008cca:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008ccc:	3b01      	subs	r3, #1
 8008cce:	b29b      	uxth	r3, r3
 8008cd0:	8563      	strh	r3, [r4, #42]	; 0x2a
 8008cd2:	e7a9      	b.n	8008c28 <HAL_I2C_Mem_Read+0xf8>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008cd4:	f7ff fc9b 	bl	800860e <I2C_WaitOnFlagUntilTimeout>
 8008cd8:	4602      	mov	r2, r0
 8008cda:	2800      	cmp	r0, #0
 8008cdc:	d1b5      	bne.n	8008c4a <HAL_I2C_Mem_Read+0x11a>
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8008cde:	6823      	ldr	r3, [r4, #0]
 8008ce0:	6819      	ldr	r1, [r3, #0]
 8008ce2:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8008ce6:	6019      	str	r1, [r3, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8008ce8:	6919      	ldr	r1, [r3, #16]
 8008cea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008cec:	1c58      	adds	r0, r3, #1
 8008cee:	6260      	str	r0, [r4, #36]	; 0x24
 8008cf0:	7019      	strb	r1, [r3, #0]
          hi2c->XferSize--;
 8008cf2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008cf4:	9600      	str	r6, [sp, #0]
          hi2c->XferSize--;
 8008cf6:	3b01      	subs	r3, #1
 8008cf8:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8008cfa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008cfc:	3b01      	subs	r3, #1
 8008cfe:	b29b      	uxth	r3, r3
 8008d00:	8563      	strh	r3, [r4, #42]	; 0x2a
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008d02:	4641      	mov	r1, r8
 8008d04:	463b      	mov	r3, r7
 8008d06:	4620      	mov	r0, r4
 8008d08:	e7c1      	b.n	8008c8e <HAL_I2C_Mem_Read+0x15e>
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008d0a:	4632      	mov	r2, r6
 8008d0c:	4639      	mov	r1, r7
 8008d0e:	4620      	mov	r0, r4
 8008d10:	f7ff fd9c 	bl	800884c <I2C_WaitOnRXNEFlagUntilTimeout>
 8008d14:	2800      	cmp	r0, #0
 8008d16:	d195      	bne.n	8008c44 <HAL_I2C_Mem_Read+0x114>
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8008d18:	6823      	ldr	r3, [r4, #0]
 8008d1a:	691a      	ldr	r2, [r3, #16]
 8008d1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d1e:	1c59      	adds	r1, r3, #1
 8008d20:	6261      	str	r1, [r4, #36]	; 0x24
 8008d22:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 8008d24:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8008d26:	3b01      	subs	r3, #1
 8008d28:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8008d2a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008d2c:	3b01      	subs	r3, #1
 8008d2e:	b29b      	uxth	r3, r3
 8008d30:	8563      	strh	r3, [r4, #42]	; 0x2a
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008d32:	6823      	ldr	r3, [r4, #0]
 8008d34:	695a      	ldr	r2, [r3, #20]
 8008d36:	0752      	lsls	r2, r2, #29
 8008d38:	f57f af76 	bpl.w	8008c28 <HAL_I2C_Mem_Read+0xf8>
 8008d3c:	e7bd      	b.n	8008cba <HAL_I2C_Mem_Read+0x18a>
 8008d3e:	bf00      	nop
 8008d40:	00100002 	.word	0x00100002
 8008d44:	ffff0000 	.word	0xffff0000
 8008d48:	00010004 	.word	0x00010004

08008d4c <HAL_I2C_GetState>:
  return hi2c->State;
 8008d4c:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 8008d50:	4770      	bx	lr

08008d52 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 8008d52:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8008d56:	b2d2      	uxtb	r2, r2
 8008d58:	2a20      	cmp	r2, #32
{
 8008d5a:	b510      	push	{r4, lr}
  if(hi2c->State == HAL_I2C_STATE_READY)
 8008d5c:	d116      	bne.n	8008d8c <HAL_I2CEx_ConfigAnalogFilter+0x3a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8008d5e:	2324      	movs	r3, #36	; 0x24
 8008d60:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);    
 8008d64:	6803      	ldr	r3, [r0, #0]
 8008d66:	681c      	ldr	r4, [r3, #0]
 8008d68:	f024 0401 	bic.w	r4, r4, #1
 8008d6c:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8008d6e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8008d70:	f024 0410 	bic.w	r4, r4, #16
 8008d74:	625c      	str	r4, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8008d76:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8008d78:	4321      	orrs	r1, r4
 8008d7a:	6259      	str	r1, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c); 
 8008d7c:	6819      	ldr	r1, [r3, #0]
 8008d7e:	f041 0101 	orr.w	r1, r1, #1
 8008d82:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008d84:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

    return HAL_OK;
 8008d88:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8008d8a:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8008d8c:	2002      	movs	r0, #2
 8008d8e:	e7fc      	b.n	8008d8a <HAL_I2CEx_ConfigAnalogFilter+0x38>

08008d90 <HAL_I2S_MspInit>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hi2s);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_MspInit could be implemented in the user file
   */
}
 8008d90:	4770      	bx	lr
	...

08008d94 <HAL_I2S_Receive_DMA>:
  * @note The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *       between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8008d94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008d96:	4613      	mov	r3, r2
 8008d98:	4604      	mov	r4, r0
  uint32_t *tmp = NULL;
  uint32_t tmp1 = 0U;

  if((pData == NULL) || (Size == 0U))
 8008d9a:	460a      	mov	r2, r1
 8008d9c:	2900      	cmp	r1, #0
 8008d9e:	d04e      	beq.n	8008e3e <HAL_I2S_Receive_DMA+0xaa>
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d04c      	beq.n	8008e3e <HAL_I2S_Receive_DMA+0xaa>
  {
    return  HAL_ERROR;
  }

  if(hi2s->State == HAL_I2S_STATE_READY)
 8008da4:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 8008da8:	2901      	cmp	r1, #1
 8008daa:	d002      	beq.n	8008db2 <HAL_I2S_Receive_DMA+0x1e>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8008dac:	2002      	movs	r0, #2
  }
}
 8008dae:	b003      	add	sp, #12
 8008db0:	bd30      	pop	{r4, r5, pc}
    tmp1 = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8008db2:	6805      	ldr	r5, [r0, #0]
    hi2s->pRxBuffPtr = pData;
 8008db4:	62c2      	str	r2, [r0, #44]	; 0x2c
    tmp1 = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8008db6:	69e8      	ldr	r0, [r5, #28]
 8008db8:	f000 0007 	and.w	r0, r0, #7
    if((tmp1 == I2S_DATAFORMAT_24B) || (tmp1 == I2S_DATAFORMAT_32B))
 8008dbc:	2803      	cmp	r0, #3
 8008dbe:	d001      	beq.n	8008dc4 <HAL_I2S_Receive_DMA+0x30>
 8008dc0:	2805      	cmp	r0, #5
 8008dc2:	d101      	bne.n	8008dc8 <HAL_I2S_Receive_DMA+0x34>
      hi2s->RxXferSize  = (Size << 1U);
 8008dc4:	005b      	lsls	r3, r3, #1
 8008dc6:	b29b      	uxth	r3, r3
      hi2s->RxXferSize  = Size;
 8008dc8:	8623      	strh	r3, [r4, #48]	; 0x30
      hi2s->RxXferCount = Size;
 8008dca:	8663      	strh	r3, [r4, #50]	; 0x32
    __HAL_LOCK(hi2s);
 8008dcc:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8008dd0:	2b01      	cmp	r3, #1
 8008dd2:	d0eb      	beq.n	8008dac <HAL_I2S_Receive_DMA+0x18>
 8008dd4:	2301      	movs	r3, #1
 8008dd6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8008dda:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    hi2s->State     = HAL_I2S_STATE_BUSY_RX;
 8008ddc:	2304      	movs	r3, #4
 8008dde:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8008de2:	2100      	movs	r1, #0
    hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8008de4:	4b17      	ldr	r3, [pc, #92]	; (8008e44 <HAL_I2S_Receive_DMA+0xb0>)
    hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8008de6:	6461      	str	r1, [r4, #68]	; 0x44
    hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8008de8:	6403      	str	r3, [r0, #64]	; 0x40
    hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8008dea:	4b17      	ldr	r3, [pc, #92]	; (8008e48 <HAL_I2S_Receive_DMA+0xb4>)
 8008dec:	63c3      	str	r3, [r0, #60]	; 0x3c
    hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8008dee:	4b17      	ldr	r3, [pc, #92]	; (8008e4c <HAL_I2S_Receive_DMA+0xb8>)
 8008df0:	64c3      	str	r3, [r0, #76]	; 0x4c
    if((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8008df2:	69eb      	ldr	r3, [r5, #28]
 8008df4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008df8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008dfc:	d105      	bne.n	8008e0a <HAL_I2S_Receive_DMA+0x76>
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8008dfe:	9101      	str	r1, [sp, #4]
 8008e00:	68eb      	ldr	r3, [r5, #12]
 8008e02:	9301      	str	r3, [sp, #4]
 8008e04:	68ab      	ldr	r3, [r5, #8]
 8008e06:	9301      	str	r3, [sp, #4]
 8008e08:	9b01      	ldr	r3, [sp, #4]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, *(uint32_t*)tmp, hi2s->RxXferSize);
 8008e0a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8008e0c:	f105 010c 	add.w	r1, r5, #12
 8008e10:	f7fe ff32 	bl	8007c78 <HAL_DMA_Start_IT>
    if((hi2s->Instance->I2SCFGR &SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8008e14:	6823      	ldr	r3, [r4, #0]
 8008e16:	69da      	ldr	r2, [r3, #28]
 8008e18:	0551      	lsls	r1, r2, #21
      __HAL_I2S_ENABLE(hi2s);
 8008e1a:	bf5e      	ittt	pl
 8008e1c:	69da      	ldrpl	r2, [r3, #28]
 8008e1e:	f442 6280 	orrpl.w	r2, r2, #1024	; 0x400
 8008e22:	61da      	strpl	r2, [r3, #28]
    if((hi2s->Instance->CR2 &SPI_CR2_RXDMAEN) != SPI_CR2_RXDMAEN)
 8008e24:	685a      	ldr	r2, [r3, #4]
 8008e26:	07d2      	lsls	r2, r2, #31
      SET_BIT(hi2s->Instance->CR2,SPI_CR2_RXDMAEN);
 8008e28:	bf58      	it	pl
 8008e2a:	685a      	ldrpl	r2, [r3, #4]
    __HAL_UNLOCK(hi2s);
 8008e2c:	f04f 0000 	mov.w	r0, #0
      SET_BIT(hi2s->Instance->CR2,SPI_CR2_RXDMAEN);
 8008e30:	bf5c      	itt	pl
 8008e32:	f042 0201 	orrpl.w	r2, r2, #1
 8008e36:	605a      	strpl	r2, [r3, #4]
    __HAL_UNLOCK(hi2s);
 8008e38:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    return HAL_OK;
 8008e3c:	e7b7      	b.n	8008dae <HAL_I2S_Receive_DMA+0x1a>
    return  HAL_ERROR;
 8008e3e:	2001      	movs	r0, #1
 8008e40:	e7b5      	b.n	8008dae <HAL_I2S_Receive_DMA+0x1a>
 8008e42:	bf00      	nop
 8008e44:	08008eb1 	.word	0x08008eb1
 8008e48:	08008ebb 	.word	0x08008ebb
 8008e4c:	080090e5 	.word	0x080090e5

08008e50 <HAL_I2S_DMAStop>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
  /* Process Locked */
  __HAL_LOCK(hi2s);
 8008e50:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8008e54:	2b01      	cmp	r3, #1
{
 8008e56:	b510      	push	{r4, lr}
 8008e58:	4604      	mov	r4, r0
  __HAL_LOCK(hi2s);
 8008e5a:	d026      	beq.n	8008eaa <HAL_I2S_DMAStop+0x5a>
 8008e5c:	2301      	movs	r3, #1
 8008e5e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

  if(hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8008e62:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8008e66:	6803      	ldr	r3, [r0, #0]
 8008e68:	2a03      	cmp	r2, #3
 8008e6a:	d114      	bne.n	8008e96 <HAL_I2S_DMAStop+0x46>
  {
    /* Disable the I2S DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2,SPI_CR2_TXDMAEN);
 8008e6c:	685a      	ldr	r2, [r3, #4]

    /* Disable the I2S DMA Channel */
    HAL_DMA_Abort(hi2s->hdmatx);
 8008e6e:	6b80      	ldr	r0, [r0, #56]	; 0x38
    CLEAR_BIT(hi2s->Instance->CR2,SPI_CR2_TXDMAEN);
 8008e70:	f022 0202 	bic.w	r2, r2, #2
 8008e74:	605a      	str	r2, [r3, #4]
  {
    /* Disable the I2S DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2,SPI_CR2_RXDMAEN);

    /* Disable the I2S DMA Channel */
    HAL_DMA_Abort(hi2s->hdmarx);
 8008e76:	f7fe ff3d 	bl	8007cf4 <HAL_DMA_Abort>
    __HAL_I2SEXT_DISABLE(hi2s);
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  /* Disable I2S peripheral */
  __HAL_I2S_DISABLE(hi2s);
 8008e7a:	6822      	ldr	r2, [r4, #0]
 8008e7c:	69d3      	ldr	r3, [r2, #28]
 8008e7e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008e82:	041b      	lsls	r3, r3, #16
 8008e84:	0c1b      	lsrs	r3, r3, #16
 8008e86:	61d3      	str	r3, [r2, #28]

  hi2s->State = HAL_I2S_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(hi2s);
 8008e88:	2000      	movs	r0, #0
  hi2s->State = HAL_I2S_STATE_READY;
 8008e8a:	2301      	movs	r3, #1
 8008e8c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hi2s);
 8008e90:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40

  return HAL_OK;
}
 8008e94:	bd10      	pop	{r4, pc}
  else if(hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8008e96:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8008e9a:	2a04      	cmp	r2, #4
 8008e9c:	d1ed      	bne.n	8008e7a <HAL_I2S_DMAStop+0x2a>
    CLEAR_BIT(hi2s->Instance->CR2,SPI_CR2_RXDMAEN);
 8008e9e:	685a      	ldr	r2, [r3, #4]
    HAL_DMA_Abort(hi2s->hdmarx);
 8008ea0:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    CLEAR_BIT(hi2s->Instance->CR2,SPI_CR2_RXDMAEN);
 8008ea2:	f022 0201 	bic.w	r2, r2, #1
 8008ea6:	605a      	str	r2, [r3, #4]
 8008ea8:	e7e5      	b.n	8008e76 <HAL_I2S_DMAStop+0x26>
  __HAL_LOCK(hi2s);
 8008eaa:	2002      	movs	r0, #2
 8008eac:	e7f2      	b.n	8008e94 <HAL_I2S_DMAStop+0x44>

08008eae <HAL_I2S_TxCpltCallback>:
 8008eae:	4770      	bx	lr

08008eb0 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008eb0:	b508      	push	{r3, lr}
  I2S_HandleTypeDef* hi2s = (I2S_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_I2S_RxHalfCpltCallback(hi2s);
 8008eb2:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8008eb4:	f7fe fadc 	bl	8007470 <HAL_I2S_RxHalfCpltCallback>
}
 8008eb8:	bd08      	pop	{r3, pc}

08008eba <I2S_DMARxCplt>:
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008eba:	6802      	ldr	r2, [r0, #0]
 8008ebc:	6812      	ldr	r2, [r2, #0]
 8008ebe:	f412 7280 	ands.w	r2, r2, #256	; 0x100
{
 8008ec2:	b508      	push	{r3, lr}
  I2S_HandleTypeDef* hi2s = ( I2S_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8008ec4:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008ec6:	d108      	bne.n	8008eda <I2S_DMARxCplt+0x20>
    CLEAR_BIT(hi2s->Instance->CR2,SPI_CR2_RXDMAEN);
 8008ec8:	6818      	ldr	r0, [r3, #0]
 8008eca:	6841      	ldr	r1, [r0, #4]
 8008ecc:	f021 0101 	bic.w	r1, r1, #1
 8008ed0:	6041      	str	r1, [r0, #4]
    hi2s->RxXferCount = 0U;
 8008ed2:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->State       = HAL_I2S_STATE_READY;
 8008ed4:	2201      	movs	r2, #1
 8008ed6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  HAL_I2S_RxCpltCallback(hi2s);
 8008eda:	4618      	mov	r0, r3
 8008edc:	f7fe fa12 	bl	8007304 <HAL_I2S_RxCpltCallback>
}
 8008ee0:	bd08      	pop	{r3, pc}

08008ee2 <HAL_I2S_ErrorCallback>:
 8008ee2:	4770      	bx	lr

08008ee4 <HAL_I2S_Init>:
{
 8008ee4:	b570      	push	{r4, r5, r6, lr}
  if(hi2s == NULL)
 8008ee6:	4605      	mov	r5, r0
 8008ee8:	2800      	cmp	r0, #0
 8008eea:	d046      	beq.n	8008f7a <HAL_I2S_Init+0x96>
  hi2s->State = HAL_I2S_STATE_BUSY;
 8008eec:	2402      	movs	r4, #2
  hi2s->IrqHandlerISR = I2S_IRQHandler;
 8008eee:	4b38      	ldr	r3, [pc, #224]	; (8008fd0 <HAL_I2S_Init+0xec>)
  hi2s->State = HAL_I2S_STATE_BUSY;
 8008ef0:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
  hi2s->IrqHandlerISR = I2S_IRQHandler;
 8008ef4:	6343      	str	r3, [r0, #52]	; 0x34
  HAL_I2S_MspInit(hi2s);
 8008ef6:	f7ff ff4b 	bl	8008d90 <HAL_I2S_MspInit>
  CLEAR_BIT(hi2s->Instance->I2SCFGR,(SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8008efa:	682a      	ldr	r2, [r5, #0]
 8008efc:	69d3      	ldr	r3, [r2, #28]
 8008efe:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8008f02:	f023 030f 	bic.w	r3, r3, #15
 8008f06:	61d3      	str	r3, [r2, #28]
  if(hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8008f08:	696b      	ldr	r3, [r5, #20]
  hi2s->Instance->I2SPR = 0x0002U;
 8008f0a:	6214      	str	r4, [r2, #32]
  if(hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8008f0c:	2b02      	cmp	r3, #2
  tmpreg = hi2s->Instance->I2SCFGR;
 8008f0e:	69d4      	ldr	r4, [r2, #28]
  if(hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8008f10:	d03e      	beq.n	8008f90 <HAL_I2S_Init+0xac>
    if(hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8008f12:	68eb      	ldr	r3, [r5, #12]
      packetlength = 32U;
 8008f14:	2b00      	cmp	r3, #0
    if(hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8008f16:	68ab      	ldr	r3, [r5, #8]
      packetlength = 32U;
 8008f18:	bf0c      	ite	eq
 8008f1a:	2610      	moveq	r6, #16
 8008f1c:	2620      	movne	r6, #32
    if(hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8008f1e:	2b20      	cmp	r3, #32
    if(IS_I2S_APB1_INSTANCE(hi2s->Instance))
 8008f20:	4b2c      	ldr	r3, [pc, #176]	; (8008fd4 <HAL_I2S_Init+0xf0>)
      packetlength = packetlength * 2U;
 8008f22:	bf98      	it	ls
 8008f24:	0076      	lslls	r6, r6, #1
    if(IS_I2S_APB1_INSTANCE(hi2s->Instance))
 8008f26:	429a      	cmp	r2, r3
 8008f28:	d003      	beq.n	8008f32 <HAL_I2S_Init+0x4e>
 8008f2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008f2e:	429a      	cmp	r2, r3
 8008f30:	d125      	bne.n	8008f7e <HAL_I2S_Init+0x9a>
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 8008f32:	2001      	movs	r0, #1
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 8008f34:	f000 fc2a 	bl	800978c <HAL_RCCEx_GetPeriphCLKFreq>
    if(hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8008f38:	e9d5 3104 	ldrd	r3, r1, [r5, #16]
 8008f3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f40:	d121      	bne.n	8008f86 <HAL_I2S_Init+0xa2>
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8008f42:	68eb      	ldr	r3, [r5, #12]
 8008f44:	220a      	movs	r2, #10
 8008f46:	b1e3      	cbz	r3, 8008f82 <HAL_I2S_Init+0x9e>
        tmp = (uint32_t)(((((i2sclk / (packetlength*4)) * 10) / hi2s->Init.AudioFreq)) + 5);
 8008f48:	00b3      	lsls	r3, r6, #2
        tmp = (uint32_t)(((((i2sclk / (packetlength*8)) * 10) / hi2s->Init.AudioFreq)) + 5);
 8008f4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8008f4e:	4353      	muls	r3, r2
      tmp = (uint32_t)(((((i2sclk / packetlength) *10 ) / hi2s->Init.AudioFreq)) + 5);
 8008f50:	fbb3 f3f1 	udiv	r3, r3, r1
    tmp = tmp / 10U;
 8008f54:	220a      	movs	r2, #10
      tmp = (uint32_t)(((((i2sclk / packetlength) *10 ) / hi2s->Init.AudioFreq)) + 5);
 8008f56:	3305      	adds	r3, #5
    tmp = tmp / 10U;
 8008f58:	fbb3 f3f2 	udiv	r3, r3, r2
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2U);
 8008f5c:	f003 0101 	and.w	r1, r3, #1
    i2sodd = (uint32_t) (i2sodd << 8U);
 8008f60:	0209      	lsls	r1, r1, #8
 8008f62:	f3c3 034f 	ubfx	r3, r3, #1, #16
  if((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8008f66:	1e9a      	subs	r2, r3, #2
 8008f68:	2afd      	cmp	r2, #253	; 0xfd
 8008f6a:	d913      	bls.n	8008f94 <HAL_I2S_Init+0xb0>
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8008f6c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8008f6e:	f043 0310 	orr.w	r3, r3, #16
 8008f72:	646b      	str	r3, [r5, #68]	; 0x44
    HAL_I2S_ErrorCallback(hi2s);
 8008f74:	4628      	mov	r0, r5
 8008f76:	f7ff ffb4 	bl	8008ee2 <HAL_I2S_ErrorCallback>
    return HAL_ERROR;
 8008f7a:	2001      	movs	r0, #1
 8008f7c:	e026      	b.n	8008fcc <HAL_I2S_Init+0xe8>
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 8008f7e:	2002      	movs	r0, #2
 8008f80:	e7d8      	b.n	8008f34 <HAL_I2S_Init+0x50>
        tmp = (uint32_t)(((((i2sclk / (packetlength*8)) * 10) / hi2s->Init.AudioFreq)) + 5);
 8008f82:	00f3      	lsls	r3, r6, #3
 8008f84:	e7e1      	b.n	8008f4a <HAL_I2S_Init+0x66>
      tmp = (uint32_t)(((((i2sclk / packetlength) *10 ) / hi2s->Init.AudioFreq)) + 5);
 8008f86:	230a      	movs	r3, #10
 8008f88:	fbb0 f0f6 	udiv	r0, r0, r6
 8008f8c:	4343      	muls	r3, r0
 8008f8e:	e7df      	b.n	8008f50 <HAL_I2S_Init+0x6c>
  uint32_t tmpreg = 0U, i2sdiv = 2U, i2sodd = 0U, packetlength = 16U;
 8008f90:	2100      	movs	r1, #0
 8008f92:	e7e8      	b.n	8008f66 <HAL_I2S_Init+0x82>
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8008f94:	430b      	orrs	r3, r1
 8008f96:	6929      	ldr	r1, [r5, #16]
 8008f98:	682a      	ldr	r2, [r5, #0]
                       (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8008f9a:	68e8      	ldr	r0, [r5, #12]
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8008f9c:	430b      	orrs	r3, r1
 8008f9e:	6213      	str	r3, [r2, #32]
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(hi2s->Init.Mode | \
 8008fa0:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
 8008fa4:	430b      	orrs	r3, r1
 8008fa6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008faa:	4303      	orrs	r3, r0
                       (uint16_t)hi2s->Init.CPOL))));
 8008fac:	69a8      	ldr	r0, [r5, #24]
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(hi2s->Init.Mode | \
 8008fae:	4303      	orrs	r3, r0
 8008fb0:	b29b      	uxth	r3, r3
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||(hi2s->Init.Standard == I2S_STANDARD_PCM_LONG))
 8008fb2:	f021 0180 	bic.w	r1, r1, #128	; 0x80
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(hi2s->Init.Mode | \
 8008fb6:	431c      	orrs	r4, r3
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||(hi2s->Init.Standard == I2S_STANDARD_PCM_LONG))
 8008fb8:	2930      	cmp	r1, #48	; 0x30
    WRITE_REG(hi2s->Instance->I2SCFGR,(tmpreg | SPI_I2SCFGR_ASTRTEN));
 8008fba:	bf08      	it	eq
 8008fbc:	f444 5480 	orreq.w	r4, r4, #4096	; 0x1000
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8008fc0:	2000      	movs	r0, #0
  hi2s->State     = HAL_I2S_STATE_READY;
 8008fc2:	2301      	movs	r3, #1
    WRITE_REG(hi2s->Instance->I2SCFGR,tmpreg);
 8008fc4:	61d4      	str	r4, [r2, #28]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8008fc6:	6468      	str	r0, [r5, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8008fc8:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
}
 8008fcc:	bd70      	pop	{r4, r5, r6, pc}
 8008fce:	bf00      	nop
 8008fd0:	08008fd9 	.word	0x08008fd9
 8008fd4:	40003800 	.word	0x40003800

08008fd8 <I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8008fd8:	b530      	push	{r4, r5, lr}
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8008fda:	6803      	ldr	r3, [r0, #0]
{
 8008fdc:	b085      	sub	sp, #20
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8008fde:	689a      	ldr	r2, [r3, #8]
 8008fe0:	9201      	str	r2, [sp, #4]

  if(hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8008fe2:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8008fe6:	2a04      	cmp	r2, #4
{
 8008fe8:	4604      	mov	r4, r0
  if(hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8008fea:	d13a      	bne.n	8009062 <I2S_IRQHandler+0x8a>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if(((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8008fec:	9a01      	ldr	r2, [sp, #4]
 8008fee:	07d2      	lsls	r2, r2, #31
 8008ff0:	d519      	bpl.n	8009026 <I2S_IRQHandler+0x4e>
 8008ff2:	685a      	ldr	r2, [r3, #4]
 8008ff4:	0655      	lsls	r5, r2, #25
 8008ff6:	d516      	bpl.n	8009026 <I2S_IRQHandler+0x4e>
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8008ff8:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8008ffa:	68d9      	ldr	r1, [r3, #12]
 8008ffc:	1c95      	adds	r5, r2, #2
 8008ffe:	62c5      	str	r5, [r0, #44]	; 0x2c
 8009000:	8011      	strh	r1, [r2, #0]
  hi2s->RxXferCount--;
 8009002:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 8009004:	3a01      	subs	r2, #1
 8009006:	b292      	uxth	r2, r2
 8009008:	8642      	strh	r2, [r0, #50]	; 0x32
  if(hi2s->RxXferCount == 0U)
 800900a:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 800900c:	b292      	uxth	r2, r2
 800900e:	b952      	cbnz	r2, 8009026 <I2S_IRQHandler+0x4e>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8009010:	685a      	ldr	r2, [r3, #4]
 8009012:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8009016:	0412      	lsls	r2, r2, #16
 8009018:	0c12      	lsrs	r2, r2, #16
 800901a:	605a      	str	r2, [r3, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 800901c:	2301      	movs	r3, #1
 800901e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2S_RxCpltCallback(hi2s);
 8009022:	f7fe f96f 	bl	8007304 <HAL_I2S_RxCpltCallback>
    {
      I2S_Receive_IT(hi2s);
    }

    /* I2S Overrun error interrupt occured -------------------------------------*/
    if(((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8009026:	9b01      	ldr	r3, [sp, #4]
 8009028:	0659      	lsls	r1, r3, #25
 800902a:	d51a      	bpl.n	8009062 <I2S_IRQHandler+0x8a>
 800902c:	6823      	ldr	r3, [r4, #0]
 800902e:	685a      	ldr	r2, [r3, #4]
 8009030:	0692      	lsls	r2, r2, #26
 8009032:	d516      	bpl.n	8009062 <I2S_IRQHandler+0x8a>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8009034:	685a      	ldr	r2, [r3, #4]
 8009036:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800903a:	0412      	lsls	r2, r2, #16
 800903c:	0c12      	lsrs	r2, r2, #16
 800903e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8009040:	2200      	movs	r2, #0
 8009042:	9202      	str	r2, [sp, #8]
 8009044:	68da      	ldr	r2, [r3, #12]
 8009046:	9202      	str	r2, [sp, #8]
 8009048:	689b      	ldr	r3, [r3, #8]
 800904a:	9302      	str	r3, [sp, #8]
 800904c:	9b02      	ldr	r3, [sp, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800904e:	2301      	movs	r3, #1
 8009050:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode,HAL_I2S_ERROR_OVR);
 8009054:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009056:	f043 0302 	orr.w	r3, r3, #2
 800905a:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 800905c:	4620      	mov	r0, r4
 800905e:	f7ff ff40 	bl	8008ee2 <HAL_I2S_ErrorCallback>
      }
    }

    if(hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8009062:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8009066:	2b03      	cmp	r3, #3
 8009068:	d13a      	bne.n	80090e0 <I2S_IRQHandler+0x108>
    {
      /* I2S in mode Transmitter -----------------------------------------------*/
    if(((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800906a:	9b01      	ldr	r3, [sp, #4]
 800906c:	079d      	lsls	r5, r3, #30
 800906e:	d51b      	bpl.n	80090a8 <I2S_IRQHandler+0xd0>
 8009070:	6822      	ldr	r2, [r4, #0]
 8009072:	6853      	ldr	r3, [r2, #4]
 8009074:	0618      	lsls	r0, r3, #24
 8009076:	d517      	bpl.n	80090a8 <I2S_IRQHandler+0xd0>
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8009078:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800907a:	1c99      	adds	r1, r3, #2
 800907c:	881b      	ldrh	r3, [r3, #0]
 800907e:	6261      	str	r1, [r4, #36]	; 0x24
 8009080:	60d3      	str	r3, [r2, #12]
  hi2s->TxXferCount--;
 8009082:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009084:	3b01      	subs	r3, #1
 8009086:	b29b      	uxth	r3, r3
 8009088:	8563      	strh	r3, [r4, #42]	; 0x2a
  if(hi2s->TxXferCount == 0U)
 800908a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800908c:	b29b      	uxth	r3, r3
 800908e:	b95b      	cbnz	r3, 80090a8 <I2S_IRQHandler+0xd0>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8009090:	6853      	ldr	r3, [r2, #4]
 8009092:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009096:	041b      	lsls	r3, r3, #16
 8009098:	0c1b      	lsrs	r3, r3, #16
 800909a:	6053      	str	r3, [r2, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 800909c:	2301      	movs	r3, #1
 800909e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    HAL_I2S_TxCpltCallback(hi2s);
 80090a2:	4620      	mov	r0, r4
 80090a4:	f7ff ff03 	bl	8008eae <HAL_I2S_TxCpltCallback>
      {
        I2S_Transmit_IT(hi2s);
      }

      /* I2S Underrun error interrupt occurred --------------------------------*/
    if(((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80090a8:	9b01      	ldr	r3, [sp, #4]
 80090aa:	0719      	lsls	r1, r3, #28
 80090ac:	d518      	bpl.n	80090e0 <I2S_IRQHandler+0x108>
 80090ae:	6823      	ldr	r3, [r4, #0]
 80090b0:	685a      	ldr	r2, [r3, #4]
 80090b2:	0692      	lsls	r2, r2, #26
 80090b4:	d514      	bpl.n	80090e0 <I2S_IRQHandler+0x108>
      {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80090b6:	685a      	ldr	r2, [r3, #4]
 80090b8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80090bc:	0412      	lsls	r2, r2, #16
 80090be:	0c12      	lsrs	r2, r2, #16
 80090c0:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80090c2:	2200      	movs	r2, #0
 80090c4:	9203      	str	r2, [sp, #12]
 80090c6:	689b      	ldr	r3, [r3, #8]
 80090c8:	9303      	str	r3, [sp, #12]
 80090ca:	9b03      	ldr	r3, [sp, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80090cc:	2301      	movs	r3, #1
 80090ce:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80090d2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80090d4:	f043 0304 	orr.w	r3, r3, #4
 80090d8:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 80090da:	4620      	mov	r0, r4
 80090dc:	f7ff ff01 	bl	8008ee2 <HAL_I2S_ErrorCallback>
    }
  }
}
 80090e0:	b005      	add	sp, #20
 80090e2:	bd30      	pop	{r4, r5, pc}

080090e4 <I2S_DMAError>:
  I2S_HandleTypeDef* hi2s = (I2S_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 80090e4:	6b80      	ldr	r0, [r0, #56]	; 0x38
  CLEAR_BIT(hi2s->Instance->CR2,(SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80090e6:	6802      	ldr	r2, [r0, #0]
{
 80090e8:	b508      	push	{r3, lr}
  CLEAR_BIT(hi2s->Instance->CR2,(SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80090ea:	6853      	ldr	r3, [r2, #4]
 80090ec:	f023 0303 	bic.w	r3, r3, #3
 80090f0:	6053      	str	r3, [r2, #4]
  hi2s->TxXferCount = 0U;
 80090f2:	2300      	movs	r3, #0
 80090f4:	8543      	strh	r3, [r0, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 80090f6:	8643      	strh	r3, [r0, #50]	; 0x32
  hi2s->State= HAL_I2S_STATE_READY;
 80090f8:	2301      	movs	r3, #1
 80090fa:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  SET_BIT(hi2s->ErrorCode,HAL_I2S_ERROR_DMA);
 80090fe:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8009100:	f043 0308 	orr.w	r3, r3, #8
 8009104:	6443      	str	r3, [r0, #68]	; 0x44
  HAL_I2S_ErrorCallback(hi2s);
 8009106:	f7ff feec 	bl	8008ee2 <HAL_I2S_ErrorCallback>
}
 800910a:	bd08      	pop	{r3, pc}

0800910c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800910c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009110:	460d      	mov	r5, r1
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009112:	4604      	mov	r4, r0
 8009114:	b910      	cbnz	r0, 800911c <HAL_RCC_ClockConfig+0x10>
  {
    return HAL_ERROR;
 8009116:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);

  return HAL_OK;
}
 8009118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800911c:	4b43      	ldr	r3, [pc, #268]	; (800922c <HAL_RCC_ClockConfig+0x120>)
 800911e:	681a      	ldr	r2, [r3, #0]
 8009120:	f002 020f 	and.w	r2, r2, #15
 8009124:	428a      	cmp	r2, r1
 8009126:	d327      	bcc.n	8009178 <HAL_RCC_ClockConfig+0x6c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009128:	6821      	ldr	r1, [r4, #0]
 800912a:	078f      	lsls	r7, r1, #30
 800912c:	d42c      	bmi.n	8009188 <HAL_RCC_ClockConfig+0x7c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800912e:	07c8      	lsls	r0, r1, #31
 8009130:	d43f      	bmi.n	80091b2 <HAL_RCC_ClockConfig+0xa6>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009132:	4b3e      	ldr	r3, [pc, #248]	; (800922c <HAL_RCC_ClockConfig+0x120>)
 8009134:	681a      	ldr	r2, [r3, #0]
 8009136:	f002 020f 	and.w	r2, r2, #15
 800913a:	42aa      	cmp	r2, r5
 800913c:	d864      	bhi.n	8009208 <HAL_RCC_ClockConfig+0xfc>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800913e:	6822      	ldr	r2, [r4, #0]
 8009140:	0751      	lsls	r1, r2, #29
 8009142:	d46a      	bmi.n	800921a <HAL_RCC_ClockConfig+0x10e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009144:	0713      	lsls	r3, r2, #28
 8009146:	d507      	bpl.n	8009158 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009148:	4a39      	ldr	r2, [pc, #228]	; (8009230 <HAL_RCC_ClockConfig+0x124>)
 800914a:	6921      	ldr	r1, [r4, #16]
 800914c:	6893      	ldr	r3, [r2, #8]
 800914e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8009152:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8009156:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009158:	f000 fbea 	bl	8009930 <HAL_RCC_GetSysClockFreq>
 800915c:	4b34      	ldr	r3, [pc, #208]	; (8009230 <HAL_RCC_ClockConfig+0x124>)
 800915e:	4a35      	ldr	r2, [pc, #212]	; (8009234 <HAL_RCC_ClockConfig+0x128>)
 8009160:	689b      	ldr	r3, [r3, #8]
 8009162:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8009166:	5cd3      	ldrb	r3, [r2, r3]
 8009168:	40d8      	lsrs	r0, r3
 800916a:	4b33      	ldr	r3, [pc, #204]	; (8009238 <HAL_RCC_ClockConfig+0x12c>)
 800916c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800916e:	200d      	movs	r0, #13
 8009170:	f7fe fbbe 	bl	80078f0 <HAL_InitTick>
  return HAL_OK;
 8009174:	2000      	movs	r0, #0
 8009176:	e7cf      	b.n	8009118 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009178:	b2ca      	uxtb	r2, r1
 800917a:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f003 030f 	and.w	r3, r3, #15
 8009182:	428b      	cmp	r3, r1
 8009184:	d1c7      	bne.n	8009116 <HAL_RCC_ClockConfig+0xa>
 8009186:	e7cf      	b.n	8009128 <HAL_RCC_ClockConfig+0x1c>
 8009188:	4b29      	ldr	r3, [pc, #164]	; (8009230 <HAL_RCC_ClockConfig+0x124>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800918a:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800918e:	bf1e      	ittt	ne
 8009190:	689a      	ldrne	r2, [r3, #8]
 8009192:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8009196:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009198:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800919a:	bf42      	ittt	mi
 800919c:	689a      	ldrmi	r2, [r3, #8]
 800919e:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 80091a2:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80091a4:	689a      	ldr	r2, [r3, #8]
 80091a6:	68a0      	ldr	r0, [r4, #8]
 80091a8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80091ac:	4302      	orrs	r2, r0
 80091ae:	609a      	str	r2, [r3, #8]
 80091b0:	e7bd      	b.n	800912e <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80091b2:	6862      	ldr	r2, [r4, #4]
 80091b4:	4b1e      	ldr	r3, [pc, #120]	; (8009230 <HAL_RCC_ClockConfig+0x124>)
 80091b6:	2a01      	cmp	r2, #1
 80091b8:	d11c      	bne.n	80091f4 <HAL_RCC_ClockConfig+0xe8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80091c0:	d0a9      	beq.n	8009116 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80091c2:	4e1b      	ldr	r6, [pc, #108]	; (8009230 <HAL_RCC_ClockConfig+0x124>)
 80091c4:	68b3      	ldr	r3, [r6, #8]
 80091c6:	f023 0303 	bic.w	r3, r3, #3
 80091ca:	4313      	orrs	r3, r2
 80091cc:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80091ce:	f7fe fbd7 	bl	8007980 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80091d2:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80091d6:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80091d8:	68b3      	ldr	r3, [r6, #8]
 80091da:	6862      	ldr	r2, [r4, #4]
 80091dc:	f003 030c 	and.w	r3, r3, #12
 80091e0:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80091e4:	d0a5      	beq.n	8009132 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80091e6:	f7fe fbcb 	bl	8007980 <HAL_GetTick>
 80091ea:	1bc0      	subs	r0, r0, r7
 80091ec:	4540      	cmp	r0, r8
 80091ee:	d9f3      	bls.n	80091d8 <HAL_RCC_ClockConfig+0xcc>
        return HAL_TIMEOUT;
 80091f0:	2003      	movs	r0, #3
 80091f2:	e791      	b.n	8009118 <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80091f4:	1e91      	subs	r1, r2, #2
 80091f6:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80091f8:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80091fa:	d802      	bhi.n	8009202 <HAL_RCC_ClockConfig+0xf6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80091fc:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8009200:	e7de      	b.n	80091c0 <HAL_RCC_ClockConfig+0xb4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009202:	f013 0f02 	tst.w	r3, #2
 8009206:	e7db      	b.n	80091c0 <HAL_RCC_ClockConfig+0xb4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009208:	b2ea      	uxtb	r2, r5
 800920a:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	f003 030f 	and.w	r3, r3, #15
 8009212:	42ab      	cmp	r3, r5
 8009214:	f47f af7f 	bne.w	8009116 <HAL_RCC_ClockConfig+0xa>
 8009218:	e791      	b.n	800913e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800921a:	4905      	ldr	r1, [pc, #20]	; (8009230 <HAL_RCC_ClockConfig+0x124>)
 800921c:	68e0      	ldr	r0, [r4, #12]
 800921e:	688b      	ldr	r3, [r1, #8]
 8009220:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8009224:	4303      	orrs	r3, r0
 8009226:	608b      	str	r3, [r1, #8]
 8009228:	e78c      	b.n	8009144 <HAL_RCC_ClockConfig+0x38>
 800922a:	bf00      	nop
 800922c:	40023c00 	.word	0x40023c00
 8009230:	40023800 	.word	0x40023800
 8009234:	08019498 	.word	0x08019498
 8009238:	20000184 	.word	0x20000184

0800923c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800923c:	4b04      	ldr	r3, [pc, #16]	; (8009250 <HAL_RCC_GetPCLK1Freq+0x14>)
 800923e:	4a05      	ldr	r2, [pc, #20]	; (8009254 <HAL_RCC_GetPCLK1Freq+0x18>)
 8009240:	689b      	ldr	r3, [r3, #8]
 8009242:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8009246:	5cd3      	ldrb	r3, [r2, r3]
 8009248:	4a03      	ldr	r2, [pc, #12]	; (8009258 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800924a:	6810      	ldr	r0, [r2, #0]
}
 800924c:	40d8      	lsrs	r0, r3
 800924e:	4770      	bx	lr
 8009250:	40023800 	.word	0x40023800
 8009254:	080194a8 	.word	0x080194a8
 8009258:	20000184 	.word	0x20000184

0800925c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800925c:	4b04      	ldr	r3, [pc, #16]	; (8009270 <HAL_RCC_GetPCLK2Freq+0x14>)
 800925e:	4a05      	ldr	r2, [pc, #20]	; (8009274 <HAL_RCC_GetPCLK2Freq+0x18>)
 8009260:	689b      	ldr	r3, [r3, #8]
 8009262:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8009266:	5cd3      	ldrb	r3, [r2, r3]
 8009268:	4a03      	ldr	r2, [pc, #12]	; (8009278 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800926a:	6810      	ldr	r0, [r2, #0]
}
 800926c:	40d8      	lsrs	r0, r3
 800926e:	4770      	bx	lr
 8009270:	40023800 	.word	0x40023800
 8009274:	080194a8 	.word	0x080194a8
 8009278:	20000184 	.word	0x20000184

0800927c <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 800927c:	6803      	ldr	r3, [r0, #0]
{
 800927e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8009282:	f013 0601 	ands.w	r6, r3, #1
{
 8009286:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8009288:	d00b      	beq.n	80092a2 <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800928a:	49aa      	ldr	r1, [pc, #680]	; (8009534 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800928c:	6b86      	ldr	r6, [r0, #56]	; 0x38
 800928e:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8009292:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 8009296:	4332      	orrs	r2, r6
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8009298:	fab6 f686 	clz	r6, r6
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800929c:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80092a0:	0976      	lsrs	r6, r6, #5
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80092a2:	079d      	lsls	r5, r3, #30
 80092a4:	d50b      	bpl.n	80092be <HAL_RCCEx_PeriphCLKConfig+0x42>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80092a6:	48a3      	ldr	r0, [pc, #652]	; (8009534 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80092a8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80092aa:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 80092ae:	f022 52c0 	bic.w	r2, r2, #402653184	; 0x18000000
 80092b2:	430a      	orrs	r2, r1
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
    {
      plli2sused = 1U;
 80092b4:	2900      	cmp	r1, #0
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80092b6:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
      plli2sused = 1U;
 80092ba:	bf08      	it	eq
 80092bc:	2601      	moveq	r6, #1
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80092be:	f013 0504 	ands.w	r5, r3, #4
 80092c2:	d012      	beq.n	80092ea <HAL_RCCEx_PeriphCLKConfig+0x6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80092c4:	499b      	ldr	r1, [pc, #620]	; (8009534 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80092c6:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80092c8:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80092cc:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80092d0:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80092d4:	ea42 0205 	orr.w	r2, r2, r5
    {
      plli2sused = 1U;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80092d8:	bf18      	it	ne
 80092da:	fab5 f585 	clzne	r5, r5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80092de:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80092e2:	bf12      	itee	ne
 80092e4:	096d      	lsrne	r5, r5, #5
  uint32_t pllsaiused = 0U;
 80092e6:	2500      	moveq	r5, #0
      plli2sused = 1U;
 80092e8:	2601      	moveq	r6, #1
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80092ea:	0718      	lsls	r0, r3, #28
 80092ec:	d50f      	bpl.n	800930e <HAL_RCCEx_PeriphCLKConfig+0x92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80092ee:	4891      	ldr	r0, [pc, #580]	; (8009534 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80092f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80092f2:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 80092f6:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80092fa:	430a      	orrs	r2, r1

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80092fc:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8009300:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8009304:	f000 8109 	beq.w	800951a <HAL_RCCEx_PeriphCLKConfig+0x29e>
      plli2sused = 1U;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1U;
 8009308:	2900      	cmp	r1, #0
 800930a:	bf08      	it	eq
 800930c:	2501      	moveq	r5, #1
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800930e:	0699      	lsls	r1, r3, #26
 8009310:	d533      	bpl.n	800937a <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8009312:	2300      	movs	r3, #0
 8009314:	9301      	str	r3, [sp, #4]
 8009316:	4b87      	ldr	r3, [pc, #540]	; (8009534 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8009318:	4f87      	ldr	r7, [pc, #540]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 800931a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800931c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8009320:	641a      	str	r2, [r3, #64]	; 0x40
 8009322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009324:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009328:	9301      	str	r3, [sp, #4]
 800932a:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009332:	603b      	str	r3, [r7, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009334:	f7fe fb24 	bl	8007980 <HAL_GetTick>
 8009338:	4680      	mov	r8, r0

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	05da      	lsls	r2, r3, #23
 800933e:	f140 80ee 	bpl.w	800951e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
      {
        return HAL_TIMEOUT;
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009342:	4f7c      	ldr	r7, [pc, #496]	; (8009534 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8009344:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009346:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800934a:	f040 80fb 	bne.w	8009544 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800934e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009350:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8009354:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8009358:	4a76      	ldr	r2, [pc, #472]	; (8009534 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800935a:	f040 8116 	bne.w	800958a <HAL_RCCEx_PeriphCLKConfig+0x30e>
 800935e:	6891      	ldr	r1, [r2, #8]
 8009360:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8009364:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8009368:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 800936c:	4301      	orrs	r1, r0
 800936e:	6091      	str	r1, [r2, #8]
 8009370:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8009372:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009376:	430b      	orrs	r3, r1
 8009378:	6713      	str	r3, [r2, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800937a:	6823      	ldr	r3, [r4, #0]
 800937c:	06d9      	lsls	r1, r3, #27
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800937e:	bf42      	ittt	mi
 8009380:	4b6e      	ldrmi	r3, [pc, #440]	; (800953c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8009382:	f894 2058 	ldrbmi.w	r2, [r4, #88]	; 0x58
 8009386:	601a      	strmi	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8009388:	6823      	ldr	r3, [r4, #0]
 800938a:	061a      	lsls	r2, r3, #24
 800938c:	d508      	bpl.n	80093a0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 800938e:	4969      	ldr	r1, [pc, #420]	; (8009534 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8009390:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8009392:	f8d1 2094 	ldr.w	r2, [r1, #148]	; 0x94
 8009396:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800939a:	4302      	orrs	r2, r0
 800939c:	f8c1 2094 	str.w	r2, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80093a0:	065f      	lsls	r7, r3, #25
 80093a2:	d508      	bpl.n	80093b6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80093a4:	4963      	ldr	r1, [pc, #396]	; (8009534 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80093a6:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80093a8:	f8d1 2094 	ldr.w	r2, [r1, #148]	; 0x94
 80093ac:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80093b0:	4302      	orrs	r2, r0
 80093b2:	f8c1 2094 	str.w	r2, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80093b6:	05d8      	lsls	r0, r3, #23
 80093b8:	d50c      	bpl.n	80093d4 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80093ba:	485e      	ldr	r0, [pc, #376]	; (8009534 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80093bc:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80093be:	f8d0 2094 	ldr.w	r2, [r0, #148]	; 0x94
 80093c2:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
 80093c6:	430a      	orrs	r2, r1

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
    {
      pllsaiused = 1U;
 80093c8:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80093cc:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
      pllsaiused = 1U;
 80093d0:	bf08      	it	eq
 80093d2:	2501      	moveq	r5, #1
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80093d4:	0599      	lsls	r1, r3, #22
 80093d6:	d508      	bpl.n	80093ea <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80093d8:	4956      	ldr	r1, [pc, #344]	; (8009534 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80093da:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80093dc:	f8d1 2094 	ldr.w	r2, [r1, #148]	; 0x94
 80093e0:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80093e4:	4302      	orrs	r2, r0
 80093e6:	f8c1 2094 	str.w	r2, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80093ea:	055a      	lsls	r2, r3, #21
 80093ec:	f100 80d1 	bmi.w	8009592 <HAL_RCCEx_PeriphCLKConfig+0x316>
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80093f0:	2e01      	cmp	r6, #1
 80093f2:	f040 80dc 	bne.w	80095ae <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80093f6:	4e52      	ldr	r6, [pc, #328]	; (8009540 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
    /* Get tick */
    tickstart = HAL_GetTick();
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80093f8:	4f4e      	ldr	r7, [pc, #312]	; (8009534 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
    __HAL_RCC_PLLI2S_DISABLE();
 80093fa:	2300      	movs	r3, #0
 80093fc:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80093fe:	f7fe fabf 	bl	8007980 <HAL_GetTick>
 8009402:	4680      	mov	r8, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	011b      	lsls	r3, r3, #4
 8009408:	f100 8125 	bmi.w	8009656 <HAL_RCCEx_PeriphCLKConfig+0x3da>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800940c:	6822      	ldr	r2, [r4, #0]
 800940e:	07d0      	lsls	r0, r2, #31
 8009410:	d501      	bpl.n	8009416 <HAL_RCCEx_PeriphCLKConfig+0x19a>
 8009412:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009414:	b11b      	cbz	r3, 800941e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8009416:	0791      	lsls	r1, r2, #30
 8009418:	d515      	bpl.n	8009446 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800941a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800941c:	b99b      	cbnz	r3, 8009446 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800941e:	4945      	ldr	r1, [pc, #276]	; (8009534 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8009420:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009424:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8009428:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800942c:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 8009430:	4303      	orrs	r3, r0
 8009432:	6860      	ldr	r0, [r4, #4]
 8009434:	4303      	orrs	r3, r0
 8009436:	68a0      	ldr	r0, [r4, #8]
 8009438:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800943c:	6960      	ldr	r0, [r4, #20]
 800943e:	ea43 7300 	orr.w	r3, r3, r0, lsl #28
 8009442:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009446:	0753      	lsls	r3, r2, #29
 8009448:	d503      	bpl.n	8009452 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
 800944a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800944c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009450:	d005      	beq.n	800945e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009452:	0717      	lsls	r7, r2, #28
 8009454:	d520      	bpl.n	8009498 <HAL_RCCEx_PeriphCLKConfig+0x21c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009456:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009458:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800945c:	d11c      	bne.n	8009498 <HAL_RCCEx_PeriphCLKConfig+0x21c>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800945e:	4935      	ldr	r1, [pc, #212]	; (8009534 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8009460:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009464:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8009468:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800946c:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8009470:	4303      	orrs	r3, r0
 8009472:	6860      	ldr	r0, [r4, #4]
 8009474:	4303      	orrs	r3, r0
 8009476:	68a0      	ldr	r0, [r4, #8]
 8009478:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800947c:	6920      	ldr	r0, [r4, #16]
 800947e:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8009482:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8009486:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 800948a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800948c:	f020 001f 	bic.w	r0, r0, #31
 8009490:	3b01      	subs	r3, #1
 8009492:	4303      	orrs	r3, r0
 8009494:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8009498:	0550      	lsls	r0, r2, #21
 800949a:	d51b      	bpl.n	80094d4 <HAL_RCCEx_PeriphCLKConfig+0x258>
 800949c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800949e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80094a2:	d117      	bne.n	80094d4 <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80094a4:	4823      	ldr	r0, [pc, #140]	; (8009534 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 80094a6:	6867      	ldr	r7, [r4, #4]
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80094a8:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80094ac:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 80094b0:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80094b4:	433b      	orrs	r3, r7
 80094b6:	68a7      	ldr	r7, [r4, #8]
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80094b8:	f3c1 4101 	ubfx	r1, r1, #16, #2
 80094bc:	3101      	adds	r1, #1
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 80094be:	ea43 1387 	orr.w	r3, r3, r7, lsl #6
 80094c2:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 80094c6:	68e1      	ldr	r1, [r4, #12]
 80094c8:	0849      	lsrs	r1, r1, #1
 80094ca:	3901      	subs	r1, #1
 80094cc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80094d0:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80094d4:	0511      	lsls	r1, r2, #20
 80094d6:	d511      	bpl.n	80094fc <HAL_RCCEx_PeriphCLKConfig+0x280>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80094d8:	6923      	ldr	r3, [r4, #16]
 80094da:	68a2      	ldr	r2, [r4, #8]
 80094dc:	061b      	lsls	r3, r3, #24
 80094de:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80094e2:	6862      	ldr	r2, [r4, #4]
 80094e4:	4313      	orrs	r3, r2
 80094e6:	6962      	ldr	r2, [r4, #20]
 80094e8:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80094ec:	68e2      	ldr	r2, [r4, #12]
 80094ee:	0852      	lsrs	r2, r2, #1
 80094f0:	3a01      	subs	r2, #1
 80094f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80094f6:	4a0f      	ldr	r2, [pc, #60]	; (8009534 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80094f8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80094fc:	2301      	movs	r3, #1
 80094fe:	6033      	str	r3, [r6, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009500:	f7fe fa3e 	bl	8007980 <HAL_GetTick>
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009504:	4e0b      	ldr	r6, [pc, #44]	; (8009534 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
    tickstart = HAL_GetTick();
 8009506:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009508:	6833      	ldr	r3, [r6, #0]
 800950a:	011a      	lsls	r2, r3, #4
 800950c:	d453      	bmi.n	80095b6 <HAL_RCCEx_PeriphCLKConfig+0x33a>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800950e:	f7fe fa37 	bl	8007980 <HAL_GetTick>
 8009512:	1bc0      	subs	r0, r0, r7
 8009514:	2802      	cmp	r0, #2
 8009516:	d9f7      	bls.n	8009508 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8009518:	e008      	b.n	800952c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
      plli2sused = 1U;
 800951a:	2601      	movs	r6, #1
 800951c:	e6f7      	b.n	800930e <HAL_RCCEx_PeriphCLKConfig+0x92>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800951e:	f7fe fa2f 	bl	8007980 <HAL_GetTick>
 8009522:	eba0 0008 	sub.w	r0, r0, r8
 8009526:	2802      	cmp	r0, #2
 8009528:	f67f af07 	bls.w	800933a <HAL_RCCEx_PeriphCLKConfig+0xbe>
        return HAL_TIMEOUT;
 800952c:	2003      	movs	r0, #3
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
}
 800952e:	b003      	add	sp, #12
 8009530:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009534:	40023800 	.word	0x40023800
 8009538:	40007000 	.word	0x40007000
 800953c:	424711e0 	.word	0x424711e0
 8009540:	42470068 	.word	0x42470068
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009544:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8009546:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800954a:	429a      	cmp	r2, r3
 800954c:	f43f aeff 	beq.w	800934e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009550:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8009552:	4a4b      	ldr	r2, [pc, #300]	; (8009680 <HAL_RCCEx_PeriphCLKConfig+0x404>)
 8009554:	2101      	movs	r1, #1
 8009556:	6011      	str	r1, [r2, #0]
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009558:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 800955c:	2100      	movs	r1, #0
 800955e:	6011      	str	r1, [r2, #0]
      RCC->BDCR = tmpreg1;
 8009560:	673b      	str	r3, [r7, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8009562:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009564:	07db      	lsls	r3, r3, #31
 8009566:	f57f aef2 	bpl.w	800934e <HAL_RCCEx_PeriphCLKConfig+0xd2>
        tickstart = HAL_GetTick();
 800956a:	f7fe fa09 	bl	8007980 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800956e:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8009572:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009574:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009576:	0798      	lsls	r0, r3, #30
 8009578:	f53f aee9 	bmi.w	800934e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800957c:	f7fe fa00 	bl	8007980 <HAL_GetTick>
 8009580:	eba0 0008 	sub.w	r0, r0, r8
 8009584:	4548      	cmp	r0, r9
 8009586:	d9f5      	bls.n	8009574 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 8009588:	e7d0      	b.n	800952c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800958a:	6891      	ldr	r1, [r2, #8]
 800958c:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8009590:	e6ed      	b.n	800936e <HAL_RCCEx_PeriphCLKConfig+0xf2>
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8009592:	483c      	ldr	r0, [pc, #240]	; (8009684 <HAL_RCCEx_PeriphCLKConfig+0x408>)
 8009594:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8009596:	f8d0 2094 	ldr.w	r2, [r0, #148]	; 0x94
 800959a:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800959e:	430a      	orrs	r2, r1
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80095a0:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80095a4:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80095a8:	f47f af22 	bne.w	80093f0 <HAL_RCCEx_PeriphCLKConfig+0x174>
 80095ac:	e723      	b.n	80093f6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80095ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80095b2:	f43f af20 	beq.w	80093f6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  if(pllsaiused == 1U)
 80095b6:	2d01      	cmp	r5, #1
 80095b8:	d14b      	bne.n	8009652 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
    __HAL_RCC_PLLSAI_DISABLE();
 80095ba:	4d33      	ldr	r5, [pc, #204]	; (8009688 <HAL_RCCEx_PeriphCLKConfig+0x40c>)
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80095bc:	4e31      	ldr	r6, [pc, #196]	; (8009684 <HAL_RCCEx_PeriphCLKConfig+0x408>)
    __HAL_RCC_PLLSAI_DISABLE();
 80095be:	2300      	movs	r3, #0
 80095c0:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 80095c2:	f7fe f9dd 	bl	8007980 <HAL_GetTick>
 80095c6:	4607      	mov	r7, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80095c8:	6833      	ldr	r3, [r6, #0]
 80095ca:	009b      	lsls	r3, r3, #2
 80095cc:	d44b      	bmi.n	8009666 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80095ce:	6821      	ldr	r1, [r4, #0]
 80095d0:	074e      	lsls	r6, r1, #29
 80095d2:	d501      	bpl.n	80095d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80095d4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80095d6:	b11b      	cbz	r3, 80095e0 <HAL_RCCEx_PeriphCLKConfig+0x364>
 80095d8:	0708      	lsls	r0, r1, #28
 80095da:	d51a      	bpl.n	8009612 <HAL_RCCEx_PeriphCLKConfig+0x396>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80095dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80095de:	b9c3      	cbnz	r3, 8009612 <HAL_RCCEx_PeriphCLKConfig+0x396>
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80095e0:	4a28      	ldr	r2, [pc, #160]	; (8009684 <HAL_RCCEx_PeriphCLKConfig+0x408>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80095e2:	69a0      	ldr	r0, [r4, #24]
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80095e4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80095e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80095ec:	4303      	orrs	r3, r0
 80095ee:	69e0      	ldr	r0, [r4, #28]
 80095f0:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80095f4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80095f6:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80095fa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80095fe:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8009602:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8009604:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8009608:	3801      	subs	r0, #1
 800960a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800960e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8009612:	05ca      	lsls	r2, r1, #23
 8009614:	d514      	bpl.n	8009640 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8009616:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8009618:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800961c:	d110      	bne.n	8009640 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800961e:	4919      	ldr	r1, [pc, #100]	; (8009684 <HAL_RCCEx_PeriphCLKConfig+0x408>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8009620:	69a2      	ldr	r2, [r4, #24]
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009622:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8009626:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 800962a:	4313      	orrs	r3, r2
 800962c:	69e2      	ldr	r2, [r4, #28]
 800962e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8009632:	6a22      	ldr	r2, [r4, #32]
 8009634:	0852      	lsrs	r2, r2, #1
 8009636:	3a01      	subs	r2, #1
 8009638:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800963c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    __HAL_RCC_PLLSAI_ENABLE();
 8009640:	2301      	movs	r3, #1
 8009642:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8009644:	f7fe f99c 	bl	8007980 <HAL_GetTick>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009648:	4c0e      	ldr	r4, [pc, #56]	; (8009684 <HAL_RCCEx_PeriphCLKConfig+0x408>)
    tickstart = HAL_GetTick();
 800964a:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800964c:	6823      	ldr	r3, [r4, #0]
 800964e:	009b      	lsls	r3, r3, #2
 8009650:	d50f      	bpl.n	8009672 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
  return HAL_OK;
 8009652:	2000      	movs	r0, #0
 8009654:	e76b      	b.n	800952e <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009656:	f7fe f993 	bl	8007980 <HAL_GetTick>
 800965a:	eba0 0008 	sub.w	r0, r0, r8
 800965e:	2802      	cmp	r0, #2
 8009660:	f67f aed0 	bls.w	8009404 <HAL_RCCEx_PeriphCLKConfig+0x188>
 8009664:	e762      	b.n	800952c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8009666:	f7fe f98b 	bl	8007980 <HAL_GetTick>
 800966a:	1bc0      	subs	r0, r0, r7
 800966c:	2802      	cmp	r0, #2
 800966e:	d9ab      	bls.n	80095c8 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8009670:	e75c      	b.n	800952c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8009672:	f7fe f985 	bl	8007980 <HAL_GetTick>
 8009676:	1b40      	subs	r0, r0, r5
 8009678:	2802      	cmp	r0, #2
 800967a:	d9e7      	bls.n	800964c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800967c:	e756      	b.n	800952c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800967e:	bf00      	nop
 8009680:	42470e40 	.word	0x42470e40
 8009684:	40023800 	.word	0x40023800
 8009688:	42470070 	.word	0x42470070

0800968c <HAL_RCCEx_GetPeriphCLKConfig>:
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
  uint32_t tempreg;

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S_APB1 | RCC_PERIPHCLK_I2S_APB2 |\
 800968c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8009690:	6003      	str	r3, [r0, #0]
                                        RCC_PERIPHCLK_CEC      | RCC_PERIPHCLK_FMPI2C1  |\
                                        RCC_PERIPHCLK_CLK48     | RCC_PERIPHCLK_SDIO     |\
                                        RCC_PERIPHCLK_SPDIFRX;

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM) >> RCC_PLLI2SCFGR_PLLI2SM_Pos);
 8009692:	4b3d      	ldr	r3, [pc, #244]	; (8009788 <HAL_RCCEx_GetPeriphCLKConfig+0xfc>)
 8009694:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8009698:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800969c:	6042      	str	r2, [r0, #4]
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 800969e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80096a2:	f3c2 1288 	ubfx	r2, r2, #6, #9
 80096a6:	6082      	str	r2, [r0, #8]
  PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80096a8:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80096ac:	f3c2 4201 	ubfx	r2, r2, #16, #2
 80096b0:	3201      	adds	r2, #1
 80096b2:	0052      	lsls	r2, r2, #1
 80096b4:	60c2      	str	r2, [r0, #12]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80096b6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80096ba:	f3c2 6203 	ubfx	r2, r2, #24, #4
 80096be:	6102      	str	r2, [r0, #16]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80096c0:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80096c4:	f3c2 7202 	ubfx	r2, r2, #28, #3
 80096c8:	6142      	str	r2, [r0, #20]
  /* Get the PLLSAI Clock configuration --------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIM = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM) >> RCC_PLLSAICFGR_PLLSAIM_Pos);
 80096ca:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80096ce:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80096d2:	6182      	str	r2, [r0, #24]
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> RCC_PLLSAICFGR_PLLSAIN_Pos);
 80096d4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80096d8:	f3c2 1288 	ubfx	r2, r2, #6, #9
 80096dc:	61c2      	str	r2, [r0, #28]
  PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80096de:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80096e2:	f3c2 4201 	ubfx	r2, r2, #16, #2
 80096e6:	3201      	adds	r2, #1
 80096e8:	0052      	lsls	r2, r2, #1
 80096ea:	6202      	str	r2, [r0, #32]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80096ec:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80096f0:	f3c2 6203 	ubfx	r2, r2, #24, #4
 80096f4:	6242      	str	r2, [r0, #36]	; 0x24
  /* Get the PLLSAI/PLLI2S division factors ----------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) >> RCC_DCKCFGR_PLLI2SDIVQ_Pos);
 80096f6:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80096fa:	f002 021f 	and.w	r2, r2, #31
 80096fe:	6282      	str	r2, [r0, #40]	; 0x28
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> RCC_DCKCFGR_PLLSAIDIVQ_Pos);
 8009700:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8009704:	f3c2 2204 	ubfx	r2, r2, #8, #5
 8009708:	62c2      	str	r2, [r0, #44]	; 0x2c

  /* Get the SAI1 clock configuration ----------------------------------------*/
  PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
 800970a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800970e:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 8009712:	6302      	str	r2, [r0, #48]	; 0x30

  /* Get the SAI2 clock configuration ----------------------------------------*/
  PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
 8009714:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8009718:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
 800971c:	6342      	str	r2, [r0, #52]	; 0x34

  /* Get the I2S APB1 clock configuration ------------------------------------*/
  PeriphClkInit->I2sApb1ClockSelection = __HAL_RCC_GET_I2S_APB1_SOURCE();
 800971e:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8009722:	f002 62c0 	and.w	r2, r2, #100663296	; 0x6000000
 8009726:	6382      	str	r2, [r0, #56]	; 0x38

  /* Get the I2S APB2 clock configuration ------------------------------------*/
  PeriphClkInit->I2sApb2ClockSelection = __HAL_RCC_GET_I2S_APB2_SOURCE();
 8009728:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800972c:	f002 52c0 	and.w	r2, r2, #402653184	; 0x18000000
 8009730:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8009732:	6899      	ldr	r1, [r3, #8]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8009734:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8009736:	f401 11f8 	and.w	r1, r1, #2031616	; 0x1f0000
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 800973a:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800973e:	430a      	orrs	r2, r1
 8009740:	6402      	str	r2, [r0, #64]	; 0x40

  /* Get the CEC clock configuration -----------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
 8009742:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8009746:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 800974a:	6482      	str	r2, [r0, #72]	; 0x48

  /* Get the FMPI2C1 clock configuration -------------------------------------*/
  PeriphClkInit->Fmpi2c1ClockSelection = __HAL_RCC_GET_FMPI2C1_SOURCE();
 800974c:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8009750:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
 8009754:	64c2      	str	r2, [r0, #76]	; 0x4c

  /* Get the CLK48 clock configuration ----------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
 8009756:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800975a:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800975e:	6542      	str	r2, [r0, #84]	; 0x54

  /* Get the SDIO clock configuration ----------------------------------------*/
  PeriphClkInit->SdioClockSelection = __HAL_RCC_GET_SDIO_SOURCE();
 8009760:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8009764:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8009768:	6442      	str	r2, [r0, #68]	; 0x44

  /* Get the SPDIFRX clock configuration -------------------------------------*/
  PeriphClkInit->SpdifClockSelection = __HAL_RCC_GET_SPDIFRX_SOURCE();
 800976a:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800976e:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 8009772:	6502      	str	r2, [r0, #80]	; 0x50

  /* Get the TIM Prescaler configuration -------------------------------------*/
  if ((RCC->DCKCFGR & RCC_DCKCFGR_TIMPRE) == RESET)
 8009774:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009778:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 800977c:	bf18      	it	ne
 800977e:	2301      	movne	r3, #1
 8009780:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
  }
}
 8009784:	4770      	bx	lr
 8009786:	bf00      	nop
 8009788:	40023800 	.word	0x40023800

0800978c <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable used to store the SAI clock source */
  uint32_t saiclocksource = 0U;
  uint32_t srcclk = 0U;
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
  switch (PeriphClk)
 800978c:	3801      	subs	r0, #1
 800978e:	2807      	cmp	r0, #7
 8009790:	d817      	bhi.n	80097c2 <HAL_RCCEx_GetPeriphCLKFreq+0x36>
 8009792:	e8df f000 	tbb	[pc, r0]
 8009796:	a57a      	.short	0xa57a
 8009798:	16160416 	.word	0x16160416
 800979c:	0416      	.short	0x0416
  {
  case RCC_PERIPHCLK_SAI1:
  case RCC_PERIPHCLK_SAI2:
    {
      saiclocksource = RCC->DCKCFGR;
 800979e:	4a60      	ldr	r2, [pc, #384]	; (8009920 <HAL_RCCEx_GetPeriphCLKFreq+0x194>)
 80097a0:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
      saiclocksource &= (RCC_DCKCFGR_SAI1SRC | RCC_DCKCFGR_SAI2SRC);
 80097a4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
      switch (saiclocksource)
 80097a8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80097ac:	4611      	mov	r1, r2
 80097ae:	f000 80b4 	beq.w	800991a <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
 80097b2:	d808      	bhi.n	80097c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80097b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80097b8:	d00e      	beq.n	80097d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>
 80097ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80097be:	d047      	beq.n	8009850 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
 80097c0:	b333      	cbz	r3, 8009810 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
          break;
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80097c2:	2000      	movs	r0, #0
 80097c4:	4770      	bx	lr
      switch (saiclocksource)
 80097c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80097ca:	d041      	beq.n	8009850 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
 80097cc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80097d0:	d053      	beq.n	800987a <HAL_RCCEx_GetPeriphCLKFreq+0xee>
 80097d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80097d6:	d1f4      	bne.n	80097c2 <HAL_RCCEx_GetPeriphCLKFreq+0x36>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80097d8:	684b      	ldr	r3, [r1, #4]
          tmpreg1 = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 80097da:	4a51      	ldr	r2, [pc, #324]	; (8009920 <HAL_RCCEx_GetPeriphCLKFreq+0x194>)
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80097dc:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
          tmpreg1 = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 80097e0:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80097e4:	025b      	lsls	r3, r3, #9
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80097e6:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 80097ea:	bf54      	ite	pl
 80097ec:	4b4d      	ldrpl	r3, [pc, #308]	; (8009924 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM)));
 80097ee:	4b4e      	ldrmi	r3, [pc, #312]	; (8009928 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>)
 80097f0:	fbb3 f3f0 	udiv	r3, r3, r0
          frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U))/(tmpreg1);
 80097f4:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
 80097f8:	f3c0 1088 	ubfx	r0, r0, #6, #9
 80097fc:	4358      	muls	r0, r3
          tmpreg1 = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 80097fe:	f3c1 6303 	ubfx	r3, r1, #24, #4
          frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U))/(tmpreg1);
 8009802:	fbb0 f0f3 	udiv	r0, r0, r3
          tmpreg1 = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 8009806:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800980a:	f003 031f 	and.w	r3, r3, #31
 800980e:	e01b      	b.n	8009848 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8009810:	6853      	ldr	r3, [r2, #4]
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM));
 8009812:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8009816:	025a      	lsls	r2, r3, #9
          tmpreg1 = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 8009818:	4a41      	ldr	r2, [pc, #260]	; (8009920 <HAL_RCCEx_GetPeriphCLKFreq+0x194>)
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM));
 800981a:	bf58      	it	pl
 800981c:	4b41      	ldrpl	r3, [pc, #260]	; (8009924 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
          tmpreg1 = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 800981e:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM)));
 8009822:	bf48      	it	mi
 8009824:	4b40      	ldrmi	r3, [pc, #256]	; (8009928 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>)
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM));
 8009826:	f000 003f 	and.w	r0, r0, #63	; 0x3f
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM)));
 800982a:	fbb3 f3f0 	udiv	r3, r3, r0
          frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U))/(tmpreg1);
 800982e:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
 8009832:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8009836:	4358      	muls	r0, r3
          tmpreg1 = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 8009838:	f3c1 6303 	ubfx	r3, r1, #24, #4
          frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U))/(tmpreg1);
 800983c:	fbb0 f0f3 	udiv	r0, r0, r3
          tmpreg1 = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 8009840:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8009844:	f3c3 2304 	ubfx	r3, r3, #8, #5
          tmpreg1 = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 8009848:	3301      	adds	r3, #1
          frequency = frequency/(tmpreg1);
 800984a:	fbb0 f0f3 	udiv	r0, r0, r3
          break;
 800984e:	4770      	bx	lr
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8009850:	684b      	ldr	r3, [r1, #4]
          tmpreg1 = (RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U;
 8009852:	4a33      	ldr	r2, [pc, #204]	; (8009920 <HAL_RCCEx_GetPeriphCLKFreq+0x194>)
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8009854:	6848      	ldr	r0, [r1, #4]
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8009856:	0259      	lsls	r1, r3, #9
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8009858:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800985c:	bf54      	ite	pl
 800985e:	4b31      	ldrpl	r3, [pc, #196]	; (8009924 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8009860:	4b31      	ldrmi	r3, [pc, #196]	; (8009928 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>)
 8009862:	fbb3 f3f0 	udiv	r3, r3, r0
          tmpreg1 = (RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U;
 8009866:	6850      	ldr	r0, [r2, #4]
          frequency = (vcoinput * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U))/(tmpreg1);
 8009868:	6852      	ldr	r2, [r2, #4]
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800986a:	f3c2 1288 	ubfx	r2, r2, #6, #9
 800986e:	4353      	muls	r3, r2
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8009870:	f3c0 7002 	ubfx	r0, r0, #28, #3
 8009874:	fbb3 f0f0 	udiv	r0, r3, r0
          break;
 8009878:	4770      	bx	lr
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800987a:	6853      	ldr	r3, [r2, #4]
            frequency = HSI_VALUE;
 800987c:	482a      	ldr	r0, [pc, #168]	; (8009928 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>)
 800987e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8009882:	4b28      	ldr	r3, [pc, #160]	; (8009924 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8009884:	bf08      	it	eq
 8009886:	4618      	moveq	r0, r3
 8009888:	4770      	bx	lr
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 800988a:	4b25      	ldr	r3, [pc, #148]	; (8009920 <HAL_RCCEx_GetPeriphCLKFreq+0x194>)
 800988c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8009890:	f002 62c0 	and.w	r2, r2, #100663296	; 0x6000000
      switch (srcclk)
 8009894:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
 8009898:	d03f      	beq.n	800991a <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
 800989a:	d80a      	bhi.n	80098b2 <HAL_RCCEx_GetPeriphCLKFreq+0x126>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
      switch (srcclk)
 800989c:	2a00      	cmp	r2, #0
 800989e:	d190      	bne.n	80097c2 <HAL_RCCEx_GetPeriphCLKFreq+0x36>
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80098a0:	685a      	ldr	r2, [r3, #4]
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80098a2:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80098a6:	0252      	lsls	r2, r2, #9
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80098a8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80098ac:	d50f      	bpl.n	80098ce <HAL_RCCEx_GetPeriphCLKFreq+0x142>
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80098ae:	4b1e      	ldr	r3, [pc, #120]	; (8009928 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>)
 80098b0:	e00e      	b.n	80098d0 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
      switch (srcclk)
 80098b2:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 80098b6:	d022      	beq.n	80098fe <HAL_RCCEx_GetPeriphCLKFreq+0x172>
 80098b8:	f1b2 6fc0 	cmp.w	r2, #100663296	; 0x6000000
      switch (srcclk)
 80098bc:	d181      	bne.n	80097c2 <HAL_RCCEx_GetPeriphCLKFreq+0x36>
          break;
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80098be:	685b      	ldr	r3, [r3, #4]
            frequency = (uint32_t)(HSE_VALUE);
 80098c0:	4818      	ldr	r0, [pc, #96]	; (8009924 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80098c2:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80098c6:	4b18      	ldr	r3, [pc, #96]	; (8009928 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>)
 80098c8:	bf18      	it	ne
 80098ca:	4618      	movne	r0, r3
 80098cc:	4770      	bx	lr
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80098ce:	4b15      	ldr	r3, [pc, #84]	; (8009924 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80098d0:	4913      	ldr	r1, [pc, #76]	; (8009920 <HAL_RCCEx_GetPeriphCLKFreq+0x194>)
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80098d2:	fbb3 f3f0 	udiv	r3, r3, r0
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80098d6:	f8d1 2084 	ldr.w	r2, [r1, #132]	; 0x84
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80098da:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
 80098de:	e7c4      	b.n	800986a <HAL_RCCEx_GetPeriphCLKFreq+0xde>
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 80098e0:	4b0f      	ldr	r3, [pc, #60]	; (8009920 <HAL_RCCEx_GetPeriphCLKFreq+0x194>)
 80098e2:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80098e6:	f002 52c0 	and.w	r2, r2, #402653184	; 0x18000000
      switch (srcclk)
 80098ea:	f1b2 6f00 	cmp.w	r2, #134217728	; 0x8000000
 80098ee:	d014      	beq.n	800991a <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
 80098f0:	d9d4      	bls.n	800989c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80098f2:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 80098f6:	d002      	beq.n	80098fe <HAL_RCCEx_GetPeriphCLKFreq+0x172>
 80098f8:	f1b2 5fc0 	cmp.w	r2, #402653184	; 0x18000000
 80098fc:	e7de      	b.n	80098bc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80098fe:	685a      	ldr	r2, [r3, #4]
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8009900:	4907      	ldr	r1, [pc, #28]	; (8009920 <HAL_RCCEx_GetPeriphCLKFreq+0x194>)
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8009902:	6858      	ldr	r0, [r3, #4]
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8009904:	0253      	lsls	r3, r2, #9
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8009906:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800990a:	bf4c      	ite	mi
 800990c:	4b06      	ldrmi	r3, [pc, #24]	; (8009928 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>)
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800990e:	4b05      	ldrpl	r3, [pc, #20]	; (8009924 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8009910:	684a      	ldr	r2, [r1, #4]
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8009912:	fbb3 f3f0 	udiv	r3, r3, r0
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8009916:	6848      	ldr	r0, [r1, #4]
 8009918:	e7a7      	b.n	800986a <HAL_RCCEx_GetPeriphCLKFreq+0xde>
          frequency = EXTERNAL_CLOCK_VALUE;
 800991a:	4804      	ldr	r0, [pc, #16]	; (800992c <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
      }
      break;
    }
  }
  return frequency;
}
 800991c:	4770      	bx	lr
 800991e:	bf00      	nop
 8009920:	40023800 	.word	0x40023800
 8009924:	00f42400 	.word	0x00f42400
 8009928:	007a1200 	.word	0x007a1200
 800992c:	00bb8000 	.word	0x00bb8000

08009930 <HAL_RCC_GetSysClockFreq>:
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009930:	4920      	ldr	r1, [pc, #128]	; (80099b4 <HAL_RCC_GetSysClockFreq+0x84>)
{
 8009932:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009934:	688b      	ldr	r3, [r1, #8]
 8009936:	f003 030c 	and.w	r3, r3, #12
 800993a:	2b08      	cmp	r3, #8
 800993c:	d007      	beq.n	800994e <HAL_RCC_GetSysClockFreq+0x1e>
 800993e:	2b0c      	cmp	r3, #12
 8009940:	d020      	beq.n	8009984 <HAL_RCC_GetSysClockFreq+0x54>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009942:	481d      	ldr	r0, [pc, #116]	; (80099b8 <HAL_RCC_GetSysClockFreq+0x88>)
 8009944:	4a1d      	ldr	r2, [pc, #116]	; (80099bc <HAL_RCC_GetSysClockFreq+0x8c>)
 8009946:	2b04      	cmp	r3, #4
 8009948:	bf18      	it	ne
 800994a:	4610      	movne	r0, r2
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800994c:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800994e:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009950:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009952:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009954:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009958:	bf14      	ite	ne
 800995a:	4817      	ldrne	r0, [pc, #92]	; (80099b8 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800995c:	4817      	ldreq	r0, [pc, #92]	; (80099bc <HAL_RCC_GetSysClockFreq+0x8c>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800995e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8009962:	bf18      	it	ne
 8009964:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009966:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800996a:	fba1 0100 	umull	r0, r1, r1, r0
 800996e:	f7fb fa03 	bl	8004d78 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009972:	4b10      	ldr	r3, [pc, #64]	; (80099b4 <HAL_RCC_GetSysClockFreq+0x84>)
 8009974:	685b      	ldr	r3, [r3, #4]
 8009976:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800997a:	3301      	adds	r3, #1
 800997c:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllr;
 800997e:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8009982:	e7e3      	b.n	800994c <HAL_RCC_GetSysClockFreq+0x1c>
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009984:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009986:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009988:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800998a:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800998e:	bf14      	ite	ne
 8009990:	4809      	ldrne	r0, [pc, #36]	; (80099b8 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009992:	480a      	ldreq	r0, [pc, #40]	; (80099bc <HAL_RCC_GetSysClockFreq+0x8c>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009994:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8009998:	bf18      	it	ne
 800999a:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800999c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80099a0:	fba1 0100 	umull	r0, r1, r1, r0
 80099a4:	f7fb f9e8 	bl	8004d78 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80099a8:	4b02      	ldr	r3, [pc, #8]	; (80099b4 <HAL_RCC_GetSysClockFreq+0x84>)
 80099aa:	685b      	ldr	r3, [r3, #4]
 80099ac:	f3c3 7302 	ubfx	r3, r3, #28, #3
 80099b0:	e7e5      	b.n	800997e <HAL_RCC_GetSysClockFreq+0x4e>
 80099b2:	bf00      	nop
 80099b4:	40023800 	.word	0x40023800
 80099b8:	007a1200 	.word	0x007a1200
 80099bc:	00f42400 	.word	0x00f42400

080099c0 <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80099c0:	6803      	ldr	r3, [r0, #0]
{
 80099c2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80099c6:	07df      	lsls	r7, r3, #31
{
 80099c8:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80099ca:	d410      	bmi.n	80099ee <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80099cc:	6823      	ldr	r3, [r4, #0]
 80099ce:	079e      	lsls	r6, r3, #30
 80099d0:	d46b      	bmi.n	8009aaa <HAL_RCC_OscConfig+0xea>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80099d2:	6823      	ldr	r3, [r4, #0]
 80099d4:	071a      	lsls	r2, r3, #28
 80099d6:	f100 80b6 	bmi.w	8009b46 <HAL_RCC_OscConfig+0x186>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80099da:	6823      	ldr	r3, [r4, #0]
 80099dc:	075b      	lsls	r3, r3, #29
 80099de:	f100 80d4 	bmi.w	8009b8a <HAL_RCC_OscConfig+0x1ca>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80099e2:	69a2      	ldr	r2, [r4, #24]
 80099e4:	2a00      	cmp	r2, #0
 80099e6:	f040 813d 	bne.w	8009c64 <HAL_RCC_OscConfig+0x2a4>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 80099ea:	2000      	movs	r0, #0
 80099ec:	e01e      	b.n	8009a2c <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80099ee:	4b99      	ldr	r3, [pc, #612]	; (8009c54 <HAL_RCC_OscConfig+0x294>)
 80099f0:	689a      	ldr	r2, [r3, #8]
 80099f2:	f002 020c 	and.w	r2, r2, #12
 80099f6:	2a04      	cmp	r2, #4
 80099f8:	d010      	beq.n	8009a1c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80099fa:	689a      	ldr	r2, [r3, #8]
 80099fc:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8009a00:	2a08      	cmp	r2, #8
 8009a02:	d102      	bne.n	8009a0a <HAL_RCC_OscConfig+0x4a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8009a04:	685b      	ldr	r3, [r3, #4]
 8009a06:	025d      	lsls	r5, r3, #9
 8009a08:	d408      	bmi.n	8009a1c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009a0a:	4b92      	ldr	r3, [pc, #584]	; (8009c54 <HAL_RCC_OscConfig+0x294>)
 8009a0c:	689a      	ldr	r2, [r3, #8]
 8009a0e:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8009a12:	2a0c      	cmp	r2, #12
 8009a14:	d10d      	bne.n	8009a32 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009a16:	685a      	ldr	r2, [r3, #4]
 8009a18:	0250      	lsls	r0, r2, #9
 8009a1a:	d50a      	bpl.n	8009a32 <HAL_RCC_OscConfig+0x72>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009a1c:	4b8d      	ldr	r3, [pc, #564]	; (8009c54 <HAL_RCC_OscConfig+0x294>)
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	0399      	lsls	r1, r3, #14
 8009a22:	d5d3      	bpl.n	80099cc <HAL_RCC_OscConfig+0xc>
 8009a24:	6863      	ldr	r3, [r4, #4]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d1d0      	bne.n	80099cc <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8009a2a:	2001      	movs	r0, #1
}
 8009a2c:	b002      	add	sp, #8
 8009a2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009a32:	6862      	ldr	r2, [r4, #4]
 8009a34:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8009a38:	d113      	bne.n	8009a62 <HAL_RCC_OscConfig+0xa2>
 8009a3a:	681a      	ldr	r2, [r3, #0]
 8009a3c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8009a40:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8009a42:	f7fd ff9d 	bl	8007980 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009a46:	4d83      	ldr	r5, [pc, #524]	; (8009c54 <HAL_RCC_OscConfig+0x294>)
        tickstart = HAL_GetTick();
 8009a48:	4606      	mov	r6, r0
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009a4a:	f241 3788 	movw	r7, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009a4e:	682b      	ldr	r3, [r5, #0]
 8009a50:	039a      	lsls	r2, r3, #14
 8009a52:	d4bb      	bmi.n	80099cc <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009a54:	f7fd ff94 	bl	8007980 <HAL_GetTick>
 8009a58:	1b80      	subs	r0, r0, r6
 8009a5a:	42b8      	cmp	r0, r7
 8009a5c:	d9f7      	bls.n	8009a4e <HAL_RCC_OscConfig+0x8e>
            return HAL_TIMEOUT;
 8009a5e:	2003      	movs	r0, #3
 8009a60:	e7e4      	b.n	8009a2c <HAL_RCC_OscConfig+0x6c>
 8009a62:	4d7c      	ldr	r5, [pc, #496]	; (8009c54 <HAL_RCC_OscConfig+0x294>)
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009a64:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8009a68:	682b      	ldr	r3, [r5, #0]
 8009a6a:	d107      	bne.n	8009a7c <HAL_RCC_OscConfig+0xbc>
 8009a6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009a70:	602b      	str	r3, [r5, #0]
 8009a72:	682b      	ldr	r3, [r5, #0]
 8009a74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009a78:	602b      	str	r3, [r5, #0]
 8009a7a:	e7e2      	b.n	8009a42 <HAL_RCC_OscConfig+0x82>
 8009a7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009a80:	602b      	str	r3, [r5, #0]
 8009a82:	682b      	ldr	r3, [r5, #0]
 8009a84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009a88:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009a8a:	2a00      	cmp	r2, #0
 8009a8c:	d1d9      	bne.n	8009a42 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8009a8e:	f7fd ff77 	bl	8007980 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009a92:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8009a96:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009a98:	682b      	ldr	r3, [r5, #0]
 8009a9a:	039b      	lsls	r3, r3, #14
 8009a9c:	d596      	bpl.n	80099cc <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009a9e:	f7fd ff6f 	bl	8007980 <HAL_GetTick>
 8009aa2:	1b80      	subs	r0, r0, r6
 8009aa4:	42b8      	cmp	r0, r7
 8009aa6:	d9f7      	bls.n	8009a98 <HAL_RCC_OscConfig+0xd8>
 8009aa8:	e7d9      	b.n	8009a5e <HAL_RCC_OscConfig+0x9e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8009aaa:	4b6a      	ldr	r3, [pc, #424]	; (8009c54 <HAL_RCC_OscConfig+0x294>)
 8009aac:	689a      	ldr	r2, [r3, #8]
 8009aae:	f012 0f0c 	tst.w	r2, #12
 8009ab2:	d010      	beq.n	8009ad6 <HAL_RCC_OscConfig+0x116>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8009ab4:	689a      	ldr	r2, [r3, #8]
 8009ab6:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8009aba:	2a08      	cmp	r2, #8
 8009abc:	d102      	bne.n	8009ac4 <HAL_RCC_OscConfig+0x104>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8009abe:	685b      	ldr	r3, [r3, #4]
 8009ac0:	025f      	lsls	r7, r3, #9
 8009ac2:	d508      	bpl.n	8009ad6 <HAL_RCC_OscConfig+0x116>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009ac4:	4a63      	ldr	r2, [pc, #396]	; (8009c54 <HAL_RCC_OscConfig+0x294>)
 8009ac6:	6893      	ldr	r3, [r2, #8]
 8009ac8:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8009acc:	2b0c      	cmp	r3, #12
 8009ace:	d111      	bne.n	8009af4 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009ad0:	6853      	ldr	r3, [r2, #4]
 8009ad2:	025e      	lsls	r6, r3, #9
 8009ad4:	d40e      	bmi.n	8009af4 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009ad6:	4b5f      	ldr	r3, [pc, #380]	; (8009c54 <HAL_RCC_OscConfig+0x294>)
 8009ad8:	681a      	ldr	r2, [r3, #0]
 8009ada:	0795      	lsls	r5, r2, #30
 8009adc:	d502      	bpl.n	8009ae4 <HAL_RCC_OscConfig+0x124>
 8009ade:	68e2      	ldr	r2, [r4, #12]
 8009ae0:	2a01      	cmp	r2, #1
 8009ae2:	d1a2      	bne.n	8009a2a <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009ae4:	681a      	ldr	r2, [r3, #0]
 8009ae6:	6921      	ldr	r1, [r4, #16]
 8009ae8:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8009aec:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8009af0:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009af2:	e76e      	b.n	80099d2 <HAL_RCC_OscConfig+0x12>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009af4:	68e2      	ldr	r2, [r4, #12]
 8009af6:	4b58      	ldr	r3, [pc, #352]	; (8009c58 <HAL_RCC_OscConfig+0x298>)
 8009af8:	b1b2      	cbz	r2, 8009b28 <HAL_RCC_OscConfig+0x168>
        __HAL_RCC_HSI_ENABLE();
 8009afa:	2201      	movs	r2, #1
 8009afc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8009afe:	f7fd ff3f 	bl	8007980 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009b02:	4d54      	ldr	r5, [pc, #336]	; (8009c54 <HAL_RCC_OscConfig+0x294>)
        tickstart = HAL_GetTick();
 8009b04:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009b06:	682b      	ldr	r3, [r5, #0]
 8009b08:	0798      	lsls	r0, r3, #30
 8009b0a:	d507      	bpl.n	8009b1c <HAL_RCC_OscConfig+0x15c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009b0c:	682b      	ldr	r3, [r5, #0]
 8009b0e:	6922      	ldr	r2, [r4, #16]
 8009b10:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8009b14:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8009b18:	602b      	str	r3, [r5, #0]
 8009b1a:	e75a      	b.n	80099d2 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009b1c:	f7fd ff30 	bl	8007980 <HAL_GetTick>
 8009b20:	1b80      	subs	r0, r0, r6
 8009b22:	2802      	cmp	r0, #2
 8009b24:	d9ef      	bls.n	8009b06 <HAL_RCC_OscConfig+0x146>
 8009b26:	e79a      	b.n	8009a5e <HAL_RCC_OscConfig+0x9e>
        __HAL_RCC_HSI_DISABLE();
 8009b28:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8009b2a:	f7fd ff29 	bl	8007980 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009b2e:	4d49      	ldr	r5, [pc, #292]	; (8009c54 <HAL_RCC_OscConfig+0x294>)
        tickstart = HAL_GetTick();
 8009b30:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009b32:	682b      	ldr	r3, [r5, #0]
 8009b34:	0799      	lsls	r1, r3, #30
 8009b36:	f57f af4c 	bpl.w	80099d2 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009b3a:	f7fd ff21 	bl	8007980 <HAL_GetTick>
 8009b3e:	1b80      	subs	r0, r0, r6
 8009b40:	2802      	cmp	r0, #2
 8009b42:	d9f6      	bls.n	8009b32 <HAL_RCC_OscConfig+0x172>
 8009b44:	e78b      	b.n	8009a5e <HAL_RCC_OscConfig+0x9e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009b46:	6962      	ldr	r2, [r4, #20]
 8009b48:	4b44      	ldr	r3, [pc, #272]	; (8009c5c <HAL_RCC_OscConfig+0x29c>)
 8009b4a:	b17a      	cbz	r2, 8009b6c <HAL_RCC_OscConfig+0x1ac>
      __HAL_RCC_LSI_ENABLE();
 8009b4c:	2201      	movs	r2, #1
 8009b4e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8009b50:	f7fd ff16 	bl	8007980 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009b54:	4d3f      	ldr	r5, [pc, #252]	; (8009c54 <HAL_RCC_OscConfig+0x294>)
      tickstart = HAL_GetTick();
 8009b56:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009b58:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8009b5a:	079f      	lsls	r7, r3, #30
 8009b5c:	f53f af3d 	bmi.w	80099da <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009b60:	f7fd ff0e 	bl	8007980 <HAL_GetTick>
 8009b64:	1b80      	subs	r0, r0, r6
 8009b66:	2802      	cmp	r0, #2
 8009b68:	d9f6      	bls.n	8009b58 <HAL_RCC_OscConfig+0x198>
 8009b6a:	e778      	b.n	8009a5e <HAL_RCC_OscConfig+0x9e>
      __HAL_RCC_LSI_DISABLE();
 8009b6c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8009b6e:	f7fd ff07 	bl	8007980 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009b72:	4d38      	ldr	r5, [pc, #224]	; (8009c54 <HAL_RCC_OscConfig+0x294>)
      tickstart = HAL_GetTick();
 8009b74:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009b76:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8009b78:	0798      	lsls	r0, r3, #30
 8009b7a:	f57f af2e 	bpl.w	80099da <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009b7e:	f7fd feff 	bl	8007980 <HAL_GetTick>
 8009b82:	1b80      	subs	r0, r0, r6
 8009b84:	2802      	cmp	r0, #2
 8009b86:	d9f6      	bls.n	8009b76 <HAL_RCC_OscConfig+0x1b6>
 8009b88:	e769      	b.n	8009a5e <HAL_RCC_OscConfig+0x9e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009b8a:	4b32      	ldr	r3, [pc, #200]	; (8009c54 <HAL_RCC_OscConfig+0x294>)
 8009b8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009b8e:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8009b92:	d128      	bne.n	8009be6 <HAL_RCC_OscConfig+0x226>
      __HAL_RCC_PWR_CLK_ENABLE();
 8009b94:	9201      	str	r2, [sp, #4]
 8009b96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009b98:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8009b9c:	641a      	str	r2, [r3, #64]	; 0x40
 8009b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ba0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009ba4:	9301      	str	r3, [sp, #4]
 8009ba6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8009ba8:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009baa:	4d2d      	ldr	r5, [pc, #180]	; (8009c60 <HAL_RCC_OscConfig+0x2a0>)
 8009bac:	682b      	ldr	r3, [r5, #0]
 8009bae:	05d9      	lsls	r1, r3, #23
 8009bb0:	d51b      	bpl.n	8009bea <HAL_RCC_OscConfig+0x22a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009bb2:	68a3      	ldr	r3, [r4, #8]
 8009bb4:	4d27      	ldr	r5, [pc, #156]	; (8009c54 <HAL_RCC_OscConfig+0x294>)
 8009bb6:	2b01      	cmp	r3, #1
 8009bb8:	d127      	bne.n	8009c0a <HAL_RCC_OscConfig+0x24a>
 8009bba:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8009bbc:	f043 0301 	orr.w	r3, r3, #1
 8009bc0:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8009bc2:	f7fd fedd 	bl	8007980 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009bc6:	4d23      	ldr	r5, [pc, #140]	; (8009c54 <HAL_RCC_OscConfig+0x294>)
      tickstart = HAL_GetTick();
 8009bc8:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009bca:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009bce:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8009bd0:	079b      	lsls	r3, r3, #30
 8009bd2:	d539      	bpl.n	8009c48 <HAL_RCC_OscConfig+0x288>
    if(pwrclkchanged == SET)
 8009bd4:	2e00      	cmp	r6, #0
 8009bd6:	f43f af04 	beq.w	80099e2 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8009bda:	4a1e      	ldr	r2, [pc, #120]	; (8009c54 <HAL_RCC_OscConfig+0x294>)
 8009bdc:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8009bde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009be2:	6413      	str	r3, [r2, #64]	; 0x40
 8009be4:	e6fd      	b.n	80099e2 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8009be6:	2600      	movs	r6, #0
 8009be8:	e7df      	b.n	8009baa <HAL_RCC_OscConfig+0x1ea>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009bea:	682b      	ldr	r3, [r5, #0]
 8009bec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009bf0:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8009bf2:	f7fd fec5 	bl	8007980 <HAL_GetTick>
 8009bf6:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009bf8:	682b      	ldr	r3, [r5, #0]
 8009bfa:	05da      	lsls	r2, r3, #23
 8009bfc:	d4d9      	bmi.n	8009bb2 <HAL_RCC_OscConfig+0x1f2>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009bfe:	f7fd febf 	bl	8007980 <HAL_GetTick>
 8009c02:	1bc0      	subs	r0, r0, r7
 8009c04:	2802      	cmp	r0, #2
 8009c06:	d9f7      	bls.n	8009bf8 <HAL_RCC_OscConfig+0x238>
 8009c08:	e729      	b.n	8009a5e <HAL_RCC_OscConfig+0x9e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009c0a:	2b05      	cmp	r3, #5
 8009c0c:	d104      	bne.n	8009c18 <HAL_RCC_OscConfig+0x258>
 8009c0e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8009c10:	f043 0304 	orr.w	r3, r3, #4
 8009c14:	672b      	str	r3, [r5, #112]	; 0x70
 8009c16:	e7d0      	b.n	8009bba <HAL_RCC_OscConfig+0x1fa>
 8009c18:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8009c1a:	f022 0201 	bic.w	r2, r2, #1
 8009c1e:	672a      	str	r2, [r5, #112]	; 0x70
 8009c20:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8009c22:	f022 0204 	bic.w	r2, r2, #4
 8009c26:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d1ca      	bne.n	8009bc2 <HAL_RCC_OscConfig+0x202>
      tickstart = HAL_GetTick();
 8009c2c:	f7fd fea8 	bl	8007980 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009c30:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8009c34:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009c36:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8009c38:	0798      	lsls	r0, r3, #30
 8009c3a:	d5cb      	bpl.n	8009bd4 <HAL_RCC_OscConfig+0x214>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009c3c:	f7fd fea0 	bl	8007980 <HAL_GetTick>
 8009c40:	1bc0      	subs	r0, r0, r7
 8009c42:	4540      	cmp	r0, r8
 8009c44:	d9f7      	bls.n	8009c36 <HAL_RCC_OscConfig+0x276>
 8009c46:	e70a      	b.n	8009a5e <HAL_RCC_OscConfig+0x9e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009c48:	f7fd fe9a 	bl	8007980 <HAL_GetTick>
 8009c4c:	1bc0      	subs	r0, r0, r7
 8009c4e:	4540      	cmp	r0, r8
 8009c50:	d9bd      	bls.n	8009bce <HAL_RCC_OscConfig+0x20e>
 8009c52:	e704      	b.n	8009a5e <HAL_RCC_OscConfig+0x9e>
 8009c54:	40023800 	.word	0x40023800
 8009c58:	42470000 	.word	0x42470000
 8009c5c:	42470e80 	.word	0x42470e80
 8009c60:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009c64:	4d23      	ldr	r5, [pc, #140]	; (8009cf4 <HAL_RCC_OscConfig+0x334>)
 8009c66:	68ab      	ldr	r3, [r5, #8]
 8009c68:	f003 030c 	and.w	r3, r3, #12
 8009c6c:	2b08      	cmp	r3, #8
 8009c6e:	f43f aedc 	beq.w	8009a2a <HAL_RCC_OscConfig+0x6a>
 8009c72:	4e21      	ldr	r6, [pc, #132]	; (8009cf8 <HAL_RCC_OscConfig+0x338>)
 8009c74:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009c76:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8009c78:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009c7a:	d12d      	bne.n	8009cd8 <HAL_RCC_OscConfig+0x318>
        tickstart = HAL_GetTick();
 8009c7c:	f7fd fe80 	bl	8007980 <HAL_GetTick>
 8009c80:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009c82:	682b      	ldr	r3, [r5, #0]
 8009c84:	0199      	lsls	r1, r3, #6
 8009c86:	d421      	bmi.n	8009ccc <HAL_RCC_OscConfig+0x30c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009c88:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8009c8c:	4313      	orrs	r3, r2
 8009c8e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8009c90:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8009c94:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009c96:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009c9a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8009c9c:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8009ca0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009ca2:	4c14      	ldr	r4, [pc, #80]	; (8009cf4 <HAL_RCC_OscConfig+0x334>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009ca4:	0852      	lsrs	r2, r2, #1
 8009ca6:	3a01      	subs	r2, #1
 8009ca8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009cac:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8009cae:	2301      	movs	r3, #1
 8009cb0:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8009cb2:	f7fd fe65 	bl	8007980 <HAL_GetTick>
 8009cb6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009cb8:	6823      	ldr	r3, [r4, #0]
 8009cba:	019a      	lsls	r2, r3, #6
 8009cbc:	f53f ae95 	bmi.w	80099ea <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009cc0:	f7fd fe5e 	bl	8007980 <HAL_GetTick>
 8009cc4:	1b40      	subs	r0, r0, r5
 8009cc6:	2802      	cmp	r0, #2
 8009cc8:	d9f6      	bls.n	8009cb8 <HAL_RCC_OscConfig+0x2f8>
 8009cca:	e6c8      	b.n	8009a5e <HAL_RCC_OscConfig+0x9e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009ccc:	f7fd fe58 	bl	8007980 <HAL_GetTick>
 8009cd0:	1bc0      	subs	r0, r0, r7
 8009cd2:	2802      	cmp	r0, #2
 8009cd4:	d9d5      	bls.n	8009c82 <HAL_RCC_OscConfig+0x2c2>
 8009cd6:	e6c2      	b.n	8009a5e <HAL_RCC_OscConfig+0x9e>
        tickstart = HAL_GetTick();
 8009cd8:	f7fd fe52 	bl	8007980 <HAL_GetTick>
 8009cdc:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009cde:	682b      	ldr	r3, [r5, #0]
 8009ce0:	019b      	lsls	r3, r3, #6
 8009ce2:	f57f ae82 	bpl.w	80099ea <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009ce6:	f7fd fe4b 	bl	8007980 <HAL_GetTick>
 8009cea:	1b00      	subs	r0, r0, r4
 8009cec:	2802      	cmp	r0, #2
 8009cee:	d9f6      	bls.n	8009cde <HAL_RCC_OscConfig+0x31e>
 8009cf0:	e6b5      	b.n	8009a5e <HAL_RCC_OscConfig+0x9e>
 8009cf2:	bf00      	nop
 8009cf4:	40023800 	.word	0x40023800
 8009cf8:	42470060 	.word	0x42470060

08009cfc <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 8009cfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d00:	9e06      	ldr	r6, [sp, #24]
 8009d02:	4604      	mov	r4, r0
 8009d04:	4688      	mov	r8, r1
 8009d06:	4617      	mov	r7, r2
 8009d08:	461d      	mov	r5, r3
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8009d0a:	6822      	ldr	r2, [r4, #0]
 8009d0c:	6893      	ldr	r3, [r2, #8]
 8009d0e:	ea38 0303 	bics.w	r3, r8, r3
 8009d12:	bf0c      	ite	eq
 8009d14:	2301      	moveq	r3, #1
 8009d16:	2300      	movne	r3, #0
 8009d18:	429f      	cmp	r7, r3
 8009d1a:	d101      	bne.n	8009d20 <SPI_WaitFlagStateUntilTimeout+0x24>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8009d1c:	2000      	movs	r0, #0
 8009d1e:	e02b      	b.n	8009d78 <SPI_WaitFlagStateUntilTimeout+0x7c>
    if(Timeout != HAL_MAX_DELAY)
 8009d20:	1c6b      	adds	r3, r5, #1
 8009d22:	d0f3      	beq.n	8009d0c <SPI_WaitFlagStateUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8009d24:	bb55      	cbnz	r5, 8009d7c <SPI_WaitFlagStateUntilTimeout+0x80>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009d26:	6823      	ldr	r3, [r4, #0]
 8009d28:	685a      	ldr	r2, [r3, #4]
 8009d2a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009d2e:	605a      	str	r2, [r3, #4]
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009d30:	6862      	ldr	r2, [r4, #4]
 8009d32:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8009d36:	d10a      	bne.n	8009d4e <SPI_WaitFlagStateUntilTimeout+0x52>
 8009d38:	68a2      	ldr	r2, [r4, #8]
 8009d3a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8009d3e:	d002      	beq.n	8009d46 <SPI_WaitFlagStateUntilTimeout+0x4a>
 8009d40:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8009d44:	d103      	bne.n	8009d4e <SPI_WaitFlagStateUntilTimeout+0x52>
          __HAL_SPI_DISABLE(hspi);
 8009d46:	681a      	ldr	r2, [r3, #0]
 8009d48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009d4c:	601a      	str	r2, [r3, #0]
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009d4e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8009d50:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8009d54:	d109      	bne.n	8009d6a <SPI_WaitFlagStateUntilTimeout+0x6e>
          SPI_RESET_CRC(hspi);
 8009d56:	681a      	ldr	r2, [r3, #0]
 8009d58:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009d5c:	0412      	lsls	r2, r2, #16
 8009d5e:	0c12      	lsrs	r2, r2, #16
 8009d60:	601a      	str	r2, [r3, #0]
 8009d62:	681a      	ldr	r2, [r3, #0]
 8009d64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009d68:	601a      	str	r2, [r3, #0]
        hspi->State= HAL_SPI_STATE_READY;
 8009d6a:	2301      	movs	r3, #1
 8009d6c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8009d70:	2300      	movs	r3, #0
 8009d72:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8009d76:	2003      	movs	r0, #3
}
 8009d78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8009d7c:	f7fd fe00 	bl	8007980 <HAL_GetTick>
 8009d80:	1b80      	subs	r0, r0, r6
 8009d82:	42a8      	cmp	r0, r5
 8009d84:	d3c1      	bcc.n	8009d0a <SPI_WaitFlagStateUntilTimeout+0xe>
 8009d86:	e7ce      	b.n	8009d26 <SPI_WaitFlagStateUntilTimeout+0x2a>

08009d88 <SPI_CheckFlag_BSY>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009d88:	b513      	push	{r0, r1, r4, lr}
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009d8a:	460b      	mov	r3, r1
 8009d8c:	9200      	str	r2, [sp, #0]
 8009d8e:	2180      	movs	r1, #128	; 0x80
 8009d90:	2200      	movs	r2, #0
{
 8009d92:	4604      	mov	r4, r0
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009d94:	f7ff ffb2 	bl	8009cfc <SPI_WaitFlagStateUntilTimeout>
 8009d98:	b120      	cbz	r0, 8009da4 <SPI_CheckFlag_BSY+0x1c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009d9a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8009d9c:	f043 0320 	orr.w	r3, r3, #32
 8009da0:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_TIMEOUT;
 8009da2:	2003      	movs	r0, #3
  }
  return HAL_OK;
}
 8009da4:	b002      	add	sp, #8
 8009da6:	bd10      	pop	{r4, pc}

08009da8 <HAL_SPI_Init>:
{
 8009da8:	b538      	push	{r3, r4, r5, lr}
  if(hspi == NULL)
 8009daa:	4604      	mov	r4, r0
 8009dac:	2800      	cmp	r0, #0
 8009dae:	d03b      	beq.n	8009e28 <HAL_SPI_Init+0x80>
  if(hspi->State == HAL_SPI_STATE_RESET)
 8009db0:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8009db4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8009db8:	b91b      	cbnz	r3, 8009dc2 <HAL_SPI_Init+0x1a>
    hspi->Lock = HAL_UNLOCKED;
 8009dba:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8009dbe:	f007 fa2d 	bl	801121c <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8009dc2:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8009dc4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8009dc6:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 8009dc8:	2302      	movs	r3, #2
 8009dca:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8009dce:	680b      	ldr	r3, [r1, #0]
 8009dd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009dd4:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8009dd6:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8009dda:	432b      	orrs	r3, r5
 8009ddc:	68e5      	ldr	r5, [r4, #12]
 8009dde:	432b      	orrs	r3, r5
 8009de0:	6925      	ldr	r5, [r4, #16]
 8009de2:	432b      	orrs	r3, r5
 8009de4:	6965      	ldr	r5, [r4, #20]
 8009de6:	432b      	orrs	r3, r5
 8009de8:	69e5      	ldr	r5, [r4, #28]
 8009dea:	432b      	orrs	r3, r5
 8009dec:	6a25      	ldr	r5, [r4, #32]
 8009dee:	432b      	orrs	r3, r5
 8009df0:	4303      	orrs	r3, r0
 8009df2:	f402 7500 	and.w	r5, r2, #512	; 0x200
 8009df6:	432b      	orrs	r3, r5
 8009df8:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8009dfa:	0c12      	lsrs	r2, r2, #16
 8009dfc:	6a63      	ldr	r3, [r4, #36]	; 0x24
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009dfe:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8009e02:	f002 0204 	and.w	r2, r2, #4
 8009e06:	ea42 0203 	orr.w	r2, r2, r3
    WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8009e0a:	bf08      	it	eq
 8009e0c:	6ae3      	ldreq	r3, [r4, #44]	; 0x2c
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8009e0e:	604a      	str	r2, [r1, #4]
    WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8009e10:	bf08      	it	eq
 8009e12:	610b      	streq	r3, [r1, #16]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009e14:	69cb      	ldr	r3, [r1, #28]
 8009e16:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009e1a:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009e1c:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8009e1e:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009e20:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009e22:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8009e26:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8009e28:	2001      	movs	r0, #1
 8009e2a:	e7fc      	b.n	8009e26 <HAL_SPI_Init+0x7e>

08009e2c <HAL_SPI_TransmitReceive>:
{
 8009e2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009e30:	b085      	sub	sp, #20
 8009e32:	4699      	mov	r9, r3
  __IO uint16_t tmpreg1 = 0U;
 8009e34:	2300      	movs	r3, #0
 8009e36:	f8ad 300a 	strh.w	r3, [sp, #10]
  __HAL_LOCK(hspi);
 8009e3a:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8009e3e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  __HAL_LOCK(hspi);
 8009e40:	2b01      	cmp	r3, #1
{
 8009e42:	4604      	mov	r4, r0
 8009e44:	460d      	mov	r5, r1
 8009e46:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8009e48:	f000 8147 	beq.w	800a0da <HAL_SPI_TransmitReceive+0x2ae>
 8009e4c:	2301      	movs	r3, #1
 8009e4e:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8009e52:	f7fd fd95 	bl	8007980 <HAL_GetTick>
  tmp  = hspi->State;
 8009e56:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tmp1 = hspi->Init.Mode;
 8009e5a:	6861      	ldr	r1, [r4, #4]
  tmp  = hspi->State;
 8009e5c:	b2db      	uxtb	r3, r3
  if(!((tmp == HAL_SPI_STATE_READY) || \
 8009e5e:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8009e60:	4607      	mov	r7, r0
  if(!((tmp == HAL_SPI_STATE_READY) || \
 8009e62:	d00a      	beq.n	8009e7a <HAL_SPI_TransmitReceive+0x4e>
 8009e64:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8009e68:	f040 8135 	bne.w	800a0d6 <HAL_SPI_TransmitReceive+0x2aa>
    ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8009e6c:	68a2      	ldr	r2, [r4, #8]
 8009e6e:	2a00      	cmp	r2, #0
 8009e70:	f040 8131 	bne.w	800a0d6 <HAL_SPI_TransmitReceive+0x2aa>
 8009e74:	2b04      	cmp	r3, #4
 8009e76:	f040 812e 	bne.w	800a0d6 <HAL_SPI_TransmitReceive+0x2aa>
  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0))
 8009e7a:	2d00      	cmp	r5, #0
 8009e7c:	f000 811d 	beq.w	800a0ba <HAL_SPI_TransmitReceive+0x28e>
 8009e80:	f1b8 0f00 	cmp.w	r8, #0
 8009e84:	f000 8119 	beq.w	800a0ba <HAL_SPI_TransmitReceive+0x28e>
 8009e88:	f1b9 0f00 	cmp.w	r9, #0
 8009e8c:	f000 8115 	beq.w	800a0ba <HAL_SPI_TransmitReceive+0x28e>
  if(hspi->State == HAL_SPI_STATE_READY)
 8009e90:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009e94:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009e96:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  if(hspi->State == HAL_SPI_STATE_READY)
 8009e9a:	2b01      	cmp	r3, #1
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009e9c:	bf04      	itt	eq
 8009e9e:	2305      	moveq	r3, #5
 8009ea0:	f884 3051 	strbeq.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009ea4:	2300      	movs	r3, #0
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009ea6:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009eaa:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->TxISR       = NULL;
 8009eac:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 8009eb0:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8009eb4:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009eb8:	6325      	str	r5, [r4, #48]	; 0x30
  hspi->TxXferCount = Size;
 8009eba:	f8a4 9036 	strh.w	r9, [r4, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8009ebe:	f8a4 9034 	strh.w	r9, [r4, #52]	; 0x34
 8009ec2:	6823      	ldr	r3, [r4, #0]
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009ec4:	d109      	bne.n	8009eda <HAL_SPI_TransmitReceive+0xae>
    SPI_RESET_CRC(hspi);
 8009ec6:	681a      	ldr	r2, [r3, #0]
 8009ec8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009ecc:	0412      	lsls	r2, r2, #16
 8009ece:	0c12      	lsrs	r2, r2, #16
 8009ed0:	601a      	str	r2, [r3, #0]
 8009ed2:	681a      	ldr	r2, [r3, #0]
 8009ed4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009ed8:	601a      	str	r2, [r3, #0]
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8009eda:	681a      	ldr	r2, [r3, #0]
 8009edc:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8009ede:	bf5e      	ittt	pl
 8009ee0:	681a      	ldrpl	r2, [r3, #0]
 8009ee2:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8009ee6:	601a      	strpl	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009ee8:	68e2      	ldr	r2, [r4, #12]
 8009eea:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8009eee:	d16b      	bne.n	8009fc8 <HAL_SPI_TransmitReceive+0x19c>
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8009ef0:	b119      	cbz	r1, 8009efa <HAL_SPI_TransmitReceive+0xce>
 8009ef2:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8009ef4:	b292      	uxth	r2, r2
 8009ef6:	2a01      	cmp	r2, #1
 8009ef8:	d106      	bne.n	8009f08 <HAL_SPI_TransmitReceive+0xdc>
      hspi->Instance->DR = *((uint16_t *)pTxData);
 8009efa:	f835 2b02 	ldrh.w	r2, [r5], #2
 8009efe:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8009f00:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8009f02:	3b01      	subs	r3, #1
 8009f04:	b29b      	uxth	r3, r3
 8009f06:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8009f08:	f04f 0901 	mov.w	r9, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009f0c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8009f0e:	b29b      	uxth	r3, r3
 8009f10:	b9b3      	cbnz	r3, 8009f40 <HAL_SPI_TransmitReceive+0x114>
 8009f12:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009f14:	b29b      	uxth	r3, r3
 8009f16:	b99b      	cbnz	r3, 8009f40 <HAL_SPI_TransmitReceive+0x114>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009f18:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009f1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009f1e:	f040 80ae 	bne.w	800a07e <HAL_SPI_TransmitReceive+0x252>
    if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8009f22:	2201      	movs	r2, #1
 8009f24:	9700      	str	r7, [sp, #0]
 8009f26:	4633      	mov	r3, r6
 8009f28:	4611      	mov	r1, r2
 8009f2a:	4620      	mov	r0, r4
 8009f2c:	f7ff fee6 	bl	8009cfc <SPI_WaitFlagStateUntilTimeout>
 8009f30:	2800      	cmp	r0, #0
 8009f32:	f000 809d 	beq.w	800a070 <HAL_SPI_TransmitReceive+0x244>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8009f36:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8009f38:	f043 0302 	orr.w	r3, r3, #2
 8009f3c:	6563      	str	r3, [r4, #84]	; 0x54
 8009f3e:	e035      	b.n	8009fac <HAL_SPI_TransmitReceive+0x180>
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8009f40:	f1b9 0f00 	cmp.w	r9, #0
 8009f44:	d01b      	beq.n	8009f7e <HAL_SPI_TransmitReceive+0x152>
 8009f46:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8009f48:	b29b      	uxth	r3, r3
 8009f4a:	b1c3      	cbz	r3, 8009f7e <HAL_SPI_TransmitReceive+0x152>
 8009f4c:	6822      	ldr	r2, [r4, #0]
 8009f4e:	6893      	ldr	r3, [r2, #8]
 8009f50:	0799      	lsls	r1, r3, #30
 8009f52:	d514      	bpl.n	8009f7e <HAL_SPI_TransmitReceive+0x152>
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8009f54:	f835 3b02 	ldrh.w	r3, [r5], #2
 8009f58:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount--;
 8009f5a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8009f5c:	3b01      	subs	r3, #1
 8009f5e:	b29b      	uxth	r3, r3
 8009f60:	86e3      	strh	r3, [r4, #54]	; 0x36
        if((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8009f62:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8009f64:	fa1f f983 	uxth.w	r9, r3
 8009f68:	f1b9 0f00 	cmp.w	r9, #0
 8009f6c:	d129      	bne.n	8009fc2 <HAL_SPI_TransmitReceive+0x196>
 8009f6e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8009f70:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8009f74:	d103      	bne.n	8009f7e <HAL_SPI_TransmitReceive+0x152>
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8009f76:	6811      	ldr	r1, [r2, #0]
 8009f78:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 8009f7c:	6011      	str	r1, [r2, #0]
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8009f7e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009f80:	b29b      	uxth	r3, r3
 8009f82:	b163      	cbz	r3, 8009f9e <HAL_SPI_TransmitReceive+0x172>
 8009f84:	6823      	ldr	r3, [r4, #0]
 8009f86:	689a      	ldr	r2, [r3, #8]
 8009f88:	07d2      	lsls	r2, r2, #31
 8009f8a:	d508      	bpl.n	8009f9e <HAL_SPI_TransmitReceive+0x172>
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 8009f8c:	68db      	ldr	r3, [r3, #12]
 8009f8e:	f828 3b02 	strh.w	r3, [r8], #2
        hspi->RxXferCount--;
 8009f92:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009f94:	3b01      	subs	r3, #1
 8009f96:	b29b      	uxth	r3, r3
 8009f98:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8009f9a:	f04f 0901 	mov.w	r9, #1
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8009f9e:	1c70      	adds	r0, r6, #1
 8009fa0:	d0b4      	beq.n	8009f0c <HAL_SPI_TransmitReceive+0xe0>
 8009fa2:	f7fd fced 	bl	8007980 <HAL_GetTick>
 8009fa6:	1bc0      	subs	r0, r0, r7
 8009fa8:	42b0      	cmp	r0, r6
 8009faa:	d3af      	bcc.n	8009f0c <HAL_SPI_TransmitReceive+0xe0>
      errorcode = HAL_TIMEOUT;
 8009fac:	2503      	movs	r5, #3
  hspi->State = HAL_SPI_STATE_READY;
 8009fae:	2301      	movs	r3, #1
 8009fb0:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8009fba:	4628      	mov	r0, r5
 8009fbc:	b005      	add	sp, #20
 8009fbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        txallowed = 0U;
 8009fc2:	f04f 0900 	mov.w	r9, #0
 8009fc6:	e7da      	b.n	8009f7e <HAL_SPI_TransmitReceive+0x152>
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8009fc8:	b119      	cbz	r1, 8009fd2 <HAL_SPI_TransmitReceive+0x1a6>
 8009fca:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8009fcc:	b292      	uxth	r2, r2
 8009fce:	2a01      	cmp	r2, #1
 8009fd0:	d106      	bne.n	8009fe0 <HAL_SPI_TransmitReceive+0x1b4>
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pTxData);
 8009fd2:	f815 2b01 	ldrb.w	r2, [r5], #1
 8009fd6:	731a      	strb	r2, [r3, #12]
      hspi->TxXferCount--;
 8009fd8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8009fda:	3b01      	subs	r3, #1
 8009fdc:	b29b      	uxth	r3, r3
 8009fde:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8009fe0:	f04f 0901 	mov.w	r9, #1
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009fe4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8009fe6:	b29b      	uxth	r3, r3
 8009fe8:	b91b      	cbnz	r3, 8009ff2 <HAL_SPI_TransmitReceive+0x1c6>
 8009fea:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009fec:	b29b      	uxth	r3, r3
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d092      	beq.n	8009f18 <HAL_SPI_TransmitReceive+0xec>
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8009ff2:	f1b9 0f00 	cmp.w	r9, #0
 8009ff6:	d021      	beq.n	800a03c <HAL_SPI_TransmitReceive+0x210>
 8009ff8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8009ffa:	b29b      	uxth	r3, r3
 8009ffc:	b1f3      	cbz	r3, 800a03c <HAL_SPI_TransmitReceive+0x210>
 8009ffe:	6823      	ldr	r3, [r4, #0]
 800a000:	689a      	ldr	r2, [r3, #8]
 800a002:	0791      	lsls	r1, r2, #30
 800a004:	d51a      	bpl.n	800a03c <HAL_SPI_TransmitReceive+0x210>
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 800a006:	7829      	ldrb	r1, [r5, #0]
 800a008:	7319      	strb	r1, [r3, #12]
        hspi->TxXferCount--;
 800a00a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800a00c:	3b01      	subs	r3, #1
 800a00e:	b29b      	uxth	r3, r3
 800a010:	86e3      	strh	r3, [r4, #54]	; 0x36
        if((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 800a012:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800a014:	fa1f f983 	uxth.w	r9, r3
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 800a018:	1c6a      	adds	r2, r5, #1
        if((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 800a01a:	f1b9 0f00 	cmp.w	r9, #0
 800a01e:	d10a      	bne.n	800a036 <HAL_SPI_TransmitReceive+0x20a>
 800a020:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800a022:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 800a026:	d104      	bne.n	800a032 <HAL_SPI_TransmitReceive+0x206>
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800a028:	6820      	ldr	r0, [r4, #0]
 800a02a:	6801      	ldr	r1, [r0, #0]
 800a02c:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 800a030:	6001      	str	r1, [r0, #0]
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 800a032:	4615      	mov	r5, r2
 800a034:	e002      	b.n	800a03c <HAL_SPI_TransmitReceive+0x210>
 800a036:	4615      	mov	r5, r2
        txallowed = 0U;
 800a038:	f04f 0900 	mov.w	r9, #0
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 800a03c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800a03e:	b29b      	uxth	r3, r3
 800a040:	b173      	cbz	r3, 800a060 <HAL_SPI_TransmitReceive+0x234>
 800a042:	6823      	ldr	r3, [r4, #0]
 800a044:	689a      	ldr	r2, [r3, #8]
 800a046:	07d2      	lsls	r2, r2, #31
 800a048:	d50a      	bpl.n	800a060 <HAL_SPI_TransmitReceive+0x234>
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 800a04a:	68db      	ldr	r3, [r3, #12]
 800a04c:	f888 3000 	strb.w	r3, [r8]
        hspi->RxXferCount--;
 800a050:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800a052:	3b01      	subs	r3, #1
 800a054:	b29b      	uxth	r3, r3
 800a056:	87e3      	strh	r3, [r4, #62]	; 0x3e
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 800a058:	f108 0801 	add.w	r8, r8, #1
        txallowed = 1U;
 800a05c:	f04f 0901 	mov.w	r9, #1
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 800a060:	1c73      	adds	r3, r6, #1
 800a062:	d0bf      	beq.n	8009fe4 <HAL_SPI_TransmitReceive+0x1b8>
 800a064:	f7fd fc8c 	bl	8007980 <HAL_GetTick>
 800a068:	1bc0      	subs	r0, r0, r7
 800a06a:	42b0      	cmp	r0, r6
 800a06c:	d3ba      	bcc.n	8009fe4 <HAL_SPI_TransmitReceive+0x1b8>
 800a06e:	e79d      	b.n	8009fac <HAL_SPI_TransmitReceive+0x180>
    tmpreg1 = hspi->Instance->DR;
 800a070:	6823      	ldr	r3, [r4, #0]
 800a072:	68db      	ldr	r3, [r3, #12]
 800a074:	b29b      	uxth	r3, r3
 800a076:	f8ad 300a 	strh.w	r3, [sp, #10]
    UNUSED(tmpreg1);
 800a07a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
  if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 800a07e:	6822      	ldr	r2, [r4, #0]
 800a080:	6895      	ldr	r5, [r2, #8]
 800a082:	f015 0510 	ands.w	r5, r5, #16
 800a086:	d007      	beq.n	800a098 <HAL_SPI_TransmitReceive+0x26c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800a088:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a08a:	f043 0302 	orr.w	r3, r3, #2
 800a08e:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 800a090:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800a094:	6093      	str	r3, [r2, #8]
    errorcode = HAL_ERROR;
 800a096:	2501      	movs	r5, #1
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 800a098:	9700      	str	r7, [sp, #0]
 800a09a:	4633      	mov	r3, r6
 800a09c:	2201      	movs	r2, #1
 800a09e:	2102      	movs	r1, #2
 800a0a0:	4620      	mov	r0, r4
 800a0a2:	f7ff fe2b 	bl	8009cfc <SPI_WaitFlagStateUntilTimeout>
 800a0a6:	2800      	cmp	r0, #0
 800a0a8:	d180      	bne.n	8009fac <HAL_SPI_TransmitReceive+0x180>
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 800a0aa:	463a      	mov	r2, r7
 800a0ac:	4631      	mov	r1, r6
 800a0ae:	4620      	mov	r0, r4
 800a0b0:	f7ff fe6a 	bl	8009d88 <SPI_CheckFlag_BSY>
 800a0b4:	b118      	cbz	r0, 800a0be <HAL_SPI_TransmitReceive+0x292>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a0b6:	2320      	movs	r3, #32
 800a0b8:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 800a0ba:	2501      	movs	r5, #1
 800a0bc:	e777      	b.n	8009fae <HAL_SPI_TransmitReceive+0x182>
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a0be:	68a3      	ldr	r3, [r4, #8]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	f47f af74 	bne.w	8009fae <HAL_SPI_TransmitReceive+0x182>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a0c6:	9303      	str	r3, [sp, #12]
 800a0c8:	6823      	ldr	r3, [r4, #0]
 800a0ca:	68da      	ldr	r2, [r3, #12]
 800a0cc:	9203      	str	r2, [sp, #12]
 800a0ce:	689b      	ldr	r3, [r3, #8]
 800a0d0:	9303      	str	r3, [sp, #12]
 800a0d2:	9b03      	ldr	r3, [sp, #12]
 800a0d4:	e76b      	b.n	8009fae <HAL_SPI_TransmitReceive+0x182>
    errorcode = HAL_BUSY;
 800a0d6:	2502      	movs	r5, #2
 800a0d8:	e769      	b.n	8009fae <HAL_SPI_TransmitReceive+0x182>
  __HAL_LOCK(hspi);
 800a0da:	2502      	movs	r5, #2
 800a0dc:	e76d      	b.n	8009fba <HAL_SPI_TransmitReceive+0x18e>
	...

0800a0e0 <HAL_SPI_TransmitReceive_DMA>:
{
 800a0e0:	b538      	push	{r3, r4, r5, lr}
 800a0e2:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 800a0e4:	f890 0050 	ldrb.w	r0, [r0, #80]	; 0x50
 800a0e8:	2801      	cmp	r0, #1
 800a0ea:	d073      	beq.n	800a1d4 <HAL_SPI_TransmitReceive_DMA+0xf4>
 800a0ec:	2001      	movs	r0, #1
 800a0ee:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
  tmp  = hspi->State;
 800a0f2:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 800a0f6:	b2c0      	uxtb	r0, r0
  if(!((tmp == HAL_SPI_STATE_READY) ||
 800a0f8:	2801      	cmp	r0, #1
 800a0fa:	d008      	beq.n	800a10e <HAL_SPI_TransmitReceive_DMA+0x2e>
 800a0fc:	6865      	ldr	r5, [r4, #4]
 800a0fe:	f5b5 7f82 	cmp.w	r5, #260	; 0x104
 800a102:	d163      	bne.n	800a1cc <HAL_SPI_TransmitReceive_DMA+0xec>
      ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 800a104:	68a5      	ldr	r5, [r4, #8]
 800a106:	2d00      	cmp	r5, #0
 800a108:	d160      	bne.n	800a1cc <HAL_SPI_TransmitReceive_DMA+0xec>
 800a10a:	2804      	cmp	r0, #4
 800a10c:	d15e      	bne.n	800a1cc <HAL_SPI_TransmitReceive_DMA+0xec>
  if((pTxData == NULL ) || (pRxData == NULL ) || (Size == 0))
 800a10e:	2900      	cmp	r1, #0
 800a110:	d05e      	beq.n	800a1d0 <HAL_SPI_TransmitReceive_DMA+0xf0>
 800a112:	2a00      	cmp	r2, #0
 800a114:	d05c      	beq.n	800a1d0 <HAL_SPI_TransmitReceive_DMA+0xf0>
 800a116:	2b00      	cmp	r3, #0
 800a118:	d05a      	beq.n	800a1d0 <HAL_SPI_TransmitReceive_DMA+0xf0>
  if(hspi->State == HAL_SPI_STATE_READY)
 800a11a:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
  hspi->TxXferSize  = Size;
 800a11e:	86a3      	strh	r3, [r4, #52]	; 0x34
  if(hspi->State == HAL_SPI_STATE_READY)
 800a120:	2801      	cmp	r0, #1
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a122:	bf04      	itt	eq
 800a124:	2005      	moveq	r0, #5
 800a126:	f884 0051 	strbeq.w	r0, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a12a:	2000      	movs	r0, #0
 800a12c:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->RxXferSize  = Size;
 800a12e:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800a130:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->RxXferCount = Size;
 800a132:	87e3      	strh	r3, [r4, #62]	; 0x3e
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a134:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  hspi->pTxBuffPtr  = (uint8_t*)pTxData;
 800a136:	6321      	str	r1, [r4, #48]	; 0x30
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a138:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
  hspi->pRxBuffPtr  = (uint8_t*)pRxData;
 800a13c:	63a2      	str	r2, [r4, #56]	; 0x38
  hspi->TxISR       = NULL;
 800a13e:	e9c4 0010 	strd	r0, r0, [r4, #64]	; 0x40
 800a142:	6821      	ldr	r1, [r4, #0]
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a144:	d109      	bne.n	800a15a <HAL_SPI_TransmitReceive_DMA+0x7a>
    SPI_RESET_CRC(hspi);
 800a146:	680b      	ldr	r3, [r1, #0]
 800a148:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a14c:	041b      	lsls	r3, r3, #16
 800a14e:	0c1b      	lsrs	r3, r3, #16
 800a150:	600b      	str	r3, [r1, #0]
 800a152:	680b      	ldr	r3, [r1, #0]
 800a154:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a158:	600b      	str	r3, [r1, #0]
  if(hspi->State == HAL_SPI_STATE_BUSY_RX)
 800a15a:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 800a15e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800a160:	2b04      	cmp	r3, #4
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800a162:	bf0b      	itete	eq
 800a164:	4b1c      	ldreq	r3, [pc, #112]	; (800a1d8 <HAL_SPI_TransmitReceive_DMA+0xf8>)
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800a166:	4b1d      	ldrne	r3, [pc, #116]	; (800a1dc <HAL_SPI_TransmitReceive_DMA+0xfc>)
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800a168:	6403      	streq	r3, [r0, #64]	; 0x40
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800a16a:	6403      	strne	r3, [r0, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800a16c:	bf0c      	ite	eq
 800a16e:	4b1c      	ldreq	r3, [pc, #112]	; (800a1e0 <HAL_SPI_TransmitReceive_DMA+0x100>)
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800a170:	4b1c      	ldrne	r3, [pc, #112]	; (800a1e4 <HAL_SPI_TransmitReceive_DMA+0x104>)
 800a172:	63c3      	str	r3, [r0, #60]	; 0x3c
  hspi->hdmarx->XferAbortCallback = NULL;
 800a174:	2500      	movs	r5, #0
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800a176:	4b1c      	ldr	r3, [pc, #112]	; (800a1e8 <HAL_SPI_TransmitReceive_DMA+0x108>)
 800a178:	64c3      	str	r3, [r0, #76]	; 0x4c
  HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount);
 800a17a:	310c      	adds	r1, #12
 800a17c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
  hspi->hdmarx->XferAbortCallback = NULL;
 800a17e:	6505      	str	r5, [r0, #80]	; 0x50
  HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount);
 800a180:	f7fd fd7a 	bl	8007c78 <HAL_DMA_Start_IT>
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800a184:	6822      	ldr	r2, [r4, #0]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800a186:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800a188:	6853      	ldr	r3, [r2, #4]
  HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount);
 800a18a:	6b21      	ldr	r1, [r4, #48]	; 0x30
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800a18c:	f043 0301 	orr.w	r3, r3, #1
 800a190:	6053      	str	r3, [r2, #4]
  HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount);
 800a192:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800a194:	320c      	adds	r2, #12
  hspi->hdmatx->XferCpltCallback     = NULL;
 800a196:	e9c0 550f 	strd	r5, r5, [r0, #60]	; 0x3c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800a19a:	e9c0 5513 	strd	r5, r5, [r0, #76]	; 0x4c
  HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount);
 800a19e:	f7fd fd6b 	bl	8007c78 <HAL_DMA_Start_IT>
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 800a1a2:	6823      	ldr	r3, [r4, #0]
 800a1a4:	681a      	ldr	r2, [r3, #0]
 800a1a6:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 800a1a8:	bf5e      	ittt	pl
 800a1aa:	681a      	ldrpl	r2, [r3, #0]
 800a1ac:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 800a1b0:	601a      	strpl	r2, [r3, #0]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
 800a1b2:	685a      	ldr	r2, [r3, #4]
 800a1b4:	f042 0220 	orr.w	r2, r2, #32
 800a1b8:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800a1ba:	685a      	ldr	r2, [r3, #4]
 800a1bc:	f042 0202 	orr.w	r2, r2, #2
 800a1c0:	605a      	str	r2, [r3, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a1c2:	2000      	movs	r0, #0
  __HAL_UNLOCK(hspi);
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 800a1ca:	bd38      	pop	{r3, r4, r5, pc}
    errorcode = HAL_BUSY;
 800a1cc:	2002      	movs	r0, #2
 800a1ce:	e7f9      	b.n	800a1c4 <HAL_SPI_TransmitReceive_DMA+0xe4>
    errorcode = HAL_ERROR;
 800a1d0:	2001      	movs	r0, #1
 800a1d2:	e7f7      	b.n	800a1c4 <HAL_SPI_TransmitReceive_DMA+0xe4>
  __HAL_LOCK(hspi);
 800a1d4:	2002      	movs	r0, #2
 800a1d6:	e7f8      	b.n	800a1ca <HAL_SPI_TransmitReceive_DMA+0xea>
 800a1d8:	0800a2ff 	.word	0x0800a2ff
 800a1dc:	0800a30b 	.word	0x0800a30b
 800a1e0:	0800a339 	.word	0x0800a339
 800a1e4:	0800a3dd 	.word	0x0800a3dd
 800a1e8:	0800a317 	.word	0x0800a317

0800a1ec <HAL_SPI_Receive_DMA>:
{
 800a1ec:	4613      	mov	r3, r2
  if((hspi->Init.Direction == SPI_DIRECTION_2LINES)&&(hspi->Init.Mode == SPI_MODE_MASTER))
 800a1ee:	6882      	ldr	r2, [r0, #8]
{
 800a1f0:	b570      	push	{r4, r5, r6, lr}
 800a1f2:	4604      	mov	r4, r0
 800a1f4:	460d      	mov	r5, r1
  if((hspi->Init.Direction == SPI_DIRECTION_2LINES)&&(hspi->Init.Mode == SPI_MODE_MASTER))
 800a1f6:	b95a      	cbnz	r2, 800a210 <HAL_SPI_Receive_DMA+0x24>
 800a1f8:	6846      	ldr	r6, [r0, #4]
 800a1fa:	f5b6 7f82 	cmp.w	r6, #260	; 0x104
 800a1fe:	d107      	bne.n	800a210 <HAL_SPI_Receive_DMA+0x24>
     hspi->State = HAL_SPI_STATE_BUSY_RX;
 800a200:	2204      	movs	r2, #4
 800a202:	f880 2051 	strb.w	r2, [r0, #81]	; 0x51
}
 800a206:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
     return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 800a20a:	460a      	mov	r2, r1
 800a20c:	f7ff bf68 	b.w	800a0e0 <HAL_SPI_TransmitReceive_DMA>
  __HAL_LOCK(hspi);
 800a210:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
 800a214:	2901      	cmp	r1, #1
 800a216:	d053      	beq.n	800a2c0 <HAL_SPI_Receive_DMA+0xd4>
  if(hspi->State != HAL_SPI_STATE_READY)
 800a218:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
  __HAL_LOCK(hspi);
 800a21c:	2101      	movs	r1, #1
  if(hspi->State != HAL_SPI_STATE_READY)
 800a21e:	b2c0      	uxtb	r0, r0
 800a220:	4288      	cmp	r0, r1
  __HAL_LOCK(hspi);
 800a222:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
  if(hspi->State != HAL_SPI_STATE_READY)
 800a226:	d149      	bne.n	800a2bc <HAL_SPI_Receive_DMA+0xd0>
  if((pData == NULL) || (Size == 0))
 800a228:	2d00      	cmp	r5, #0
 800a22a:	d043      	beq.n	800a2b4 <HAL_SPI_Receive_DMA+0xc8>
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d041      	beq.n	800a2b4 <HAL_SPI_Receive_DMA+0xc8>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800a230:	2104      	movs	r1, #4
 800a232:	f884 1051 	strb.w	r1, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a236:	2100      	movs	r1, #0
 800a238:	6561      	str	r1, [r4, #84]	; 0x54
  hspi->TxISR       = NULL;
 800a23a:	e9c4 1110 	strd	r1, r1, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 800a23e:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxXferSize  = 0U;
 800a240:	86a1      	strh	r1, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800a242:	86e1      	strh	r1, [r4, #54]	; 0x36
 800a244:	6821      	ldr	r1, [r4, #0]
  hspi->RxXferSize  = Size;
 800a246:	87a3      	strh	r3, [r4, #60]	; 0x3c
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a248:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    SPI_1LINE_RX(hspi);
 800a24c:	bf08      	it	eq
 800a24e:	680b      	ldreq	r3, [r1, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800a250:	63a5      	str	r5, [r4, #56]	; 0x38
    SPI_1LINE_RX(hspi);
 800a252:	bf04      	itt	eq
 800a254:	f423 4380 	biceq.w	r3, r3, #16384	; 0x4000
 800a258:	600b      	streq	r3, [r1, #0]
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a25a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a25c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a260:	d109      	bne.n	800a276 <HAL_SPI_Receive_DMA+0x8a>
    SPI_RESET_CRC(hspi);
 800a262:	680b      	ldr	r3, [r1, #0]
 800a264:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a268:	041b      	lsls	r3, r3, #16
 800a26a:	0c1b      	lsrs	r3, r3, #16
 800a26c:	600b      	str	r3, [r1, #0]
 800a26e:	680b      	ldr	r3, [r1, #0]
 800a270:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a274:	600b      	str	r3, [r1, #0]
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800a276:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800a278:	4b12      	ldr	r3, [pc, #72]	; (800a2c4 <HAL_SPI_Receive_DMA+0xd8>)
 800a27a:	6403      	str	r3, [r0, #64]	; 0x40
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800a27c:	4b12      	ldr	r3, [pc, #72]	; (800a2c8 <HAL_SPI_Receive_DMA+0xdc>)
 800a27e:	63c3      	str	r3, [r0, #60]	; 0x3c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800a280:	4b12      	ldr	r3, [pc, #72]	; (800a2cc <HAL_SPI_Receive_DMA+0xe0>)
 800a282:	64c3      	str	r3, [r0, #76]	; 0x4c
  hspi->hdmarx->XferAbortCallback = NULL;
 800a284:	2300      	movs	r3, #0
 800a286:	6503      	str	r3, [r0, #80]	; 0x50
  HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount);
 800a288:	462a      	mov	r2, r5
 800a28a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800a28c:	310c      	adds	r1, #12
 800a28e:	f7fd fcf3 	bl	8007c78 <HAL_DMA_Start_IT>
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 800a292:	6823      	ldr	r3, [r4, #0]
 800a294:	681a      	ldr	r2, [r3, #0]
 800a296:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 800a298:	bf5e      	ittt	pl
 800a29a:	681a      	ldrpl	r2, [r3, #0]
 800a29c:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 800a2a0:	601a      	strpl	r2, [r3, #0]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
 800a2a2:	685a      	ldr	r2, [r3, #4]
 800a2a4:	f042 0220 	orr.w	r2, r2, #32
 800a2a8:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800a2aa:	685a      	ldr	r2, [r3, #4]
 800a2ac:	f042 0201 	orr.w	r2, r2, #1
 800a2b0:	605a      	str	r2, [r3, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a2b2:	2000      	movs	r0, #0
  __HAL_UNLOCK(hspi);
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 800a2ba:	bd70      	pop	{r4, r5, r6, pc}
    errorcode = HAL_BUSY;
 800a2bc:	2002      	movs	r0, #2
 800a2be:	e7f9      	b.n	800a2b4 <HAL_SPI_Receive_DMA+0xc8>
  __HAL_LOCK(hspi);
 800a2c0:	2002      	movs	r0, #2
 800a2c2:	e7fa      	b.n	800a2ba <HAL_SPI_Receive_DMA+0xce>
 800a2c4:	0800a2ff 	.word	0x0800a2ff
 800a2c8:	0800a339 	.word	0x0800a339
 800a2cc:	0800a317 	.word	0x0800a317

0800a2d0 <HAL_SPI_DMAStop>:
{
 800a2d0:	b510      	push	{r4, lr}
 800a2d2:	4604      	mov	r4, r0
  if(hspi->hdmatx != NULL)
 800a2d4:	6c80      	ldr	r0, [r0, #72]	; 0x48
 800a2d6:	b108      	cbz	r0, 800a2dc <HAL_SPI_DMAStop+0xc>
    HAL_DMA_Abort(hspi->hdmatx);
 800a2d8:	f7fd fd0c 	bl	8007cf4 <HAL_DMA_Abort>
  if(hspi->hdmarx != NULL)
 800a2dc:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800a2de:	b108      	cbz	r0, 800a2e4 <HAL_SPI_DMAStop+0x14>
    HAL_DMA_Abort(hspi->hdmarx);
 800a2e0:	f7fd fd08 	bl	8007cf4 <HAL_DMA_Abort>
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800a2e4:	6822      	ldr	r2, [r4, #0]
 800a2e6:	6853      	ldr	r3, [r2, #4]
 800a2e8:	f023 0303 	bic.w	r3, r3, #3
 800a2ec:	6053      	str	r3, [r2, #4]
  hspi->State = HAL_SPI_STATE_READY;
 800a2ee:	2301      	movs	r3, #1
 800a2f0:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 800a2f4:	2000      	movs	r0, #0
 800a2f6:	bd10      	pop	{r4, pc}

0800a2f8 <HAL_SPI_RxCpltCallback>:
 800a2f8:	4770      	bx	lr

0800a2fa <HAL_SPI_TxRxCpltCallback>:
 800a2fa:	4770      	bx	lr

0800a2fc <HAL_SPI_RxHalfCpltCallback>:
 800a2fc:	4770      	bx	lr

0800a2fe <SPI_DMAHalfReceiveCplt>:
{
 800a2fe:	b508      	push	{r3, lr}
  HAL_SPI_RxHalfCpltCallback(hspi);
 800a300:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800a302:	f7ff fffb 	bl	800a2fc <HAL_SPI_RxHalfCpltCallback>
}
 800a306:	bd08      	pop	{r3, pc}

0800a308 <HAL_SPI_TxRxHalfCpltCallback>:
 800a308:	4770      	bx	lr

0800a30a <SPI_DMAHalfTransmitReceiveCplt>:
{
 800a30a:	b508      	push	{r3, lr}
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800a30c:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800a30e:	f7ff fffb 	bl	800a308 <HAL_SPI_TxRxHalfCpltCallback>
}
 800a312:	bd08      	pop	{r3, pc}

0800a314 <HAL_SPI_ErrorCallback>:
 800a314:	4770      	bx	lr

0800a316 <SPI_DMAError>:
  SPI_HandleTypeDef* hspi = (SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a316:	6b80      	ldr	r0, [r0, #56]	; 0x38
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800a318:	6802      	ldr	r2, [r0, #0]
{
 800a31a:	b508      	push	{r3, lr}
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800a31c:	6853      	ldr	r3, [r2, #4]
 800a31e:	f023 0303 	bic.w	r3, r3, #3
 800a322:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a324:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800a326:	f043 0310 	orr.w	r3, r3, #16
 800a32a:	6543      	str	r3, [r0, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800a32c:	2301      	movs	r3, #1
 800a32e:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
  HAL_SPI_ErrorCallback(hspi);
 800a332:	f7ff ffef 	bl	800a314 <HAL_SPI_ErrorCallback>
}
 800a336:	bd08      	pop	{r3, pc}

0800a338 <SPI_DMAReceiveCplt>:
{
 800a338:	b530      	push	{r4, r5, lr}
 800a33a:	4605      	mov	r5, r0
 800a33c:	b085      	sub	sp, #20
  __IO uint16_t tmpreg = 0U;
 800a33e:	2300      	movs	r3, #0
 800a340:	f8ad 300e 	strh.w	r3, [sp, #14]
  SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a344:	6b84      	ldr	r4, [r0, #56]	; 0x38
  tickstart = HAL_GetTick();
 800a346:	f7fd fb1b 	bl	8007980 <HAL_GetTick>
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a34a:	682b      	ldr	r3, [r5, #0]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	05d9      	lsls	r1, r3, #23
 800a350:	d440      	bmi.n	800a3d4 <SPI_DMAReceiveCplt+0x9c>
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a352:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a354:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a358:	d112      	bne.n	800a380 <SPI_DMAReceiveCplt+0x48>
      if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SPI_FLAG_RXNE, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800a35a:	2201      	movs	r2, #1
 800a35c:	9000      	str	r0, [sp, #0]
 800a35e:	2364      	movs	r3, #100	; 0x64
 800a360:	4611      	mov	r1, r2
 800a362:	4620      	mov	r0, r4
 800a364:	f7ff fcca 	bl	8009cfc <SPI_WaitFlagStateUntilTimeout>
 800a368:	b118      	cbz	r0, 800a372 <SPI_DMAReceiveCplt+0x3a>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800a36a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a36c:	f043 0302 	orr.w	r3, r3, #2
 800a370:	6563      	str	r3, [r4, #84]	; 0x54
      tmpreg = hspi->Instance->DR;
 800a372:	6823      	ldr	r3, [r4, #0]
 800a374:	68db      	ldr	r3, [r3, #12]
 800a376:	b29b      	uxth	r3, r3
 800a378:	f8ad 300e 	strh.w	r3, [sp, #14]
      UNUSED(tmpreg);
 800a37c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800a380:	6823      	ldr	r3, [r4, #0]
 800a382:	685a      	ldr	r2, [r3, #4]
 800a384:	f022 0203 	bic.w	r2, r2, #3
 800a388:	605a      	str	r2, [r3, #4]
    if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a38a:	6862      	ldr	r2, [r4, #4]
 800a38c:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800a390:	d10a      	bne.n	800a3a8 <SPI_DMAReceiveCplt+0x70>
 800a392:	68a2      	ldr	r2, [r4, #8]
 800a394:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800a398:	d002      	beq.n	800a3a0 <SPI_DMAReceiveCplt+0x68>
 800a39a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800a39e:	d103      	bne.n	800a3a8 <SPI_DMAReceiveCplt+0x70>
      __HAL_SPI_DISABLE(hspi);
 800a3a0:	681a      	ldr	r2, [r3, #0]
 800a3a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a3a6:	601a      	str	r2, [r3, #0]
    hspi->RxXferCount = 0U;
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	87e2      	strh	r2, [r4, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800a3ac:	2201      	movs	r2, #1
 800a3ae:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
    if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 800a3b2:	689a      	ldr	r2, [r3, #8]
 800a3b4:	06d2      	lsls	r2, r2, #27
 800a3b6:	d506      	bpl.n	800a3c6 <SPI_DMAReceiveCplt+0x8e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800a3b8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800a3ba:	f042 0202 	orr.w	r2, r2, #2
 800a3be:	6562      	str	r2, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 800a3c0:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800a3c4:	609a      	str	r2, [r3, #8]
    if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a3c6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a3c8:	b123      	cbz	r3, 800a3d4 <SPI_DMAReceiveCplt+0x9c>
      HAL_SPI_ErrorCallback(hspi);
 800a3ca:	4620      	mov	r0, r4
 800a3cc:	f7ff ffa2 	bl	800a314 <HAL_SPI_ErrorCallback>
}
 800a3d0:	b005      	add	sp, #20
 800a3d2:	bd30      	pop	{r4, r5, pc}
  HAL_SPI_RxCpltCallback(hspi);
 800a3d4:	4620      	mov	r0, r4
 800a3d6:	f7ff ff8f 	bl	800a2f8 <HAL_SPI_RxCpltCallback>
 800a3da:	e7f9      	b.n	800a3d0 <SPI_DMAReceiveCplt+0x98>

0800a3dc <SPI_DMATransmitReceiveCplt>:
{
 800a3dc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800a3de:	4606      	mov	r6, r0
  __IO int16_t tmpreg = 0U;
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	f8ad 300e 	strh.w	r3, [sp, #14]
  SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a3e6:	6b84      	ldr	r4, [r0, #56]	; 0x38
  tickstart = HAL_GetTick();
 800a3e8:	f7fd faca 	bl	8007980 <HAL_GetTick>
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a3ec:	6833      	ldr	r3, [r6, #0]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	05d9      	lsls	r1, r3, #23
  tickstart = HAL_GetTick();
 800a3f2:	4605      	mov	r5, r0
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a3f4:	d43c      	bmi.n	800a470 <SPI_DMATransmitReceiveCplt+0x94>
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a3f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a3f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a3fc:	d112      	bne.n	800a424 <SPI_DMATransmitReceiveCplt+0x48>
      if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800a3fe:	2201      	movs	r2, #1
 800a400:	9000      	str	r0, [sp, #0]
 800a402:	2364      	movs	r3, #100	; 0x64
 800a404:	4611      	mov	r1, r2
 800a406:	4620      	mov	r0, r4
 800a408:	f7ff fc78 	bl	8009cfc <SPI_WaitFlagStateUntilTimeout>
 800a40c:	b118      	cbz	r0, 800a416 <SPI_DMATransmitReceiveCplt+0x3a>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800a40e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a410:	f043 0302 	orr.w	r3, r3, #2
 800a414:	6563      	str	r3, [r4, #84]	; 0x54
      tmpreg = hspi->Instance->DR;
 800a416:	6823      	ldr	r3, [r4, #0]
 800a418:	68db      	ldr	r3, [r3, #12]
 800a41a:	b21b      	sxth	r3, r3
 800a41c:	f8ad 300e 	strh.w	r3, [sp, #14]
      UNUSED(tmpreg);
 800a420:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    if(SPI_CheckFlag_BSY(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800a424:	462a      	mov	r2, r5
 800a426:	2164      	movs	r1, #100	; 0x64
 800a428:	4620      	mov	r0, r4
 800a42a:	f7ff fcad 	bl	8009d88 <SPI_CheckFlag_BSY>
 800a42e:	b118      	cbz	r0, 800a438 <SPI_DMATransmitReceiveCplt+0x5c>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a430:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a432:	f043 0320 	orr.w	r3, r3, #32
 800a436:	6563      	str	r3, [r4, #84]	; 0x54
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800a438:	6823      	ldr	r3, [r4, #0]
 800a43a:	685a      	ldr	r2, [r3, #4]
 800a43c:	f022 0203 	bic.w	r2, r2, #3
 800a440:	605a      	str	r2, [r3, #4]
    hspi->TxXferCount = 0U;
 800a442:	2200      	movs	r2, #0
 800a444:	86e2      	strh	r2, [r4, #54]	; 0x36
    hspi->RxXferCount = 0U;
 800a446:	87e2      	strh	r2, [r4, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800a448:	2201      	movs	r2, #1
 800a44a:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
    if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 800a44e:	689a      	ldr	r2, [r3, #8]
 800a450:	06d2      	lsls	r2, r2, #27
 800a452:	d506      	bpl.n	800a462 <SPI_DMATransmitReceiveCplt+0x86>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800a454:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800a456:	f042 0202 	orr.w	r2, r2, #2
 800a45a:	6562      	str	r2, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 800a45c:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800a460:	609a      	str	r2, [r3, #8]
    if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a462:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a464:	b123      	cbz	r3, 800a470 <SPI_DMATransmitReceiveCplt+0x94>
      HAL_SPI_ErrorCallback(hspi);
 800a466:	4620      	mov	r0, r4
 800a468:	f7ff ff54 	bl	800a314 <HAL_SPI_ErrorCallback>
}
 800a46c:	b004      	add	sp, #16
 800a46e:	bd70      	pop	{r4, r5, r6, pc}
  HAL_SPI_TxRxCpltCallback(hspi);
 800a470:	4620      	mov	r0, r4
 800a472:	f7ff ff42 	bl	800a2fa <HAL_SPI_TxRxCpltCallback>
 800a476:	e7f9      	b.n	800a46c <SPI_DMATransmitReceiveCplt+0x90>

0800a478 <HAL_SPI_GetState>:
  return hspi->State;
 800a478:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
}
 800a47c:	4770      	bx	lr
	...

0800a480 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;  

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a480:	6a03      	ldr	r3, [r0, #32]
 800a482:	f023 0301 	bic.w	r3, r3, #1
 800a486:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a488:	6a03      	ldr	r3, [r0, #32]
{
 800a48a:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 800a48c:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a48e:	6982      	ldr	r2, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a490:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a492:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800a496:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a498:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 800a49a:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 800a49e:	432b      	orrs	r3, r5

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800a4a0:	4d0c      	ldr	r5, [pc, #48]	; (800a4d4 <TIM_OC1_SetConfig+0x54>)
 800a4a2:	42a8      	cmp	r0, r5
 800a4a4:	d003      	beq.n	800a4ae <TIM_OC1_SetConfig+0x2e>
 800a4a6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800a4aa:	42a8      	cmp	r0, r5
 800a4ac:	d10b      	bne.n	800a4c6 <TIM_OC1_SetConfig+0x46>
  {   
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a4ae:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 800a4b0:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 800a4b4:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a4b6:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a4ba:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 800a4be:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 800a4c0:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 800a4c4:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a4c6:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a4c8:	6182      	str	r2, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a4ca:	684a      	ldr	r2, [r1, #4]
 800a4cc:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 800a4ce:	6203      	str	r3, [r0, #32]
} 
 800a4d0:	bd70      	pop	{r4, r5, r6, pc}
 800a4d2:	bf00      	nop
 800a4d4:	40010000 	.word	0x40010000

0800a4d8 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a4d8:	6a03      	ldr	r3, [r0, #32]
 800a4da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a4de:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a4e0:	6a03      	ldr	r3, [r0, #32]
{
 800a4e2:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 800a4e4:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a4e6:	69c2      	ldr	r2, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a4e8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 800a4ea:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800a4ee:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a4f0:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 800a4f2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a4f6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800a4fa:	4d0d      	ldr	r5, [pc, #52]	; (800a530 <TIM_OC3_SetConfig+0x58>)
 800a4fc:	42a8      	cmp	r0, r5
 800a4fe:	d003      	beq.n	800a508 <TIM_OC3_SetConfig+0x30>
 800a500:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800a504:	42a8      	cmp	r0, r5
 800a506:	d10d      	bne.n	800a524 <TIM_OC3_SetConfig+0x4c>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a508:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800a50a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a50e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a512:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a516:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a51a:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 800a51c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a520:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a524:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a526:	61c2      	str	r2, [r0, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a528:	684a      	ldr	r2, [r1, #4]
 800a52a:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a52c:	6203      	str	r3, [r0, #32]
}
 800a52e:	bd70      	pop	{r4, r5, r6, pc}
 800a530:	40010000 	.word	0x40010000

0800a534 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a534:	6a03      	ldr	r3, [r0, #32]
 800a536:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a53a:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a53c:	6a03      	ldr	r3, [r0, #32]
{
 800a53e:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 800a540:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a542:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a544:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a546:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a54a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a54e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 800a550:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a554:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800a558:	4d08      	ldr	r5, [pc, #32]	; (800a57c <TIM_OC4_SetConfig+0x48>)
 800a55a:	42a8      	cmp	r0, r5
 800a55c:	d003      	beq.n	800a566 <TIM_OC4_SetConfig+0x32>
 800a55e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800a562:	42a8      	cmp	r0, r5
 800a564:	d104      	bne.n	800a570 <TIM_OC4_SetConfig+0x3c>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a566:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a568:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a56c:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a570:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 800a572:	61c2      	str	r2, [r0, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a574:	684a      	ldr	r2, [r1, #4]
 800a576:	6402      	str	r2, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a578:	6203      	str	r3, [r0, #32]
}
 800a57a:	bd30      	pop	{r4, r5, pc}
 800a57c:	40010000 	.word	0x40010000

0800a580 <TIM_SlaveTimer_SetConfig>:
  uint32_t tmpsmcr = 0U;
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;

 /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a580:	6803      	ldr	r3, [r0, #0]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800a582:	6848      	ldr	r0, [r1, #4]
  tmpsmcr = htim->Instance->SMCR;
 800a584:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800a586:	f022 0270 	bic.w	r2, r2, #112	; 0x70
{
 800a58a:	b530      	push	{r4, r5, lr}
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800a58c:	4302      	orrs	r2, r0

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800a58e:	680c      	ldr	r4, [r1, #0]
  tmpsmcr &= ~TIM_SMCR_SMS;
 800a590:	f022 0207 	bic.w	r2, r2, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800a594:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
  
  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800a596:	2850      	cmp	r0, #80	; 0x50
  htim->Instance->SMCR = tmpsmcr;
 800a598:	609a      	str	r2, [r3, #8]
  switch (sSlaveConfig->InputTrigger)
 800a59a:	d021      	beq.n	800a5e0 <TIM_SlaveTimer_SetConfig+0x60>
 800a59c:	d802      	bhi.n	800a5a4 <TIM_SlaveTimer_SetConfig+0x24>
 800a59e:	2840      	cmp	r0, #64	; 0x40
 800a5a0:	d010      	beq.n	800a5c4 <TIM_SlaveTimer_SetConfig+0x44>
    break;
       
  default:
    break;
  }
}
 800a5a2:	bd30      	pop	{r4, r5, pc}
  switch (sSlaveConfig->InputTrigger)
 800a5a4:	2860      	cmp	r0, #96	; 0x60
 800a5a6:	d02d      	beq.n	800a604 <TIM_SlaveTimer_SetConfig+0x84>
 800a5a8:	2870      	cmp	r0, #112	; 0x70
 800a5aa:	d1fa      	bne.n	800a5a2 <TIM_SlaveTimer_SetConfig+0x22>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800a5ac:	e9d1 4202 	ldrd	r4, r2, [r1, #8]
  tmpsmcr = TIMx->SMCR;
 800a5b0:	6898      	ldr	r0, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800a5b2:	6909      	ldr	r1, [r1, #16]
 800a5b4:	4322      	orrs	r2, r4
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a5b6:	f420 407f 	bic.w	r0, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800a5ba:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800a5be:	4302      	orrs	r2, r0

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a5c0:	609a      	str	r2, [r3, #8]
 800a5c2:	e7ee      	b.n	800a5a2 <TIM_SlaveTimer_SetConfig+0x22>
      tmpccer = htim->Instance->CCER;
 800a5c4:	6a18      	ldr	r0, [r3, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800a5c6:	6a1a      	ldr	r2, [r3, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800a5c8:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800a5ca:	f022 0201 	bic.w	r2, r2, #1
 800a5ce:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;    
 800a5d0:	699a      	ldr	r2, [r3, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a5d2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800a5d6:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 800a5da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;                               
 800a5dc:	6218      	str	r0, [r3, #32]
    break;
 800a5de:	e7e0      	b.n	800a5a2 <TIM_SlaveTimer_SetConfig+0x22>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a5e0:	6888      	ldr	r0, [r1, #8]
 800a5e2:	690d      	ldr	r5, [r1, #16]
  tmpccer = TIMx->CCER;
 800a5e4:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a5e6:	6a1c      	ldr	r4, [r3, #32]
 800a5e8:	f024 0401 	bic.w	r4, r4, #1
 800a5ec:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 800a5ee:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a5f0:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a5f4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a5f8:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer |= TIM_ICPolarity;
 800a5fc:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 800a5fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a600:	6219      	str	r1, [r3, #32]
 800a602:	e7ce      	b.n	800a5a2 <TIM_SlaveTimer_SetConfig+0x22>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a604:	6a18      	ldr	r0, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a606:	688c      	ldr	r4, [r1, #8]
 800a608:	690d      	ldr	r5, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a60a:	f020 0010 	bic.w	r0, r0, #16
 800a60e:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a610:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 800a612:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a614:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a618:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a61c:	ea41 3105 	orr.w	r1, r1, r5, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 800a620:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 800a624:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800a626:	621a      	str	r2, [r3, #32]
}
 800a628:	e7bb      	b.n	800a5a2 <TIM_SlaveTimer_SetConfig+0x22>

0800a62a <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a62a:	6803      	ldr	r3, [r0, #0]
 800a62c:	68da      	ldr	r2, [r3, #12]
 800a62e:	f042 0201 	orr.w	r2, r2, #1
 800a632:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 800a634:	681a      	ldr	r2, [r3, #0]
 800a636:	f042 0201 	orr.w	r2, r2, #1
 800a63a:	601a      	str	r2, [r3, #0]
}
 800a63c:	2000      	movs	r0, #0
 800a63e:	4770      	bx	lr

0800a640 <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800a640:	6803      	ldr	r3, [r0, #0]
 800a642:	68da      	ldr	r2, [r3, #12]
 800a644:	f022 0201 	bic.w	r2, r2, #1
 800a648:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE(htim);
 800a64a:	6a19      	ldr	r1, [r3, #32]
 800a64c:	f241 1211 	movw	r2, #4369	; 0x1111
 800a650:	4211      	tst	r1, r2
 800a652:	d108      	bne.n	800a666 <HAL_TIM_Base_Stop_IT+0x26>
 800a654:	6a19      	ldr	r1, [r3, #32]
 800a656:	f240 4244 	movw	r2, #1092	; 0x444
 800a65a:	4211      	tst	r1, r2
 800a65c:	bf02      	ittt	eq
 800a65e:	681a      	ldreq	r2, [r3, #0]
 800a660:	f022 0201 	biceq.w	r2, r2, #1
 800a664:	601a      	streq	r2, [r3, #0]
}
 800a666:	2000      	movs	r0, #0
 800a668:	4770      	bx	lr

0800a66a <HAL_TIM_PWM_MspInit>:
 800a66a:	4770      	bx	lr

0800a66c <HAL_TIM_SlaveConfigSynchronization>:
{
 800a66c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800a66e:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800a672:	2b01      	cmp	r3, #1
{
 800a674:	4604      	mov	r4, r0
 800a676:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 800a67a:	d015      	beq.n	800a6a8 <HAL_TIM_SlaveConfigSynchronization+0x3c>
 800a67c:	2501      	movs	r5, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800a67e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_LOCK(htim);
 800a682:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
  TIM_SlaveTimer_SetConfig(htim, sSlaveConfig);
 800a686:	f7ff ff7b 	bl	800a580 <TIM_SlaveTimer_SetConfig>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800a68a:	6823      	ldr	r3, [r4, #0]
 800a68c:	68da      	ldr	r2, [r3, #12]
 800a68e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a692:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800a694:	68da      	ldr	r2, [r3, #12]
  __HAL_UNLOCK(htim);  
 800a696:	2000      	movs	r0, #0
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800a698:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a69c:	60da      	str	r2, [r3, #12]
  htim->State = HAL_TIM_STATE_READY;
 800a69e:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);  
 800a6a2:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
} 
 800a6a6:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	e7fc      	b.n	800a6a6 <HAL_TIM_SlaveConfigSynchronization+0x3a>

0800a6ac <HAL_TIM_ReadCapturedValue>:
  __HAL_LOCK(htim);
 800a6ac:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800a6b0:	2b01      	cmp	r3, #1
 800a6b2:	d01c      	beq.n	800a6ee <HAL_TIM_ReadCapturedValue+0x42>
  switch (Channel)
 800a6b4:	290c      	cmp	r1, #12
 800a6b6:	d818      	bhi.n	800a6ea <HAL_TIM_ReadCapturedValue+0x3e>
 800a6b8:	e8df f001 	tbb	[pc, r1]
 800a6bc:	17171707 	.word	0x17171707
 800a6c0:	1717170e 	.word	0x1717170e
 800a6c4:	17171711 	.word	0x17171711
 800a6c8:	14          	.byte	0x14
 800a6c9:	00          	.byte	0x00
      tmpreg = htim->Instance->CCR1;
 800a6ca:	6803      	ldr	r3, [r0, #0]
 800a6cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  __HAL_UNLOCK(htim);  
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
}
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	4770      	bx	lr
      tmpreg = htim->Instance->CCR2;
 800a6d8:	6803      	ldr	r3, [r0, #0]
 800a6da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      break;
 800a6dc:	e7f7      	b.n	800a6ce <HAL_TIM_ReadCapturedValue+0x22>
      tmpreg = htim->Instance->CCR3;
 800a6de:	6803      	ldr	r3, [r0, #0]
 800a6e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      break;
 800a6e2:	e7f4      	b.n	800a6ce <HAL_TIM_ReadCapturedValue+0x22>
      tmpreg = htim->Instance->CCR4;
 800a6e4:	6803      	ldr	r3, [r0, #0]
 800a6e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
      break;
 800a6e8:	e7f1      	b.n	800a6ce <HAL_TIM_ReadCapturedValue+0x22>
  uint32_t tmpreg = 0U;
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	e7ef      	b.n	800a6ce <HAL_TIM_ReadCapturedValue+0x22>
  __HAL_LOCK(htim);
 800a6ee:	2302      	movs	r3, #2
 800a6f0:	e7f0      	b.n	800a6d4 <HAL_TIM_ReadCapturedValue+0x28>

0800a6f2 <HAL_TIM_IC_CaptureCallback>:
 800a6f2:	4770      	bx	lr

0800a6f4 <HAL_TIM_PWM_PulseFinishedCallback>:
 800a6f4:	4770      	bx	lr

0800a6f6 <HAL_TIM_TriggerCallback>:
 800a6f6:	4770      	bx	lr

0800a6f8 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a6f8:	6803      	ldr	r3, [r0, #0]
 800a6fa:	691a      	ldr	r2, [r3, #16]
 800a6fc:	0791      	lsls	r1, r2, #30
{
 800a6fe:	b510      	push	{r4, lr}
 800a700:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a702:	d50e      	bpl.n	800a722 <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 800a704:	68da      	ldr	r2, [r3, #12]
 800a706:	0792      	lsls	r2, r2, #30
 800a708:	d50b      	bpl.n	800a722 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a70a:	f06f 0202 	mvn.w	r2, #2
 800a70e:	611a      	str	r2, [r3, #16]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a710:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a712:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a714:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a716:	7602      	strb	r2, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a718:	d077      	beq.n	800a80a <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 800a71a:	f7ff ffea 	bl	800a6f2 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a71e:	2300      	movs	r3, #0
 800a720:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a722:	6823      	ldr	r3, [r4, #0]
 800a724:	691a      	ldr	r2, [r3, #16]
 800a726:	0750      	lsls	r0, r2, #29
 800a728:	d510      	bpl.n	800a74c <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 800a72a:	68da      	ldr	r2, [r3, #12]
 800a72c:	0751      	lsls	r1, r2, #29
 800a72e:	d50d      	bpl.n	800a74c <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a730:	f06f 0204 	mvn.w	r2, #4
 800a734:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a736:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a738:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a73a:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a73e:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 800a740:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a742:	d068      	beq.n	800a816 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 800a744:	f7ff ffd5 	bl	800a6f2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a748:	2300      	movs	r3, #0
 800a74a:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a74c:	6823      	ldr	r3, [r4, #0]
 800a74e:	691a      	ldr	r2, [r3, #16]
 800a750:	0712      	lsls	r2, r2, #28
 800a752:	d50f      	bpl.n	800a774 <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 800a754:	68da      	ldr	r2, [r3, #12]
 800a756:	0710      	lsls	r0, r2, #28
 800a758:	d50c      	bpl.n	800a774 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a75a:	f06f 0208 	mvn.w	r2, #8
 800a75e:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a760:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a762:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a764:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a766:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 800a768:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a76a:	d05a      	beq.n	800a822 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 800a76c:	f7ff ffc1 	bl	800a6f2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a770:	2300      	movs	r3, #0
 800a772:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a774:	6823      	ldr	r3, [r4, #0]
 800a776:	691a      	ldr	r2, [r3, #16]
 800a778:	06d2      	lsls	r2, r2, #27
 800a77a:	d510      	bpl.n	800a79e <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 800a77c:	68da      	ldr	r2, [r3, #12]
 800a77e:	06d0      	lsls	r0, r2, #27
 800a780:	d50d      	bpl.n	800a79e <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a782:	f06f 0210 	mvn.w	r2, #16
 800a786:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a788:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a78a:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a78c:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a790:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 800a792:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a794:	d04b      	beq.n	800a82e <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 800a796:	f7ff ffac 	bl	800a6f2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a79a:	2300      	movs	r3, #0
 800a79c:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a79e:	6823      	ldr	r3, [r4, #0]
 800a7a0:	691a      	ldr	r2, [r3, #16]
 800a7a2:	07d1      	lsls	r1, r2, #31
 800a7a4:	d508      	bpl.n	800a7b8 <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 800a7a6:	68da      	ldr	r2, [r3, #12]
 800a7a8:	07d2      	lsls	r2, r2, #31
 800a7aa:	d505      	bpl.n	800a7b8 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a7ac:	f06f 0201 	mvn.w	r2, #1
 800a7b0:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800a7b2:	4620      	mov	r0, r4
 800a7b4:	f003 fd4c 	bl	800e250 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a7b8:	6823      	ldr	r3, [r4, #0]
 800a7ba:	691a      	ldr	r2, [r3, #16]
 800a7bc:	0610      	lsls	r0, r2, #24
 800a7be:	d508      	bpl.n	800a7d2 <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 800a7c0:	68da      	ldr	r2, [r3, #12]
 800a7c2:	0611      	lsls	r1, r2, #24
 800a7c4:	d505      	bpl.n	800a7d2 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a7c6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a7ca:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800a7cc:	4620      	mov	r0, r4
 800a7ce:	f000 fb19 	bl	800ae04 <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a7d2:	6823      	ldr	r3, [r4, #0]
 800a7d4:	691a      	ldr	r2, [r3, #16]
 800a7d6:	0652      	lsls	r2, r2, #25
 800a7d8:	d508      	bpl.n	800a7ec <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 800a7da:	68da      	ldr	r2, [r3, #12]
 800a7dc:	0650      	lsls	r0, r2, #25
 800a7de:	d505      	bpl.n	800a7ec <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a7e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a7e4:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800a7e6:	4620      	mov	r0, r4
 800a7e8:	f7ff ff85 	bl	800a6f6 <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a7ec:	6823      	ldr	r3, [r4, #0]
 800a7ee:	691a      	ldr	r2, [r3, #16]
 800a7f0:	0691      	lsls	r1, r2, #26
 800a7f2:	d522      	bpl.n	800a83a <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 800a7f4:	68da      	ldr	r2, [r3, #12]
 800a7f6:	0692      	lsls	r2, r2, #26
 800a7f8:	d51f      	bpl.n	800a83a <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a7fa:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 800a7fe:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a800:	611a      	str	r2, [r3, #16]
}
 800a802:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 800a806:	f000 bafc 	b.w	800ae02 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a80a:	f003 fd09 	bl	800e220 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a80e:	4620      	mov	r0, r4
 800a810:	f7ff ff70 	bl	800a6f4 <HAL_TIM_PWM_PulseFinishedCallback>
 800a814:	e783      	b.n	800a71e <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a816:	f003 fd03 	bl	800e220 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a81a:	4620      	mov	r0, r4
 800a81c:	f7ff ff6a 	bl	800a6f4 <HAL_TIM_PWM_PulseFinishedCallback>
 800a820:	e792      	b.n	800a748 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a822:	f003 fcfd 	bl	800e220 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 800a826:	4620      	mov	r0, r4
 800a828:	f7ff ff64 	bl	800a6f4 <HAL_TIM_PWM_PulseFinishedCallback>
 800a82c:	e7a0      	b.n	800a770 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a82e:	f003 fcf7 	bl	800e220 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a832:	4620      	mov	r0, r4
 800a834:	f7ff ff5e 	bl	800a6f4 <HAL_TIM_PWM_PulseFinishedCallback>
 800a838:	e7af      	b.n	800a79a <HAL_TIM_IRQHandler+0xa2>
}
 800a83a:	bd10      	pop	{r4, pc}

0800a83c <TIM_Base_SetConfig>:
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 800a83c:	4a2e      	ldr	r2, [pc, #184]	; (800a8f8 <TIM_Base_SetConfig+0xbc>)
  tmpcr1 = TIMx->CR1;
 800a83e:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 800a840:	4290      	cmp	r0, r2
 800a842:	d012      	beq.n	800a86a <TIM_Base_SetConfig+0x2e>
 800a844:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800a848:	d00f      	beq.n	800a86a <TIM_Base_SetConfig+0x2e>
 800a84a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800a84e:	4290      	cmp	r0, r2
 800a850:	d00b      	beq.n	800a86a <TIM_Base_SetConfig+0x2e>
 800a852:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a856:	4290      	cmp	r0, r2
 800a858:	d007      	beq.n	800a86a <TIM_Base_SetConfig+0x2e>
 800a85a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a85e:	4290      	cmp	r0, r2
 800a860:	d003      	beq.n	800a86a <TIM_Base_SetConfig+0x2e>
 800a862:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800a866:	4290      	cmp	r0, r2
 800a868:	d119      	bne.n	800a89e <TIM_Base_SetConfig+0x62>
    tmpcr1 |= Structure->CounterMode;
 800a86a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a86c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800a870:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 800a872:	4a21      	ldr	r2, [pc, #132]	; (800a8f8 <TIM_Base_SetConfig+0xbc>)
 800a874:	4290      	cmp	r0, r2
 800a876:	d029      	beq.n	800a8cc <TIM_Base_SetConfig+0x90>
 800a878:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800a87c:	d026      	beq.n	800a8cc <TIM_Base_SetConfig+0x90>
 800a87e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800a882:	4290      	cmp	r0, r2
 800a884:	d022      	beq.n	800a8cc <TIM_Base_SetConfig+0x90>
 800a886:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a88a:	4290      	cmp	r0, r2
 800a88c:	d01e      	beq.n	800a8cc <TIM_Base_SetConfig+0x90>
 800a88e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a892:	4290      	cmp	r0, r2
 800a894:	d01a      	beq.n	800a8cc <TIM_Base_SetConfig+0x90>
 800a896:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800a89a:	4290      	cmp	r0, r2
 800a89c:	d016      	beq.n	800a8cc <TIM_Base_SetConfig+0x90>
 800a89e:	4a17      	ldr	r2, [pc, #92]	; (800a8fc <TIM_Base_SetConfig+0xc0>)
 800a8a0:	4290      	cmp	r0, r2
 800a8a2:	d013      	beq.n	800a8cc <TIM_Base_SetConfig+0x90>
 800a8a4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a8a8:	4290      	cmp	r0, r2
 800a8aa:	d00f      	beq.n	800a8cc <TIM_Base_SetConfig+0x90>
 800a8ac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a8b0:	4290      	cmp	r0, r2
 800a8b2:	d00b      	beq.n	800a8cc <TIM_Base_SetConfig+0x90>
 800a8b4:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800a8b8:	4290      	cmp	r0, r2
 800a8ba:	d007      	beq.n	800a8cc <TIM_Base_SetConfig+0x90>
 800a8bc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a8c0:	4290      	cmp	r0, r2
 800a8c2:	d003      	beq.n	800a8cc <TIM_Base_SetConfig+0x90>
 800a8c4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a8c8:	4290      	cmp	r0, r2
 800a8ca:	d103      	bne.n	800a8d4 <TIM_Base_SetConfig+0x98>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a8cc:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800a8ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a8d2:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800a8d4:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a8d6:	688b      	ldr	r3, [r1, #8]
 800a8d8:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800a8da:	680b      	ldr	r3, [r1, #0]
 800a8dc:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 800a8de:	4b06      	ldr	r3, [pc, #24]	; (800a8f8 <TIM_Base_SetConfig+0xbc>)
 800a8e0:	4298      	cmp	r0, r3
 800a8e2:	d003      	beq.n	800a8ec <TIM_Base_SetConfig+0xb0>
 800a8e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a8e8:	4298      	cmp	r0, r3
 800a8ea:	d101      	bne.n	800a8f0 <TIM_Base_SetConfig+0xb4>
    TIMx->RCR = Structure->RepetitionCounter;
 800a8ec:	690b      	ldr	r3, [r1, #16]
 800a8ee:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800a8f0:	2301      	movs	r3, #1
 800a8f2:	6143      	str	r3, [r0, #20]
}
 800a8f4:	4770      	bx	lr
 800a8f6:	bf00      	nop
 800a8f8:	40010000 	.word	0x40010000
 800a8fc:	40014000 	.word	0x40014000

0800a900 <HAL_TIM_Base_Init>:
{ 
 800a900:	b510      	push	{r4, lr}
  if(htim == NULL)
 800a902:	4604      	mov	r4, r0
 800a904:	b1a0      	cbz	r0, 800a930 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 800a906:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800a90a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a90e:	b91b      	cbnz	r3, 800a918 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800a910:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 800a914:	f006 fd30 	bl	8011378 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 800a918:	2302      	movs	r3, #2
 800a91a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800a91e:	6820      	ldr	r0, [r4, #0]
 800a920:	1d21      	adds	r1, r4, #4
 800a922:	f7ff ff8b 	bl	800a83c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800a926:	2301      	movs	r3, #1
 800a928:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 800a92c:	2000      	movs	r0, #0
}
 800a92e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800a930:	2001      	movs	r0, #1
 800a932:	e7fc      	b.n	800a92e <HAL_TIM_Base_Init+0x2e>

0800a934 <HAL_TIM_OC_Init>:
{
 800a934:	b510      	push	{r4, lr}
  if(htim == NULL)
 800a936:	4604      	mov	r4, r0
 800a938:	b1a0      	cbz	r0, 800a964 <HAL_TIM_OC_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 800a93a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800a93e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a942:	b91b      	cbnz	r3, 800a94c <HAL_TIM_OC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800a944:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_OC_MspInit(htim);
 800a948:	f006 fd50 	bl	80113ec <HAL_TIM_OC_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 800a94c:	2302      	movs	r3, #2
 800a94e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance,  &htim->Init); 
 800a952:	6820      	ldr	r0, [r4, #0]
 800a954:	1d21      	adds	r1, r4, #4
 800a956:	f7ff ff71 	bl	800a83c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800a95a:	2301      	movs	r3, #1
 800a95c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 800a960:	2000      	movs	r0, #0
}
 800a962:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800a964:	2001      	movs	r0, #1
 800a966:	e7fc      	b.n	800a962 <HAL_TIM_OC_Init+0x2e>

0800a968 <HAL_TIM_PWM_Init>:
{
 800a968:	b510      	push	{r4, lr}
  if(htim == NULL)
 800a96a:	4604      	mov	r4, r0
 800a96c:	b1a0      	cbz	r0, 800a998 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 800a96e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800a972:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a976:	b91b      	cbnz	r3, 800a980 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800a978:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_PWM_MspInit(htim);
 800a97c:	f7ff fe75 	bl	800a66a <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;  
 800a980:	2302      	movs	r3, #2
 800a982:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800a986:	6820      	ldr	r0, [r4, #0]
 800a988:	1d21      	adds	r1, r4, #4
 800a98a:	f7ff ff57 	bl	800a83c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800a98e:	2301      	movs	r3, #1
 800a990:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 800a994:	2000      	movs	r0, #0
}  
 800a996:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800a998:	2001      	movs	r0, #1
 800a99a:	e7fc      	b.n	800a996 <HAL_TIM_PWM_Init+0x2e>

0800a99c <TIM_TI1_SetConfig>:
{
 800a99c:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a99e:	6a04      	ldr	r4, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800a9a0:	4e1a      	ldr	r6, [pc, #104]	; (800aa0c <TIM_TI1_SetConfig+0x70>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a9a2:	f024 0401 	bic.w	r4, r4, #1
 800a9a6:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a9a8:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 800a9aa:	6a05      	ldr	r5, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800a9ac:	42b0      	cmp	r0, r6
 800a9ae:	f024 0403 	bic.w	r4, r4, #3
 800a9b2:	d029      	beq.n	800aa08 <TIM_TI1_SetConfig+0x6c>
 800a9b4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800a9b8:	d026      	beq.n	800aa08 <TIM_TI1_SetConfig+0x6c>
 800a9ba:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 800a9be:	42b0      	cmp	r0, r6
 800a9c0:	d022      	beq.n	800aa08 <TIM_TI1_SetConfig+0x6c>
 800a9c2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800a9c6:	42b0      	cmp	r0, r6
 800a9c8:	d01e      	beq.n	800aa08 <TIM_TI1_SetConfig+0x6c>
 800a9ca:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800a9ce:	42b0      	cmp	r0, r6
 800a9d0:	d01a      	beq.n	800aa08 <TIM_TI1_SetConfig+0x6c>
 800a9d2:	f506 4678 	add.w	r6, r6, #63488	; 0xf800
 800a9d6:	42b0      	cmp	r0, r6
 800a9d8:	d016      	beq.n	800aa08 <TIM_TI1_SetConfig+0x6c>
 800a9da:	f506 5670 	add.w	r6, r6, #15360	; 0x3c00
 800a9de:	42b0      	cmp	r0, r6
 800a9e0:	d012      	beq.n	800aa08 <TIM_TI1_SetConfig+0x6c>
 800a9e2:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 800a9e6:	42b0      	cmp	r0, r6
 800a9e8:	d00e      	beq.n	800aa08 <TIM_TI1_SetConfig+0x6c>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800a9ea:	f044 0201 	orr.w	r2, r4, #1
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800a9ee:	011b      	lsls	r3, r3, #4
 800a9f0:	b2db      	uxtb	r3, r3
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a9f2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800a9f6:	431a      	orrs	r2, r3
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800a9f8:	f001 010a 	and.w	r1, r1, #10
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a9fc:	f025 030a 	bic.w	r3, r5, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800aa00:	4319      	orrs	r1, r3
  TIMx->CCMR1 = tmpccmr1;
 800aa02:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800aa04:	6201      	str	r1, [r0, #32]
}
 800aa06:	bd70      	pop	{r4, r5, r6, pc}
    tmpccmr1 |= TIM_ICSelection;
 800aa08:	4322      	orrs	r2, r4
 800aa0a:	e7f0      	b.n	800a9ee <TIM_TI1_SetConfig+0x52>
 800aa0c:	40010000 	.word	0x40010000

0800aa10 <HAL_TIM_IC_ConfigChannel>:
{
 800aa10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 800aa12:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800aa16:	2b01      	cmp	r3, #1
{
 800aa18:	4604      	mov	r4, r0
 800aa1a:	460d      	mov	r5, r1
 800aa1c:	4617      	mov	r7, r2
 800aa1e:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 800aa22:	d01a      	beq.n	800aa5a <HAL_TIM_IC_ConfigChannel+0x4a>
 800aa24:	2301      	movs	r3, #1
 800aa26:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 800aa2a:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
 800aa2e:	e9d1 1200 	ldrd	r1, r2, [r1]
 800aa32:	6820      	ldr	r0, [r4, #0]
 800aa34:	68eb      	ldr	r3, [r5, #12]
  if (Channel == TIM_CHANNEL_1)
 800aa36:	b98f      	cbnz	r7, 800aa5c <HAL_TIM_IC_ConfigChannel+0x4c>
    TIM_TI1_SetConfig(htim->Instance,
 800aa38:	f7ff ffb0 	bl	800a99c <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800aa3c:	6823      	ldr	r3, [r4, #0]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800aa3e:	68a9      	ldr	r1, [r5, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800aa40:	699a      	ldr	r2, [r3, #24]
 800aa42:	f022 020c 	bic.w	r2, r2, #12
 800aa46:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800aa48:	699a      	ldr	r2, [r3, #24]
 800aa4a:	430a      	orrs	r2, r1
 800aa4c:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 800aa4e:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800aa50:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800aa52:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
 800aa56:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 800aa5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (Channel == TIM_CHANNEL_2)
 800aa5c:	2f04      	cmp	r7, #4
 800aa5e:	68ae      	ldr	r6, [r5, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aa60:	6a05      	ldr	r5, [r0, #32]
  else if (Channel == TIM_CHANNEL_2)
 800aa62:	d11e      	bne.n	800aaa2 <HAL_TIM_IC_ConfigChannel+0x92>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aa64:	f025 0510 	bic.w	r5, r5, #16
 800aa68:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aa6a:	6985      	ldr	r5, [r0, #24]
  tmpccer = TIMx->CCER;
 800aa6c:	6a07      	ldr	r7, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800aa6e:	f425 7540 	bic.w	r5, r5, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800aa72:	ea45 2202 	orr.w	r2, r5, r2, lsl #8
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800aa76:	031b      	lsls	r3, r3, #12
 800aa78:	b29b      	uxth	r3, r3
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800aa7a:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800aa7e:	0109      	lsls	r1, r1, #4
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800aa80:	431a      	orrs	r2, r3
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800aa82:	f001 01a0 	and.w	r1, r1, #160	; 0xa0
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800aa86:	f027 03a0 	bic.w	r3, r7, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800aa8a:	4319      	orrs	r1, r3
  TIMx->CCMR1 = tmpccmr1 ;
 800aa8c:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800aa8e:	6201      	str	r1, [r0, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800aa90:	6983      	ldr	r3, [r0, #24]
 800aa92:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800aa96:	6183      	str	r3, [r0, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800aa98:	6983      	ldr	r3, [r0, #24]
 800aa9a:	ea43 2606 	orr.w	r6, r3, r6, lsl #8
 800aa9e:	6186      	str	r6, [r0, #24]
 800aaa0:	e7d5      	b.n	800aa4e <HAL_TIM_IC_ConfigChannel+0x3e>
  else if (Channel == TIM_CHANNEL_3)
 800aaa2:	2f08      	cmp	r7, #8
 800aaa4:	d11c      	bne.n	800aae0 <HAL_TIM_IC_ConfigChannel+0xd0>
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800aaa6:	f425 7580 	bic.w	r5, r5, #256	; 0x100
 800aaaa:	6205      	str	r5, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 800aaac:	69c5      	ldr	r5, [r0, #28]
  tmpccer = TIMx->CCER;
 800aaae:	6a07      	ldr	r7, [r0, #32]
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800aab0:	f025 0503 	bic.w	r5, r5, #3
  tmpccmr2 |= TIM_ICSelection;
 800aab4:	432a      	orrs	r2, r5
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800aab6:	011b      	lsls	r3, r3, #4
 800aab8:	b2db      	uxtb	r3, r3
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800aaba:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800aabe:	0209      	lsls	r1, r1, #8
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800aac0:	431a      	orrs	r2, r3
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800aac2:	f401 6120 	and.w	r1, r1, #2560	; 0xa00
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800aac6:	f427 6320 	bic.w	r3, r7, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800aaca:	4319      	orrs	r1, r3
  TIMx->CCMR2 = tmpccmr2;
 800aacc:	61c2      	str	r2, [r0, #28]
  TIMx->CCER = tmpccer;
 800aace:	6201      	str	r1, [r0, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800aad0:	69c3      	ldr	r3, [r0, #28]
 800aad2:	f023 030c 	bic.w	r3, r3, #12
 800aad6:	61c3      	str	r3, [r0, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800aad8:	69c3      	ldr	r3, [r0, #28]
 800aada:	431e      	orrs	r6, r3
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800aadc:	61c6      	str	r6, [r0, #28]
 800aade:	e7b6      	b.n	800aa4e <HAL_TIM_IC_ConfigChannel+0x3e>
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800aae0:	f425 5580 	bic.w	r5, r5, #4096	; 0x1000
 800aae4:	6205      	str	r5, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 800aae6:	69c5      	ldr	r5, [r0, #28]
  tmpccer = TIMx->CCER;
 800aae8:	6a07      	ldr	r7, [r0, #32]
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800aaea:	f425 7540 	bic.w	r5, r5, #768	; 0x300
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800aaee:	ea45 2202 	orr.w	r2, r5, r2, lsl #8
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800aaf2:	031b      	lsls	r3, r3, #12
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800aaf4:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800aaf8:	b29b      	uxth	r3, r3
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800aafa:	0309      	lsls	r1, r1, #12
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800aafc:	4313      	orrs	r3, r2
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800aafe:	f401 4120 	and.w	r1, r1, #40960	; 0xa000
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800ab02:	f427 4220 	bic.w	r2, r7, #40960	; 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800ab06:	4311      	orrs	r1, r2
  TIMx->CCMR2 = tmpccmr2;
 800ab08:	61c3      	str	r3, [r0, #28]
  TIMx->CCER = tmpccer ;
 800ab0a:	6201      	str	r1, [r0, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800ab0c:	69c3      	ldr	r3, [r0, #28]
 800ab0e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800ab12:	61c3      	str	r3, [r0, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800ab14:	69c3      	ldr	r3, [r0, #28]
 800ab16:	ea43 2606 	orr.w	r6, r3, r6, lsl #8
 800ab1a:	e7df      	b.n	800aadc <HAL_TIM_IC_ConfigChannel+0xcc>

0800ab1c <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ab1c:	6a03      	ldr	r3, [r0, #32]
 800ab1e:	f023 0310 	bic.w	r3, r3, #16
 800ab22:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800ab24:	6a03      	ldr	r3, [r0, #32]
{
 800ab26:	b570      	push	{r4, r5, r6, lr}
  tmpcr2 = TIMx->CR2;
 800ab28:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800ab2a:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ab2c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ab2e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ab32:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ab36:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 800ab38:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ab3c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800ab40:	4d0d      	ldr	r5, [pc, #52]	; (800ab78 <TIM_OC2_SetConfig+0x5c>)
 800ab42:	42a8      	cmp	r0, r5
 800ab44:	d003      	beq.n	800ab4e <TIM_OC2_SetConfig+0x32>
 800ab46:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800ab4a:	42a8      	cmp	r0, r5
 800ab4c:	d10d      	bne.n	800ab6a <TIM_OC2_SetConfig+0x4e>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ab4e:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 800ab50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ab54:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ab58:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ab5c:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ab60:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 800ab62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ab66:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 800ab6a:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800ab6c:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800ab6e:	684a      	ldr	r2, [r1, #4]
 800ab70:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800ab72:	6203      	str	r3, [r0, #32]
}
 800ab74:	bd70      	pop	{r4, r5, r6, pc}
 800ab76:	bf00      	nop
 800ab78:	40010000 	.word	0x40010000

0800ab7c <HAL_TIM_OC_ConfigChannel>:
{
 800ab7c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim); 
 800ab7e:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800ab82:	2b01      	cmp	r3, #1
{
 800ab84:	4604      	mov	r4, r0
 800ab86:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim); 
 800ab8a:	d018      	beq.n	800abbe <HAL_TIM_OC_ConfigChannel+0x42>
 800ab8c:	2301      	movs	r3, #1
 800ab8e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 800ab92:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
 800ab96:	461d      	mov	r5, r3
  switch (Channel)
 800ab98:	2a0c      	cmp	r2, #12
 800ab9a:	d80b      	bhi.n	800abb4 <HAL_TIM_OC_ConfigChannel+0x38>
 800ab9c:	e8df f002 	tbb	[pc, r2]
 800aba0:	0a0a0a07 	.word	0x0a0a0a07
 800aba4:	0a0a0a10 	.word	0x0a0a0a10
 800aba8:	0a0a0a14 	.word	0x0a0a0a14
 800abac:	18          	.byte	0x18
 800abad:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800abae:	6820      	ldr	r0, [r4, #0]
 800abb0:	f7ff fc66 	bl	800a480 <TIM_OC1_SetConfig>
  __HAL_UNLOCK(htim); 
 800abb4:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800abb6:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim); 
 800abba:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 800abbe:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800abc0:	6820      	ldr	r0, [r4, #0]
 800abc2:	f7ff ffab 	bl	800ab1c <TIM_OC2_SetConfig>
    break;
 800abc6:	e7f5      	b.n	800abb4 <HAL_TIM_OC_ConfigChannel+0x38>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800abc8:	6820      	ldr	r0, [r4, #0]
 800abca:	f7ff fc85 	bl	800a4d8 <TIM_OC3_SetConfig>
    break;
 800abce:	e7f1      	b.n	800abb4 <HAL_TIM_OC_ConfigChannel+0x38>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800abd0:	6820      	ldr	r0, [r4, #0]
 800abd2:	f7ff fcaf 	bl	800a534 <TIM_OC4_SetConfig>
    break;
 800abd6:	e7ed      	b.n	800abb4 <HAL_TIM_OC_ConfigChannel+0x38>

0800abd8 <HAL_TIM_PWM_ConfigChannel>:
{
 800abd8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800abda:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800abde:	2b01      	cmp	r3, #1
{
 800abe0:	4604      	mov	r4, r0
 800abe2:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 800abe6:	d025      	beq.n	800ac34 <HAL_TIM_PWM_ConfigChannel+0x5c>
 800abe8:	2301      	movs	r3, #1
 800abea:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 800abee:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  switch (Channel)
 800abf2:	2a0c      	cmp	r2, #12
 800abf4:	d818      	bhi.n	800ac28 <HAL_TIM_PWM_ConfigChannel+0x50>
 800abf6:	e8df f002 	tbb	[pc, r2]
 800abfa:	1707      	.short	0x1707
 800abfc:	171e1717 	.word	0x171e1717
 800ac00:	172f1717 	.word	0x172f1717
 800ac04:	1717      	.short	0x1717
 800ac06:	40          	.byte	0x40
 800ac07:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ac08:	6820      	ldr	r0, [r4, #0]
 800ac0a:	f7ff fc39 	bl	800a480 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ac0e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ac10:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ac12:	699a      	ldr	r2, [r3, #24]
 800ac14:	f042 0208 	orr.w	r2, r2, #8
 800ac18:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ac1a:	699a      	ldr	r2, [r3, #24]
 800ac1c:	f022 0204 	bic.w	r2, r2, #4
 800ac20:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ac22:	699a      	ldr	r2, [r3, #24]
 800ac24:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ac26:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 800ac28:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800ac2a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800ac2c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
 800ac30:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 800ac34:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ac36:	6820      	ldr	r0, [r4, #0]
 800ac38:	f7ff ff70 	bl	800ab1c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ac3c:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ac3e:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ac40:	699a      	ldr	r2, [r3, #24]
 800ac42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ac46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ac48:	699a      	ldr	r2, [r3, #24]
 800ac4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ac4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ac50:	699a      	ldr	r2, [r3, #24]
 800ac52:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800ac56:	e7e6      	b.n	800ac26 <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ac58:	6820      	ldr	r0, [r4, #0]
 800ac5a:	f7ff fc3d 	bl	800a4d8 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ac5e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 800ac60:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ac62:	69da      	ldr	r2, [r3, #28]
 800ac64:	f042 0208 	orr.w	r2, r2, #8
 800ac68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ac6a:	69da      	ldr	r2, [r3, #28]
 800ac6c:	f022 0204 	bic.w	r2, r2, #4
 800ac70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 800ac72:	69da      	ldr	r2, [r3, #28]
 800ac74:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 800ac76:	61da      	str	r2, [r3, #28]
    break;
 800ac78:	e7d6      	b.n	800ac28 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ac7a:	6820      	ldr	r0, [r4, #0]
 800ac7c:	f7ff fc5a 	bl	800a534 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ac80:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 800ac82:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ac84:	69da      	ldr	r2, [r3, #28]
 800ac86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ac8a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ac8c:	69da      	ldr	r2, [r3, #28]
 800ac8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ac92:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 800ac94:	69da      	ldr	r2, [r3, #28]
 800ac96:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800ac9a:	e7ec      	b.n	800ac76 <HAL_TIM_PWM_ConfigChannel+0x9e>

0800ac9c <TIM_CCxChannelCmd>:
  TIMx->CCER &= ~tmp;
 800ac9c:	6a03      	ldr	r3, [r0, #32]
{
 800ac9e:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << Channel;
 800aca0:	2401      	movs	r4, #1
 800aca2:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 800aca4:	ea23 0304 	bic.w	r3, r3, r4
 800aca8:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 800acaa:	6a03      	ldr	r3, [r0, #32]
 800acac:	408a      	lsls	r2, r1
 800acae:	431a      	orrs	r2, r3
 800acb0:	6202      	str	r2, [r0, #32]
}
 800acb2:	bd10      	pop	{r4, pc}

0800acb4 <HAL_TIM_OC_Start>:
{
 800acb4:	b510      	push	{r4, lr}
 800acb6:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800acb8:	2201      	movs	r2, #1
 800acba:	6800      	ldr	r0, [r0, #0]
 800acbc:	f7ff ffee 	bl	800ac9c <TIM_CCxChannelCmd>
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 800acc0:	6823      	ldr	r3, [r4, #0]
 800acc2:	4a08      	ldr	r2, [pc, #32]	; (800ace4 <HAL_TIM_OC_Start+0x30>)
 800acc4:	4293      	cmp	r3, r2
 800acc6:	d003      	beq.n	800acd0 <HAL_TIM_OC_Start+0x1c>
 800acc8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800accc:	4293      	cmp	r3, r2
 800acce:	d103      	bne.n	800acd8 <HAL_TIM_OC_Start+0x24>
    __HAL_TIM_MOE_ENABLE(htim);
 800acd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800acd2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800acd6:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim); 
 800acd8:	681a      	ldr	r2, [r3, #0]
 800acda:	f042 0201 	orr.w	r2, r2, #1
 800acde:	601a      	str	r2, [r3, #0]
}
 800ace0:	2000      	movs	r0, #0
 800ace2:	bd10      	pop	{r4, pc}
 800ace4:	40010000 	.word	0x40010000

0800ace8 <HAL_TIM_OC_Start_IT>:
{
 800ace8:	b510      	push	{r4, lr}
 800acea:	4604      	mov	r4, r0
 800acec:	6800      	ldr	r0, [r0, #0]
  switch (Channel)
 800acee:	290c      	cmp	r1, #12
 800acf0:	d80c      	bhi.n	800ad0c <HAL_TIM_OC_Start_IT+0x24>
 800acf2:	e8df f001 	tbb	[pc, r1]
 800acf6:	0b07      	.short	0x0b07
 800acf8:	0b200b0b 	.word	0x0b200b0b
 800acfc:	0b240b0b 	.word	0x0b240b0b
 800ad00:	0b0b      	.short	0x0b0b
 800ad02:	28          	.byte	0x28
 800ad03:	00          	.byte	0x00
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800ad04:	68c3      	ldr	r3, [r0, #12]
 800ad06:	f043 0302 	orr.w	r3, r3, #2
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800ad0a:	60c3      	str	r3, [r0, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ad0c:	2201      	movs	r2, #1
 800ad0e:	f7ff ffc5 	bl	800ac9c <TIM_CCxChannelCmd>
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 800ad12:	6823      	ldr	r3, [r4, #0]
 800ad14:	4a0e      	ldr	r2, [pc, #56]	; (800ad50 <HAL_TIM_OC_Start_IT+0x68>)
 800ad16:	4293      	cmp	r3, r2
 800ad18:	d003      	beq.n	800ad22 <HAL_TIM_OC_Start_IT+0x3a>
 800ad1a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ad1e:	4293      	cmp	r3, r2
 800ad20:	d103      	bne.n	800ad2a <HAL_TIM_OC_Start_IT+0x42>
    __HAL_TIM_MOE_ENABLE(htim);
 800ad22:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ad24:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ad28:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 800ad2a:	681a      	ldr	r2, [r3, #0]
 800ad2c:	f042 0201 	orr.w	r2, r2, #1
 800ad30:	601a      	str	r2, [r3, #0]
}
 800ad32:	2000      	movs	r0, #0
 800ad34:	bd10      	pop	{r4, pc}
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800ad36:	68c3      	ldr	r3, [r0, #12]
 800ad38:	f043 0304 	orr.w	r3, r3, #4
 800ad3c:	e7e5      	b.n	800ad0a <HAL_TIM_OC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800ad3e:	68c3      	ldr	r3, [r0, #12]
 800ad40:	f043 0308 	orr.w	r3, r3, #8
 800ad44:	e7e1      	b.n	800ad0a <HAL_TIM_OC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800ad46:	68c3      	ldr	r3, [r0, #12]
 800ad48:	f043 0310 	orr.w	r3, r3, #16
 800ad4c:	e7dd      	b.n	800ad0a <HAL_TIM_OC_Start_IT+0x22>
 800ad4e:	bf00      	nop
 800ad50:	40010000 	.word	0x40010000

0800ad54 <HAL_TIM_OC_Stop_IT>:
{
 800ad54:	b510      	push	{r4, lr}
 800ad56:	4604      	mov	r4, r0
 800ad58:	6800      	ldr	r0, [r0, #0]
  switch (Channel)
 800ad5a:	290c      	cmp	r1, #12
 800ad5c:	d80c      	bhi.n	800ad78 <HAL_TIM_OC_Stop_IT+0x24>
 800ad5e:	e8df f001 	tbb	[pc, r1]
 800ad62:	0b07      	.short	0x0b07
 800ad64:	0b340b0b 	.word	0x0b340b0b
 800ad68:	0b380b0b 	.word	0x0b380b0b
 800ad6c:	0b0b      	.short	0x0b0b
 800ad6e:	3c          	.byte	0x3c
 800ad6f:	00          	.byte	0x00
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800ad70:	68c3      	ldr	r3, [r0, #12]
 800ad72:	f023 0302 	bic.w	r3, r3, #2
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800ad76:	60c3      	str	r3, [r0, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE); 
 800ad78:	2200      	movs	r2, #0
 800ad7a:	f7ff ff8f 	bl	800ac9c <TIM_CCxChannelCmd>
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 800ad7e:	6823      	ldr	r3, [r4, #0]
 800ad80:	4a18      	ldr	r2, [pc, #96]	; (800ade4 <HAL_TIM_OC_Stop_IT+0x90>)
 800ad82:	4293      	cmp	r3, r2
 800ad84:	d003      	beq.n	800ad8e <HAL_TIM_OC_Stop_IT+0x3a>
 800ad86:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ad8a:	4293      	cmp	r3, r2
 800ad8c:	d10d      	bne.n	800adaa <HAL_TIM_OC_Stop_IT+0x56>
    __HAL_TIM_MOE_DISABLE(htim);
 800ad8e:	6a19      	ldr	r1, [r3, #32]
 800ad90:	f241 1211 	movw	r2, #4369	; 0x1111
 800ad94:	4211      	tst	r1, r2
 800ad96:	d108      	bne.n	800adaa <HAL_TIM_OC_Stop_IT+0x56>
 800ad98:	6a19      	ldr	r1, [r3, #32]
 800ad9a:	f240 4244 	movw	r2, #1092	; 0x444
 800ad9e:	4211      	tst	r1, r2
 800ada0:	bf02      	ittt	eq
 800ada2:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 800ada4:	f422 4200 	biceq.w	r2, r2, #32768	; 0x8000
 800ada8:	645a      	streq	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);  
 800adaa:	6a19      	ldr	r1, [r3, #32]
 800adac:	f241 1211 	movw	r2, #4369	; 0x1111
 800adb0:	4211      	tst	r1, r2
 800adb2:	d108      	bne.n	800adc6 <HAL_TIM_OC_Stop_IT+0x72>
 800adb4:	6a19      	ldr	r1, [r3, #32]
 800adb6:	f240 4244 	movw	r2, #1092	; 0x444
 800adba:	4211      	tst	r1, r2
 800adbc:	bf02      	ittt	eq
 800adbe:	681a      	ldreq	r2, [r3, #0]
 800adc0:	f022 0201 	biceq.w	r2, r2, #1
 800adc4:	601a      	streq	r2, [r3, #0]
}
 800adc6:	2000      	movs	r0, #0
 800adc8:	bd10      	pop	{r4, pc}
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800adca:	68c3      	ldr	r3, [r0, #12]
 800adcc:	f023 0304 	bic.w	r3, r3, #4
 800add0:	e7d1      	b.n	800ad76 <HAL_TIM_OC_Stop_IT+0x22>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800add2:	68c3      	ldr	r3, [r0, #12]
 800add4:	f023 0308 	bic.w	r3, r3, #8
 800add8:	e7cd      	b.n	800ad76 <HAL_TIM_OC_Stop_IT+0x22>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800adda:	68c3      	ldr	r3, [r0, #12]
 800addc:	f023 0310 	bic.w	r3, r3, #16
 800ade0:	e7c9      	b.n	800ad76 <HAL_TIM_OC_Stop_IT+0x22>
 800ade2:	bf00      	nop
 800ade4:	40010000 	.word	0x40010000

0800ade8 <HAL_TIM_IC_Start>:
{
 800ade8:	b510      	push	{r4, lr}
 800adea:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800adec:	2201      	movs	r2, #1
 800adee:	6800      	ldr	r0, [r0, #0]
 800adf0:	f7ff ff54 	bl	800ac9c <TIM_CCxChannelCmd>
  __HAL_TIM_ENABLE(htim);  
 800adf4:	6822      	ldr	r2, [r4, #0]
 800adf6:	6813      	ldr	r3, [r2, #0]
 800adf8:	f043 0301 	orr.w	r3, r3, #1
 800adfc:	6013      	str	r3, [r2, #0]
} 
 800adfe:	2000      	movs	r0, #0
 800ae00:	bd10      	pop	{r4, pc}

0800ae02 <HAL_TIMEx_CommutationCallback>:
 800ae02:	4770      	bx	lr

0800ae04 <HAL_TIMEx_BreakCallback>:
 800ae04:	4770      	bx	lr
	...

0800ae08 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ae08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 800ae0c:	6803      	ldr	r3, [r0, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 800ae0e:	68c1      	ldr	r1, [r0, #12]
  tmpreg = huart->Instance->CR2;
 800ae10:	691a      	ldr	r2, [r3, #16]
{
 800ae12:	4604      	mov	r4, r0
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 800ae14:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 800ae18:	430a      	orrs	r2, r1
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 800ae1a:	611a      	str	r2, [r3, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ae1c:	6925      	ldr	r5, [r4, #16]
 800ae1e:	68a2      	ldr	r2, [r4, #8]
  tmpreg = huart->Instance->CR1;
 800ae20:	68d9      	ldr	r1, [r3, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ae22:	69c0      	ldr	r0, [r0, #28]
 800ae24:	432a      	orrs	r2, r5
 800ae26:	6965      	ldr	r5, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 800ae28:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ae2c:	432a      	orrs	r2, r5
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 800ae2e:	f021 010c 	bic.w	r1, r1, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ae32:	4302      	orrs	r2, r0
 800ae34:	430a      	orrs	r2, r1
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 800ae36:	60da      	str	r2, [r3, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 800ae38:	695a      	ldr	r2, [r3, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 800ae3a:	69a1      	ldr	r1, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 800ae3c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 800ae40:	430a      	orrs	r2, r1
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ae42:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 800ae46:	615a      	str	r2, [r3, #20]
 800ae48:	4a7a      	ldr	r2, [pc, #488]	; (800b034 <UART_SetConfig+0x22c>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ae4a:	d17b      	bne.n	800af44 <UART_SetConfig+0x13c>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 800ae4c:	4293      	cmp	r3, r2
 800ae4e:	d003      	beq.n	800ae58 <UART_SetConfig+0x50>
 800ae50:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ae54:	4293      	cmp	r3, r2
 800ae56:	d144      	bne.n	800aee2 <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800ae58:	f7fe fa00 	bl	800925c <HAL_RCC_GetPCLK2Freq>
 800ae5c:	6867      	ldr	r7, [r4, #4]
 800ae5e:	2519      	movs	r5, #25
 800ae60:	f04f 0864 	mov.w	r8, #100	; 0x64
 800ae64:	fb05 f300 	mul.w	r3, r5, r0
 800ae68:	007f      	lsls	r7, r7, #1
 800ae6a:	fbb3 f3f7 	udiv	r3, r3, r7
 800ae6e:	fbb3 f3f8 	udiv	r3, r3, r8
 800ae72:	011f      	lsls	r7, r3, #4
 800ae74:	f7fe f9f2 	bl	800925c <HAL_RCC_GetPCLK2Freq>
 800ae78:	6863      	ldr	r3, [r4, #4]
 800ae7a:	4368      	muls	r0, r5
 800ae7c:	005b      	lsls	r3, r3, #1
 800ae7e:	fbb0 f6f3 	udiv	r6, r0, r3
 800ae82:	f7fe f9eb 	bl	800925c <HAL_RCC_GetPCLK2Freq>
 800ae86:	6863      	ldr	r3, [r4, #4]
 800ae88:	4368      	muls	r0, r5
 800ae8a:	005b      	lsls	r3, r3, #1
 800ae8c:	fbb0 f3f3 	udiv	r3, r0, r3
 800ae90:	fbb3 f3f8 	udiv	r3, r3, r8
 800ae94:	fb08 6313 	mls	r3, r8, r3, r6
 800ae98:	00db      	lsls	r3, r3, #3
 800ae9a:	3332      	adds	r3, #50	; 0x32
 800ae9c:	fbb3 f3f8 	udiv	r3, r3, r8
 800aea0:	005b      	lsls	r3, r3, #1
 800aea2:	f403 76f8 	and.w	r6, r3, #496	; 0x1f0
 800aea6:	f7fe f9d9 	bl	800925c <HAL_RCC_GetPCLK2Freq>
 800aeaa:	6862      	ldr	r2, [r4, #4]
 800aeac:	4368      	muls	r0, r5
 800aeae:	0052      	lsls	r2, r2, #1
 800aeb0:	fbb0 f9f2 	udiv	r9, r0, r2
 800aeb4:	f7fe f9d2 	bl	800925c <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800aeb8:	6863      	ldr	r3, [r4, #4]
 800aeba:	6822      	ldr	r2, [r4, #0]
 800aebc:	4368      	muls	r0, r5
 800aebe:	005b      	lsls	r3, r3, #1
 800aec0:	fbb0 f3f3 	udiv	r3, r0, r3
 800aec4:	fbb3 f3f8 	udiv	r3, r3, r8
 800aec8:	fb08 9313 	mls	r3, r8, r3, r9
 800aecc:	00db      	lsls	r3, r3, #3
 800aece:	3332      	adds	r3, #50	; 0x32
 800aed0:	fbb3 f3f8 	udiv	r3, r3, r8
 800aed4:	f003 0307 	and.w	r3, r3, #7
 800aed8:	443b      	add	r3, r7
 800aeda:	4433      	add	r3, r6
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800aedc:	6093      	str	r3, [r2, #8]
    }
  }
}
 800aede:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800aee2:	f7fe f9ab 	bl	800923c <HAL_RCC_GetPCLK1Freq>
 800aee6:	6867      	ldr	r7, [r4, #4]
 800aee8:	2519      	movs	r5, #25
 800aeea:	f04f 0864 	mov.w	r8, #100	; 0x64
 800aeee:	fb05 f300 	mul.w	r3, r5, r0
 800aef2:	007f      	lsls	r7, r7, #1
 800aef4:	fbb3 f3f7 	udiv	r3, r3, r7
 800aef8:	fbb3 f3f8 	udiv	r3, r3, r8
 800aefc:	011f      	lsls	r7, r3, #4
 800aefe:	f7fe f99d 	bl	800923c <HAL_RCC_GetPCLK1Freq>
 800af02:	6863      	ldr	r3, [r4, #4]
 800af04:	4368      	muls	r0, r5
 800af06:	005b      	lsls	r3, r3, #1
 800af08:	fbb0 f6f3 	udiv	r6, r0, r3
 800af0c:	f7fe f996 	bl	800923c <HAL_RCC_GetPCLK1Freq>
 800af10:	6863      	ldr	r3, [r4, #4]
 800af12:	4368      	muls	r0, r5
 800af14:	005b      	lsls	r3, r3, #1
 800af16:	fbb0 f3f3 	udiv	r3, r0, r3
 800af1a:	fbb3 f3f8 	udiv	r3, r3, r8
 800af1e:	fb08 6313 	mls	r3, r8, r3, r6
 800af22:	00db      	lsls	r3, r3, #3
 800af24:	3332      	adds	r3, #50	; 0x32
 800af26:	fbb3 f3f8 	udiv	r3, r3, r8
 800af2a:	005b      	lsls	r3, r3, #1
 800af2c:	f403 76f8 	and.w	r6, r3, #496	; 0x1f0
 800af30:	f7fe f984 	bl	800923c <HAL_RCC_GetPCLK1Freq>
 800af34:	6862      	ldr	r2, [r4, #4]
 800af36:	4368      	muls	r0, r5
 800af38:	0052      	lsls	r2, r2, #1
 800af3a:	fbb0 f9f2 	udiv	r9, r0, r2
 800af3e:	f7fe f97d 	bl	800923c <HAL_RCC_GetPCLK1Freq>
 800af42:	e7b9      	b.n	800aeb8 <UART_SetConfig+0xb0>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 800af44:	4293      	cmp	r3, r2
 800af46:	d002      	beq.n	800af4e <UART_SetConfig+0x146>
 800af48:	4a3b      	ldr	r2, [pc, #236]	; (800b038 <UART_SetConfig+0x230>)
 800af4a:	4293      	cmp	r3, r2
 800af4c:	d141      	bne.n	800afd2 <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800af4e:	f7fe f985 	bl	800925c <HAL_RCC_GetPCLK2Freq>
 800af52:	6867      	ldr	r7, [r4, #4]
 800af54:	2519      	movs	r5, #25
 800af56:	f04f 0864 	mov.w	r8, #100	; 0x64
 800af5a:	fb05 f300 	mul.w	r3, r5, r0
 800af5e:	00bf      	lsls	r7, r7, #2
 800af60:	fbb3 f3f7 	udiv	r3, r3, r7
 800af64:	fbb3 f3f8 	udiv	r3, r3, r8
 800af68:	011f      	lsls	r7, r3, #4
 800af6a:	f7fe f977 	bl	800925c <HAL_RCC_GetPCLK2Freq>
 800af6e:	6863      	ldr	r3, [r4, #4]
 800af70:	4368      	muls	r0, r5
 800af72:	009b      	lsls	r3, r3, #2
 800af74:	fbb0 f6f3 	udiv	r6, r0, r3
 800af78:	f7fe f970 	bl	800925c <HAL_RCC_GetPCLK2Freq>
 800af7c:	6863      	ldr	r3, [r4, #4]
 800af7e:	4368      	muls	r0, r5
 800af80:	009b      	lsls	r3, r3, #2
 800af82:	fbb0 f3f3 	udiv	r3, r0, r3
 800af86:	fbb3 f3f8 	udiv	r3, r3, r8
 800af8a:	fb08 6313 	mls	r3, r8, r3, r6
 800af8e:	011b      	lsls	r3, r3, #4
 800af90:	3332      	adds	r3, #50	; 0x32
 800af92:	fbb3 f3f8 	udiv	r3, r3, r8
 800af96:	f003 06f0 	and.w	r6, r3, #240	; 0xf0
 800af9a:	f7fe f95f 	bl	800925c <HAL_RCC_GetPCLK2Freq>
 800af9e:	6862      	ldr	r2, [r4, #4]
 800afa0:	4368      	muls	r0, r5
 800afa2:	0092      	lsls	r2, r2, #2
 800afa4:	fbb0 f9f2 	udiv	r9, r0, r2
 800afa8:	f7fe f958 	bl	800925c <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800afac:	6863      	ldr	r3, [r4, #4]
 800afae:	6822      	ldr	r2, [r4, #0]
 800afb0:	4368      	muls	r0, r5
 800afb2:	009b      	lsls	r3, r3, #2
 800afb4:	fbb0 f3f3 	udiv	r3, r0, r3
 800afb8:	fbb3 f3f8 	udiv	r3, r3, r8
 800afbc:	fb08 9313 	mls	r3, r8, r3, r9
 800afc0:	011b      	lsls	r3, r3, #4
 800afc2:	3332      	adds	r3, #50	; 0x32
 800afc4:	fbb3 f3f8 	udiv	r3, r3, r8
 800afc8:	f003 030f 	and.w	r3, r3, #15
 800afcc:	4333      	orrs	r3, r6
 800afce:	443b      	add	r3, r7
 800afd0:	e784      	b.n	800aedc <UART_SetConfig+0xd4>
 800afd2:	f7fe f933 	bl	800923c <HAL_RCC_GetPCLK1Freq>
 800afd6:	6867      	ldr	r7, [r4, #4]
 800afd8:	2519      	movs	r5, #25
 800afda:	f04f 0864 	mov.w	r8, #100	; 0x64
 800afde:	fb05 f300 	mul.w	r3, r5, r0
 800afe2:	00bf      	lsls	r7, r7, #2
 800afe4:	fbb3 f3f7 	udiv	r3, r3, r7
 800afe8:	fbb3 f3f8 	udiv	r3, r3, r8
 800afec:	011f      	lsls	r7, r3, #4
 800afee:	f7fe f925 	bl	800923c <HAL_RCC_GetPCLK1Freq>
 800aff2:	6863      	ldr	r3, [r4, #4]
 800aff4:	4368      	muls	r0, r5
 800aff6:	009b      	lsls	r3, r3, #2
 800aff8:	fbb0 f6f3 	udiv	r6, r0, r3
 800affc:	f7fe f91e 	bl	800923c <HAL_RCC_GetPCLK1Freq>
 800b000:	6863      	ldr	r3, [r4, #4]
 800b002:	4368      	muls	r0, r5
 800b004:	009b      	lsls	r3, r3, #2
 800b006:	fbb0 f3f3 	udiv	r3, r0, r3
 800b00a:	fbb3 f3f8 	udiv	r3, r3, r8
 800b00e:	fb08 6313 	mls	r3, r8, r3, r6
 800b012:	011b      	lsls	r3, r3, #4
 800b014:	3332      	adds	r3, #50	; 0x32
 800b016:	fbb3 f3f8 	udiv	r3, r3, r8
 800b01a:	f003 06f0 	and.w	r6, r3, #240	; 0xf0
 800b01e:	f7fe f90d 	bl	800923c <HAL_RCC_GetPCLK1Freq>
 800b022:	6862      	ldr	r2, [r4, #4]
 800b024:	4368      	muls	r0, r5
 800b026:	0092      	lsls	r2, r2, #2
 800b028:	fbb0 f9f2 	udiv	r9, r0, r2
 800b02c:	f7fe f906 	bl	800923c <HAL_RCC_GetPCLK1Freq>
 800b030:	e7bc      	b.n	800afac <UART_SetConfig+0x1a4>
 800b032:	bf00      	nop
 800b034:	40011000 	.word	0x40011000
 800b038:	40011400 	.word	0x40011400

0800b03c <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 800b03c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b03e:	4604      	mov	r4, r0
 800b040:	460e      	mov	r6, r1
 800b042:	4617      	mov	r7, r2
 800b044:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 800b046:	6821      	ldr	r1, [r4, #0]
 800b048:	680b      	ldr	r3, [r1, #0]
 800b04a:	ea36 0303 	bics.w	r3, r6, r3
 800b04e:	d101      	bne.n	800b054 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 800b050:	2000      	movs	r0, #0
 800b052:	e014      	b.n	800b07e <UART_WaitOnFlagUntilTimeout.constprop.3+0x42>
    if(Timeout != HAL_MAX_DELAY)
 800b054:	1c6b      	adds	r3, r5, #1
 800b056:	d0f7      	beq.n	800b048 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800b058:	b995      	cbnz	r5, 800b080 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b05a:	6823      	ldr	r3, [r4, #0]
 800b05c:	68da      	ldr	r2, [r3, #12]
 800b05e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b062:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b064:	695a      	ldr	r2, [r3, #20]
 800b066:	f022 0201 	bic.w	r2, r2, #1
 800b06a:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 800b06c:	2320      	movs	r3, #32
 800b06e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800b072:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 800b076:	2300      	movs	r3, #0
 800b078:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 800b07c:	2003      	movs	r0, #3
}
 800b07e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800b080:	f7fc fc7e 	bl	8007980 <HAL_GetTick>
 800b084:	1bc0      	subs	r0, r0, r7
 800b086:	4285      	cmp	r5, r0
 800b088:	d2dd      	bcs.n	800b046 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 800b08a:	e7e6      	b.n	800b05a <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

0800b08c <HAL_UART_Init>:
{
 800b08c:	b510      	push	{r4, lr}
  if(huart == NULL)
 800b08e:	4604      	mov	r4, r0
 800b090:	b340      	cbz	r0, 800b0e4 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 800b092:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800b096:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800b09a:	b91b      	cbnz	r3, 800b0a4 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 800b09c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 800b0a0:	f006 f83a 	bl	8011118 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800b0a4:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800b0a6:	2324      	movs	r3, #36	; 0x24
 800b0a8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 800b0ac:	68d3      	ldr	r3, [r2, #12]
 800b0ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b0b2:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800b0b4:	4620      	mov	r0, r4
 800b0b6:	f7ff fea7 	bl	800ae08 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b0ba:	6823      	ldr	r3, [r4, #0]
 800b0bc:	691a      	ldr	r2, [r3, #16]
 800b0be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b0c2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b0c4:	695a      	ldr	r2, [r3, #20]
 800b0c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b0ca:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800b0cc:	68da      	ldr	r2, [r3, #12]
 800b0ce:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b0d2:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b0d4:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 800b0d6:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b0d8:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800b0da:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 800b0de:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 800b0e2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800b0e4:	2001      	movs	r0, #1
 800b0e6:	e7fc      	b.n	800b0e2 <HAL_UART_Init+0x56>

0800b0e8 <HAL_UART_Transmit>:
{
 800b0e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0ec:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY) 
 800b0ee:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800b0f2:	2b20      	cmp	r3, #32
{
 800b0f4:	4604      	mov	r4, r0
 800b0f6:	460d      	mov	r5, r1
 800b0f8:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY) 
 800b0fa:	d14d      	bne.n	800b198 <HAL_UART_Transmit+0xb0>
    if((pData == NULL ) || (Size == 0)) 
 800b0fc:	2900      	cmp	r1, #0
 800b0fe:	d049      	beq.n	800b194 <HAL_UART_Transmit+0xac>
 800b100:	2a00      	cmp	r2, #0
 800b102:	d047      	beq.n	800b194 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 800b104:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800b108:	2b01      	cmp	r3, #1
 800b10a:	d045      	beq.n	800b198 <HAL_UART_Transmit+0xb0>
 800b10c:	2301      	movs	r3, #1
 800b10e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b112:	2300      	movs	r3, #0
 800b114:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b116:	2321      	movs	r3, #33	; 0x21
 800b118:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 800b11c:	f7fc fc30 	bl	8007980 <HAL_GetTick>
    huart->TxXferSize = Size;
 800b120:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 800b124:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 800b126:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 800b12a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800b12c:	b29b      	uxth	r3, r3
 800b12e:	b963      	cbnz	r3, 800b14a <HAL_UART_Transmit+0x62>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b130:	463b      	mov	r3, r7
 800b132:	4632      	mov	r2, r6
 800b134:	2140      	movs	r1, #64	; 0x40
 800b136:	4620      	mov	r0, r4
 800b138:	f7ff ff80 	bl	800b03c <UART_WaitOnFlagUntilTimeout.constprop.3>
 800b13c:	b9a8      	cbnz	r0, 800b16a <HAL_UART_Transmit+0x82>
      huart->gState = HAL_UART_STATE_READY;
 800b13e:	2320      	movs	r3, #32
 800b140:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 800b144:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 800b148:	e010      	b.n	800b16c <HAL_UART_Transmit+0x84>
      huart->TxXferCount--;
 800b14a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800b14c:	3b01      	subs	r3, #1
 800b14e:	b29b      	uxth	r3, r3
 800b150:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800b152:	68a3      	ldr	r3, [r4, #8]
 800b154:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b158:	4632      	mov	r2, r6
 800b15a:	463b      	mov	r3, r7
 800b15c:	f04f 0180 	mov.w	r1, #128	; 0x80
 800b160:	4620      	mov	r0, r4
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800b162:	d10e      	bne.n	800b182 <HAL_UART_Transmit+0x9a>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b164:	f7ff ff6a 	bl	800b03c <UART_WaitOnFlagUntilTimeout.constprop.3>
 800b168:	b110      	cbz	r0, 800b170 <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 800b16a:	2003      	movs	r0, #3
}
 800b16c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800b170:	882b      	ldrh	r3, [r5, #0]
 800b172:	6822      	ldr	r2, [r4, #0]
 800b174:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b178:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 800b17a:	6923      	ldr	r3, [r4, #16]
 800b17c:	b943      	cbnz	r3, 800b190 <HAL_UART_Transmit+0xa8>
          pData +=2U;
 800b17e:	3502      	adds	r5, #2
 800b180:	e7d3      	b.n	800b12a <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b182:	f7ff ff5b 	bl	800b03c <UART_WaitOnFlagUntilTimeout.constprop.3>
 800b186:	2800      	cmp	r0, #0
 800b188:	d1ef      	bne.n	800b16a <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800b18a:	6823      	ldr	r3, [r4, #0]
 800b18c:	782a      	ldrb	r2, [r5, #0]
 800b18e:	605a      	str	r2, [r3, #4]
 800b190:	3501      	adds	r5, #1
 800b192:	e7ca      	b.n	800b12a <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 800b194:	2001      	movs	r0, #1
 800b196:	e7e9      	b.n	800b16c <HAL_UART_Transmit+0x84>
    return HAL_BUSY;
 800b198:	2002      	movs	r0, #2
 800b19a:	e7e7      	b.n	800b16c <HAL_UART_Transmit+0x84>

0800b19c <HAL_UART_Receive>:
{ 
 800b19c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1a0:	461f      	mov	r7, r3
  if(huart->RxState == HAL_UART_STATE_READY) 
 800b1a2:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 800b1a6:	2b20      	cmp	r3, #32
{ 
 800b1a8:	4604      	mov	r4, r0
 800b1aa:	460d      	mov	r5, r1
 800b1ac:	4690      	mov	r8, r2
  if(huart->RxState == HAL_UART_STATE_READY) 
 800b1ae:	d153      	bne.n	800b258 <HAL_UART_Receive+0xbc>
    if((pData == NULL ) || (Size == 0)) 
 800b1b0:	2900      	cmp	r1, #0
 800b1b2:	d04f      	beq.n	800b254 <HAL_UART_Receive+0xb8>
 800b1b4:	2a00      	cmp	r2, #0
 800b1b6:	d04d      	beq.n	800b254 <HAL_UART_Receive+0xb8>
    __HAL_LOCK(huart);
 800b1b8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800b1bc:	2b01      	cmp	r3, #1
 800b1be:	d04b      	beq.n	800b258 <HAL_UART_Receive+0xbc>
 800b1c0:	2301      	movs	r3, #1
 800b1c2:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b1ca:	2322      	movs	r3, #34	; 0x22
 800b1cc:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
    tickstart = HAL_GetTick();
 800b1d0:	f7fc fbd6 	bl	8007980 <HAL_GetTick>
    huart->RxXferSize = Size; 
 800b1d4:	f8a4 802c 	strh.w	r8, [r4, #44]	; 0x2c
    tickstart = HAL_GetTick();
 800b1d8:	4606      	mov	r6, r0
    huart->RxXferCount = Size;
 800b1da:	f8a4 802e 	strh.w	r8, [r4, #46]	; 0x2e
    while(huart->RxXferCount > 0U)
 800b1de:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
 800b1e0:	b280      	uxth	r0, r0
 800b1e2:	b928      	cbnz	r0, 800b1f0 <HAL_UART_Receive+0x54>
    huart->RxState = HAL_UART_STATE_READY;
 800b1e4:	2320      	movs	r3, #32
 800b1e6:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    __HAL_UNLOCK(huart);
 800b1ea:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 800b1ee:	e010      	b.n	800b212 <HAL_UART_Receive+0x76>
      huart->RxXferCount--;
 800b1f0:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 800b1f2:	3b01      	subs	r3, #1
 800b1f4:	b29b      	uxth	r3, r3
 800b1f6:	85e3      	strh	r3, [r4, #46]	; 0x2e
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800b1f8:	68a3      	ldr	r3, [r4, #8]
 800b1fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800b1fe:	4632      	mov	r2, r6
 800b200:	463b      	mov	r3, r7
 800b202:	f04f 0120 	mov.w	r1, #32
 800b206:	4620      	mov	r0, r4
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800b208:	d116      	bne.n	800b238 <HAL_UART_Receive+0x9c>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800b20a:	f7ff ff17 	bl	800b03c <UART_WaitOnFlagUntilTimeout.constprop.3>
 800b20e:	b110      	cbz	r0, 800b216 <HAL_UART_Receive+0x7a>
          return HAL_TIMEOUT;
 800b210:	2003      	movs	r0, #3
}
 800b212:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(huart->Init.Parity == UART_PARITY_NONE)
 800b216:	6922      	ldr	r2, [r4, #16]
 800b218:	6823      	ldr	r3, [r4, #0]
 800b21a:	b93a      	cbnz	r2, 800b22c <HAL_UART_Receive+0x90>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b21c:	685a      	ldr	r2, [r3, #4]
 800b21e:	462b      	mov	r3, r5
 800b220:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b224:	f823 2b02 	strh.w	r2, [r3], #2
{ 
 800b228:	461d      	mov	r5, r3
 800b22a:	e7d8      	b.n	800b1de <HAL_UART_Receive+0x42>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800b22c:	685a      	ldr	r2, [r3, #4]
 800b22e:	462b      	mov	r3, r5
 800b230:	b2d2      	uxtb	r2, r2
 800b232:	f823 2b01 	strh.w	r2, [r3], #1
 800b236:	e7f7      	b.n	800b228 <HAL_UART_Receive+0x8c>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800b238:	f7ff ff00 	bl	800b03c <UART_WaitOnFlagUntilTimeout.constprop.3>
 800b23c:	2800      	cmp	r0, #0
 800b23e:	d1e7      	bne.n	800b210 <HAL_UART_Receive+0x74>
 800b240:	6822      	ldr	r2, [r4, #0]
        if(huart->Init.Parity == UART_PARITY_NONE)
 800b242:	6921      	ldr	r1, [r4, #16]
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b244:	6852      	ldr	r2, [r2, #4]
 800b246:	1c6b      	adds	r3, r5, #1
        if(huart->Init.Parity == UART_PARITY_NONE)
 800b248:	b909      	cbnz	r1, 800b24e <HAL_UART_Receive+0xb2>
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b24a:	702a      	strb	r2, [r5, #0]
 800b24c:	e7ec      	b.n	800b228 <HAL_UART_Receive+0x8c>
 800b24e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b252:	e7fa      	b.n	800b24a <HAL_UART_Receive+0xae>
      return  HAL_ERROR;
 800b254:	2001      	movs	r0, #1
 800b256:	e7dc      	b.n	800b212 <HAL_UART_Receive+0x76>
    return HAL_BUSY;   
 800b258:	2002      	movs	r0, #2
 800b25a:	e7da      	b.n	800b212 <HAL_UART_Receive+0x76>

0800b25c <HAL_UART_GetState>:
  temp1 = huart->gState;
 800b25c:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
  temp2 = huart->RxState;
 800b260:	f890 003a 	ldrb.w	r0, [r0, #58]	; 0x3a
}
 800b264:	4310      	orrs	r0, r2
 800b266:	4770      	bx	lr

0800b268 <aci_gap_init_IDB05A1>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

tBleStatus aci_gap_init_IDB05A1(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 800b268:	b510      	push	{r4, lr}
 800b26a:	b08a      	sub	sp, #40	; 0x28
 800b26c:	461c      	mov	r4, r3
  cp.device_name_char_len = device_name_char_len;
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = OGF_VENDOR_CMD;
 800b26e:	4b19      	ldr	r3, [pc, #100]	; (800b2d4 <aci_gap_init_IDB05A1+0x6c>)
 800b270:	9304      	str	r3, [sp, #16]
  rq.ocf = OCF_GAP_INIT;
  rq.cparam = &cp;
 800b272:	ab01      	add	r3, sp, #4
  cp.device_name_char_len = device_name_char_len;
 800b274:	f88d 2006 	strb.w	r2, [sp, #6]
  rq.cparam = &cp;
 800b278:	9306      	str	r3, [sp, #24]
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800b27a:	aa02      	add	r2, sp, #8
  rq.clen = sizeof(cp);
 800b27c:	2303      	movs	r3, #3
  cp.role = role;
 800b27e:	f88d 0004 	strb.w	r0, [sp, #4]
  cp.privacy_enabled = privacy_enabled;
 800b282:	f88d 1005 	strb.w	r1, [sp, #5]
  rq.rparam = &resp;
 800b286:	e9cd 3207 	strd	r3, r2, [sp, #28]
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800b28a:	2100      	movs	r1, #0
  rq.rlen = GAP_INIT_RP_SIZE;
 800b28c:	2307      	movs	r3, #7
  
  if (hci_send_req(&rq, FALSE) < 0)
 800b28e:	a804      	add	r0, sp, #16
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800b290:	9102      	str	r1, [sp, #8]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800b292:	9105      	str	r1, [sp, #20]
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800b294:	f8cd 100b 	str.w	r1, [sp, #11]
  rq.rlen = GAP_INIT_RP_SIZE;
 800b298:	9309      	str	r3, [sp, #36]	; 0x24
  if (hci_send_req(&rq, FALSE) < 0)
 800b29a:	f000 fb61 	bl	800b960 <hci_send_req>
 800b29e:	2800      	cmp	r0, #0
 800b2a0:	db15      	blt.n	800b2ce <aci_gap_init_IDB05A1+0x66>
    return BLE_STATUS_TIMEOUT;
  
  if (resp.status) {
 800b2a2:	f89d 0008 	ldrb.w	r0, [sp, #8]
 800b2a6:	b980      	cbnz	r0, 800b2ca <aci_gap_init_IDB05A1+0x62>
    return resp.status;
  }
  
  *service_handle = btohs(resp.service_handle);
 800b2a8:	9a02      	ldr	r2, [sp, #8]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 800b2aa:	f89d 300b 	ldrb.w	r3, [sp, #11]
  *service_handle = btohs(resp.service_handle);
 800b2ae:	f3c2 220f 	ubfx	r2, r2, #8, #16
 800b2b2:	8022      	strh	r2, [r4, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 800b2b4:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800b2b8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800b2bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b2be:	8013      	strh	r3, [r2, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 800b2c0:	9b03      	ldr	r3, [sp, #12]
 800b2c2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b2c4:	f3c3 230f 	ubfx	r3, r3, #8, #16
 800b2c8:	8013      	strh	r3, [r2, #0]
  
  return 0;
}
 800b2ca:	b00a      	add	sp, #40	; 0x28
 800b2cc:	bd10      	pop	{r4, pc}
    return BLE_STATUS_TIMEOUT;
 800b2ce:	20ff      	movs	r0, #255	; 0xff
 800b2d0:	e7fb      	b.n	800b2ca <aci_gap_init_IDB05A1+0x62>
 800b2d2:	bf00      	nop
 800b2d4:	008a003f 	.word	0x008a003f

0800b2d8 <aci_gap_init_IDB04A1>:

tBleStatus aci_gap_init_IDB04A1(uint8_t role, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 800b2d8:	b570      	push	{r4, r5, r6, lr}
 800b2da:	b08a      	sub	sp, #40	; 0x28
 800b2dc:	461c      	mov	r4, r3
  cp.role = role;
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = OGF_VENDOR_CMD;
 800b2de:	4b17      	ldr	r3, [pc, #92]	; (800b33c <aci_gap_init_IDB04A1+0x64>)
 800b2e0:	9304      	str	r3, [sp, #16]
  rq.ocf = OCF_GAP_INIT;
  rq.cparam = &cp;
 800b2e2:	ab01      	add	r3, sp, #4
  cp.role = role;
 800b2e4:	f88d 0004 	strb.w	r0, [sp, #4]
  rq.cparam = &cp;
 800b2e8:	9306      	str	r3, [sp, #24]
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800b2ea:	a802      	add	r0, sp, #8
  rq.clen = sizeof(cp);
 800b2ec:	2301      	movs	r3, #1
  rq.rparam = &resp;
 800b2ee:	e9cd 3007 	strd	r3, r0, [sp, #28]
{
 800b2f2:	460e      	mov	r6, r1
  rq.rlen = GAP_INIT_RP_SIZE;
 800b2f4:	2307      	movs	r3, #7
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800b2f6:	2100      	movs	r1, #0
  
  if (hci_send_req(&rq, FALSE) < 0)
 800b2f8:	a804      	add	r0, sp, #16
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800b2fa:	9102      	str	r1, [sp, #8]
{
 800b2fc:	4615      	mov	r5, r2
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800b2fe:	f8cd 100b 	str.w	r1, [sp, #11]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800b302:	9105      	str	r1, [sp, #20]
  rq.rlen = GAP_INIT_RP_SIZE;
 800b304:	9309      	str	r3, [sp, #36]	; 0x24
  if (hci_send_req(&rq, FALSE) < 0)
 800b306:	f000 fb2b 	bl	800b960 <hci_send_req>
 800b30a:	2800      	cmp	r0, #0
 800b30c:	db13      	blt.n	800b336 <aci_gap_init_IDB04A1+0x5e>
    return BLE_STATUS_TIMEOUT;
  
  if (resp.status) {
 800b30e:	f89d 0008 	ldrb.w	r0, [sp, #8]
 800b312:	b970      	cbnz	r0, 800b332 <aci_gap_init_IDB04A1+0x5a>
    return resp.status;
  }
  
  *service_handle = btohs(resp.service_handle);
 800b314:	9902      	ldr	r1, [sp, #8]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 800b316:	f89d 300c 	ldrb.w	r3, [sp, #12]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 800b31a:	9a03      	ldr	r2, [sp, #12]
  *service_handle = btohs(resp.service_handle);
 800b31c:	f3c1 210f 	ubfx	r1, r1, #8, #16
 800b320:	8031      	strh	r1, [r6, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 800b322:	f89d 100b 	ldrb.w	r1, [sp, #11]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 800b326:	f3c2 220f 	ubfx	r2, r2, #8, #16
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 800b32a:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
 800b32e:	8029      	strh	r1, [r5, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 800b330:	8022      	strh	r2, [r4, #0]
  
  return 0;
}
 800b332:	b00a      	add	sp, #40	; 0x28
 800b334:	bd70      	pop	{r4, r5, r6, pc}
    return BLE_STATUS_TIMEOUT;
 800b336:	20ff      	movs	r0, #255	; 0xff
 800b338:	e7fb      	b.n	800b332 <aci_gap_init_IDB04A1+0x5a>
 800b33a:	bf00      	nop
 800b33c:	008a003f 	.word	0x008a003f

0800b340 <aci_gap_set_discoverable>:

tBleStatus aci_gap_set_discoverable(uint8_t AdvType, uint16_t AdvIntervMin, uint16_t AdvIntervMax,
                             uint8_t OwnAddrType, uint8_t AdvFilterPolicy, uint8_t LocalNameLen,
                             const char *LocalName, uint8_t ServiceUUIDLen, uint8_t* ServiceUUIDList,
                             uint16_t SlaveConnIntervMin, uint16_t SlaveConnIntervMax)
{
 800b340:	b570      	push	{r4, r5, r6, lr}
 800b342:	b092      	sub	sp, #72	; 0x48
 800b344:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 800b348:	f89d 4064 	ldrb.w	r4, [sp, #100]	; 0x64
  struct hci_request rq;
  uint8_t status;    
  uint8_t buffer[40];
  uint8_t indx = 0;
  
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
 800b34c:	192e      	adds	r6, r5, r4
 800b34e:	2e1a      	cmp	r6, #26
 800b350:	dc47      	bgt.n	800b3e2 <aci_gap_set_discoverable+0xa2>
    return BLE_STATUS_INVALID_PARAMS;

  buffer[indx] = AdvType;
 800b352:	f88d 0020 	strb.w	r0, [sp, #32]
  indx++;
  
  AdvIntervMin = htobs(AdvIntervMin);
  BLUENRG_memcpy(buffer + indx, &AdvIntervMin, 2);
 800b356:	f8ad 1021 	strh.w	r1, [sp, #33]	; 0x21
  indx +=  2;
    
  AdvIntervMax = htobs(AdvIntervMax);
  BLUENRG_memcpy(buffer + indx, &AdvIntervMax, 2);
 800b35a:	f8ad 2023 	strh.w	r2, [sp, #35]	; 0x23
  indx +=  2;
    
  buffer[indx] = OwnAddrType;
 800b35e:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  indx++;
    
  buffer[indx] = LocalNameLen;
  indx++;
    
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 800b362:	462a      	mov	r2, r5
  buffer[indx] = AdvFilterPolicy;
 800b364:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 800b368:	9918      	ldr	r1, [sp, #96]	; 0x60
  buffer[indx] = AdvFilterPolicy;
 800b36a:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 800b36e:	a80a      	add	r0, sp, #40	; 0x28
  buffer[indx] = LocalNameLen;
 800b370:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 800b374:	f00a fe12 	bl	8015f9c <memcpy>
  indx +=  LocalNameLen;
 800b378:	f105 0308 	add.w	r3, r5, #8
  
  buffer[indx] = ServiceUUIDLen;
 800b37c:	aa12      	add	r2, sp, #72	; 0x48
 800b37e:	fa52 f383 	uxtab	r3, r2, r3
  indx++;
 800b382:	3509      	adds	r5, #9
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 800b384:	ae08      	add	r6, sp, #32
  indx++;
 800b386:	b2ed      	uxtb	r5, r5
  buffer[indx] = ServiceUUIDLen;
 800b388:	f803 4c28 	strb.w	r4, [r3, #-40]

  BLUENRG_memcpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 800b38c:	4622      	mov	r2, r4
 800b38e:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b390:	1970      	adds	r0, r6, r5
  indx +=  ServiceUUIDLen;  
 800b392:	442c      	add	r4, r5
  BLUENRG_memcpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 800b394:	f00a fe02 	bl	8015f9c <memcpy>
  indx +=  ServiceUUIDLen;  
 800b398:	b2e4      	uxtb	r4, r4

  SlaveConnIntervMin = htobs(SlaveConnIntervMin);
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMin, 2);
 800b39a:	ab12      	add	r3, sp, #72	; 0x48
 800b39c:	4423      	add	r3, r4
 800b39e:	f8bd 206c 	ldrh.w	r2, [sp, #108]	; 0x6c
 800b3a2:	f823 2c28 	strh.w	r2, [r3, #-40]
  indx +=  2;
 800b3a6:	1ca3      	adds	r3, r4, #2
  
  SlaveConnIntervMax = htobs(SlaveConnIntervMax);
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMax, 2);
 800b3a8:	aa12      	add	r2, sp, #72	; 0x48
 800b3aa:	fa52 f383 	uxtab	r3, r2, r3
 800b3ae:	f8bd 2070 	ldrh.w	r2, [sp, #112]	; 0x70
 800b3b2:	f823 2c28 	strh.w	r2, [r3, #-40]
  indx +=  2;    

  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = OGF_VENDOR_CMD;
 800b3b6:	4b0d      	ldr	r3, [pc, #52]	; (800b3ec <aci_gap_set_discoverable+0xac>)
  rq.ocf = OCF_GAP_SET_DISCOVERABLE;
  rq.cparam = (void *)buffer;
 800b3b8:	9604      	str	r6, [sp, #16]
  rq.ogf = OGF_VENDOR_CMD;
 800b3ba:	2100      	movs	r1, #0
 800b3bc:	e9cd 3102 	strd	r3, r1, [sp, #8]
  indx +=  2;    
 800b3c0:	3404      	adds	r4, #4
  rq.clen = indx;
  rq.rparam = &status;
 800b3c2:	f10d 0307 	add.w	r3, sp, #7
 800b3c6:	9306      	str	r3, [sp, #24]
  rq.clen = indx;
 800b3c8:	b2e4      	uxtb	r4, r4
  rq.rlen = 1;
 800b3ca:	2301      	movs	r3, #1

  if (hci_send_req(&rq, FALSE) < 0)
 800b3cc:	a802      	add	r0, sp, #8
  rq.clen = indx;
 800b3ce:	9405      	str	r4, [sp, #20]
  rq.rlen = 1;
 800b3d0:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800b3d2:	f000 fac5 	bl	800b960 <hci_send_req>
 800b3d6:	2800      	cmp	r0, #0
 800b3d8:	db05      	blt.n	800b3e6 <aci_gap_set_discoverable+0xa6>
    return BLE_STATUS_TIMEOUT;

  if (status) {
 800b3da:	f89d 0007 	ldrb.w	r0, [sp, #7]
    return status;
  }

  return 0;
}
 800b3de:	b012      	add	sp, #72	; 0x48
 800b3e0:	bd70      	pop	{r4, r5, r6, pc}
    return BLE_STATUS_INVALID_PARAMS;
 800b3e2:	2042      	movs	r0, #66	; 0x42
 800b3e4:	e7fb      	b.n	800b3de <aci_gap_set_discoverable+0x9e>
    return BLE_STATUS_TIMEOUT;
 800b3e6:	20ff      	movs	r0, #255	; 0xff
 800b3e8:	e7f9      	b.n	800b3de <aci_gap_set_discoverable+0x9e>
 800b3ea:	bf00      	nop
 800b3ec:	0083003f 	.word	0x0083003f

0800b3f0 <aci_gap_set_auth_requirement>:
                                        uint8_t min_encryption_key_size,
                                        uint8_t max_encryption_key_size,
                                        uint8_t use_fixed_pin,
                                        uint32_t fixed_pin,
                                        uint8_t bonding_mode)
{
 800b3f0:	b510      	push	{r4, lr}
 800b3f2:	b08e      	sub	sp, #56	; 0x38
  struct hci_request rq;
  gap_set_auth_requirement_cp cp;    
  uint8_t status;
    
  cp.mitm_mode = mitm_mode;
 800b3f4:	f88d 001c 	strb.w	r0, [sp, #28]
  cp.oob_enable = oob_enable;
 800b3f8:	f88d 101d 	strb.w	r1, [sp, #29]
  BLUENRG_memcpy(cp.oob_data, oob_data, 16);
 800b3fc:	f102 0010 	add.w	r0, r2, #16
 800b400:	f10d 011e 	add.w	r1, sp, #30
 800b404:	f852 4b04 	ldr.w	r4, [r2], #4
 800b408:	f841 4b04 	str.w	r4, [r1], #4
 800b40c:	4282      	cmp	r2, r0
 800b40e:	d1f9      	bne.n	800b404 <aci_gap_set_auth_requirement+0x14>
  cp.min_encryption_key_size = min_encryption_key_size;
 800b410:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
  cp.max_encryption_key_size = max_encryption_key_size;
 800b414:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 800b418:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  cp.use_fixed_pin = use_fixed_pin;
 800b41c:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 800b420:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
  cp.fixed_pin = htobl(fixed_pin);
 800b424:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b426:	f8cd 3031 	str.w	r3, [sp, #49]	; 0x31
  cp.bonding_mode = bonding_mode;
 800b42a:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 800b42e:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35

  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = OGF_VENDOR_CMD;
 800b432:	4b0b      	ldr	r3, [pc, #44]	; (800b460 <aci_gap_set_auth_requirement+0x70>)
 800b434:	2100      	movs	r1, #0
 800b436:	e9cd 3101 	strd	r3, r1, [sp, #4]
  rq.ocf = OCF_GAP_SET_AUTH_REQUIREMENT;
  rq.cparam = &cp;
 800b43a:	ab07      	add	r3, sp, #28
 800b43c:	9303      	str	r3, [sp, #12]
  rq.clen = sizeof(cp);
 800b43e:	231a      	movs	r3, #26
 800b440:	9304      	str	r3, [sp, #16]
  rq.rparam = &status;
 800b442:	f10d 0303 	add.w	r3, sp, #3
 800b446:	9305      	str	r3, [sp, #20]
  rq.rlen = 1;

  if (hci_send_req(&rq, FALSE) < 0)
 800b448:	a801      	add	r0, sp, #4
  rq.rlen = 1;
 800b44a:	2301      	movs	r3, #1
 800b44c:	9306      	str	r3, [sp, #24]
  if (hci_send_req(&rq, FALSE) < 0)
 800b44e:	f000 fa87 	bl	800b960 <hci_send_req>
 800b452:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;

  if (status) {
 800b454:	bfac      	ite	ge
 800b456:	f89d 0003 	ldrbge.w	r0, [sp, #3]
    return BLE_STATUS_TIMEOUT;
 800b45a:	20ff      	movlt	r0, #255	; 0xff
    return status;
  }
    
  return 0;
}
 800b45c:	b00e      	add	sp, #56	; 0x38
 800b45e:	bd10      	pop	{r4, pc}
 800b460:	0086003f 	.word	0x0086003f

0800b464 <aci_gap_update_adv_data>:
  return status;

}

tBleStatus aci_gap_update_adv_data(uint8_t AdvLen, const uint8_t *AdvData)
{
 800b464:	b530      	push	{r4, r5, lr}
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[32];
  uint8_t indx = 0;
    
  if (AdvLen > (sizeof(buffer)-1))
 800b466:	281f      	cmp	r0, #31
{
 800b468:	b091      	sub	sp, #68	; 0x44
 800b46a:	4604      	mov	r4, r0
  if (AdvLen > (sizeof(buffer)-1))
 800b46c:	d81d      	bhi.n	800b4aa <aci_gap_update_adv_data+0x46>
    return BLE_STATUS_INVALID_PARAMS;

  buffer[indx] = AdvLen;
 800b46e:	ad10      	add	r5, sp, #64	; 0x40
  indx++;
    
  BLUENRG_memcpy(buffer + indx, AdvData, AdvLen);
 800b470:	4602      	mov	r2, r0
  buffer[indx] = AdvLen;
 800b472:	f805 0d20 	strb.w	r0, [r5, #-32]!
  BLUENRG_memcpy(buffer + indx, AdvData, AdvLen);
 800b476:	f10d 0021 	add.w	r0, sp, #33	; 0x21
 800b47a:	f00a fd8f 	bl	8015f9c <memcpy>
  indx +=  AdvLen;
    
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = OGF_VENDOR_CMD;
 800b47e:	4b0d      	ldr	r3, [pc, #52]	; (800b4b4 <aci_gap_update_adv_data+0x50>)
  rq.ocf = OCF_GAP_UPDATE_ADV_DATA;
  rq.cparam = (void *)buffer;
 800b480:	9504      	str	r5, [sp, #16]
  rq.ogf = OGF_VENDOR_CMD;
 800b482:	2100      	movs	r1, #0
 800b484:	e9cd 3102 	strd	r3, r1, [sp, #8]
  indx +=  AdvLen;
 800b488:	3401      	adds	r4, #1
  rq.clen = indx;
  rq.rparam = &status;
 800b48a:	f10d 0307 	add.w	r3, sp, #7
 800b48e:	9306      	str	r3, [sp, #24]
  rq.clen = indx;
 800b490:	b2e4      	uxtb	r4, r4
  rq.rlen = 1;
 800b492:	2301      	movs	r3, #1
    
  if (hci_send_req(&rq, FALSE) < 0)
 800b494:	a802      	add	r0, sp, #8
  rq.clen = indx;
 800b496:	9405      	str	r4, [sp, #20]
  rq.rlen = 1;
 800b498:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800b49a:	f000 fa61 	bl	800b960 <hci_send_req>
 800b49e:	2800      	cmp	r0, #0
 800b4a0:	db05      	blt.n	800b4ae <aci_gap_update_adv_data+0x4a>
    return BLE_STATUS_TIMEOUT;
    
  return status;
 800b4a2:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 800b4a6:	b011      	add	sp, #68	; 0x44
 800b4a8:	bd30      	pop	{r4, r5, pc}
    return BLE_STATUS_INVALID_PARAMS;
 800b4aa:	2042      	movs	r0, #66	; 0x42
 800b4ac:	e7fb      	b.n	800b4a6 <aci_gap_update_adv_data+0x42>
    return BLE_STATUS_TIMEOUT;
 800b4ae:	20ff      	movs	r0, #255	; 0xff
 800b4b0:	e7f9      	b.n	800b4a6 <aci_gap_update_adv_data+0x42>
 800b4b2:	bf00      	nop
 800b4b4:	008e003f 	.word	0x008e003f

0800b4b8 <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 800b4b8:	b500      	push	{lr}
 800b4ba:	b089      	sub	sp, #36	; 0x24
  struct hci_request rq;
  uint8_t status;

  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = OGF_VENDOR_CMD;
 800b4bc:	4b0a      	ldr	r3, [pc, #40]	; (800b4e8 <aci_gatt_init+0x30>)
 800b4be:	9302      	str	r3, [sp, #8]
  rq.ocf = OCF_GATT_INIT;
  rq.rparam = &status;
 800b4c0:	f10d 0307 	add.w	r3, sp, #7
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800b4c4:	2100      	movs	r1, #0
  rq.rparam = &status;
 800b4c6:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;

  if (hci_send_req(&rq, FALSE) < 0)
 800b4c8:	a802      	add	r0, sp, #8
  rq.rlen = 1;
 800b4ca:	2301      	movs	r3, #1
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800b4cc:	e9cd 1103 	strd	r1, r1, [sp, #12]
 800b4d0:	9105      	str	r1, [sp, #20]
  rq.rlen = 1;
 800b4d2:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800b4d4:	f000 fa44 	bl	800b960 <hci_send_req>
 800b4d8:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;

  return status;
 800b4da:	bfac      	ite	ge
 800b4dc:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 800b4e0:	20ff      	movlt	r0, #255	; 0xff
}
 800b4e2:	b009      	add	sp, #36	; 0x24
 800b4e4:	f85d fb04 	ldr.w	pc, [sp], #4
 800b4e8:	0101003f 	.word	0x0101003f

0800b4ec <aci_gatt_add_serv>:

tBleStatus aci_gatt_add_serv(uint8_t service_uuid_type, const uint8_t* service_uuid, uint8_t service_type, uint8_t max_attr_records, uint16_t *serviceHandle)
{
 800b4ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b4ee:	b08d      	sub	sp, #52	; 0x34
    
  if(service_uuid_type == UUID_TYPE_16){
    uuid_len = 2;
  }
  else {
    uuid_len = 16;
 800b4f0:	2801      	cmp	r0, #1
  buffer[indx] = service_uuid_type;
 800b4f2:	ad0c      	add	r5, sp, #48	; 0x30
    uuid_len = 16;
 800b4f4:	bf0c      	ite	eq
 800b4f6:	2402      	moveq	r4, #2
 800b4f8:	2410      	movne	r4, #16
  buffer[indx] = service_uuid_type;
 800b4fa:	f805 0d2c 	strb.w	r0, [r5, #-44]!
{
 800b4fe:	4617      	mov	r7, r2
  }        
  BLUENRG_memcpy(buffer + indx, service_uuid, uuid_len);
 800b500:	f10d 0005 	add.w	r0, sp, #5
 800b504:	4622      	mov	r2, r4
{
 800b506:	461e      	mov	r6, r3
  BLUENRG_memcpy(buffer + indx, service_uuid, uuid_len);
 800b508:	f00a fd48 	bl	8015f9c <memcpy>
  indx +=  uuid_len;
    
  buffer[indx] = service_type;
 800b50c:	ab0c      	add	r3, sp, #48	; 0x30
 800b50e:	4423      	add	r3, r4
    
  buffer[indx] = max_attr_records;
  indx++;
    
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800b510:	2100      	movs	r1, #0
  buffer[indx] = service_type;
 800b512:	f803 7c2b 	strb.w	r7, [r3, #-43]
  buffer[indx] = max_attr_records;
 800b516:	ab0c      	add	r3, sp, #48	; 0x30
 800b518:	191a      	adds	r2, r3, r4

  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = OGF_VENDOR_CMD;
 800b51a:	4b10      	ldr	r3, [pc, #64]	; (800b55c <aci_gatt_add_serv+0x70>)
 800b51c:	9306      	str	r3, [sp, #24]
  rq.ocf = OCF_GATT_ADD_SERV;
  rq.cparam = (void *)buffer;
  rq.clen = indx;
 800b51e:	3403      	adds	r4, #3
  rq.rparam = &resp;
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 800b520:	2303      	movs	r3, #3

  if (hci_send_req(&rq, FALSE) < 0)
 800b522:	a806      	add	r0, sp, #24
  buffer[indx] = max_attr_records;
 800b524:	f802 6c2a 	strb.w	r6, [r2, #-42]
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800b528:	f8ad 1000 	strh.w	r1, [sp]
 800b52c:	f88d 1002 	strb.w	r1, [sp, #2]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800b530:	9107      	str	r1, [sp, #28]
  rq.cparam = (void *)buffer;
 800b532:	9508      	str	r5, [sp, #32]
  rq.clen = indx;
 800b534:	9409      	str	r4, [sp, #36]	; 0x24
  rq.rparam = &resp;
 800b536:	f8cd d028 	str.w	sp, [sp, #40]	; 0x28
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 800b53a:	930b      	str	r3, [sp, #44]	; 0x2c
  if (hci_send_req(&rq, FALSE) < 0)
 800b53c:	f000 fa10 	bl	800b960 <hci_send_req>
 800b540:	2800      	cmp	r0, #0
 800b542:	db09      	blt.n	800b558 <aci_gatt_add_serv+0x6c>
    return BLE_STATUS_TIMEOUT;

  if (resp.status) {
 800b544:	f89d 0000 	ldrb.w	r0, [sp]
 800b548:	b920      	cbnz	r0, 800b554 <aci_gatt_add_serv+0x68>
    return resp.status;
  }
    
  *serviceHandle = btohs(resp.handle);
 800b54a:	9b00      	ldr	r3, [sp, #0]
 800b54c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b54e:	f3c3 230f 	ubfx	r3, r3, #8, #16
 800b552:	8013      	strh	r3, [r2, #0]

  return 0;
}
 800b554:	b00d      	add	sp, #52	; 0x34
 800b556:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return BLE_STATUS_TIMEOUT;
 800b558:	20ff      	movs	r0, #255	; 0xff
 800b55a:	e7fb      	b.n	800b554 <aci_gatt_add_serv+0x68>
 800b55c:	0102003f 	.word	0x0102003f

0800b560 <aci_gatt_add_char>:
			     uint8_t secPermissions,
			     uint8_t gattEvtMask,
			     uint8_t encryKeySize,
			     uint8_t isVariable,
			     uint16_t* charHandle)                     
{
 800b560:	b570      	push	{r4, r5, r6, lr}
    
  if(charUuidType == UUID_TYPE_16){
    uuid_len = 2;
  }
  else {
    uuid_len = 16;
 800b562:	2901      	cmp	r1, #1
{
 800b564:	b08e      	sub	sp, #56	; 0x38
    uuid_len = 16;
 800b566:	bf0c      	ite	eq
 800b568:	2402      	moveq	r4, #2
 800b56a:	2410      	movne	r4, #16
{
 800b56c:	4616      	mov	r6, r2
  BLUENRG_memcpy(buffer + indx, &serviceHandle, 2);
 800b56e:	f8ad 001c 	strh.w	r0, [sp, #28]
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 800b572:	4622      	mov	r2, r4
  buffer[indx] = charUuidType;
 800b574:	f88d 101e 	strb.w	r1, [sp, #30]
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 800b578:	f10d 001f 	add.w	r0, sp, #31
 800b57c:	4631      	mov	r1, r6
{
 800b57e:	461d      	mov	r5, r3
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 800b580:	f00a fd0c 	bl	8015f9c <memcpy>
  indx +=  uuid_len;
    
  buffer[indx] = charValueLen;
 800b584:	ab0e      	add	r3, sp, #56	; 0x38
 800b586:	191a      	adds	r2, r3, r4
  indx++;
    
  buffer[indx] = charProperties;
 800b588:	4613      	mov	r3, r2
  buffer[indx] = charValueLen;
 800b58a:	f802 5c19 	strb.w	r5, [r2, #-25]
  buffer[indx] = charProperties;
 800b58e:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 800b592:	f803 2c18 	strb.w	r2, [r3, #-24]
  indx++;
    
  buffer[indx] = secPermissions;
 800b596:	ab0e      	add	r3, sp, #56	; 0x38
 800b598:	4423      	add	r3, r4
 800b59a:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
 800b59e:	f803 2c17 	strb.w	r2, [r3, #-23]
  indx++;
    
  buffer[indx] = gattEvtMask;
 800b5a2:	ab0e      	add	r3, sp, #56	; 0x38
 800b5a4:	4423      	add	r3, r4
 800b5a6:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 800b5aa:	f803 2c16 	strb.w	r2, [r3, #-22]
  indx++;
    
  buffer[indx] = encryKeySize;
 800b5ae:	ab0e      	add	r3, sp, #56	; 0x38
 800b5b0:	4423      	add	r3, r4
 800b5b2:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 800b5b6:	f803 2c15 	strb.w	r2, [r3, #-21]
  indx++;
    
  buffer[indx] = isVariable;
 800b5ba:	ab0e      	add	r3, sp, #56	; 0x38
 800b5bc:	4423      	add	r3, r4
 800b5be:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
 800b5c2:	f803 2c14 	strb.w	r2, [r3, #-20]
  indx++;
    
  BLUENRG_memset(&resp, 0, sizeof(resp));

  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = OGF_VENDOR_CMD;
 800b5c6:	4b10      	ldr	r3, [pc, #64]	; (800b608 <aci_gatt_add_char+0xa8>)
 800b5c8:	9301      	str	r3, [sp, #4]
  rq.ocf = OCF_GATT_ADD_CHAR;
  rq.cparam = (void *)buffer;
 800b5ca:	ab07      	add	r3, sp, #28
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800b5cc:	2100      	movs	r1, #0
  rq.cparam = (void *)buffer;
 800b5ce:	9303      	str	r3, [sp, #12]
  rq.clen = indx;
 800b5d0:	3409      	adds	r4, #9
  rq.rparam = &resp;
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 800b5d2:	2303      	movs	r3, #3

  if (hci_send_req(&rq, FALSE) < 0)
 800b5d4:	a801      	add	r0, sp, #4
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800b5d6:	f8ad 1000 	strh.w	r1, [sp]
 800b5da:	f88d 1002 	strb.w	r1, [sp, #2]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800b5de:	9102      	str	r1, [sp, #8]
  rq.clen = indx;
 800b5e0:	9404      	str	r4, [sp, #16]
  rq.rparam = &resp;
 800b5e2:	f8cd d014 	str.w	sp, [sp, #20]
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 800b5e6:	9306      	str	r3, [sp, #24]
  if (hci_send_req(&rq, FALSE) < 0)
 800b5e8:	f000 f9ba 	bl	800b960 <hci_send_req>
 800b5ec:	2800      	cmp	r0, #0
 800b5ee:	db09      	blt.n	800b604 <aci_gatt_add_char+0xa4>
    return BLE_STATUS_TIMEOUT;

  if (resp.status) {
 800b5f0:	f89d 0000 	ldrb.w	r0, [sp]
 800b5f4:	b920      	cbnz	r0, 800b600 <aci_gatt_add_char+0xa0>
    return resp.status;
  }
    
  *charHandle = btohs(resp.handle);
 800b5f6:	9b00      	ldr	r3, [sp, #0]
 800b5f8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b5fa:	f3c3 230f 	ubfx	r3, r3, #8, #16
 800b5fe:	8013      	strh	r3, [r2, #0]

  return 0;
}
 800b600:	b00e      	add	sp, #56	; 0x38
 800b602:	bd70      	pop	{r4, r5, r6, pc}
    return BLE_STATUS_TIMEOUT;
 800b604:	20ff      	movs	r0, #255	; 0xff
 800b606:	e7fb      	b.n	800b600 <aci_gatt_add_char+0xa0>
 800b608:	0104003f 	.word	0x0104003f

0800b60c <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t servHandle, 
				      uint16_t charHandle,
				      uint8_t charValOffset,
				      uint8_t charValueLen,   
                                      const void *charValue)
{
 800b60c:	b510      	push	{r4, lr}
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
    
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 800b60e:	2b7a      	cmp	r3, #122	; 0x7a
{
 800b610:	b0a8      	sub	sp, #160	; 0xa0
 800b612:	461c      	mov	r4, r3
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 800b614:	d824      	bhi.n	800b660 <aci_gatt_update_char_value+0x54>
    return BLE_STATUS_INVALID_PARAMS;

  servHandle = htobs(servHandle);
  BLUENRG_memcpy(buffer + indx, &servHandle, 2);
 800b616:	f8ad 0020 	strh.w	r0, [sp, #32]
  indx += 2;
    
  charHandle = htobs(charHandle);
  BLUENRG_memcpy(buffer + indx, &charHandle, 2);
 800b61a:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
  indx += 2;
    
  buffer[indx] = charValOffset;
 800b61e:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
  indx++;
    
  buffer[indx] = charValueLen;
  indx++;
        
  BLUENRG_memcpy(buffer + indx, charValue, charValueLen);
 800b622:	992a      	ldr	r1, [sp, #168]	; 0xa8
  buffer[indx] = charValueLen;
 800b624:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  BLUENRG_memcpy(buffer + indx, charValue, charValueLen);
 800b628:	461a      	mov	r2, r3
 800b62a:	f10d 0026 	add.w	r0, sp, #38	; 0x26
 800b62e:	f00a fcb5 	bl	8015f9c <memcpy>
  indx +=  charValueLen;

  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = OGF_VENDOR_CMD;
 800b632:	4b0d      	ldr	r3, [pc, #52]	; (800b668 <aci_gatt_update_char_value+0x5c>)
 800b634:	2100      	movs	r1, #0
 800b636:	e9cd 3102 	strd	r3, r1, [sp, #8]
  rq.ocf = OCF_GATT_UPD_CHAR_VAL;
  rq.cparam = (void *)buffer;
 800b63a:	ab08      	add	r3, sp, #32
 800b63c:	9304      	str	r3, [sp, #16]
  indx +=  charValueLen;
 800b63e:	3406      	adds	r4, #6
  rq.clen = indx;
  rq.rparam = &status;
 800b640:	f10d 0307 	add.w	r3, sp, #7
 800b644:	9306      	str	r3, [sp, #24]
  rq.clen = indx;
 800b646:	b2e4      	uxtb	r4, r4
  rq.rlen = 1;
 800b648:	2301      	movs	r3, #1

  if (hci_send_req(&rq, FALSE) < 0)
 800b64a:	a802      	add	r0, sp, #8
  rq.clen = indx;
 800b64c:	9405      	str	r4, [sp, #20]
  rq.rlen = 1;
 800b64e:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800b650:	f000 f986 	bl	800b960 <hci_send_req>
 800b654:	2800      	cmp	r0, #0
 800b656:	db05      	blt.n	800b664 <aci_gatt_update_char_value+0x58>
    return BLE_STATUS_TIMEOUT;

  if (status) {
 800b658:	f89d 0007 	ldrb.w	r0, [sp, #7]
    return status;
  }

  return 0;
}
 800b65c:	b028      	add	sp, #160	; 0xa0
 800b65e:	bd10      	pop	{r4, pc}
    return BLE_STATUS_INVALID_PARAMS;
 800b660:	2042      	movs	r0, #66	; 0x42
 800b662:	e7fb      	b.n	800b65c <aci_gatt_update_char_value+0x50>
    return BLE_STATUS_TIMEOUT;
 800b664:	20ff      	movs	r0, #255	; 0xff
 800b666:	e7f9      	b.n	800b65c <aci_gatt_update_char_value+0x50>
 800b668:	0106003f 	.word	0x0106003f

0800b66c <aci_gatt_allow_read>:

  return 0;
}

tBleStatus aci_gatt_allow_read(uint16_t conn_handle)
{
 800b66c:	b500      	push	{lr}
    uint8_t status;
    
    cp.conn_handle = htobs(conn_handle);

    BLUENRG_memset(&rq, 0, sizeof(rq));
    rq.ogf = OGF_VENDOR_CMD;
 800b66e:	4b0d      	ldr	r3, [pc, #52]	; (800b6a4 <aci_gatt_allow_read+0x38>)
{
 800b670:	b089      	sub	sp, #36	; 0x24
    rq.ogf = OGF_VENDOR_CMD;
 800b672:	2100      	movs	r1, #0
 800b674:	e9cd 3102 	strd	r3, r1, [sp, #8]
    rq.ocf = OCF_GATT_ALLOW_READ;
    rq.cparam = &cp;
 800b678:	ab01      	add	r3, sp, #4
 800b67a:	9304      	str	r3, [sp, #16]
    rq.clen = GATT_ALLOW_READ_CP_SIZE;
 800b67c:	2302      	movs	r3, #2
 800b67e:	9305      	str	r3, [sp, #20]
    rq.rparam = &status;
 800b680:	f10d 0303 	add.w	r3, sp, #3
    cp.conn_handle = htobs(conn_handle);
 800b684:	f8ad 0004 	strh.w	r0, [sp, #4]
    rq.rparam = &status;
 800b688:	9306      	str	r3, [sp, #24]
    rq.rlen = 1;

    if (hci_send_req(&rq, FALSE) < 0)
 800b68a:	a802      	add	r0, sp, #8
    rq.rlen = 1;
 800b68c:	2301      	movs	r3, #1
 800b68e:	9307      	str	r3, [sp, #28]
    if (hci_send_req(&rq, FALSE) < 0)
 800b690:	f000 f966 	bl	800b960 <hci_send_req>
 800b694:	2800      	cmp	r0, #0
      return BLE_STATUS_TIMEOUT;

    return status;
 800b696:	bfac      	ite	ge
 800b698:	f89d 0003 	ldrbge.w	r0, [sp, #3]
      return BLE_STATUS_TIMEOUT;
 800b69c:	20ff      	movlt	r0, #255	; 0xff
}
 800b69e:	b009      	add	sp, #36	; 0x24
 800b6a0:	f85d fb04 	ldr.w	pc, [sp], #4
 800b6a4:	0127003f 	.word	0x0127003f

0800b6a8 <aci_hal_set_tx_power_level>:
  
  return 0;
}

tBleStatus aci_hal_set_tx_power_level(uint8_t en_high_power, uint8_t pa_level)
{
 800b6a8:	b500      	push	{lr}
 800b6aa:	b089      	sub	sp, #36	; 0x24
    
  cp.en_high_power = en_high_power;
  cp.pa_level = pa_level;

  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = OGF_VENDOR_CMD;
 800b6ac:	4b0d      	ldr	r3, [pc, #52]	; (800b6e4 <aci_hal_set_tx_power_level+0x3c>)
  cp.pa_level = pa_level;
 800b6ae:	f88d 1005 	strb.w	r1, [sp, #5]
  rq.ogf = OGF_VENDOR_CMD;
 800b6b2:	2100      	movs	r1, #0
 800b6b4:	e9cd 3102 	strd	r3, r1, [sp, #8]
  rq.ocf = OCF_HAL_SET_TX_POWER_LEVEL;
  rq.cparam = &cp;
 800b6b8:	ab01      	add	r3, sp, #4
 800b6ba:	9304      	str	r3, [sp, #16]
  rq.clen = HAL_SET_TX_POWER_LEVEL_CP_SIZE;
 800b6bc:	2302      	movs	r3, #2
 800b6be:	9305      	str	r3, [sp, #20]
  rq.rparam = &status;
 800b6c0:	f10d 0303 	add.w	r3, sp, #3
  cp.en_high_power = en_high_power;
 800b6c4:	f88d 0004 	strb.w	r0, [sp, #4]
  rq.rparam = &status;
 800b6c8:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;

  if (hci_send_req(&rq, FALSE) < 0)
 800b6ca:	a802      	add	r0, sp, #8
  rq.rlen = 1;
 800b6cc:	2301      	movs	r3, #1
 800b6ce:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800b6d0:	f000 f946 	bl	800b960 <hci_send_req>
 800b6d4:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;

  return status;
 800b6d6:	bfac      	ite	ge
 800b6d8:	f89d 0003 	ldrbge.w	r0, [sp, #3]
    return BLE_STATUS_TIMEOUT;
 800b6dc:	20ff      	movlt	r0, #255	; 0xff
}
 800b6de:	b009      	add	sp, #36	; 0x24
 800b6e0:	f85d fb04 	ldr.w	pc, [sp], #4
 800b6e4:	000f003f 	.word	0x000f003f

0800b6e8 <aci_l2cap_connection_parameter_update_request>:
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

tBleStatus aci_l2cap_connection_parameter_update_request(uint16_t conn_handle, uint16_t interval_min,
							 uint16_t interval_max, uint16_t slave_latency,
							 uint16_t timeout_multiplier)
{
 800b6e8:	b500      	push	{lr}
 800b6ea:	b08b      	sub	sp, #44	; 0x2c
  l2cap_conn_param_update_req_cp cp;

  cp.conn_handle = htobs(conn_handle);
  cp.interval_min = htobs(interval_min);
  cp.interval_max = htobs(interval_max);
  cp.slave_latency = htobs(slave_latency);
 800b6ec:	f8ad 300a 	strh.w	r3, [sp, #10]
  cp.timeout_multiplier = htobs(timeout_multiplier);
 800b6f0:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800b6f4:	f8ad 300c 	strh.w	r3, [sp, #12]

  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = OGF_VENDOR_CMD;
  rq.ocf = OCF_L2CAP_CONN_PARAM_UPDATE_REQ;
  rq.cparam = &cp;
 800b6f8:	ab01      	add	r3, sp, #4
  cp.interval_min = htobs(interval_min);
 800b6fa:	f8ad 1006 	strh.w	r1, [sp, #6]
  rq.cparam = &cp;
 800b6fe:	9306      	str	r3, [sp, #24]
  rq.ocf = OCF_L2CAP_CONN_PARAM_UPDATE_REQ;
 800b700:	490d      	ldr	r1, [pc, #52]	; (800b738 <aci_l2cap_connection_parameter_update_request+0x50>)
  cp.conn_handle = htobs(conn_handle);
 800b702:	f8ad 0004 	strh.w	r0, [sp, #4]
  rq.clen = L2CAP_CONN_PARAM_UPDATE_REQ_CP_SIZE;
 800b706:	230a      	movs	r3, #10
 800b708:	9307      	str	r3, [sp, #28]
  rq.ocf = OCF_L2CAP_CONN_PARAM_UPDATE_REQ;
 800b70a:	230f      	movs	r3, #15
 800b70c:	e9cd 1304 	strd	r1, r3, [sp, #16]
  rq.event = EVT_CMD_STATUS;
  rq.rparam = &status;
 800b710:	f10d 0303 	add.w	r3, sp, #3
 800b714:	9308      	str	r3, [sp, #32]
  rq.rlen = 1;

  if (hci_send_req(&rq, FALSE) < 0)
 800b716:	2100      	movs	r1, #0
  rq.rlen = 1;
 800b718:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 800b71a:	a804      	add	r0, sp, #16
  cp.interval_max = htobs(interval_max);
 800b71c:	f8ad 2008 	strh.w	r2, [sp, #8]
  rq.rlen = 1;
 800b720:	9309      	str	r3, [sp, #36]	; 0x24
  if (hci_send_req(&rq, FALSE) < 0)
 800b722:	f000 f91d 	bl	800b960 <hci_send_req>
 800b726:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;
  
  return status;  
 800b728:	bfac      	ite	ge
 800b72a:	f89d 0003 	ldrbge.w	r0, [sp, #3]
    return BLE_STATUS_TIMEOUT;
 800b72e:	20ff      	movlt	r0, #255	; 0xff
}
 800b730:	b00b      	add	sp, #44	; 0x2c
 800b732:	f85d fb04 	ldr.w	pc, [sp], #4
 800b736:	bf00      	nop
 800b738:	0181003f 	.word	0x0181003f

0800b73c <getBlueNRGVersion>:
#include "hci.h"
#include "hci_le.h"
#include "string.h"

uint8_t getBlueNRGVersion(uint8_t *hwVersion, uint16_t *fwVersion)
{
 800b73c:	b530      	push	{r4, r5, lr}
 800b73e:	b085      	sub	sp, #20
  uint8_t status;
  uint8_t hci_version, lmp_pal_version;
  uint16_t hci_revision, manufacturer_name, lmp_pal_subversion;

  status = hci_le_read_local_version(&hci_version, &hci_revision, &lmp_pal_version, 
 800b740:	f10d 030e 	add.w	r3, sp, #14
 800b744:	9300      	str	r3, [sp, #0]
{
 800b746:	4605      	mov	r5, r0
 800b748:	460c      	mov	r4, r1
  status = hci_le_read_local_version(&hci_version, &hci_revision, &lmp_pal_version, 
 800b74a:	ab03      	add	r3, sp, #12
 800b74c:	f10d 0209 	add.w	r2, sp, #9
 800b750:	f10d 010a 	add.w	r1, sp, #10
 800b754:	a802      	add	r0, sp, #8
 800b756:	f000 f82b 	bl	800b7b0 <hci_le_read_local_version>
 800b75a:	b2c0      	uxtb	r0, r0
				     &manufacturer_name, &lmp_pal_subversion);

  if (status == BLE_STATUS_SUCCESS) {
 800b75c:	b968      	cbnz	r0, 800b77a <getBlueNRGVersion+0x3e>
    *hwVersion = hci_revision >> 8;
 800b75e:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    *fwVersion = (hci_revision & 0xFF) << 8;              // Major Version Number
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 800b762:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    *hwVersion = hci_revision >> 8;
 800b766:	0a0b      	lsrs	r3, r1, #8
 800b768:	702b      	strb	r3, [r5, #0]
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 800b76a:	f002 030f 	and.w	r3, r2, #15
 800b76e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 800b772:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 800b776:	4313      	orrs	r3, r2
 800b778:	8023      	strh	r3, [r4, #0]
  }
  return status;
}
 800b77a:	b005      	add	sp, #20
 800b77c:	bd30      	pop	{r4, r5, pc}

0800b77e <hci_reset>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

int hci_reset(void)
{
 800b77e:	b500      	push	{lr}
 800b780:	b089      	sub	sp, #36	; 0x24
  struct hci_request rq;
  uint8_t status;
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = OGF_HOST_CTL;
 800b782:	f04f 1303 	mov.w	r3, #196611	; 0x30003
 800b786:	9302      	str	r3, [sp, #8]
  rq.ocf = OCF_RESET;
  rq.rparam = &status;
 800b788:	f10d 0307 	add.w	r3, sp, #7
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800b78c:	2100      	movs	r1, #0
  rq.rparam = &status;
 800b78e:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;
  
  if (hci_send_req(&rq, FALSE) < 0)
 800b790:	a802      	add	r0, sp, #8
  rq.rlen = 1;
 800b792:	2301      	movs	r3, #1
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800b794:	e9cd 1103 	strd	r1, r1, [sp, #12]
 800b798:	9105      	str	r1, [sp, #20]
  rq.rlen = 1;
 800b79a:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800b79c:	f000 f8e0 	bl	800b960 <hci_send_req>
 800b7a0:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;
  
  return status;  
 800b7a2:	bfac      	ite	ge
 800b7a4:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 800b7a8:	20ff      	movlt	r0, #255	; 0xff
}
 800b7aa:	b009      	add	sp, #36	; 0x24
 800b7ac:	f85d fb04 	ldr.w	pc, [sp], #4

0800b7b0 <hci_le_read_local_version>:
  return status;  
}

int hci_le_read_local_version(uint8_t *hci_version, uint16_t *hci_revision, uint8_t *lmp_pal_version, 
                              uint16_t *manufacturer_name, uint16_t *lmp_pal_subversion)
{
 800b7b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b7b2:	b08b      	sub	sp, #44	; 0x2c
 800b7b4:	4607      	mov	r7, r0
 800b7b6:	461c      	mov	r4, r3
  struct hci_request rq;
  read_local_version_rp resp;
  
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800b7b8:	a801      	add	r0, sp, #4
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = OGF_INFO_PARAM;
 800b7ba:	4b18      	ldr	r3, [pc, #96]	; (800b81c <hci_le_read_local_version+0x6c>)
 800b7bc:	9304      	str	r3, [sp, #16]
  rq.ocf = OCF_READ_LOCAL_VERSION;
  rq.cparam = NULL;
  rq.clen = 0;
  rq.rparam = &resp;
 800b7be:	9008      	str	r0, [sp, #32]
  rq.rlen = READ_LOCAL_VERSION_RP_SIZE;
 800b7c0:	2309      	movs	r3, #9
{
 800b7c2:	460e      	mov	r6, r1
  
  if (hci_send_req(&rq, FALSE) < 0)
 800b7c4:	a804      	add	r0, sp, #16
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800b7c6:	2100      	movs	r1, #0
{
 800b7c8:	4615      	mov	r5, r2
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800b7ca:	e9cd 1101 	strd	r1, r1, [sp, #4]
 800b7ce:	f88d 100c 	strb.w	r1, [sp, #12]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800b7d2:	e9cd 1105 	strd	r1, r1, [sp, #20]
 800b7d6:	9107      	str	r1, [sp, #28]
  rq.rlen = READ_LOCAL_VERSION_RP_SIZE;
 800b7d8:	9309      	str	r3, [sp, #36]	; 0x24
  if (hci_send_req(&rq, FALSE) < 0)
 800b7da:	f000 f8c1 	bl	800b960 <hci_send_req>
 800b7de:	2800      	cmp	r0, #0
 800b7e0:	db19      	blt.n	800b816 <hci_le_read_local_version+0x66>
    return BLE_STATUS_TIMEOUT;
  
  if (resp.status) {
 800b7e2:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800b7e6:	b9a0      	cbnz	r0, 800b812 <hci_le_read_local_version+0x62>
    return resp.status;
  }
  
  
  *hci_version = resp.hci_version;
 800b7e8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b7ec:	703b      	strb	r3, [r7, #0]
  *hci_revision =  btohs(resp.hci_revision);
  *lmp_pal_version = resp.lmp_pal_version;
  *manufacturer_name = btohs(resp.manufacturer_name);
 800b7ee:	9a02      	ldr	r2, [sp, #8]
  *hci_revision =  btohs(resp.hci_revision);
 800b7f0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800b7f4:	8033      	strh	r3, [r6, #0]
  *manufacturer_name = btohs(resp.manufacturer_name);
 800b7f6:	f3c2 220f 	ubfx	r2, r2, #8, #16
  *lmp_pal_version = resp.lmp_pal_version;
 800b7fa:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800b7fe:	702b      	strb	r3, [r5, #0]
  *manufacturer_name = btohs(resp.manufacturer_name);
 800b800:	8022      	strh	r2, [r4, #0]
  *lmp_pal_subversion = btohs(resp.lmp_pal_subversion);
 800b802:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800b806:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800b80a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800b80e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b810:	8013      	strh	r3, [r2, #0]
  
  return 0;
}
 800b812:	b00b      	add	sp, #44	; 0x2c
 800b814:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return BLE_STATUS_TIMEOUT;
 800b816:	20ff      	movs	r0, #255	; 0xff
 800b818:	e7fb      	b.n	800b812 <hci_le_read_local_version+0x62>
 800b81a:	bf00      	nop
 800b81c:	00010004 	.word	0x00010004

0800b820 <hci_le_set_scan_resp_data>:
  
  return 0;
}

int hci_le_set_scan_resp_data(uint8_t length, const uint8_t data[])
{
 800b820:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b822:	b091      	sub	sp, #68	; 0x44
  struct hci_request rq;
  le_set_scan_response_data_cp scan_resp_cp;
  uint8_t status;
  
  BLUENRG_memset(&scan_resp_cp, 0, sizeof(scan_resp_cp));
 800b824:	ad08      	add	r5, sp, #32
 800b826:	2420      	movs	r4, #32
{
 800b828:	4606      	mov	r6, r0
 800b82a:	460f      	mov	r7, r1
  BLUENRG_memset(&scan_resp_cp, 0, sizeof(scan_resp_cp));
 800b82c:	4622      	mov	r2, r4
 800b82e:	2100      	movs	r1, #0
 800b830:	4628      	mov	r0, r5
 800b832:	f00a fbbe 	bl	8015fb2 <memset>
  scan_resp_cp.length = length;
  BLUENRG_memcpy(scan_resp_cp.data, data, MIN(31,length));
 800b836:	2e1f      	cmp	r6, #31
 800b838:	4632      	mov	r2, r6
 800b83a:	4639      	mov	r1, r7
 800b83c:	bf28      	it	cs
 800b83e:	221f      	movcs	r2, #31
 800b840:	f10d 0021 	add.w	r0, sp, #33	; 0x21
  scan_resp_cp.length = length;
 800b844:	f88d 6020 	strb.w	r6, [sp, #32]
  BLUENRG_memcpy(scan_resp_cp.data, data, MIN(31,length));
 800b848:	f00a fba8 	bl	8015f9c <memcpy>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = OGF_LE_CTL;
 800b84c:	4b0a      	ldr	r3, [pc, #40]	; (800b878 <hci_le_set_scan_resp_data+0x58>)
 800b84e:	2100      	movs	r1, #0
 800b850:	e9cd 3102 	strd	r3, r1, [sp, #8]
  rq.ocf = OCF_LE_SET_SCAN_RESPONSE_DATA;
  rq.cparam = &scan_resp_cp;
  rq.clen = LE_SET_SCAN_RESPONSE_DATA_CP_SIZE;
  rq.rparam = &status;
 800b854:	f10d 0307 	add.w	r3, sp, #7
 800b858:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;
  
  if (hci_send_req(&rq, FALSE) < 0)
 800b85a:	a802      	add	r0, sp, #8
  rq.rlen = 1;
 800b85c:	2301      	movs	r3, #1
  rq.clen = LE_SET_SCAN_RESPONSE_DATA_CP_SIZE;
 800b85e:	e9cd 5404 	strd	r5, r4, [sp, #16]
  rq.rlen = 1;
 800b862:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800b864:	f000 f87c 	bl	800b960 <hci_send_req>
 800b868:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;
  
  return status;
 800b86a:	bfac      	ite	ge
 800b86c:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 800b870:	20ff      	movlt	r0, #255	; 0xff
}
 800b872:	b011      	add	sp, #68	; 0x44
 800b874:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b876:	bf00      	nop
 800b878:	00090008 	.word	0x00090008

0800b87c <hci_le_set_random_address>:
  
  return 0;
}

int hci_le_set_random_address(tBDAddr bdaddr)
{
 800b87c:	b500      	push	{lr}
 800b87e:	4602      	mov	r2, r0
 800b880:	b08b      	sub	sp, #44	; 0x2c
  struct hci_request rq;
  le_set_random_address_cp set_rand_addr_cp;
  uint8_t status;
  
  BLUENRG_memset(&set_rand_addr_cp, 0, sizeof(set_rand_addr_cp));
  BLUENRG_memcpy(set_rand_addr_cp.bdaddr, bdaddr, sizeof(tBDAddr));
 800b882:	ab02      	add	r3, sp, #8
 800b884:	8892      	ldrh	r2, [r2, #4]
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = OGF_LE_CTL;
  rq.ocf = OCF_LE_SET_RANDOM_ADDRESS;
  rq.cparam = &set_rand_addr_cp;
 800b886:	9306      	str	r3, [sp, #24]
  rq.clen = LE_SET_RANDOM_ADDRESS_CP_SIZE;
 800b888:	2306      	movs	r3, #6
  BLUENRG_memcpy(set_rand_addr_cp.bdaddr, bdaddr, sizeof(tBDAddr));
 800b88a:	6800      	ldr	r0, [r0, #0]
 800b88c:	f8ad 200c 	strh.w	r2, [sp, #12]
  rq.clen = LE_SET_RANDOM_ADDRESS_CP_SIZE;
 800b890:	9307      	str	r3, [sp, #28]
  rq.ogf = OGF_LE_CTL;
 800b892:	4a0a      	ldr	r2, [pc, #40]	; (800b8bc <hci_le_set_random_address+0x40>)
  BLUENRG_memcpy(set_rand_addr_cp.bdaddr, bdaddr, sizeof(tBDAddr));
 800b894:	9002      	str	r0, [sp, #8]
  rq.rparam = &status;
 800b896:	f10d 0307 	add.w	r3, sp, #7
  rq.ogf = OGF_LE_CTL;
 800b89a:	2100      	movs	r1, #0
  rq.rparam = &status;
 800b89c:	9308      	str	r3, [sp, #32]
  rq.rlen = 1;
  
  if (hci_send_req(&rq, FALSE) < 0)
 800b89e:	a804      	add	r0, sp, #16
  rq.rlen = 1;
 800b8a0:	2301      	movs	r3, #1
  rq.ogf = OGF_LE_CTL;
 800b8a2:	e9cd 2104 	strd	r2, r1, [sp, #16]
  rq.rlen = 1;
 800b8a6:	9309      	str	r3, [sp, #36]	; 0x24
  if (hci_send_req(&rq, FALSE) < 0)
 800b8a8:	f000 f85a 	bl	800b960 <hci_send_req>
 800b8ac:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;
  
  return status;
 800b8ae:	bfac      	ite	ge
 800b8b0:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 800b8b4:	20ff      	movlt	r0, #255	; 0xff
}
 800b8b6:	b00b      	add	sp, #44	; 0x2c
 800b8b8:	f85d fb04 	ldr.w	pc, [sp], #4
 800b8bc:	00050008 	.word	0x00050008

0800b8c0 <move_list.constprop.0>:
  *
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
 800b8c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
  {
    list_remove_tail(src_list, &tmp_node);
    list_insert_head(dest_list, tmp_node);
 800b8c2:	4d08      	ldr	r5, [pc, #32]	; (800b8e4 <move_list.constprop.0+0x24>)
static void move_list(tListNode * dest_list, tListNode * src_list)
 800b8c4:	4604      	mov	r4, r0
  while (!list_is_empty(src_list))
 800b8c6:	4620      	mov	r0, r4
 800b8c8:	f000 f95b 	bl	800bb82 <list_is_empty>
 800b8cc:	b108      	cbz	r0, 800b8d2 <move_list.constprop.0+0x12>
  }
}
 800b8ce:	b003      	add	sp, #12
 800b8d0:	bd30      	pop	{r4, r5, pc}
    list_remove_tail(src_list, &tmp_node);
 800b8d2:	a901      	add	r1, sp, #4
 800b8d4:	4620      	mov	r0, r4
 800b8d6:	f000 f993 	bl	800bc00 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 800b8da:	9901      	ldr	r1, [sp, #4]
 800b8dc:	4628      	mov	r0, r5
 800b8de:	f000 f95a 	bl	800bb96 <list_insert_head>
 800b8e2:	e7f0      	b.n	800b8c6 <move_list.constprop.0+0x6>
 800b8e4:	200085a8 	.word	0x200085a8

0800b8e8 <hci_init>:
}

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800b8e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8ec:	4d11      	ldr	r5, [pc, #68]	; (800b934 <hci_init+0x4c>)
  uint8_t index;
  
  if(UserEvtRx != NULL)
 800b8ee:	b100      	cbz	r0, 800b8f2 <hci_init+0xa>
  {
    hciContext.UserEvtRx = UserEvtRx;
 800b8f0:	61e8      	str	r0, [r5, #28]
  }
  
  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 800b8f2:	f002 fc21 	bl	800e138 <hci_tl_lowlevel_init>
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 800b8f6:	4810      	ldr	r0, [pc, #64]	; (800b938 <hci_init+0x50>)
  list_init_head(&hciReadPktRxQueue);
  
  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 800b8f8:	4f10      	ldr	r7, [pc, #64]	; (800b93c <hci_init+0x54>)
 800b8fa:	4e0f      	ldr	r6, [pc, #60]	; (800b938 <hci_init+0x50>)
  list_init_head(&hciReadPktPool);
 800b8fc:	f000 f93e 	bl	800bb7c <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 800b900:	480f      	ldr	r0, [pc, #60]	; (800b940 <hci_init+0x58>)
 800b902:	f000 f93b 	bl	800bb7c <list_init_head>
 800b906:	2400      	movs	r4, #0
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 800b908:	f04f 088c 	mov.w	r8, #140	; 0x8c
 800b90c:	fb08 7104 	mla	r1, r8, r4, r7
 800b910:	4630      	mov	r0, r6
 800b912:	3401      	adds	r4, #1
 800b914:	f000 f94b 	bl	800bbae <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800b918:	2c05      	cmp	r4, #5
 800b91a:	d1f7      	bne.n	800b90c <hci_init+0x24>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 800b91c:	682b      	ldr	r3, [r5, #0]
 800b91e:	b10b      	cbz	r3, 800b924 <hci_init+0x3c>
 800b920:	2000      	movs	r0, #0
 800b922:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 800b924:	68ab      	ldr	r3, [r5, #8]
 800b926:	b113      	cbz	r3, 800b92e <hci_init+0x46>
}
 800b928:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  if (hciContext.io.Reset) hciContext.io.Reset();
 800b92c:	4718      	bx	r3
}
 800b92e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b932:	bf00      	nop
 800b934:	20001e3c 	.word	0x20001e3c
 800b938:	200085a0 	.word	0x200085a0
 800b93c:	20001e5c 	.word	0x20001e5c
 800b940:	200085a8 	.word	0x200085a8

0800b944 <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 800b944:	4b05      	ldr	r3, [pc, #20]	; (800b95c <hci_register_io_bus+0x18>)
 800b946:	6802      	ldr	r2, [r0, #0]
 800b948:	601a      	str	r2, [r3, #0]
  hciContext.io.Receive = fops->Receive;  
 800b94a:	68c2      	ldr	r2, [r0, #12]
 800b94c:	60da      	str	r2, [r3, #12]
  hciContext.io.Send    = fops->Send;
 800b94e:	6902      	ldr	r2, [r0, #16]
 800b950:	611a      	str	r2, [r3, #16]
  hciContext.io.GetTick = fops->GetTick;
 800b952:	6982      	ldr	r2, [r0, #24]
 800b954:	619a      	str	r2, [r3, #24]
  hciContext.io.Reset   = fops->Reset;    
 800b956:	6882      	ldr	r2, [r0, #8]
 800b958:	609a      	str	r2, [r3, #8]
}
 800b95a:	4770      	bx	lr
 800b95c:	20001e3c 	.word	0x20001e3c

0800b960 <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 800b960:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b964:	b0a5      	sub	sp, #148	; 0x94
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 800b966:	8846      	ldrh	r6, [r0, #2]
 800b968:	f8b0 8000 	ldrh.w	r8, [r0]
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 800b96c:	4f59      	ldr	r7, [pc, #356]	; (800bad4 <hci_send_req+0x174>)
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 800b96e:	f8df 916c 	ldr.w	r9, [pc, #364]	; 800badc <hci_send_req+0x17c>
  hci_event_pckt *event_pckt;
  hci_uart_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 800b972:	2300      	movs	r3, #0
{
 800b974:	4604      	mov	r4, r0
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 800b976:	a802      	add	r0, sp, #8
{
 800b978:	460d      	mov	r5, r1
  tHciDataPacket * hciReadPacket = NULL;
 800b97a:	9301      	str	r3, [sp, #4]
  list_init_head(&hciTempQueue);
 800b97c:	f000 f8fe 	bl	800bb7c <list_init_head>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 800b980:	4638      	mov	r0, r7
 800b982:	f000 f94f 	bl	800bc24 <list_get_size>
 800b986:	2801      	cmp	r0, #1
 800b988:	dd53      	ble.n	800ba32 <hci_send_req+0xd2>
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 800b98a:	8863      	ldrh	r3, [r4, #2]
 800b98c:	8822      	ldrh	r2, [r4, #0]

  free_event_list();
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 800b98e:	7b27      	ldrb	r7, [r4, #12]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 800b990:	68a1      	ldr	r1, [r4, #8]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 800b992:	f88d 7013 	strb.w	r7, [sp, #19]
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 800b996:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b99a:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
  payload[0] = HCI_COMMAND_PKT;
 800b99e:	2201      	movs	r2, #1
 800b9a0:	f88d 2010 	strb.w	r2, [sp, #16]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 800b9a4:	a805      	add	r0, sp, #20
 800b9a6:	463a      	mov	r2, r7
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 800b9a8:	f8ad 3011 	strh.w	r3, [sp, #17]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 800b9ac:	f00a faf6 	bl	8015f9c <memcpy>
  if (hciContext.io.Send)
 800b9b0:	4b49      	ldr	r3, [pc, #292]	; (800bad8 <hci_send_req+0x178>)
 800b9b2:	691b      	ldr	r3, [r3, #16]
 800b9b4:	b113      	cbz	r3, 800b9bc <hci_send_req+0x5c>
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 800b9b6:	1d39      	adds	r1, r7, #4
 800b9b8:	a804      	add	r0, sp, #16
 800b9ba:	4798      	blx	r3
  
  if (async)
 800b9bc:	2d00      	cmp	r5, #0
 800b9be:	d178      	bne.n	800bab2 <hci_send_req+0x152>
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 800b9c0:	f3c6 0509 	ubfx	r5, r6, #0, #10
 800b9c4:	ea45 2588 	orr.w	r5, r5, r8, lsl #10
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 800b9c8:	4e44      	ldr	r6, [pc, #272]	; (800badc <hci_send_req+0x17c>)
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 800b9ca:	4f42      	ldr	r7, [pc, #264]	; (800bad4 <hci_send_req+0x174>)
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 800b9cc:	b2ad      	uxth	r5, r5
    uint32_t tickstart = HAL_GetTick();
 800b9ce:	f7fb ffd7 	bl	8007980 <HAL_GetTick>
 800b9d2:	4680      	mov	r8, r0
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 800b9d4:	f7fb ffd4 	bl	8007980 <HAL_GetTick>
 800b9d8:	eba0 0008 	sub.w	r0, r0, r8
 800b9dc:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800b9e0:	d84a      	bhi.n	800ba78 <hci_send_req+0x118>
      if (!list_is_empty(&hciReadPktRxQueue)) 
 800b9e2:	4630      	mov	r0, r6
 800b9e4:	f000 f8cd 	bl	800bb82 <list_is_empty>
 800b9e8:	2800      	cmp	r0, #0
 800b9ea:	d1f3      	bne.n	800b9d4 <hci_send_req+0x74>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 800b9ec:	a901      	add	r1, sp, #4
 800b9ee:	4630      	mov	r0, r6
 800b9f0:	f000 f8f4 	bl	800bbdc <list_remove_head>
    hci_hdr = (void *)hciReadPacket->dataBuff;
 800b9f4:	9901      	ldr	r1, [sp, #4]
    if (hci_hdr->type == HCI_EVENT_PKT)
 800b9f6:	7a0b      	ldrb	r3, [r1, #8]
 800b9f8:	2b04      	cmp	r3, #4
 800b9fa:	d109      	bne.n	800ba10 <hci_send_req+0xb0>
      switch (event_pckt->evt) 
 800b9fc:	7a48      	ldrb	r0, [r1, #9]
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 800b9fe:	f891 3088 	ldrb.w	r3, [r1, #136]	; 0x88
      switch (event_pckt->evt) 
 800ba02:	280f      	cmp	r0, #15
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 800ba04:	f1a3 0203 	sub.w	r2, r3, #3
      switch (event_pckt->evt) 
 800ba08:	d02c      	beq.n	800ba64 <hci_send_req+0x104>
 800ba0a:	d81b      	bhi.n	800ba44 <hci_send_req+0xe4>
 800ba0c:	280e      	cmp	r0, #14
 800ba0e:	d052      	beq.n	800bab6 <hci_send_req+0x156>
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 800ba10:	4638      	mov	r0, r7
 800ba12:	f000 f8b6 	bl	800bb82 <list_is_empty>
 800ba16:	2800      	cmp	r0, #0
 800ba18:	d058      	beq.n	800bacc <hci_send_req+0x16c>
 800ba1a:	4630      	mov	r0, r6
 800ba1c:	f000 f8b1 	bl	800bb82 <list_is_empty>
 800ba20:	2800      	cmp	r0, #0
 800ba22:	d053      	beq.n	800bacc <hci_send_req+0x16c>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800ba24:	9901      	ldr	r1, [sp, #4]
 800ba26:	4638      	mov	r0, r7
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 800ba28:	f000 f8c1 	bl	800bbae <list_insert_tail>
      hciReadPacket=NULL;
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	9301      	str	r3, [sp, #4]
 800ba30:	e7cd      	b.n	800b9ce <hci_send_req+0x6e>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 800ba32:	a904      	add	r1, sp, #16
 800ba34:	4648      	mov	r0, r9
 800ba36:	f000 f8d1 	bl	800bbdc <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 800ba3a:	9904      	ldr	r1, [sp, #16]
 800ba3c:	4638      	mov	r0, r7
 800ba3e:	f000 f8b6 	bl	800bbae <list_insert_tail>
 800ba42:	e79d      	b.n	800b980 <hci_send_req+0x20>
      switch (event_pckt->evt) 
 800ba44:	2810      	cmp	r0, #16
 800ba46:	d017      	beq.n	800ba78 <hci_send_req+0x118>
 800ba48:	283e      	cmp	r0, #62	; 0x3e
 800ba4a:	d1e1      	bne.n	800ba10 <hci_send_req+0xb0>
        if (me->subevent != r->event)
 800ba4c:	7ac8      	ldrb	r0, [r1, #11]
 800ba4e:	6862      	ldr	r2, [r4, #4]
 800ba50:	4290      	cmp	r0, r2
 800ba52:	d1dd      	bne.n	800ba10 <hci_send_req+0xb0>
        len -= 1;
 800ba54:	1f1a      	subs	r2, r3, #4
        r->rlen = MIN(len, r->rlen);
 800ba56:	6963      	ldr	r3, [r4, #20]
 800ba58:	429a      	cmp	r2, r3
 800ba5a:	bf28      	it	cs
 800ba5c:	461a      	movcs	r2, r3
 800ba5e:	6162      	str	r2, [r4, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 800ba60:	310c      	adds	r1, #12
 800ba62:	e01c      	b.n	800ba9e <hci_send_req+0x13e>
        if (cs->opcode != opcode)
 800ba64:	f8b1 300d 	ldrh.w	r3, [r1, #13]
 800ba68:	42ab      	cmp	r3, r5
 800ba6a:	d105      	bne.n	800ba78 <hci_send_req+0x118>
        if (r->event != EVT_CMD_STATUS) {
 800ba6c:	6863      	ldr	r3, [r4, #4]
 800ba6e:	2b0f      	cmp	r3, #15
 800ba70:	d00f      	beq.n	800ba92 <hci_send_req+0x132>
          if (cs->status) {
 800ba72:	7acb      	ldrb	r3, [r1, #11]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d0cb      	beq.n	800ba10 <hci_send_req+0xb0>
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 800ba78:	9901      	ldr	r1, [sp, #4]
 800ba7a:	b111      	cbz	r1, 800ba82 <hci_send_req+0x122>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800ba7c:	4815      	ldr	r0, [pc, #84]	; (800bad4 <hci_send_req+0x174>)
 800ba7e:	f000 f88a 	bl	800bb96 <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);  
 800ba82:	a802      	add	r0, sp, #8
 800ba84:	f7ff ff1c 	bl	800b8c0 <move_list.constprop.0>
  return -1;
 800ba88:	f04f 30ff 	mov.w	r0, #4294967295
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
  move_list(&hciReadPktRxQueue, &hciTempQueue);
  return 0;
}
 800ba8c:	b025      	add	sp, #148	; 0x94
 800ba8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        r->rlen = MIN(len, r->rlen);
 800ba92:	6963      	ldr	r3, [r4, #20]
 800ba94:	429a      	cmp	r2, r3
 800ba96:	bf28      	it	cs
 800ba98:	461a      	movcs	r2, r3
 800ba9a:	6162      	str	r2, [r4, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800ba9c:	310b      	adds	r1, #11
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 800ba9e:	6920      	ldr	r0, [r4, #16]
 800baa0:	f00a fa7c 	bl	8015f9c <memcpy>
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 800baa4:	480b      	ldr	r0, [pc, #44]	; (800bad4 <hci_send_req+0x174>)
 800baa6:	9901      	ldr	r1, [sp, #4]
 800baa8:	f000 f875 	bl	800bb96 <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800baac:	a802      	add	r0, sp, #8
 800baae:	f7ff ff07 	bl	800b8c0 <move_list.constprop.0>
    return 0;
 800bab2:	2000      	movs	r0, #0
 800bab4:	e7ea      	b.n	800ba8c <hci_send_req+0x12c>
        if (cc->opcode != opcode)
 800bab6:	898a      	ldrh	r2, [r1, #12]
 800bab8:	42aa      	cmp	r2, r5
 800baba:	d1dd      	bne.n	800ba78 <hci_send_req+0x118>
        len -= EVT_CMD_COMPLETE_SIZE;
 800babc:	1f9a      	subs	r2, r3, #6
        r->rlen = MIN(len, r->rlen);
 800babe:	6963      	ldr	r3, [r4, #20]
 800bac0:	429a      	cmp	r2, r3
 800bac2:	bf28      	it	cs
 800bac4:	461a      	movcs	r2, r3
 800bac6:	6162      	str	r2, [r4, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800bac8:	310e      	adds	r1, #14
 800baca:	e7e8      	b.n	800ba9e <hci_send_req+0x13e>
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 800bacc:	9901      	ldr	r1, [sp, #4]
 800bace:	a802      	add	r0, sp, #8
 800bad0:	e7aa      	b.n	800ba28 <hci_send_req+0xc8>
 800bad2:	bf00      	nop
 800bad4:	200085a0 	.word	0x200085a0
 800bad8:	20001e3c 	.word	0x20001e3c
 800badc:	200085a8 	.word	0x200085a8

0800bae0 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800bae0:	b573      	push	{r0, r1, r4, r5, r6, lr}
  tHciDataPacket * hciReadPacket = NULL;
 800bae2:	2300      	movs	r3, #0
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800bae4:	4c0b      	ldr	r4, [pc, #44]	; (800bb14 <hci_user_evt_proc+0x34>)
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
    if (hciContext.UserEvtRx != NULL)
 800bae6:	4d0c      	ldr	r5, [pc, #48]	; (800bb18 <hci_user_evt_proc+0x38>)
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
    }
    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800bae8:	4e0c      	ldr	r6, [pc, #48]	; (800bb1c <hci_user_evt_proc+0x3c>)
  tHciDataPacket * hciReadPacket = NULL;
 800baea:	9301      	str	r3, [sp, #4]
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800baec:	4620      	mov	r0, r4
 800baee:	f000 f848 	bl	800bb82 <list_is_empty>
 800baf2:	b108      	cbz	r0, 800baf8 <hci_user_evt_proc+0x18>
  }
}
 800baf4:	b002      	add	sp, #8
 800baf6:	bd70      	pop	{r4, r5, r6, pc}
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 800baf8:	a901      	add	r1, sp, #4
 800bafa:	4620      	mov	r0, r4
 800bafc:	f000 f86e 	bl	800bbdc <list_remove_head>
    if (hciContext.UserEvtRx != NULL)
 800bb00:	69eb      	ldr	r3, [r5, #28]
 800bb02:	b113      	cbz	r3, 800bb0a <hci_user_evt_proc+0x2a>
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 800bb04:	9801      	ldr	r0, [sp, #4]
 800bb06:	3008      	adds	r0, #8
 800bb08:	4798      	blx	r3
    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800bb0a:	9901      	ldr	r1, [sp, #4]
 800bb0c:	4630      	mov	r0, r6
 800bb0e:	f000 f84e 	bl	800bbae <list_insert_tail>
 800bb12:	e7eb      	b.n	800baec <hci_user_evt_proc+0xc>
 800bb14:	200085a8 	.word	0x200085a8
 800bb18:	20001e3c 	.word	0x20001e3c
 800bb1c:	200085a0 	.word	0x200085a0

0800bb20 <hci_notify_asynch_evt>:

void hci_notify_asynch_evt(void* pdata)
{
 800bb20:	b507      	push	{r0, r1, r2, lr}
  tHciDataPacket * hciReadPacket = NULL;
 800bb22:	2300      	movs	r3, #0
  uint8_t data_len;
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 800bb24:	4812      	ldr	r0, [pc, #72]	; (800bb70 <hci_notify_asynch_evt+0x50>)
  tHciDataPacket * hciReadPacket = NULL;
 800bb26:	9301      	str	r3, [sp, #4]
  if (list_is_empty (&hciReadPktPool) == FALSE)
 800bb28:	f000 f82b 	bl	800bb82 <list_is_empty>
 800bb2c:	b9c8      	cbnz	r0, 800bb62 <hci_notify_asynch_evt+0x42>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 800bb2e:	a901      	add	r1, sp, #4
 800bb30:	480f      	ldr	r0, [pc, #60]	; (800bb70 <hci_notify_asynch_evt+0x50>)
 800bb32:	f000 f853 	bl	800bbdc <list_remove_head>
    
    if (hciContext.io.Receive)
 800bb36:	4b0f      	ldr	r3, [pc, #60]	; (800bb74 <hci_notify_asynch_evt+0x54>)
 800bb38:	68db      	ldr	r3, [r3, #12]
 800bb3a:	b193      	cbz	r3, 800bb62 <hci_notify_asynch_evt+0x42>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 800bb3c:	9801      	ldr	r0, [sp, #4]
 800bb3e:	2180      	movs	r1, #128	; 0x80
 800bb40:	3008      	adds	r0, #8
 800bb42:	4798      	blx	r3
 800bb44:	b2c0      	uxtb	r0, r0
      if (data_len > 0)
      {                    
        hciReadPacket->data_len = data_len;
 800bb46:	9901      	ldr	r1, [sp, #4]
      if (data_len > 0)
 800bb48:	b170      	cbz	r0, 800bb68 <hci_notify_asynch_evt+0x48>
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 800bb4a:	7a0b      	ldrb	r3, [r1, #8]
        hciReadPacket->data_len = data_len;
 800bb4c:	f881 0088 	strb.w	r0, [r1, #136]	; 0x88
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 800bb50:	2b04      	cmp	r3, #4
 800bb52:	d109      	bne.n	800bb68 <hci_notify_asynch_evt+0x48>
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 800bb54:	7a8b      	ldrb	r3, [r1, #10]
 800bb56:	3803      	subs	r0, #3
 800bb58:	4283      	cmp	r3, r0
 800bb5a:	d105      	bne.n	800bb68 <hci_notify_asynch_evt+0x48>
        if (verify_packet(hciReadPacket) == 0)
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 800bb5c:	4806      	ldr	r0, [pc, #24]	; (800bb78 <hci_notify_asynch_evt+0x58>)
 800bb5e:	f000 f826 	bl	800bbae <list_insert_tail>
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
      }
    }
  }
}
 800bb62:	b003      	add	sp, #12
 800bb64:	f85d fb04 	ldr.w	pc, [sp], #4
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800bb68:	4801      	ldr	r0, [pc, #4]	; (800bb70 <hci_notify_asynch_evt+0x50>)
 800bb6a:	f000 f814 	bl	800bb96 <list_insert_head>
}
 800bb6e:	e7f8      	b.n	800bb62 <hci_notify_asynch_evt+0x42>
 800bb70:	200085a0 	.word	0x200085a0
 800bb74:	20001e3c 	.word	0x20001e3c
 800bb78:	200085a8 	.word	0x200085a8

0800bb7c <list_init_head>:
 800bb7c:	e9c0 0000 	strd	r0, r0, [r0]
 800bb80:	4770      	bx	lr

0800bb82 <list_is_empty>:
 800bb82:	f3ef 8210 	mrs	r2, PRIMASK
 800bb86:	b672      	cpsid	i
 800bb88:	6803      	ldr	r3, [r0, #0]
 800bb8a:	1a1b      	subs	r3, r3, r0
 800bb8c:	4258      	negs	r0, r3
 800bb8e:	4158      	adcs	r0, r3
 800bb90:	f382 8810 	msr	PRIMASK, r2
 800bb94:	4770      	bx	lr

0800bb96 <list_insert_head>:
 800bb96:	f3ef 8310 	mrs	r3, PRIMASK
 800bb9a:	b672      	cpsid	i
 800bb9c:	6802      	ldr	r2, [r0, #0]
 800bb9e:	e9c1 2000 	strd	r2, r0, [r1]
 800bba2:	6001      	str	r1, [r0, #0]
 800bba4:	680a      	ldr	r2, [r1, #0]
 800bba6:	6051      	str	r1, [r2, #4]
 800bba8:	f383 8810 	msr	PRIMASK, r3
 800bbac:	4770      	bx	lr

0800bbae <list_insert_tail>:
 800bbae:	f3ef 8310 	mrs	r3, PRIMASK
 800bbb2:	b672      	cpsid	i
 800bbb4:	6842      	ldr	r2, [r0, #4]
 800bbb6:	604a      	str	r2, [r1, #4]
 800bbb8:	6008      	str	r0, [r1, #0]
 800bbba:	6041      	str	r1, [r0, #4]
 800bbbc:	684a      	ldr	r2, [r1, #4]
 800bbbe:	6011      	str	r1, [r2, #0]
 800bbc0:	f383 8810 	msr	PRIMASK, r3
 800bbc4:	4770      	bx	lr

0800bbc6 <list_remove_node>:
 800bbc6:	f3ef 8210 	mrs	r2, PRIMASK
 800bbca:	b672      	cpsid	i
 800bbcc:	e9d0 1300 	ldrd	r1, r3, [r0]
 800bbd0:	6019      	str	r1, [r3, #0]
 800bbd2:	6801      	ldr	r1, [r0, #0]
 800bbd4:	604b      	str	r3, [r1, #4]
 800bbd6:	f382 8810 	msr	PRIMASK, r2
 800bbda:	4770      	bx	lr

0800bbdc <list_remove_head>:
 800bbdc:	b538      	push	{r3, r4, r5, lr}
 800bbde:	460c      	mov	r4, r1
 800bbe0:	f3ef 8510 	mrs	r5, PRIMASK
 800bbe4:	b672      	cpsid	i
 800bbe6:	6803      	ldr	r3, [r0, #0]
 800bbe8:	600b      	str	r3, [r1, #0]
 800bbea:	6800      	ldr	r0, [r0, #0]
 800bbec:	f7ff ffeb 	bl	800bbc6 <list_remove_node>
 800bbf0:	6822      	ldr	r2, [r4, #0]
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	6013      	str	r3, [r2, #0]
 800bbf6:	6822      	ldr	r2, [r4, #0]
 800bbf8:	6053      	str	r3, [r2, #4]
 800bbfa:	f385 8810 	msr	PRIMASK, r5
 800bbfe:	bd38      	pop	{r3, r4, r5, pc}

0800bc00 <list_remove_tail>:
 800bc00:	b538      	push	{r3, r4, r5, lr}
 800bc02:	460c      	mov	r4, r1
 800bc04:	f3ef 8510 	mrs	r5, PRIMASK
 800bc08:	b672      	cpsid	i
 800bc0a:	6843      	ldr	r3, [r0, #4]
 800bc0c:	600b      	str	r3, [r1, #0]
 800bc0e:	6840      	ldr	r0, [r0, #4]
 800bc10:	f7ff ffd9 	bl	800bbc6 <list_remove_node>
 800bc14:	6822      	ldr	r2, [r4, #0]
 800bc16:	2300      	movs	r3, #0
 800bc18:	6013      	str	r3, [r2, #0]
 800bc1a:	6822      	ldr	r2, [r4, #0]
 800bc1c:	6053      	str	r3, [r2, #4]
 800bc1e:	f385 8810 	msr	PRIMASK, r5
 800bc22:	bd38      	pop	{r3, r4, r5, pc}

0800bc24 <list_get_size>:
 800bc24:	f3ef 8110 	mrs	r1, PRIMASK
 800bc28:	b672      	cpsid	i
 800bc2a:	6802      	ldr	r2, [r0, #0]
 800bc2c:	2300      	movs	r3, #0
 800bc2e:	4282      	cmp	r2, r0
 800bc30:	d103      	bne.n	800bc3a <list_get_size+0x16>
 800bc32:	f381 8810 	msr	PRIMASK, r1
 800bc36:	4618      	mov	r0, r3
 800bc38:	4770      	bx	lr
 800bc3a:	3301      	adds	r3, #1
 800bc3c:	6812      	ldr	r2, [r2, #0]
 800bc3e:	e7f6      	b.n	800bc2e <list_get_size+0xa>

0800bc40 <ReseMetaDataManager>:
 800bc40:	4b11      	ldr	r3, [pc, #68]	; (800bc88 <ReseMetaDataManager+0x48>)
 800bc42:	4812      	ldr	r0, [pc, #72]	; (800bc8c <ReseMetaDataManager+0x4c>)
 800bc44:	2201      	movs	r2, #1
 800bc46:	601a      	str	r2, [r3, #0]
 800bc48:	4b11      	ldr	r3, [pc, #68]	; (800bc90 <ReseMetaDataManager+0x50>)
 800bc4a:	4a12      	ldr	r2, [pc, #72]	; (800bc94 <ReseMetaDataManager+0x54>)
 800bc4c:	f843 0c08 	str.w	r0, [r3, #-8]
 800bc50:	f1a3 0108 	sub.w	r1, r3, #8
 800bc54:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800bc58:	f842 3b04 	str.w	r3, [r2], #4
 800bc5c:	23ff      	movs	r3, #255	; 0xff
 800bc5e:	e9c1 0301 	strd	r0, r3, [r1, #4]
 800bc62:	2300      	movs	r3, #0
 800bc64:	60cb      	str	r3, [r1, #12]
 800bc66:	4618      	mov	r0, r3
 800bc68:	18d1      	adds	r1, r2, r3
 800bc6a:	3320      	adds	r3, #32
 800bc6c:	f5b3 7f90 	cmp.w	r3, #288	; 0x120
 800bc70:	63c8      	str	r0, [r1, #60]	; 0x3c
 800bc72:	d1f9      	bne.n	800bc68 <ReseMetaDataManager+0x28>
 800bc74:	2300      	movs	r3, #0
 800bc76:	4808      	ldr	r0, [pc, #32]	; (800bc98 <ReseMetaDataManager+0x58>)
 800bc78:	4619      	mov	r1, r3
 800bc7a:	18c2      	adds	r2, r0, r3
 800bc7c:	331c      	adds	r3, #28
 800bc7e:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 800bc82:	6351      	str	r1, [r2, #52]	; 0x34
 800bc84:	d1f9      	bne.n	800bc7a <ReseMetaDataManager+0x3a>
 800bc86:	4770      	bx	lr
 800bc88:	20002118 	.word	0x20002118
 800bc8c:	12345678 	.word	0x12345678
 800bc90:	20002168 	.word	0x20002168
 800bc94:	20000190 	.word	0x20000190
 800bc98:	200002d4 	.word	0x200002d4

0800bc9c <EraseMetaDataManager>:
 800bc9c:	b510      	push	{r4, lr}
 800bc9e:	f002 f8f1 	bl	800de84 <UserFunctionForErasingFlash>
 800bca2:	4604      	mov	r4, r0
 800bca4:	b110      	cbz	r0, 800bcac <EraseMetaDataManager+0x10>
 800bca6:	4802      	ldr	r0, [pc, #8]	; (800bcb0 <EraseMetaDataManager+0x14>)
 800bca8:	f00a faa8 	bl	80161fc <puts>
 800bcac:	4620      	mov	r0, r4
 800bcae:	bd10      	pop	{r4, pc}
 800bcb0:	0801a044 	.word	0x0801a044

0800bcb4 <SaveMetaDataManager>:
 800bcb4:	b508      	push	{r3, lr}
 800bcb6:	4b07      	ldr	r3, [pc, #28]	; (800bcd4 <SaveMetaDataManager+0x20>)
 800bcb8:	4807      	ldr	r0, [pc, #28]	; (800bcd8 <SaveMetaDataManager+0x24>)
 800bcba:	6819      	ldr	r1, [r3, #0]
 800bcbc:	3108      	adds	r1, #8
 800bcbe:	f002 f8fb 	bl	800deb8 <UserFunctionForSavingFlash>
 800bcc2:	b110      	cbz	r0, 800bcca <SaveMetaDataManager+0x16>
 800bcc4:	4805      	ldr	r0, [pc, #20]	; (800bcdc <SaveMetaDataManager+0x28>)
 800bcc6:	f00a fa99 	bl	80161fc <puts>
 800bcca:	4b05      	ldr	r3, [pc, #20]	; (800bce0 <SaveMetaDataManager+0x2c>)
 800bccc:	2200      	movs	r2, #0
 800bcce:	601a      	str	r2, [r3, #0]
 800bcd0:	bd08      	pop	{r3, pc}
 800bcd2:	bf00      	nop
 800bcd4:	20000190 	.word	0x20000190
 800bcd8:	20002160 	.word	0x20002160
 800bcdc:	0801a067 	.word	0x0801a067
 800bce0:	20002118 	.word	0x20002118

0800bce4 <InitMetaDataManager>:
 800bce4:	b40f      	push	{r0, r1, r2, r3}
 800bce6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcea:	497e      	ldr	r1, [pc, #504]	; (800bee4 <InitMetaDataManager+0x200>)
 800bcec:	4a7e      	ldr	r2, [pc, #504]	; (800bee8 <InitMetaDataManager+0x204>)
 800bcee:	6809      	ldr	r1, [r1, #0]
 800bcf0:	4b7e      	ldr	r3, [pc, #504]	; (800beec <InitMetaDataManager+0x208>)
 800bcf2:	6013      	str	r3, [r2, #0]
 800bcf4:	b087      	sub	sp, #28
 800bcf6:	4691      	mov	r9, r2
 800bcf8:	9105      	str	r1, [sp, #20]
 800bcfa:	9805      	ldr	r0, [sp, #20]
 800bcfc:	497c      	ldr	r1, [pc, #496]	; (800bef0 <InitMetaDataManager+0x20c>)
 800bcfe:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800bd00:	4288      	cmp	r0, r1
 800bd02:	f040 8083 	bne.w	800be0c <InitMetaDataManager+0x128>
 800bd06:	9a05      	ldr	r2, [sp, #20]
 800bd08:	f843 2c08 	str.w	r2, [r3, #-8]
 800bd0c:	4a79      	ldr	r2, [pc, #484]	; (800bef4 <InitMetaDataManager+0x210>)
 800bd0e:	6812      	ldr	r2, [r2, #0]
 800bd10:	9205      	str	r2, [sp, #20]
 800bd12:	9a05      	ldr	r2, [sp, #20]
 800bd14:	f843 2c04 	str.w	r2, [r3, #-4]
 800bd18:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 800bd1c:	d003      	beq.n	800bd26 <InitMetaDataManager+0x42>
 800bd1e:	4876      	ldr	r0, [pc, #472]	; (800bef8 <InitMetaDataManager+0x214>)
 800bd20:	f00a fa6c 	bl	80161fc <puts>
 800bd24:	e014      	b.n	800bd50 <InitMetaDataManager+0x6c>
 800bd26:	4a75      	ldr	r2, [pc, #468]	; (800befc <InitMetaDataManager+0x218>)
 800bd28:	6811      	ldr	r1, [r2, #0]
 800bd2a:	9105      	str	r1, [sp, #20]
 800bd2c:	2100      	movs	r1, #0
 800bd2e:	460d      	mov	r5, r1
 800bd30:	9805      	ldr	r0, [sp, #20]
 800bd32:	28ff      	cmp	r0, #255	; 0xff
 800bd34:	d147      	bne.n	800bdc6 <InitMetaDataManager+0xe2>
 800bd36:	b109      	cbz	r1, 800bd3c <InitMetaDataManager+0x58>
 800bd38:	f8c9 3000 	str.w	r3, [r9]
 800bd3c:	f8d9 3000 	ldr.w	r3, [r9]
 800bd40:	486f      	ldr	r0, [pc, #444]	; (800bf00 <InitMetaDataManager+0x21c>)
 800bd42:	22ff      	movs	r2, #255	; 0xff
 800bd44:	601a      	str	r2, [r3, #0]
 800bd46:	2200      	movs	r2, #0
 800bd48:	611a      	str	r2, [r3, #16]
 800bd4a:	f00a fa57 	bl	80161fc <puts>
 800bd4e:	b90d      	cbnz	r5, 800bd54 <InitMetaDataManager+0x70>
 800bd50:	f7ff ff76 	bl	800bc40 <ReseMetaDataManager>
 800bd54:	ab11      	add	r3, sp, #68	; 0x44
 800bd56:	f04f 0b00 	mov.w	fp, #0
 800bd5a:	4d63      	ldr	r5, [pc, #396]	; (800bee8 <InitMetaDataManager+0x204>)
 800bd5c:	9304      	str	r3, [sp, #16]
 800bd5e:	46da      	mov	sl, fp
 800bd60:	2c00      	cmp	r4, #0
 800bd62:	d155      	bne.n	800be10 <InitMetaDataManager+0x12c>
 800bd64:	4c67      	ldr	r4, [pc, #412]	; (800bf04 <InitMetaDataManager+0x220>)
 800bd66:	6822      	ldr	r2, [r4, #0]
 800bd68:	b122      	cbz	r2, 800bd74 <InitMetaDataManager+0x90>
 800bd6a:	f7ff ff97 	bl	800bc9c <EraseMetaDataManager>
 800bd6e:	b108      	cbz	r0, 800bd74 <InitMetaDataManager+0x90>
 800bd70:	f7ff ffa0 	bl	800bcb4 <SaveMetaDataManager>
 800bd74:	4b64      	ldr	r3, [pc, #400]	; (800bf08 <InitMetaDataManager+0x224>)
 800bd76:	4865      	ldr	r0, [pc, #404]	; (800bf0c <InitMetaDataManager+0x228>)
 800bd78:	6859      	ldr	r1, [r3, #4]
 800bd7a:	b2cb      	uxtb	r3, r1
 800bd7c:	f3c1 2207 	ubfx	r2, r1, #8, #8
 800bd80:	0c09      	lsrs	r1, r1, #16
 800bd82:	f00a f9c7 	bl	8016114 <iprintf>
 800bd86:	6863      	ldr	r3, [r4, #4]
 800bd88:	ea5b 0303 	orrs.w	r3, fp, r3
 800bd8c:	f000 8094 	beq.w	800beb8 <InitMetaDataManager+0x1d4>
 800bd90:	485f      	ldr	r0, [pc, #380]	; (800bf10 <InitMetaDataManager+0x22c>)
 800bd92:	4d55      	ldr	r5, [pc, #340]	; (800bee8 <InitMetaDataManager+0x204>)
 800bd94:	4f5f      	ldr	r7, [pc, #380]	; (800bf14 <InitMetaDataManager+0x230>)
 800bd96:	f00a fa31 	bl	80161fc <puts>
 800bd9a:	2400      	movs	r4, #0
 800bd9c:	f505 76a2 	add.w	r6, r5, #324	; 0x144
 800bda0:	1933      	adds	r3, r6, r4
 800bda2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bda4:	b153      	cbz	r3, 800bdbc <InitMetaDataManager+0xd8>
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	211c      	movs	r1, #28
 800bdaa:	4359      	muls	r1, r3
 800bdac:	186b      	adds	r3, r5, r1
 800bdae:	3104      	adds	r1, #4
 800bdb0:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
 800bdb4:	4431      	add	r1, r6
 800bdb6:	4638      	mov	r0, r7
 800bdb8:	f00a f9ac 	bl	8016114 <iprintf>
 800bdbc:	341c      	adds	r4, #28
 800bdbe:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
 800bdc2:	d1ed      	bne.n	800bda0 <InitMetaDataManager+0xbc>
 800bdc4:	e078      	b.n	800beb8 <InitMetaDataManager+0x1d4>
 800bdc6:	9905      	ldr	r1, [sp, #20]
 800bdc8:	6850      	ldr	r0, [r2, #4]
 800bdca:	9005      	str	r0, [sp, #20]
 800bdcc:	9805      	ldr	r0, [sp, #20]
 800bdce:	b2c9      	uxtb	r1, r1
 800bdd0:	e9c3 1000 	strd	r1, r0, [r3]
 800bdd4:	f103 0608 	add.w	r6, r3, #8
 800bdd8:	2100      	movs	r1, #0
 800bdda:	f1a0 0508 	sub.w	r5, r0, #8
 800bdde:	f102 0708 	add.w	r7, r2, #8
 800bde2:	42a9      	cmp	r1, r5
 800bde4:	d306      	bcc.n	800bdf4 <InitMetaDataManager+0x110>
 800bde6:	4402      	add	r2, r0
 800bde8:	2501      	movs	r5, #1
 800bdea:	6811      	ldr	r1, [r2, #0]
 800bdec:	9105      	str	r1, [sp, #20]
 800bdee:	4403      	add	r3, r0
 800bdf0:	4629      	mov	r1, r5
 800bdf2:	e79d      	b.n	800bd30 <InitMetaDataManager+0x4c>
 800bdf4:	f857 c001 	ldr.w	ip, [r7, r1]
 800bdf8:	f8cd c014 	str.w	ip, [sp, #20]
 800bdfc:	ea4f 0c91 	mov.w	ip, r1, lsr #2
 800be00:	f8dd e014 	ldr.w	lr, [sp, #20]
 800be04:	f846 e02c 	str.w	lr, [r6, ip, lsl #2]
 800be08:	3104      	adds	r1, #4
 800be0a:	e7ea      	b.n	800bde2 <InitMetaDataManager+0xfe>
 800be0c:	4842      	ldr	r0, [pc, #264]	; (800bf18 <InitMetaDataManager+0x234>)
 800be0e:	e787      	b.n	800bd20 <InitMetaDataManager+0x3c>
 800be10:	9b04      	ldr	r3, [sp, #16]
 800be12:	9300      	str	r3, [sp, #0]
 800be14:	3304      	adds	r3, #4
 800be16:	9304      	str	r3, [sp, #16]
 800be18:	9b00      	ldr	r3, [sp, #0]
 800be1a:	681f      	ldr	r7, [r3, #0]
 800be1c:	f017 03ff 	ands.w	r3, r7, #255	; 0xff
 800be20:	d02e      	beq.n	800be80 <InitMetaDataManager+0x19c>
 800be22:	2b01      	cmp	r3, #1
 800be24:	d145      	bne.n	800beb2 <InitMetaDataManager+0x1ce>
 800be26:	4837      	ldr	r0, [pc, #220]	; (800bf04 <InitMetaDataManager+0x220>)
 800be28:	6842      	ldr	r2, [r0, #4]
 800be2a:	f06f 0107 	mvn.w	r1, #7
 800be2e:	4351      	muls	r1, r2
 800be30:	2600      	movs	r6, #0
 800be32:	f102 0c01 	add.w	ip, r2, #1
 800be36:	eb01 03cc 	add.w	r3, r1, ip, lsl #3
 800be3a:	4423      	add	r3, r4
 800be3c:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 800be40:	2b00      	cmp	r3, #0
 800be42:	d133      	bne.n	800beac <InitMetaDataManager+0x1c8>
 800be44:	b106      	cbz	r6, 800be48 <InitMetaDataManager+0x164>
 800be46:	6042      	str	r2, [r0, #4]
 800be48:	4626      	mov	r6, r4
 800be4a:	2400      	movs	r4, #0
 800be4c:	4b2d      	ldr	r3, [pc, #180]	; (800bf04 <InitMetaDataManager+0x220>)
 800be4e:	4827      	ldr	r0, [pc, #156]	; (800beec <InitMetaDataManager+0x208>)
 800be50:	685a      	ldr	r2, [r3, #4]
 800be52:	689b      	ldr	r3, [r3, #8]
 800be54:	9202      	str	r2, [sp, #8]
 800be56:	9301      	str	r3, [sp, #4]
 800be58:	f04f 0e1c 	mov.w	lr, #28
 800be5c:	f04f 082d 	mov.w	r8, #45	; 0x2d
 800be60:	6803      	ldr	r3, [r0, #0]
 800be62:	2bff      	cmp	r3, #255	; 0xff
 800be64:	f000 8087 	beq.w	800bf76 <InitMetaDataManager+0x292>
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d159      	bne.n	800bf20 <InitMetaDataManager+0x23c>
 800be6c:	f100 0c08 	add.w	ip, r0, #8
 800be70:	461a      	mov	r2, r3
 800be72:	9901      	ldr	r1, [sp, #4]
 800be74:	4299      	cmp	r1, r3
 800be76:	d900      	bls.n	800be7a <InitMetaDataManager+0x196>
 800be78:	b31a      	cbz	r2, 800bec2 <InitMetaDataManager+0x1de>
 800be7a:	6843      	ldr	r3, [r0, #4]
 800be7c:	4418      	add	r0, r3
 800be7e:	e7ef      	b.n	800be60 <InitMetaDataManager+0x17c>
 800be80:	4e20      	ldr	r6, [pc, #128]	; (800bf04 <InitMetaDataManager+0x220>)
 800be82:	68b2      	ldr	r2, [r6, #8]
 800be84:	f06f 002c 	mvn.w	r0, #44	; 0x2c
 800be88:	4350      	muls	r0, r2
 800be8a:	f04f 0e2d 	mov.w	lr, #45	; 0x2d
 800be8e:	f102 0c01 	add.w	ip, r2, #1
 800be92:	fb0e 010c 	mla	r1, lr, ip, r0
 800be96:	4421      	add	r1, r4
 800be98:	f811 1c2d 	ldrb.w	r1, [r1, #-45]
 800be9c:	b919      	cbnz	r1, 800bea6 <InitMetaDataManager+0x1c2>
 800be9e:	b103      	cbz	r3, 800bea2 <InitMetaDataManager+0x1be>
 800bea0:	60b2      	str	r2, [r6, #8]
 800bea2:	2600      	movs	r6, #0
 800bea4:	e7d2      	b.n	800be4c <InitMetaDataManager+0x168>
 800bea6:	4662      	mov	r2, ip
 800bea8:	2301      	movs	r3, #1
 800beaa:	e7f0      	b.n	800be8e <InitMetaDataManager+0x1aa>
 800beac:	4662      	mov	r2, ip
 800beae:	2601      	movs	r6, #1
 800beb0:	e7bf      	b.n	800be32 <InitMetaDataManager+0x14e>
 800beb2:	481a      	ldr	r0, [pc, #104]	; (800bf1c <InitMetaDataManager+0x238>)
 800beb4:	f00a f9a2 	bl	80161fc <puts>
 800beb8:	b007      	add	sp, #28
 800beba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bebe:	b004      	add	sp, #16
 800bec0:	4770      	bx	lr
 800bec2:	fb08 f203 	mul.w	r2, r8, r3
 800bec6:	3301      	adds	r3, #1
 800bec8:	5ca1      	ldrb	r1, [r4, r2]
 800beca:	6882      	ldr	r2, [r0, #8]
 800becc:	4291      	cmp	r1, r2
 800bece:	bf01      	itttt	eq
 800bed0:	eb05 1141 	addeq.w	r1, r5, r1, lsl #5
 800bed4:	f10a 0a01 	addeq.w	sl, sl, #1
 800bed8:	f8c1 c020 	streq.w	ip, [r1, #32]
 800bedc:	2201      	moveq	r2, #1
 800bede:	bf18      	it	ne
 800bee0:	2200      	movne	r2, #0
 800bee2:	e7c6      	b.n	800be72 <InitMetaDataManager+0x18e>
 800bee4:	0807f000 	.word	0x0807f000
 800bee8:	20000190 	.word	0x20000190
 800beec:	20002168 	.word	0x20002168
 800bef0:	12345678 	.word	0x12345678
 800bef4:	0807f004 	.word	0x0807f004
 800bef8:	0801a089 	.word	0x0801a089
 800befc:	0807f008 	.word	0x0807f008
 800bf00:	0801a0d8 	.word	0x0801a0d8
 800bf04:	20002118 	.word	0x20002118
 800bf08:	20002160 	.word	0x20002160
 800bf0c:	0801a23c 	.word	0x0801a23c
 800bf10:	0801a264 	.word	0x0801a264
 800bf14:	0801a27f 	.word	0x0801a27f
 800bf18:	0801a0fb 	.word	0x0801a0fb
 800bf1c:	0801a123 	.word	0x0801a123
 800bf20:	2b01      	cmp	r3, #1
 800bf22:	d1aa      	bne.n	800be7a <InitMetaDataManager+0x196>
 800bf24:	f100 0308 	add.w	r3, r0, #8
 800bf28:	9303      	str	r3, [sp, #12]
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	469c      	mov	ip, r3
 800bf2e:	9a02      	ldr	r2, [sp, #8]
 800bf30:	4562      	cmp	r2, ip
 800bf32:	d9a2      	bls.n	800be7a <InitMetaDataManager+0x196>
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d1a0      	bne.n	800be7a <InitMetaDataManager+0x196>
 800bf38:	f816 103c 	ldrb.w	r1, [r6, ip, lsl #3]
 800bf3c:	6883      	ldr	r3, [r0, #8]
 800bf3e:	4299      	cmp	r1, r3
 800bf40:	d151      	bne.n	800bfe6 <InitMetaDataManager+0x302>
 800bf42:	fb0e f101 	mul.w	r1, lr, r1
 800bf46:	186b      	adds	r3, r5, r1
 800bf48:	9a03      	ldr	r2, [sp, #12]
 800bf4a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
 800bf4e:	68c2      	ldr	r2, [r0, #12]
 800bf50:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 800bf54:	eb06 03cc 	add.w	r3, r6, ip, lsl #3
 800bf58:	f10b 0b01 	add.w	fp, fp, #1
 800bf5c:	685b      	ldr	r3, [r3, #4]
 800bf5e:	429a      	cmp	r2, r3
 800bf60:	d045      	beq.n	800bfee <InitMetaDataManager+0x30a>
 800bf62:	4870      	ldr	r0, [pc, #448]	; (800c124 <InitMetaDataManager+0x440>)
 800bf64:	4401      	add	r1, r0
 800bf66:	4870      	ldr	r0, [pc, #448]	; (800c128 <InitMetaDataManager+0x444>)
 800bf68:	f00a f8d4 	bl	8016114 <iprintf>
 800bf6c:	f7ff fe68 	bl	800bc40 <ReseMetaDataManager>
 800bf70:	f04f 0b00 	mov.w	fp, #0
 800bf74:	46da      	mov	sl, fp
 800bf76:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
 800bf7a:	d166      	bne.n	800c04a <InitMetaDataManager+0x366>
 800bf7c:	4a6b      	ldr	r2, [pc, #428]	; (800c12c <InitMetaDataManager+0x448>)
 800bf7e:	6893      	ldr	r3, [r2, #8]
 800bf80:	4553      	cmp	r3, sl
 800bf82:	4690      	mov	r8, r2
 800bf84:	d929      	bls.n	800bfda <InitMetaDataManager+0x2f6>
 800bf86:	2101      	movs	r1, #1
 800bf88:	6011      	str	r1, [r2, #0]
 800bf8a:	4e69      	ldr	r6, [pc, #420]	; (800c130 <InitMetaDataManager+0x44c>)
 800bf8c:	f8d9 2000 	ldr.w	r2, [r9]
 800bf90:	1b92      	subs	r2, r2, r6
 800bf92:	3208      	adds	r2, #8
 800bf94:	eba3 030a 	sub.w	r3, r3, sl
 800bf98:	21a4      	movs	r1, #164	; 0xa4
 800bf9a:	fb01 2303 	mla	r3, r1, r3, r2
 800bf9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bfa2:	d90f      	bls.n	800bfc4 <InitMetaDataManager+0x2e0>
 800bfa4:	4863      	ldr	r0, [pc, #396]	; (800c134 <InitMetaDataManager+0x450>)
 800bfa6:	f00a f929 	bl	80161fc <puts>
 800bfaa:	3608      	adds	r6, #8
 800bfac:	4962      	ldr	r1, [pc, #392]	; (800c138 <InitMetaDataManager+0x454>)
 800bfae:	f8c9 6000 	str.w	r6, [r9]
 800bfb2:	463a      	mov	r2, r7
 800bfb4:	19cb      	adds	r3, r1, r7
 800bfb6:	3720      	adds	r7, #32
 800bfb8:	f5b7 7f90 	cmp.w	r7, #288	; 0x120
 800bfbc:	63da      	str	r2, [r3, #60]	; 0x3c
 800bfbe:	d1f9      	bne.n	800bfb4 <InitMetaDataManager+0x2d0>
 800bfc0:	f04f 0a00 	mov.w	sl, #0
 800bfc4:	3409      	adds	r4, #9
 800bfc6:	2700      	movs	r7, #0
 800bfc8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bfcc:	682e      	ldr	r6, [r5, #0]
 800bfce:	42bb      	cmp	r3, r7
 800bfd0:	d80f      	bhi.n	800bff2 <InitMetaDataManager+0x30e>
 800bfd2:	21ff      	movs	r1, #255	; 0xff
 800bfd4:	2300      	movs	r3, #0
 800bfd6:	e9c6 1300 	strd	r1, r3, [r6]
 800bfda:	9b00      	ldr	r3, [sp, #0]
 800bfdc:	3308      	adds	r3, #8
 800bfde:	9304      	str	r3, [sp, #16]
 800bfe0:	9b00      	ldr	r3, [sp, #0]
 800bfe2:	685c      	ldr	r4, [r3, #4]
 800bfe4:	e6bc      	b.n	800bd60 <InitMetaDataManager+0x7c>
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	f10c 0c01 	add.w	ip, ip, #1
 800bfec:	e79f      	b.n	800bf2e <InitMetaDataManager+0x24a>
 800bfee:	2301      	movs	r3, #1
 800bff0:	e7fa      	b.n	800bfe8 <InitMetaDataManager+0x304>
 800bff2:	f814 2c09 	ldrb.w	r2, [r4, #-9]
 800bff6:	eb05 1342 	add.w	r3, r5, r2, lsl #5
 800bffa:	6a1b      	ldr	r3, [r3, #32]
 800bffc:	bb13      	cbnz	r3, 800c044 <InitMetaDataManager+0x360>
 800bffe:	6033      	str	r3, [r6, #0]
 800c000:	60f3      	str	r3, [r6, #12]
 800c002:	f106 0308 	add.w	r3, r6, #8
 800c006:	21a4      	movs	r1, #164	; 0xa4
 800c008:	9301      	str	r3, [sp, #4]
 800c00a:	3308      	adds	r3, #8
 800c00c:	e9c6 1201 	strd	r1, r2, [r6, #4]
 800c010:	4618      	mov	r0, r3
 800c012:	4621      	mov	r1, r4
 800c014:	9302      	str	r3, [sp, #8]
 800c016:	f00a f909 	bl	801622c <siprintf>
 800c01a:	f814 1c09 	ldrb.w	r1, [r4, #-9]
 800c01e:	4846      	ldr	r0, [pc, #280]	; (800c138 <InitMetaDataManager+0x454>)
 800c020:	9b02      	ldr	r3, [sp, #8]
 800c022:	0149      	lsls	r1, r1, #5
 800c024:	1d0a      	adds	r2, r1, #4
 800c026:	3110      	adds	r1, #16
 800c028:	4402      	add	r2, r0
 800c02a:	4401      	add	r1, r0
 800c02c:	4843      	ldr	r0, [pc, #268]	; (800c13c <InitMetaDataManager+0x458>)
 800c02e:	f00a f871 	bl	8016114 <iprintf>
 800c032:	68b3      	ldr	r3, [r6, #8]
 800c034:	9a01      	ldr	r2, [sp, #4]
 800c036:	eb05 1343 	add.w	r3, r5, r3, lsl #5
 800c03a:	621a      	str	r2, [r3, #32]
 800c03c:	682b      	ldr	r3, [r5, #0]
 800c03e:	6872      	ldr	r2, [r6, #4]
 800c040:	4413      	add	r3, r2
 800c042:	602b      	str	r3, [r5, #0]
 800c044:	3701      	adds	r7, #1
 800c046:	342d      	adds	r4, #45	; 0x2d
 800c048:	e7be      	b.n	800bfc8 <InitMetaDataManager+0x2e4>
 800c04a:	2f01      	cmp	r7, #1
 800c04c:	d1c5      	bne.n	800bfda <InitMetaDataManager+0x2f6>
 800c04e:	4b37      	ldr	r3, [pc, #220]	; (800c12c <InitMetaDataManager+0x448>)
 800c050:	6858      	ldr	r0, [r3, #4]
 800c052:	4558      	cmp	r0, fp
 800c054:	d9c1      	bls.n	800bfda <InitMetaDataManager+0x2f6>
 800c056:	2100      	movs	r1, #0
 800c058:	601f      	str	r7, [r3, #0]
 800c05a:	460a      	mov	r2, r1
 800c05c:	241c      	movs	r4, #28
 800c05e:	4288      	cmp	r0, r1
 800c060:	d126      	bne.n	800c0b0 <InitMetaDataManager+0x3cc>
 800c062:	f8d9 3000 	ldr.w	r3, [r9]
 800c066:	4c32      	ldr	r4, [pc, #200]	; (800c130 <InitMetaDataManager+0x44c>)
 800c068:	1b1b      	subs	r3, r3, r4
 800c06a:	3308      	adds	r3, #8
 800c06c:	4413      	add	r3, r2
 800c06e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c072:	d910      	bls.n	800c096 <InitMetaDataManager+0x3b2>
 800c074:	482f      	ldr	r0, [pc, #188]	; (800c134 <InitMetaDataManager+0x450>)
 800c076:	f00a f8c1 	bl	80161fc <puts>
 800c07a:	3408      	adds	r4, #8
 800c07c:	2300      	movs	r3, #0
 800c07e:	4830      	ldr	r0, [pc, #192]	; (800c140 <InitMetaDataManager+0x45c>)
 800c080:	f8c9 4000 	str.w	r4, [r9]
 800c084:	4619      	mov	r1, r3
 800c086:	18c2      	adds	r2, r0, r3
 800c088:	331c      	adds	r3, #28
 800c08a:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 800c08e:	6351      	str	r1, [r2, #52]	; 0x34
 800c090:	d1f9      	bne.n	800c086 <InitMetaDataManager+0x3a2>
 800c092:	f04f 0b00 	mov.w	fp, #0
 800c096:	f8df 8094 	ldr.w	r8, [pc, #148]	; 800c12c <InitMetaDataManager+0x448>
 800c09a:	2700      	movs	r7, #0
 800c09c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c0a0:	682c      	ldr	r4, [r5, #0]
 800c0a2:	429f      	cmp	r7, r3
 800c0a4:	d316      	bcc.n	800c0d4 <InitMetaDataManager+0x3f0>
 800c0a6:	22ff      	movs	r2, #255	; 0xff
 800c0a8:	2300      	movs	r3, #0
 800c0aa:	e9c4 2300 	strd	r2, r3, [r4]
 800c0ae:	e794      	b.n	800bfda <InitMetaDataManager+0x2f6>
 800c0b0:	f816 3031 	ldrb.w	r3, [r6, r1, lsl #3]
 800c0b4:	fb04 9303 	mla	r3, r4, r3, r9
 800c0b8:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800c0bc:	b943      	cbnz	r3, 800c0d0 <InitMetaDataManager+0x3ec>
 800c0be:	f102 0310 	add.w	r3, r2, #16
 800c0c2:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
 800c0c6:	6852      	ldr	r2, [r2, #4]
 800c0c8:	3207      	adds	r2, #7
 800c0ca:	f022 0207 	bic.w	r2, r2, #7
 800c0ce:	441a      	add	r2, r3
 800c0d0:	3101      	adds	r1, #1
 800c0d2:	e7c4      	b.n	800c05e <InitMetaDataManager+0x37a>
 800c0d4:	f816 2037 	ldrb.w	r2, [r6, r7, lsl #3]
 800c0d8:	211c      	movs	r1, #28
 800c0da:	4351      	muls	r1, r2
 800c0dc:	eb05 0c01 	add.w	ip, r5, r1
 800c0e0:	f8dc 315c 	ldr.w	r3, [ip, #348]	; 0x15c
 800c0e4:	b9db      	cbnz	r3, 800c11e <InitMetaDataManager+0x43a>
 800c0e6:	2301      	movs	r3, #1
 800c0e8:	6023      	str	r3, [r4, #0]
 800c0ea:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 800c0ee:	3104      	adds	r1, #4
 800c0f0:	685b      	ldr	r3, [r3, #4]
 800c0f2:	60e3      	str	r3, [r4, #12]
 800c0f4:	1dd8      	adds	r0, r3, #7
 800c0f6:	f020 0007 	bic.w	r0, r0, #7
 800c0fa:	3010      	adds	r0, #16
 800c0fc:	e9c4 0201 	strd	r0, r2, [r4, #4]
 800c100:	f104 0008 	add.w	r0, r4, #8
 800c104:	f8cc 015c 	str.w	r0, [ip, #348]	; 0x15c
 800c108:	480d      	ldr	r0, [pc, #52]	; (800c140 <InitMetaDataManager+0x45c>)
 800c10a:	f8cc 3158 	str.w	r3, [ip, #344]	; 0x158
 800c10e:	4401      	add	r1, r0
 800c110:	480c      	ldr	r0, [pc, #48]	; (800c144 <InitMetaDataManager+0x460>)
 800c112:	f009 ffff 	bl	8016114 <iprintf>
 800c116:	682b      	ldr	r3, [r5, #0]
 800c118:	6862      	ldr	r2, [r4, #4]
 800c11a:	4413      	add	r3, r2
 800c11c:	602b      	str	r3, [r5, #0]
 800c11e:	3701      	adds	r7, #1
 800c120:	e7bc      	b.n	800c09c <InitMetaDataManager+0x3b8>
 800c122:	bf00      	nop
 800c124:	200002d8 	.word	0x200002d8
 800c128:	0801a140 	.word	0x0801a140
 800c12c:	20002118 	.word	0x20002118
 800c130:	20002160 	.word	0x20002160
 800c134:	0801a1c3 	.word	0x0801a1c3
 800c138:	20000194 	.word	0x20000194
 800c13c:	0801a205 	.word	0x0801a205
 800c140:	200002d4 	.word	0x200002d4
 800c144:	0801a21e 	.word	0x0801a21e

0800c148 <MDM_SaveGMD>:
 800c148:	b570      	push	{r4, r5, r6, lr}
 800c14a:	4d0d      	ldr	r5, [pc, #52]	; (800c180 <MDM_SaveGMD+0x38>)
 800c14c:	261c      	movs	r6, #28
 800c14e:	4346      	muls	r6, r0
 800c150:	19ab      	adds	r3, r5, r6
 800c152:	f8d3 415c 	ldr.w	r4, [r3, #348]	; 0x15c
 800c156:	b17c      	cbz	r4, 800c178 <MDM_SaveGMD+0x30>
 800c158:	6862      	ldr	r2, [r4, #4]
 800c15a:	f104 0008 	add.w	r0, r4, #8
 800c15e:	f009 ff1d 	bl	8015f9c <memcpy>
 800c162:	4b08      	ldr	r3, [pc, #32]	; (800c184 <MDM_SaveGMD+0x3c>)
 800c164:	4808      	ldr	r0, [pc, #32]	; (800c188 <MDM_SaveGMD+0x40>)
 800c166:	2401      	movs	r4, #1
 800c168:	19a9      	adds	r1, r5, r6
 800c16a:	601c      	str	r4, [r3, #0]
 800c16c:	f501 71a4 	add.w	r1, r1, #328	; 0x148
 800c170:	f009 ffd0 	bl	8016114 <iprintf>
 800c174:	4620      	mov	r0, r4
 800c176:	bd70      	pop	{r4, r5, r6, pc}
 800c178:	4601      	mov	r1, r0
 800c17a:	4804      	ldr	r0, [pc, #16]	; (800c18c <MDM_SaveGMD+0x44>)
 800c17c:	e7f8      	b.n	800c170 <MDM_SaveGMD+0x28>
 800c17e:	bf00      	nop
 800c180:	20000190 	.word	0x20000190
 800c184:	20002118 	.word	0x20002118
 800c188:	0801a2b6 	.word	0x0801a2b6
 800c18c:	0801a2df 	.word	0x0801a2df

0800c190 <MDM_ReCallGMD>:
 800c190:	4602      	mov	r2, r0
 800c192:	4608      	mov	r0, r1
 800c194:	490a      	ldr	r1, [pc, #40]	; (800c1c0 <MDM_ReCallGMD+0x30>)
 800c196:	231c      	movs	r3, #28
 800c198:	fb03 1302 	mla	r3, r3, r2, r1
 800c19c:	b510      	push	{r4, lr}
 800c19e:	f8d3 415c 	ldr.w	r4, [r3, #348]	; 0x15c
 800c1a2:	b13c      	cbz	r4, 800c1b4 <MDM_ReCallGMD+0x24>
 800c1a4:	6862      	ldr	r2, [r4, #4]
 800c1a6:	f104 0108 	add.w	r1, r4, #8
 800c1aa:	f009 fef7 	bl	8015f9c <memcpy>
 800c1ae:	2401      	movs	r4, #1
 800c1b0:	4620      	mov	r0, r4
 800c1b2:	bd10      	pop	{r4, pc}
 800c1b4:	4611      	mov	r1, r2
 800c1b6:	4803      	ldr	r0, [pc, #12]	; (800c1c4 <MDM_ReCallGMD+0x34>)
 800c1b8:	f009 ffac 	bl	8016114 <iprintf>
 800c1bc:	e7f8      	b.n	800c1b0 <MDM_ReCallGMD+0x20>
 800c1be:	bf00      	nop
 800c1c0:	20000190 	.word	0x20000190
 800c1c4:	0801a343 	.word	0x0801a343

0800c1c8 <arm_sqrt_f32>:
 800c1c8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c1cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1d0:	b510      	push	{r4, lr}
 800c1d2:	4604      	mov	r4, r0
 800c1d4:	db05      	blt.n	800c1e2 <arm_sqrt_f32+0x1a>
 800c1d6:	f00b fb39 	bl	801784c <sqrtf>
 800c1da:	2000      	movs	r0, #0
 800c1dc:	ed84 0a00 	vstr	s0, [r4]
 800c1e0:	bd10      	pop	{r4, pc}
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	6003      	str	r3, [r0, #0]
 800c1e6:	f04f 30ff 	mov.w	r0, #4294967295
 800c1ea:	e7f9      	b.n	800c1e0 <arm_sqrt_f32+0x18>

0800c1ec <MotionSP_SwAccRmsFilter.constprop.4>:
 800c1ec:	b538      	push	{r3, r4, r5, lr}
 800c1ee:	4b2c      	ldr	r3, [pc, #176]	; (800c2a0 <MotionSP_SwAccRmsFilter.constprop.4+0xb4>)
 800c1f0:	4c2c      	ldr	r4, [pc, #176]	; (800c2a4 <MotionSP_SwAccRmsFilter.constprop.4+0xb8>)
 800c1f2:	885a      	ldrh	r2, [r3, #2]
 800c1f4:	4d2c      	ldr	r5, [pc, #176]	; (800c2a8 <MotionSP_SwAccRmsFilter.constprop.4+0xbc>)
 800c1f6:	eb03 0182 	add.w	r1, r3, r2, lsl #2
 800c1fa:	ed91 7a01 	vldr	s14, [r1, #4]
 800c1fe:	f202 41cd 	addw	r1, r2, #1229	; 0x4cd
 800c202:	f602 1299 	addw	r2, r2, #2457	; 0x999
 800c206:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800c20a:	2801      	cmp	r0, #1
 800c20c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800c210:	ed2d 8b0a 	vpush	{d8-d12}
 800c214:	edd3 7a00 	vldr	s15, [r3]
 800c218:	eeb0 ca40 	vmov.f32	s24, s0
 800c21c:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 800c220:	ed91 0a00 	vldr	s0, [r1]
 800c224:	d10a      	bne.n	800c23c <MotionSP_SwAccRmsFilter.constprop.4+0x50>
 800c226:	ed84 7a00 	vstr	s14, [r4]
 800c22a:	ed84 0a01 	vstr	s0, [r4, #4]
 800c22e:	edc4 7a02 	vstr	s15, [r4, #8]
 800c232:	ed85 9a00 	vstr	s18, [r5]
 800c236:	ecbd 8b0a 	vpop	{d8-d12}
 800c23a:	bd38      	pop	{r3, r4, r5, pc}
 800c23c:	edd5 ba00 	vldr	s23, [r5]
 800c240:	edd4 5a00 	vldr	s11, [r4]
 800c244:	ed94 6a01 	vldr	s12, [r4, #4]
 800c248:	edd4 6a02 	vldr	s13, [r4, #8]
 800c24c:	ee89 aa2b 	vdiv.f32	s20, s18, s23
 800c250:	4620      	mov	r0, r4
 800c252:	ee27 7a07 	vmul.f32	s14, s14, s14
 800c256:	ee39 ba4a 	vsub.f32	s22, s18, s20
 800c25a:	ee65 5aa5 	vmul.f32	s11, s11, s11
 800c25e:	ee60 8a00 	vmul.f32	s17, s0, s0
 800c262:	ee27 0a0a 	vmul.f32	s0, s14, s20
 800c266:	ee27 8aa7 	vmul.f32	s16, s15, s15
 800c26a:	eea5 0a8b 	vfma.f32	s0, s11, s22
 800c26e:	ee66 aa06 	vmul.f32	s21, s12, s12
 800c272:	ee66 9aa6 	vmul.f32	s19, s13, s13
 800c276:	f7ff ffa7 	bl	800c1c8 <arm_sqrt_f32>
 800c27a:	ee28 0a8a 	vmul.f32	s0, s17, s20
 800c27e:	1d20      	adds	r0, r4, #4
 800c280:	eeaa 0a8b 	vfma.f32	s0, s21, s22
 800c284:	f7ff ffa0 	bl	800c1c8 <arm_sqrt_f32>
 800c288:	ee28 0a0a 	vmul.f32	s0, s16, s20
 800c28c:	f104 0008 	add.w	r0, r4, #8
 800c290:	eea9 0a8b 	vfma.f32	s0, s19, s22
 800c294:	f7ff ff98 	bl	800c1c8 <arm_sqrt_f32>
 800c298:	eeab 9a8c 	vfma.f32	s18, s23, s24
 800c29c:	e7c9      	b.n	800c232 <MotionSP_SwAccRmsFilter.constprop.4+0x46>
 800c29e:	bf00      	nop
 800c2a0:	2000b10c 	.word	0x2000b10c
 800c2a4:	2000eaa4 	.word	0x2000eaa4
 800c2a8:	20003160 	.word	0x20003160

0800c2ac <MotionSP_evalSpeedFromAccelero.constprop.6>:
 800c2ac:	4a2d      	ldr	r2, [pc, #180]	; (800c364 <MotionSP_evalSpeedFromAccelero.constprop.6+0xb8>)
 800c2ae:	b570      	push	{r4, r5, r6, lr}
 800c2b0:	8854      	ldrh	r4, [r2, #2]
 800c2b2:	b184      	cbz	r4, 800c2d6 <MotionSP_evalSpeedFromAccelero.constprop.6+0x2a>
 800c2b4:	1e63      	subs	r3, r4, #1
 800c2b6:	492c      	ldr	r1, [pc, #176]	; (800c368 <MotionSP_evalSpeedFromAccelero.constprop.6+0xbc>)
 800c2b8:	2801      	cmp	r0, #1
 800c2ba:	b29b      	uxth	r3, r3
 800c2bc:	f101 0004 	add.w	r0, r1, #4
 800c2c0:	f101 0510 	add.w	r5, r1, #16
 800c2c4:	d10a      	bne.n	800c2dc <MotionSP_evalSpeedFromAccelero.constprop.6+0x30>
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	604b      	str	r3, [r1, #4]
 800c2ca:	610b      	str	r3, [r1, #16]
 800c2cc:	e9c0 3301 	strd	r3, r3, [r0, #4]
 800c2d0:	e9c5 3301 	strd	r3, r3, [r5, #4]
 800c2d4:	bd70      	pop	{r4, r5, r6, pc}
 800c2d6:	8813      	ldrh	r3, [r2, #0]
 800c2d8:	3b01      	subs	r3, #1
 800c2da:	e7ec      	b.n	800c2b6 <MotionSP_evalSpeedFromAccelero.constprop.6+0xa>
 800c2dc:	4e23      	ldr	r6, [pc, #140]	; (800c36c <MotionSP_evalSpeedFromAccelero.constprop.6+0xc0>)
 800c2de:	edd6 7a01 	vldr	s15, [r6, #4]
 800c2e2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c2e6:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 800c2ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c2ee:	edd6 6a02 	vldr	s13, [r6, #8]
 800c2f2:	ed91 7a04 	vldr	s14, [r1, #16]
 800c2f6:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800c2fa:	eb02 0684 	add.w	r6, r2, r4, lsl #2
 800c2fe:	edd6 6a02 	vldr	s13, [r6, #8]
 800c302:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800c306:	f203 46ce 	addw	r6, r3, #1230	; 0x4ce
 800c30a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c30e:	edd6 6a00 	vldr	s13, [r6]
 800c312:	ed81 7a01 	vstr	s14, [r1, #4]
 800c316:	ed91 7a05 	vldr	s14, [r1, #20]
 800c31a:	f204 46ce 	addw	r6, r4, #1230	; 0x4ce
 800c31e:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800c322:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c326:	f603 139a 	addw	r3, r3, #2458	; 0x99a
 800c32a:	edd6 6a00 	vldr	s13, [r6]
 800c32e:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800c332:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c336:	f604 149a 	addw	r4, r4, #2458	; 0x99a
 800c33a:	edd3 6a00 	vldr	s13, [r3]
 800c33e:	ed81 7a02 	vstr	s14, [r1, #8]
 800c342:	ed91 7a06 	vldr	s14, [r1, #24]
 800c346:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800c34a:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800c34e:	edd2 6a00 	vldr	s13, [r2]
 800c352:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800c356:	ed81 7a03 	vstr	s14, [r1, #12]
 800c35a:	c807      	ldmia	r0, {r0, r1, r2}
 800c35c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800c360:	e7b8      	b.n	800c2d4 <MotionSP_evalSpeedFromAccelero.constprop.6+0x28>
 800c362:	bf00      	nop
 800c364:	2000b10c 	.word	0x2000b10c
 800c368:	20003160 	.word	0x20003160
 800c36c:	20011dd0 	.word	0x20011dd0

0800c370 <MotionSP_SwSpeedRmsFilter.constprop.5>:
 800c370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c372:	4f38      	ldr	r7, [pc, #224]	; (800c454 <MotionSP_SwSpeedRmsFilter.constprop.5+0xe4>)
 800c374:	4c38      	ldr	r4, [pc, #224]	; (800c458 <MotionSP_SwSpeedRmsFilter.constprop.5+0xe8>)
 800c376:	ed2d 8b06 	vpush	{d8-d10}
 800c37a:	f107 050c 	add.w	r5, r7, #12
 800c37e:	4603      	mov	r3, r0
 800c380:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c384:	f104 061c 	add.w	r6, r4, #28
 800c388:	2b01      	cmp	r3, #1
 800c38a:	eeb0 aa40 	vmov.f32	s20, s0
 800c38e:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 800c392:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800c396:	d111      	bne.n	800c3bc <MotionSP_SwSpeedRmsFilter.constprop.5+0x4c>
 800c398:	2300      	movs	r3, #0
 800c39a:	60fb      	str	r3, [r7, #12]
 800c39c:	61e3      	str	r3, [r4, #28]
 800c39e:	e9c5 3301 	strd	r3, r3, [r5, #4]
 800c3a2:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800c3a6:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 800c3aa:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
 800c3ae:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
 800c3b2:	ed84 8a10 	vstr	s16, [r4, #64]	; 0x40
 800c3b6:	ecbd 8b06 	vpop	{d8-d10}
 800c3ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c3bc:	edd4 9a10 	vldr	s19, [r4, #64]	; 0x40
 800c3c0:	edd4 7a12 	vldr	s15, [r4, #72]	; 0x48
 800c3c4:	ed94 7a08 	vldr	s14, [r4, #32]
 800c3c8:	ed94 0a11 	vldr	s0, [r4, #68]	; 0x44
 800c3cc:	eec8 8a29 	vdiv.f32	s17, s16, s19
 800c3d0:	4628      	mov	r0, r5
 800c3d2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c3d6:	ee27 7a07 	vmul.f32	s14, s14, s14
 800c3da:	edc4 7a0b 	vstr	s15, [r4, #44]	; 0x2c
 800c3de:	edd4 7a13 	vldr	s15, [r4, #76]	; 0x4c
 800c3e2:	ed84 7a0e 	vstr	s14, [r4, #56]	; 0x38
 800c3e6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c3ea:	ee20 0a00 	vmul.f32	s0, s0, s0
 800c3ee:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
 800c3f2:	edd4 7a07 	vldr	s15, [r4, #28]
 800c3f6:	ed94 7a09 	vldr	s14, [r4, #36]	; 0x24
 800c3fa:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
 800c3fe:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c402:	ee38 9a68 	vsub.f32	s18, s16, s17
 800c406:	ee20 0a28 	vmul.f32	s0, s0, s17
 800c40a:	ee27 7a07 	vmul.f32	s14, s14, s14
 800c40e:	eea7 0a89 	vfma.f32	s0, s15, s18
 800c412:	ed84 7a0f 	vstr	s14, [r4, #60]	; 0x3c
 800c416:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 800c41a:	f7ff fed5 	bl	800c1c8 <arm_sqrt_f32>
 800c41e:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
 800c422:	edd4 7a0e 	vldr	s15, [r4, #56]	; 0x38
 800c426:	ee28 0a80 	vmul.f32	s0, s17, s0
 800c42a:	f107 0010 	add.w	r0, r7, #16
 800c42e:	eea9 0a27 	vfma.f32	s0, s18, s15
 800c432:	f7ff fec9 	bl	800c1c8 <arm_sqrt_f32>
 800c436:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
 800c43a:	edd4 7a0f 	vldr	s15, [r4, #60]	; 0x3c
 800c43e:	ee28 0a80 	vmul.f32	s0, s17, s0
 800c442:	f107 0014 	add.w	r0, r7, #20
 800c446:	eea9 0a27 	vfma.f32	s0, s18, s15
 800c44a:	f7ff febd 	bl	800c1c8 <arm_sqrt_f32>
 800c44e:	eeaa 8a29 	vfma.f32	s16, s20, s19
 800c452:	e7ae      	b.n	800c3b2 <MotionSP_SwSpeedRmsFilter.constprop.5+0x42>
 800c454:	2000eaa4 	.word	0x2000eaa4
 800c458:	20003160 	.word	0x20003160

0800c45c <MotionSP_speedDelOffset.constprop.7>:
 800c45c:	b570      	push	{r4, r5, r6, lr}
 800c45e:	4d22      	ldr	r5, [pc, #136]	; (800c4e8 <MotionSP_speedDelOffset.constprop.7+0x8c>)
 800c460:	2801      	cmp	r0, #1
 800c462:	f1a5 044c 	sub.w	r4, r5, #76	; 0x4c
 800c466:	f105 060c 	add.w	r6, r5, #12
 800c46a:	d106      	bne.n	800c47a <MotionSP_speedDelOffset.constprop.7+0x1e>
 800c46c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800c470:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800c474:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 800c478:	bd70      	pop	{r4, r5, r6, pc}
 800c47a:	ed95 7a03 	vldr	s14, [r5, #12]
 800c47e:	ed55 7a13 	vldr	s15, [r5, #-76]	; 0xffffffb4
 800c482:	edd5 6a00 	vldr	s13, [r5]
 800c486:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c48a:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800c4ec <MotionSP_speedDelOffset.constprop.7+0x90>
 800c48e:	f1a5 0350 	sub.w	r3, r5, #80	; 0x50
 800c492:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c496:	f1a5 030c 	sub.w	r3, r5, #12
 800c49a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c49e:	edd5 6a04 	vldr	s13, [r5, #16]
 800c4a2:	ed45 7a03 	vstr	s15, [r5, #-12]
 800c4a6:	ed55 7a12 	vldr	s15, [r5, #-72]	; 0xffffffb8
 800c4aa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c4ae:	edd5 6a01 	vldr	s13, [r5, #4]
 800c4b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c4b6:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c4ba:	edd5 6a05 	vldr	s13, [r5, #20]
 800c4be:	ed45 7a02 	vstr	s15, [r5, #-8]
 800c4c2:	ed55 7a11 	vldr	s15, [r5, #-68]	; 0xffffffbc
 800c4c6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c4ca:	edd5 6a02 	vldr	s13, [r5, #8]
 800c4ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c4d2:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c4d6:	ed45 7a01 	vstr	s15, [r5, #-4]
 800c4da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c4de:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800c4e2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800c4e6:	e7c5      	b.n	800c474 <MotionSP_speedDelOffset.constprop.7+0x18>
 800c4e8:	200031b0 	.word	0x200031b0
 800c4ec:	3f79999a 	.word	0x3f79999a

0800c4f0 <MotionSP_accDelOffset>:
 800c4f0:	2a01      	cmp	r2, #1
 800c4f2:	b530      	push	{r4, r5, lr}
 800c4f4:	4605      	mov	r5, r0
 800c4f6:	460c      	mov	r4, r1
 800c4f8:	d10c      	bne.n	800c514 <MotionSP_accDelOffset+0x24>
 800c4fa:	6808      	ldr	r0, [r1, #0]
 800c4fc:	4b1f      	ldr	r3, [pc, #124]	; (800c57c <MotionSP_accDelOffset+0x8c>)
 800c4fe:	6849      	ldr	r1, [r1, #4]
 800c500:	c303      	stmia	r3!, {r0, r1}
 800c502:	68a0      	ldr	r0, [r4, #8]
 800c504:	f843 0b04 	str.w	r0, [r3], #4
 800c508:	6820      	ldr	r0, [r4, #0]
 800c50a:	6861      	ldr	r1, [r4, #4]
 800c50c:	c303      	stmia	r3!, {r0, r1}
 800c50e:	68a0      	ldr	r0, [r4, #8]
 800c510:	6018      	str	r0, [r3, #0]
 800c512:	bd30      	pop	{r4, r5, pc}
 800c514:	4b1a      	ldr	r3, [pc, #104]	; (800c580 <MotionSP_accDelOffset+0x90>)
 800c516:	edd1 7a00 	vldr	s15, [r1]
 800c51a:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 800c51e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c522:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 800c526:	ee67 7a80 	vmul.f32	s15, s15, s0
 800c52a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800c52e:	eee7 7a00 	vfma.f32	s15, s14, s0
 800c532:	3374      	adds	r3, #116	; 0x74
 800c534:	ed93 7a01 	vldr	s14, [r3, #4]
 800c538:	edc0 7a00 	vstr	s15, [r0]
 800c53c:	edd1 7a01 	vldr	s15, [r1, #4]
 800c540:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c544:	ed13 7a02 	vldr	s14, [r3, #-8]
 800c548:	ee67 7a80 	vmul.f32	s15, s15, s0
 800c54c:	eee7 7a00 	vfma.f32	s15, s14, s0
 800c550:	ed93 7a02 	vldr	s14, [r3, #8]
 800c554:	edc0 7a01 	vstr	s15, [r0, #4]
 800c558:	edd1 7a02 	vldr	s15, [r1, #8]
 800c55c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c560:	ed13 7a01 	vldr	s14, [r3, #-4]
 800c564:	ee67 7a80 	vmul.f32	s15, s15, s0
 800c568:	eee7 7a00 	vfma.f32	s15, s14, s0
 800c56c:	edc0 7a02 	vstr	s15, [r0, #8]
 800c570:	6869      	ldr	r1, [r5, #4]
 800c572:	6800      	ldr	r0, [r0, #0]
 800c574:	c203      	stmia	r2!, {r0, r1}
 800c576:	68a8      	ldr	r0, [r5, #8]
 800c578:	6010      	str	r0, [r2, #0]
 800c57a:	e7c5      	b.n	800c508 <MotionSP_accDelOffset+0x18>
 800c57c:	200031c8 	.word	0x200031c8
 800c580:	20003160 	.word	0x20003160

0800c584 <MotionSP_CreateAccCircBuffer>:
 800c584:	8843      	ldrh	r3, [r0, #2]
 800c586:	8802      	ldrh	r2, [r0, #0]
 800c588:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800c5e4 <MotionSP_CreateAccCircBuffer+0x60>
 800c58c:	3301      	adds	r3, #1
 800c58e:	b29b      	uxth	r3, r3
 800c590:	b084      	sub	sp, #16
 800c592:	429a      	cmp	r2, r3
 800c594:	8043      	strh	r3, [r0, #2]
 800c596:	ed8d 0a01 	vstr	s0, [sp, #4]
 800c59a:	bf04      	itt	eq
 800c59c:	2300      	moveq	r3, #0
 800c59e:	8043      	strheq	r3, [r0, #2]
 800c5a0:	eddd 7a01 	vldr	s15, [sp, #4]
 800c5a4:	edcd 0a02 	vstr	s1, [sp, #8]
 800c5a8:	bf04      	itt	eq
 800c5aa:	2301      	moveq	r3, #1
 800c5ac:	7103      	strbeq	r3, [r0, #4]
 800c5ae:	8843      	ldrh	r3, [r0, #2]
 800c5b0:	ed8d 1a03 	vstr	s2, [sp, #12]
 800c5b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c5b8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800c5bc:	edc0 7a02 	vstr	s15, [r0, #8]
 800c5c0:	eddd 7a02 	vldr	s15, [sp, #8]
 800c5c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c5c8:	f500 5399 	add.w	r3, r0, #4896	; 0x1320
 800c5cc:	edc3 7a06 	vstr	s15, [r3, #24]
 800c5d0:	eddd 7a03 	vldr	s15, [sp, #12]
 800c5d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c5d8:	f500 5019 	add.w	r0, r0, #9792	; 0x2640
 800c5dc:	edc0 7a0a 	vstr	s15, [r0, #40]	; 0x28
 800c5e0:	b004      	add	sp, #16
 800c5e2:	4770      	bx	lr
 800c5e4:	3c20ac12 	.word	0x3c20ac12

0800c5e8 <MotionSP_TimeDomainProcess>:
 800c5e8:	b538      	push	{r3, r4, r5, lr}
 800c5ea:	4b30      	ldr	r3, [pc, #192]	; (800c6ac <MotionSP_TimeDomainProcess+0xc4>)
 800c5ec:	ed90 7a06 	vldr	s14, [r0, #24]
 800c5f0:	4614      	mov	r4, r2
 800c5f2:	885a      	ldrh	r2, [r3, #2]
 800c5f4:	eb03 0582 	add.w	r5, r3, r2, lsl #2
 800c5f8:	edd5 7a02 	vldr	s15, [r5, #8]
 800c5fc:	eef0 7ae7 	vabs.f32	s15, s15
 800c600:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c604:	f202 45ce 	addw	r5, r2, #1230	; 0x4ce
 800c608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c60c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800c610:	bf48      	it	mi
 800c612:	edc0 7a06 	vstrmi	s15, [r0, #24]
 800c616:	edd5 7a00 	vldr	s15, [r5]
 800c61a:	ed90 7a07 	vldr	s14, [r0, #28]
 800c61e:	eef0 7ae7 	vabs.f32	s15, s15
 800c622:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c626:	f602 129a 	addw	r2, r2, #2458	; 0x99a
 800c62a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c62e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800c632:	bf48      	it	mi
 800c634:	edc0 7a07 	vstrmi	s15, [r0, #28]
 800c638:	edd3 7a00 	vldr	s15, [r3]
 800c63c:	ed90 7a08 	vldr	s14, [r0, #32]
 800c640:	eef0 7ae7 	vabs.f32	s15, s15
 800c644:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c64c:	bf48      	it	mi
 800c64e:	edc0 7a08 	vstrmi	s15, [r0, #32]
 800c652:	b969      	cbnz	r1, 800c670 <MotionSP_TimeDomainProcess+0x88>
 800c654:	4620      	mov	r0, r4
 800c656:	f7ff fe29 	bl	800c2ac <MotionSP_evalSpeedFromAccelero.constprop.6>
 800c65a:	4620      	mov	r0, r4
 800c65c:	f7ff fefe 	bl	800c45c <MotionSP_speedDelOffset.constprop.7>
 800c660:	4b13      	ldr	r3, [pc, #76]	; (800c6b0 <MotionSP_TimeDomainProcess+0xc8>)
 800c662:	4620      	mov	r0, r4
 800c664:	ed93 0a02 	vldr	s0, [r3, #8]
 800c668:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c66c:	f7ff be80 	b.w	800c370 <MotionSP_SwSpeedRmsFilter.constprop.5>
 800c670:	2901      	cmp	r1, #1
 800c672:	d107      	bne.n	800c684 <MotionSP_TimeDomainProcess+0x9c>
 800c674:	4b0e      	ldr	r3, [pc, #56]	; (800c6b0 <MotionSP_TimeDomainProcess+0xc8>)
 800c676:	ed93 0a02 	vldr	s0, [r3, #8]
 800c67a:	4620      	mov	r0, r4
 800c67c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c680:	f7ff bdb4 	b.w	800c1ec <MotionSP_SwAccRmsFilter.constprop.4>
 800c684:	2902      	cmp	r1, #2
 800c686:	d10f      	bne.n	800c6a8 <MotionSP_TimeDomainProcess+0xc0>
 800c688:	4620      	mov	r0, r4
 800c68a:	4d09      	ldr	r5, [pc, #36]	; (800c6b0 <MotionSP_TimeDomainProcess+0xc8>)
 800c68c:	f7ff fe0e 	bl	800c2ac <MotionSP_evalSpeedFromAccelero.constprop.6>
 800c690:	4620      	mov	r0, r4
 800c692:	f7ff fee3 	bl	800c45c <MotionSP_speedDelOffset.constprop.7>
 800c696:	4620      	mov	r0, r4
 800c698:	ed95 0a02 	vldr	s0, [r5, #8]
 800c69c:	f7ff fe68 	bl	800c370 <MotionSP_SwSpeedRmsFilter.constprop.5>
 800c6a0:	4620      	mov	r0, r4
 800c6a2:	ed95 0a02 	vldr	s0, [r5, #8]
 800c6a6:	e7e9      	b.n	800c67c <MotionSP_TimeDomainProcess+0x94>
 800c6a8:	bd38      	pop	{r3, r4, r5, pc}
 800c6aa:	bf00      	nop
 800c6ac:	2000b10c 	.word	0x2000b10c
 800c6b0:	20011dd0 	.word	0x20011dd0

0800c6b4 <MotionSP_fftCalc>:
 800c6b4:	b570      	push	{r4, r5, r6, lr}
 800c6b6:	4c07      	ldr	r4, [pc, #28]	; (800c6d4 <MotionSP_fftCalc+0x20>)
 800c6b8:	4606      	mov	r6, r0
 800c6ba:	4615      	mov	r5, r2
 800c6bc:	2300      	movs	r3, #0
 800c6be:	4622      	mov	r2, r4
 800c6c0:	f006 f89c 	bl	80127fc <arm_rfft_fast_f32>
 800c6c4:	8a32      	ldrh	r2, [r6, #16]
 800c6c6:	4629      	mov	r1, r5
 800c6c8:	4620      	mov	r0, r4
 800c6ca:	0852      	lsrs	r2, r2, #1
 800c6cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c6d0:	f006 bf36 	b.w	8013540 <arm_cmplx_mag_f32>
 800c6d4:	200031e4 	.word	0x200031e4

0800c6d8 <MotionSP_fftAdapt>:
 800c6d8:	4b27      	ldr	r3, [pc, #156]	; (800c778 <MotionSP_fftAdapt+0xa0>)
 800c6da:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c6dc:	edd3 7a00 	vldr	s15, [r3]
 800c6e0:	004f      	lsls	r7, r1, #1
 800c6e2:	4603      	mov	r3, r0
 800c6e4:	2200      	movs	r2, #0
 800c6e6:	f500 6400 	add.w	r4, r0, #2048	; 0x800
 800c6ea:	f500 5580 	add.w	r5, r0, #4096	; 0x1000
 800c6ee:	4291      	cmp	r1, r2
 800c6f0:	dc00      	bgt.n	800c6f4 <MotionSP_fftAdapt+0x1c>
 800c6f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c6f4:	b9f2      	cbnz	r2, 800c734 <MotionSP_fftAdapt+0x5c>
 800c6f6:	ee07 7a10 	vmov	s14, r7
 800c6fa:	ed90 6a00 	vldr	s12, [r0]
 800c6fe:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c702:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800c706:	ed94 6a00 	vldr	s12, [r4]
 800c70a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800c70e:	edc0 6a00 	vstr	s13, [r0]
 800c712:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800c716:	ed95 6a00 	vldr	s12, [r5]
 800c71a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800c71e:	edc4 6a00 	vstr	s13, [r4]
 800c722:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800c726:	ee26 7aa7 	vmul.f32	s14, s13, s15
 800c72a:	ed85 7a00 	vstr	s14, [r5]
 800c72e:	3201      	adds	r2, #1
 800c730:	3304      	adds	r3, #4
 800c732:	e7dc      	b.n	800c6ee <MotionSP_fftAdapt+0x16>
 800c734:	ee07 1a10 	vmov	s14, r1
 800c738:	ed93 6a00 	vldr	s12, [r3]
 800c73c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c740:	f503 6600 	add.w	r6, r3, #2048	; 0x800
 800c744:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800c748:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800c74c:	edc3 6a00 	vstr	s13, [r3]
 800c750:	ed96 6a00 	vldr	s12, [r6]
 800c754:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800c758:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800c75c:	edc6 6a00 	vstr	s13, [r6]
 800c760:	f503 5680 	add.w	r6, r3, #4096	; 0x1000
 800c764:	ed96 6a00 	vldr	s12, [r6]
 800c768:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800c76c:	ee26 7aa7 	vmul.f32	s14, s13, s15
 800c770:	ed86 7a00 	vstr	s14, [r6]
 800c774:	e7db      	b.n	800c72e <MotionSP_fftAdapt+0x56>
 800c776:	bf00      	nop
 800c778:	2000b108 	.word	0x2000b108

0800c77c <MotionSP_fftFindPeak>:
 800c77c:	b570      	push	{r4, r5, r6, lr}
 800c77e:	1d13      	adds	r3, r2, #4
 800c780:	4614      	mov	r4, r2
 800c782:	4605      	mov	r5, r0
 800c784:	460e      	mov	r6, r1
 800c786:	f005 ff4d 	bl	8012624 <arm_max_f32>
 800c78a:	f104 0310 	add.w	r3, r4, #16
 800c78e:	f104 020c 	add.w	r2, r4, #12
 800c792:	4631      	mov	r1, r6
 800c794:	f505 6000 	add.w	r0, r5, #2048	; 0x800
 800c798:	f005 ff44 	bl	8012624 <arm_max_f32>
 800c79c:	f104 031c 	add.w	r3, r4, #28
 800c7a0:	f104 0218 	add.w	r2, r4, #24
 800c7a4:	4631      	mov	r1, r6
 800c7a6:	f505 5080 	add.w	r0, r5, #4096	; 0x1000
 800c7aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c7ae:	f005 bf39 	b.w	8012624 <arm_max_f32>
	...

0800c7b4 <MotionSP_SetWindFiltArray>:
 800c7b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7b6:	ed2d 8b08 	vpush	{d8-d11}
 800c7ba:	eddf 9a4e 	vldr	s19, [pc, #312]	; 800c8f4 <MotionSP_SetWindFiltArray+0x140>
 800c7be:	ed9f aa4e 	vldr	s20, [pc, #312]	; 800c8f8 <MotionSP_SetWindFiltArray+0x144>
 800c7c2:	eddf aa4e 	vldr	s21, [pc, #312]	; 800c8fc <MotionSP_SetWindFiltArray+0x148>
 800c7c6:	460f      	mov	r7, r1
 800c7c8:	4614      	mov	r4, r2
 800c7ca:	4606      	mov	r6, r0
 800c7cc:	2500      	movs	r5, #0
 800c7ce:	42af      	cmp	r7, r5
 800c7d0:	dc06      	bgt.n	800c7e0 <MotionSP_SetWindFiltArray+0x2c>
 800c7d2:	2c03      	cmp	r4, #3
 800c7d4:	f200 8081 	bhi.w	800c8da <MotionSP_SetWindFiltArray+0x126>
 800c7d8:	e8df f004 	tbb	[pc, r4]
 800c7dc:	8986827b 	.word	0x8986827b
 800c7e0:	b92c      	cbnz	r4, 800c7ee <MotionSP_SetWindFiltArray+0x3a>
 800c7e2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800c7e6:	6033      	str	r3, [r6, #0]
 800c7e8:	3501      	adds	r5, #1
 800c7ea:	3604      	adds	r6, #4
 800c7ec:	e7ef      	b.n	800c7ce <MotionSP_SetWindFiltArray+0x1a>
 800c7ee:	2c01      	cmp	r4, #1
 800c7f0:	d119      	bne.n	800c826 <MotionSP_SetWindFiltArray+0x72>
 800c7f2:	ee07 5a90 	vmov	s15, r5
 800c7f6:	1e7b      	subs	r3, r7, #1
 800c7f8:	ee00 3a10 	vmov	s0, r3
 800c7fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c800:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800c804:	ee67 7aa9 	vmul.f32	s15, s15, s19
 800c808:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800c80c:	f006 ff80 	bl	8013710 <arm_cos_f32>
 800c810:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800c814:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800c818:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800c81c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c820:	ed86 0a00 	vstr	s0, [r6]
 800c824:	e7e0      	b.n	800c7e8 <MotionSP_SetWindFiltArray+0x34>
 800c826:	2c02      	cmp	r4, #2
 800c828:	d117      	bne.n	800c85a <MotionSP_SetWindFiltArray+0xa6>
 800c82a:	ee07 5a90 	vmov	s15, r5
 800c82e:	1e7b      	subs	r3, r7, #1
 800c830:	ee00 3a10 	vmov	s0, r3
 800c834:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c838:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800c83c:	ee67 7aa9 	vmul.f32	s15, s15, s19
 800c840:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800c844:	f006 ff64 	bl	8013710 <arm_cos_f32>
 800c848:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 800c900 <MotionSP_SetWindFiltArray+0x14c>
 800c84c:	eddf 7a2d 	vldr	s15, [pc, #180]	; 800c904 <MotionSP_SetWindFiltArray+0x150>
 800c850:	eee0 7a47 	vfms.f32	s15, s0, s14
 800c854:	edc6 7a00 	vstr	s15, [r6]
 800c858:	e7c6      	b.n	800c7e8 <MotionSP_SetWindFiltArray+0x34>
 800c85a:	2c03      	cmp	r4, #3
 800c85c:	d1c4      	bne.n	800c7e8 <MotionSP_SetWindFiltArray+0x34>
 800c85e:	ee07 5a90 	vmov	s15, r5
 800c862:	1e7b      	subs	r3, r7, #1
 800c864:	eeb8 9ae7 	vcvt.f32.s32	s18, s15
 800c868:	ee08 3a90 	vmov	s17, r3
 800c86c:	ee29 0a29 	vmul.f32	s0, s18, s19
 800c870:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 800c874:	ed9f 8a24 	vldr	s16, [pc, #144]	; 800c908 <MotionSP_SetWindFiltArray+0x154>
 800c878:	ee80 0a28 	vdiv.f32	s0, s0, s17
 800c87c:	f006 ff48 	bl	8013710 <arm_cos_f32>
 800c880:	eeb0 ba40 	vmov.f32	s22, s0
 800c884:	ee29 0a0a 	vmul.f32	s0, s18, s20
 800c888:	ee80 0a28 	vdiv.f32	s0, s0, s17
 800c88c:	f006 ff40 	bl	8013710 <arm_cos_f32>
 800c890:	eeab 8a6a 	vfms.f32	s16, s22, s21
 800c894:	eddf 7a1d 	vldr	s15, [pc, #116]	; 800c90c <MotionSP_SetWindFiltArray+0x158>
 800c898:	eea0 8a27 	vfma.f32	s16, s0, s15
 800c89c:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 800c910 <MotionSP_SetWindFiltArray+0x15c>
 800c8a0:	ee29 0a00 	vmul.f32	s0, s18, s0
 800c8a4:	ee80 0a28 	vdiv.f32	s0, s0, s17
 800c8a8:	f006 ff32 	bl	8013710 <arm_cos_f32>
 800c8ac:	eddf 7a19 	vldr	s15, [pc, #100]	; 800c914 <MotionSP_SetWindFiltArray+0x160>
 800c8b0:	eea0 8a67 	vfms.f32	s16, s0, s15
 800c8b4:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800c918 <MotionSP_SetWindFiltArray+0x164>
 800c8b8:	ee29 0a00 	vmul.f32	s0, s18, s0
 800c8bc:	ee80 0a28 	vdiv.f32	s0, s0, s17
 800c8c0:	f006 ff26 	bl	8013710 <arm_cos_f32>
 800c8c4:	eddf 7a15 	vldr	s15, [pc, #84]	; 800c91c <MotionSP_SetWindFiltArray+0x168>
 800c8c8:	eea0 8a27 	vfma.f32	s16, s0, s15
 800c8cc:	ed86 8a00 	vstr	s16, [r6]
 800c8d0:	e78a      	b.n	800c7e8 <MotionSP_SetWindFiltArray+0x34>
 800c8d2:	4b13      	ldr	r3, [pc, #76]	; (800c920 <MotionSP_SetWindFiltArray+0x16c>)
 800c8d4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800c8d8:	601a      	str	r2, [r3, #0]
 800c8da:	ecbd 8b08 	vpop	{d8-d11}
 800c8de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c8e0:	4b0f      	ldr	r3, [pc, #60]	; (800c920 <MotionSP_SetWindFiltArray+0x16c>)
 800c8e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800c8e6:	e7f7      	b.n	800c8d8 <MotionSP_SetWindFiltArray+0x124>
 800c8e8:	4b0d      	ldr	r3, [pc, #52]	; (800c920 <MotionSP_SetWindFiltArray+0x16c>)
 800c8ea:	4a0e      	ldr	r2, [pc, #56]	; (800c924 <MotionSP_SetWindFiltArray+0x170>)
 800c8ec:	e7f4      	b.n	800c8d8 <MotionSP_SetWindFiltArray+0x124>
 800c8ee:	4b0c      	ldr	r3, [pc, #48]	; (800c920 <MotionSP_SetWindFiltArray+0x16c>)
 800c8f0:	4a0d      	ldr	r2, [pc, #52]	; (800c928 <MotionSP_SetWindFiltArray+0x174>)
 800c8f2:	e7f1      	b.n	800c8d8 <MotionSP_SetWindFiltArray+0x124>
 800c8f4:	40c90fdb 	.word	0x40c90fdb
 800c8f8:	41490fdb 	.word	0x41490fdb
 800c8fc:	3ed550bc 	.word	0x3ed550bc
 800c900:	3eeb851f 	.word	0x3eeb851f
 800c904:	3f0a3d71 	.word	0x3f0a3d71
 800c908:	3e5cc0ba 	.word	0x3e5cc0ba
 800c90c:	3e8df570 	.word	0x3e8df570
 800c910:	4196cbe4 	.word	0x4196cbe4
 800c914:	3dab2b70 	.word	0x3dab2b70
 800c918:	41c90fdb 	.word	0x41c90fdb
 800c91c:	3be3a6bf 	.word	0x3be3a6bf
 800c920:	2000b108 	.word	0x2000b108
 800c924:	3feccccd 	.word	0x3feccccd
 800c928:	4091999a 	.word	0x4091999a

0800c92c <MotionSP_fftInBuild>:
 800c92c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c930:	460d      	mov	r5, r1
 800c932:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 800c936:	4299      	cmp	r1, r3
 800c938:	4606      	mov	r6, r0
 800c93a:	4617      	mov	r7, r2
 800c93c:	d220      	bcs.n	800c980 <MotionSP_fftInBuild+0x54>
 800c93e:	f1c5 0201 	rsb	r2, r5, #1
 800c942:	4411      	add	r1, r2
 800c944:	b289      	uxth	r1, r1
 800c946:	b20c      	sxth	r4, r1
 800c948:	2c00      	cmp	r4, #0
 800c94a:	bfbc      	itt	lt
 800c94c:	18c9      	addlt	r1, r1, r3
 800c94e:	b20c      	sxthlt	r4, r1
 800c950:	1b5a      	subs	r2, r3, r5
 800c952:	4294      	cmp	r4, r2
 800c954:	eb07 0184 	add.w	r1, r7, r4, lsl #2
 800c958:	dc05      	bgt.n	800c966 <MotionSP_fftInBuild+0x3a>
 800c95a:	00aa      	lsls	r2, r5, #2
 800c95c:	f009 fb1e 	bl	8015f9c <memcpy>
 800c960:	2000      	movs	r0, #0
 800c962:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c966:	1b1b      	subs	r3, r3, r4
 800c968:	b29c      	uxth	r4, r3
 800c96a:	ea4f 0884 	mov.w	r8, r4, lsl #2
 800c96e:	4642      	mov	r2, r8
 800c970:	f009 fb14 	bl	8015f9c <memcpy>
 800c974:	1b2a      	subs	r2, r5, r4
 800c976:	0092      	lsls	r2, r2, #2
 800c978:	4639      	mov	r1, r7
 800c97a:	eb06 0008 	add.w	r0, r6, r8
 800c97e:	e7ed      	b.n	800c95c <MotionSP_fftInBuild+0x30>
 800c980:	2001      	movs	r0, #1
 800c982:	e7ee      	b.n	800c962 <MotionSP_fftInBuild+0x36>

0800c984 <MotionSP_fftAverageCalcTime>:
 800c984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c988:	4688      	mov	r8, r1
 800c98a:	8819      	ldrh	r1, [r3, #0]
 800c98c:	f89d 6018 	ldrb.w	r6, [sp, #24]
 800c990:	4604      	mov	r4, r0
 800c992:	461f      	mov	r7, r3
 800c994:	0095      	lsls	r5, r2, #2
 800c996:	b911      	cbnz	r1, 800c99e <MotionSP_fftAverageCalcTime+0x1a>
 800c998:	462a      	mov	r2, r5
 800c99a:	f009 fb0a 	bl	8015fb2 <memset>
 800c99e:	4620      	mov	r0, r4
 800c9a0:	4641      	mov	r1, r8
 800c9a2:	4425      	add	r5, r4
 800c9a4:	42ac      	cmp	r4, r5
 800c9a6:	d107      	bne.n	800c9b8 <MotionSP_fftAverageCalcTime+0x34>
 800c9a8:	883a      	ldrh	r2, [r7, #0]
 800c9aa:	3201      	adds	r2, #1
 800c9ac:	b292      	uxth	r2, r2
 800c9ae:	803a      	strh	r2, [r7, #0]
 800c9b0:	b9ae      	cbnz	r6, 800c9de <MotionSP_fftAverageCalcTime+0x5a>
 800c9b2:	4630      	mov	r0, r6
 800c9b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9b8:	edd4 7a00 	vldr	s15, [r4]
 800c9bc:	ecb1 7a01 	vldmia	r1!, {s14}
 800c9c0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c9c4:	ece4 7a01 	vstmia	r4!, {s15}
 800c9c8:	e7ec      	b.n	800c9a4 <MotionSP_fftAverageCalcTime+0x20>
 800c9ca:	ee07 2a90 	vmov	s15, r2
 800c9ce:	edd0 6a00 	vldr	s13, [r0]
 800c9d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c9d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c9da:	ece0 7a01 	vstmia	r0!, {s15}
 800c9de:	42a0      	cmp	r0, r4
 800c9e0:	d1f3      	bne.n	800c9ca <MotionSP_fftAverageCalcTime+0x46>
 800c9e2:	2601      	movs	r6, #1
 800c9e4:	e7e5      	b.n	800c9b2 <MotionSP_fftAverageCalcTime+0x2e>
	...

0800c9e8 <MotionSP_evalMaxAmplitudeRange>:
 800c9e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9ec:	4688      	mov	r8, r1
 800c9ee:	4916      	ldr	r1, [pc, #88]	; (800ca48 <MotionSP_evalMaxAmplitudeRange+0x60>)
 800c9f0:	b085      	sub	sp, #20
 800c9f2:	f8b1 4080 	ldrh.w	r4, [r1, #128]	; 0x80
 800c9f6:	fbb4 f4f8 	udiv	r4, r4, r8
 800c9fa:	b2e4      	uxtb	r4, r4
 800c9fc:	b2a1      	uxth	r1, r4
 800c9fe:	2500      	movs	r5, #0
 800ca00:	4683      	mov	fp, r0
 800ca02:	9101      	str	r1, [sp, #4]
 800ca04:	4691      	mov	r9, r2
 800ca06:	469a      	mov	sl, r3
 800ca08:	462e      	mov	r6, r5
 800ca0a:	9b01      	ldr	r3, [sp, #4]
 800ca0c:	45b0      	cmp	r8, r6
 800ca0e:	eb05 0703 	add.w	r7, r5, r3
 800ca12:	b2bf      	uxth	r7, r7
 800ca14:	dc02      	bgt.n	800ca1c <MotionSP_evalMaxAmplitudeRange+0x34>
 800ca16:	b005      	add	sp, #20
 800ca18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca1c:	ab03      	add	r3, sp, #12
 800ca1e:	eb0b 0085 	add.w	r0, fp, r5, lsl #2
 800ca22:	aa02      	add	r2, sp, #8
 800ca24:	4621      	mov	r1, r4
 800ca26:	f005 fdfd 	bl	8012624 <arm_max_f32>
 800ca2a:	9b02      	ldr	r3, [sp, #8]
 800ca2c:	f849 3b04 	str.w	r3, [r9], #4
 800ca30:	9b03      	ldr	r3, [sp, #12]
 800ca32:	441d      	add	r5, r3
 800ca34:	ee07 5a90 	vmov	s15, r5
 800ca38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca3c:	3601      	adds	r6, #1
 800ca3e:	ecea 7a01 	vstmia	sl!, {s15}
 800ca42:	463d      	mov	r5, r7
 800ca44:	e7e1      	b.n	800ca0a <MotionSP_evalMaxAmplitudeRange+0x22>
 800ca46:	bf00      	nop
 800ca48:	20003160 	.word	0x20003160

0800ca4c <MotionSP_FrequencyDomainProcess>:
 800ca4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ca4e:	4e58      	ldr	r6, [pc, #352]	; (800cbb0 <MotionSP_FrequencyDomainProcess+0x164>)
 800ca50:	4c58      	ldr	r4, [pc, #352]	; (800cbb4 <MotionSP_FrequencyDomainProcess+0x168>)
 800ca52:	4d59      	ldr	r5, [pc, #356]	; (800cbb8 <MotionSP_FrequencyDomainProcess+0x16c>)
 800ca54:	8820      	ldrh	r0, [r4, #0]
 800ca56:	8829      	ldrh	r1, [r5, #0]
 800ca58:	4f58      	ldr	r7, [pc, #352]	; (800cbbc <MotionSP_FrequencyDomainProcess+0x170>)
 800ca5a:	4632      	mov	r2, r6
 800ca5c:	f832 3b08 	ldrh.w	r3, [r2], #8
 800ca60:	9000      	str	r0, [sp, #0]
 800ca62:	4857      	ldr	r0, [pc, #348]	; (800cbc0 <MotionSP_FrequencyDomainProcess+0x174>)
 800ca64:	f7ff ff62 	bl	800c92c <MotionSP_fftInBuild>
 800ca68:	8822      	ldrh	r2, [r4, #0]
 800ca6a:	8833      	ldrh	r3, [r6, #0]
 800ca6c:	8829      	ldrh	r1, [r5, #0]
 800ca6e:	9200      	str	r2, [sp, #0]
 800ca70:	4854      	ldr	r0, [pc, #336]	; (800cbc4 <MotionSP_FrequencyDomainProcess+0x178>)
 800ca72:	4a55      	ldr	r2, [pc, #340]	; (800cbc8 <MotionSP_FrequencyDomainProcess+0x17c>)
 800ca74:	f7ff ff5a 	bl	800c92c <MotionSP_fftInBuild>
 800ca78:	8822      	ldrh	r2, [r4, #0]
 800ca7a:	8833      	ldrh	r3, [r6, #0]
 800ca7c:	8829      	ldrh	r1, [r5, #0]
 800ca7e:	9200      	str	r2, [sp, #0]
 800ca80:	4852      	ldr	r0, [pc, #328]	; (800cbcc <MotionSP_FrequencyDomainProcess+0x180>)
 800ca82:	4a53      	ldr	r2, [pc, #332]	; (800cbd0 <MotionSP_FrequencyDomainProcess+0x184>)
 800ca84:	4e53      	ldr	r6, [pc, #332]	; (800cbd4 <MotionSP_FrequencyDomainProcess+0x188>)
 800ca86:	4c54      	ldr	r4, [pc, #336]	; (800cbd8 <MotionSP_FrequencyDomainProcess+0x18c>)
 800ca88:	f7ff ff50 	bl	800c92c <MotionSP_fftInBuild>
 800ca8c:	882b      	ldrh	r3, [r5, #0]
 800ca8e:	4a53      	ldr	r2, [pc, #332]	; (800cbdc <MotionSP_FrequencyDomainProcess+0x190>)
 800ca90:	4953      	ldr	r1, [pc, #332]	; (800cbe0 <MotionSP_FrequencyDomainProcess+0x194>)
 800ca92:	484b      	ldr	r0, [pc, #300]	; (800cbc0 <MotionSP_FrequencyDomainProcess+0x174>)
 800ca94:	f006 fe7c 	bl	8013790 <arm_mult_f32>
 800ca98:	4a52      	ldr	r2, [pc, #328]	; (800cbe4 <MotionSP_FrequencyDomainProcess+0x198>)
 800ca9a:	4950      	ldr	r1, [pc, #320]	; (800cbdc <MotionSP_FrequencyDomainProcess+0x190>)
 800ca9c:	4852      	ldr	r0, [pc, #328]	; (800cbe8 <MotionSP_FrequencyDomainProcess+0x19c>)
 800ca9e:	f7ff fe09 	bl	800c6b4 <MotionSP_fftCalc>
 800caa2:	783b      	ldrb	r3, [r7, #0]
 800caa4:	f8b4 2080 	ldrh.w	r2, [r4, #128]	; 0x80
 800caa8:	494e      	ldr	r1, [pc, #312]	; (800cbe4 <MotionSP_FrequencyDomainProcess+0x198>)
 800caaa:	9300      	str	r3, [sp, #0]
 800caac:	484f      	ldr	r0, [pc, #316]	; (800cbec <MotionSP_FrequencyDomainProcess+0x1a0>)
 800caae:	4633      	mov	r3, r6
 800cab0:	f7ff ff68 	bl	800c984 <MotionSP_fftAverageCalcTime>
 800cab4:	b150      	cbz	r0, 800cacc <MotionSP_FrequencyDomainProcess+0x80>
 800cab6:	4b4e      	ldr	r3, [pc, #312]	; (800cbf0 <MotionSP_FrequencyDomainProcess+0x1a4>)
 800cab8:	8832      	ldrh	r2, [r6, #0]
 800caba:	811a      	strh	r2, [r3, #8]
 800cabc:	2300      	movs	r3, #0
 800cabe:	8033      	strh	r3, [r6, #0]
 800cac0:	f894 3082 	ldrb.w	r3, [r4, #130]	; 0x82
 800cac4:	f043 0301 	orr.w	r3, r3, #1
 800cac8:	f884 3082 	strb.w	r3, [r4, #130]	; 0x82
 800cacc:	882b      	ldrh	r3, [r5, #0]
 800cace:	4a43      	ldr	r2, [pc, #268]	; (800cbdc <MotionSP_FrequencyDomainProcess+0x190>)
 800cad0:	4943      	ldr	r1, [pc, #268]	; (800cbe0 <MotionSP_FrequencyDomainProcess+0x194>)
 800cad2:	483c      	ldr	r0, [pc, #240]	; (800cbc4 <MotionSP_FrequencyDomainProcess+0x178>)
 800cad4:	f006 fe5c 	bl	8013790 <arm_mult_f32>
 800cad8:	4a46      	ldr	r2, [pc, #280]	; (800cbf4 <MotionSP_FrequencyDomainProcess+0x1a8>)
 800cada:	4940      	ldr	r1, [pc, #256]	; (800cbdc <MotionSP_FrequencyDomainProcess+0x190>)
 800cadc:	4842      	ldr	r0, [pc, #264]	; (800cbe8 <MotionSP_FrequencyDomainProcess+0x19c>)
 800cade:	f7ff fde9 	bl	800c6b4 <MotionSP_fftCalc>
 800cae2:	783b      	ldrb	r3, [r7, #0]
 800cae4:	f8b4 2080 	ldrh.w	r2, [r4, #128]	; 0x80
 800cae8:	4942      	ldr	r1, [pc, #264]	; (800cbf4 <MotionSP_FrequencyDomainProcess+0x1a8>)
 800caea:	9300      	str	r3, [sp, #0]
 800caec:	4842      	ldr	r0, [pc, #264]	; (800cbf8 <MotionSP_FrequencyDomainProcess+0x1ac>)
 800caee:	4b43      	ldr	r3, [pc, #268]	; (800cbfc <MotionSP_FrequencyDomainProcess+0x1b0>)
 800caf0:	f7ff ff48 	bl	800c984 <MotionSP_fftAverageCalcTime>
 800caf4:	b150      	cbz	r0, 800cb0c <MotionSP_FrequencyDomainProcess+0xc0>
 800caf6:	4b3e      	ldr	r3, [pc, #248]	; (800cbf0 <MotionSP_FrequencyDomainProcess+0x1a4>)
 800caf8:	8872      	ldrh	r2, [r6, #2]
 800cafa:	829a      	strh	r2, [r3, #20]
 800cafc:	2300      	movs	r3, #0
 800cafe:	8073      	strh	r3, [r6, #2]
 800cb00:	f894 3082 	ldrb.w	r3, [r4, #130]	; 0x82
 800cb04:	f043 0302 	orr.w	r3, r3, #2
 800cb08:	f884 3082 	strb.w	r3, [r4, #130]	; 0x82
 800cb0c:	882b      	ldrh	r3, [r5, #0]
 800cb0e:	4a33      	ldr	r2, [pc, #204]	; (800cbdc <MotionSP_FrequencyDomainProcess+0x190>)
 800cb10:	4933      	ldr	r1, [pc, #204]	; (800cbe0 <MotionSP_FrequencyDomainProcess+0x194>)
 800cb12:	482e      	ldr	r0, [pc, #184]	; (800cbcc <MotionSP_FrequencyDomainProcess+0x180>)
 800cb14:	f006 fe3c 	bl	8013790 <arm_mult_f32>
 800cb18:	4a39      	ldr	r2, [pc, #228]	; (800cc00 <MotionSP_FrequencyDomainProcess+0x1b4>)
 800cb1a:	4930      	ldr	r1, [pc, #192]	; (800cbdc <MotionSP_FrequencyDomainProcess+0x190>)
 800cb1c:	4832      	ldr	r0, [pc, #200]	; (800cbe8 <MotionSP_FrequencyDomainProcess+0x19c>)
 800cb1e:	f7ff fdc9 	bl	800c6b4 <MotionSP_fftCalc>
 800cb22:	783b      	ldrb	r3, [r7, #0]
 800cb24:	f8b4 2080 	ldrh.w	r2, [r4, #128]	; 0x80
 800cb28:	4935      	ldr	r1, [pc, #212]	; (800cc00 <MotionSP_FrequencyDomainProcess+0x1b4>)
 800cb2a:	9300      	str	r3, [sp, #0]
 800cb2c:	4835      	ldr	r0, [pc, #212]	; (800cc04 <MotionSP_FrequencyDomainProcess+0x1b8>)
 800cb2e:	4b36      	ldr	r3, [pc, #216]	; (800cc08 <MotionSP_FrequencyDomainProcess+0x1bc>)
 800cb30:	f7ff ff28 	bl	800c984 <MotionSP_fftAverageCalcTime>
 800cb34:	b150      	cbz	r0, 800cb4c <MotionSP_FrequencyDomainProcess+0x100>
 800cb36:	4b2e      	ldr	r3, [pc, #184]	; (800cbf0 <MotionSP_FrequencyDomainProcess+0x1a4>)
 800cb38:	88b2      	ldrh	r2, [r6, #4]
 800cb3a:	841a      	strh	r2, [r3, #32]
 800cb3c:	2300      	movs	r3, #0
 800cb3e:	80b3      	strh	r3, [r6, #4]
 800cb40:	f894 3082 	ldrb.w	r3, [r4, #130]	; 0x82
 800cb44:	f043 0304 	orr.w	r3, r3, #4
 800cb48:	f884 3082 	strb.w	r3, [r4, #130]	; 0x82
 800cb4c:	f894 3082 	ldrb.w	r3, [r4, #130]	; 0x82
 800cb50:	f3c3 0200 	ubfx	r2, r3, #0, #1
 800cb54:	f3c3 0140 	ubfx	r1, r3, #1, #1
 800cb58:	400a      	ands	r2, r1
 800cb5a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800cb5e:	421a      	tst	r2, r3
 800cb60:	d024      	beq.n	800cbac <MotionSP_FrequencyDomainProcess+0x160>
 800cb62:	f8b4 1080 	ldrh.w	r1, [r4, #128]	; 0x80
 800cb66:	4821      	ldr	r0, [pc, #132]	; (800cbec <MotionSP_FrequencyDomainProcess+0x1a0>)
 800cb68:	f7ff fdb6 	bl	800c6d8 <MotionSP_fftAdapt>
 800cb6c:	4a20      	ldr	r2, [pc, #128]	; (800cbf0 <MotionSP_FrequencyDomainProcess+0x1a4>)
 800cb6e:	f8b4 1080 	ldrh.w	r1, [r4, #128]	; 0x80
 800cb72:	481e      	ldr	r0, [pc, #120]	; (800cbec <MotionSP_FrequencyDomainProcess+0x1a0>)
 800cb74:	f7ff fe02 	bl	800c77c <MotionSP_fftFindPeak>
 800cb78:	4b24      	ldr	r3, [pc, #144]	; (800cc0c <MotionSP_FrequencyDomainProcess+0x1c0>)
 800cb7a:	4a25      	ldr	r2, [pc, #148]	; (800cc10 <MotionSP_FrequencyDomainProcess+0x1c4>)
 800cb7c:	89a9      	ldrh	r1, [r5, #12]
 800cb7e:	481b      	ldr	r0, [pc, #108]	; (800cbec <MotionSP_FrequencyDomainProcess+0x1a0>)
 800cb80:	f7ff ff32 	bl	800c9e8 <MotionSP_evalMaxAmplitudeRange>
 800cb84:	4b23      	ldr	r3, [pc, #140]	; (800cc14 <MotionSP_FrequencyDomainProcess+0x1c8>)
 800cb86:	4a24      	ldr	r2, [pc, #144]	; (800cc18 <MotionSP_FrequencyDomainProcess+0x1cc>)
 800cb88:	89a9      	ldrh	r1, [r5, #12]
 800cb8a:	481b      	ldr	r0, [pc, #108]	; (800cbf8 <MotionSP_FrequencyDomainProcess+0x1ac>)
 800cb8c:	f7ff ff2c 	bl	800c9e8 <MotionSP_evalMaxAmplitudeRange>
 800cb90:	4b22      	ldr	r3, [pc, #136]	; (800cc1c <MotionSP_FrequencyDomainProcess+0x1d0>)
 800cb92:	4a23      	ldr	r2, [pc, #140]	; (800cc20 <MotionSP_FrequencyDomainProcess+0x1d4>)
 800cb94:	89a9      	ldrh	r1, [r5, #12]
 800cb96:	481b      	ldr	r0, [pc, #108]	; (800cc04 <MotionSP_FrequencyDomainProcess+0x1b8>)
 800cb98:	f7ff ff26 	bl	800c9e8 <MotionSP_evalMaxAmplitudeRange>
 800cb9c:	f894 3082 	ldrb.w	r3, [r4, #130]	; 0x82
 800cba0:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 800cba4:	f36f 0382 	bfc	r3, #2, #1
 800cba8:	f884 3082 	strb.w	r3, [r4, #130]	; 0x82
 800cbac:	b003      	add	sp, #12
 800cbae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cbb0:	2000b10c 	.word	0x2000b10c
 800cbb4:	200085b0 	.word	0x200085b0
 800cbb8:	2000b0f8 	.word	0x2000b0f8
 800cbbc:	20011acc 	.word	0x20011acc
 800cbc0:	200041e4 	.word	0x200041e4
 800cbc4:	200051e4 	.word	0x200051e4
 800cbc8:	2000c444 	.word	0x2000c444
 800cbcc:	200061e4 	.word	0x200061e4
 800cbd0:	2000d774 	.word	0x2000d774
 800cbd4:	200098d8 	.word	0x200098d8
 800cbd8:	20003160 	.word	0x20003160
 800cbdc:	200071e4 	.word	0x200071e4
 800cbe0:	200085d8 	.word	0x200085d8
 800cbe4:	2000eacc 	.word	0x2000eacc
 800cbe8:	200098e0 	.word	0x200098e0
 800cbec:	200098f8 	.word	0x200098f8
 800cbf0:	200085b4 	.word	0x200085b4
 800cbf4:	2000facc 	.word	0x2000facc
 800cbf8:	2000a0f8 	.word	0x2000a0f8
 800cbfc:	200098da 	.word	0x200098da
 800cc00:	20010acc 	.word	0x20010acc
 800cc04:	2000a8f8 	.word	0x2000a8f8
 800cc08:	200098dc 	.word	0x200098dc
 800cc0c:	20011ad0 	.word	0x20011ad0
 800cc10:	200095d8 	.word	0x200095d8
 800cc14:	20011bd0 	.word	0x20011bd0
 800cc18:	200096d8 	.word	0x200096d8
 800cc1c:	20011cd0 	.word	0x20011cd0
 800cc20:	200097d8 	.word	0x200097d8

0800cc24 <Reset_Handler>:
 800cc24:	f8df d034 	ldr.w	sp, [pc, #52]	; 800cc5c <LoopFillZerobss+0x14>
 800cc28:	2100      	movs	r1, #0
 800cc2a:	e003      	b.n	800cc34 <LoopCopyDataInit>

0800cc2c <CopyDataInit>:
 800cc2c:	4b0c      	ldr	r3, [pc, #48]	; (800cc60 <LoopFillZerobss+0x18>)
 800cc2e:	585b      	ldr	r3, [r3, r1]
 800cc30:	5043      	str	r3, [r0, r1]
 800cc32:	3104      	adds	r1, #4

0800cc34 <LoopCopyDataInit>:
 800cc34:	480b      	ldr	r0, [pc, #44]	; (800cc64 <LoopFillZerobss+0x1c>)
 800cc36:	4b0c      	ldr	r3, [pc, #48]	; (800cc68 <LoopFillZerobss+0x20>)
 800cc38:	1842      	adds	r2, r0, r1
 800cc3a:	429a      	cmp	r2, r3
 800cc3c:	d3f6      	bcc.n	800cc2c <CopyDataInit>
 800cc3e:	4a0b      	ldr	r2, [pc, #44]	; (800cc6c <LoopFillZerobss+0x24>)
 800cc40:	e002      	b.n	800cc48 <LoopFillZerobss>

0800cc42 <FillZerobss>:
 800cc42:	2300      	movs	r3, #0
 800cc44:	f842 3b04 	str.w	r3, [r2], #4

0800cc48 <LoopFillZerobss>:
 800cc48:	4b09      	ldr	r3, [pc, #36]	; (800cc70 <LoopFillZerobss+0x28>)
 800cc4a:	429a      	cmp	r2, r3
 800cc4c:	d3f9      	bcc.n	800cc42 <FillZerobss>
 800cc4e:	f7fa fe27 	bl	80078a0 <SystemInit>
 800cc52:	f009 f96f 	bl	8015f34 <__libc_init_array>
 800cc56:	f001 fb7d 	bl	800e354 <main>
 800cc5a:	4770      	bx	lr
 800cc5c:	2001ffff 	.word	0x2001ffff
 800cc60:	0802fc70 	.word	0x0802fc70
 800cc64:	20000000 	.word	0x20000000
 800cc68:	20000aac 	.word	0x20000aac
 800cc6c:	20000ab0 	.word	0x20000ab0
 800cc70:	20012770 	.word	0x20012770

0800cc74 <ADC_IRQHandler>:
 800cc74:	e7fe      	b.n	800cc74 <ADC_IRQHandler>
	...

0800cc78 <_sbrk>:
 800cc78:	b508      	push	{r3, lr}
 800cc7a:	4b0c      	ldr	r3, [pc, #48]	; (800ccac <_sbrk+0x34>)
 800cc7c:	6819      	ldr	r1, [r3, #0]
 800cc7e:	4602      	mov	r2, r0
 800cc80:	b909      	cbnz	r1, 800cc86 <_sbrk+0xe>
 800cc82:	490b      	ldr	r1, [pc, #44]	; (800ccb0 <_sbrk+0x38>)
 800cc84:	6019      	str	r1, [r3, #0]
 800cc86:	490b      	ldr	r1, [pc, #44]	; (800ccb4 <_sbrk+0x3c>)
 800cc88:	6818      	ldr	r0, [r3, #0]
 800cc8a:	6809      	ldr	r1, [r1, #0]
 800cc8c:	6809      	ldr	r1, [r1, #0]
 800cc8e:	4402      	add	r2, r0
 800cc90:	f5a1 7100 	sub.w	r1, r1, #512	; 0x200
 800cc94:	428a      	cmp	r2, r1
 800cc96:	d906      	bls.n	800cca6 <_sbrk+0x2e>
 800cc98:	f008 ffcc 	bl	8015c34 <__errno>
 800cc9c:	230c      	movs	r3, #12
 800cc9e:	6003      	str	r3, [r0, #0]
 800cca0:	f04f 30ff 	mov.w	r0, #4294967295
 800cca4:	bd08      	pop	{r3, pc}
 800cca6:	601a      	str	r2, [r3, #0]
 800cca8:	e7fc      	b.n	800cca4 <_sbrk+0x2c>
 800ccaa:	bf00      	nop
 800ccac:	200081e4 	.word	0x200081e4
 800ccb0:	20012770 	.word	0x20012770
 800ccb4:	e000ed08 	.word	0xe000ed08

0800ccb8 <_write>:
 800ccb8:	b570      	push	{r4, r5, r6, lr}
 800ccba:	460e      	mov	r6, r1
 800ccbc:	4615      	mov	r5, r2
 800ccbe:	460c      	mov	r4, r1
 800ccc0:	1ba3      	subs	r3, r4, r6
 800ccc2:	429d      	cmp	r5, r3
 800ccc4:	dc01      	bgt.n	800ccca <_write+0x12>
 800ccc6:	4628      	mov	r0, r5
 800ccc8:	bd70      	pop	{r4, r5, r6, pc}
 800ccca:	f814 0b01 	ldrb.w	r0, [r4], #1
 800ccce:	f001 f947 	bl	800df60 <__io_putchar>
 800ccd2:	e7f5      	b.n	800ccc0 <_write+0x8>

0800ccd4 <_close>:
 800ccd4:	f04f 30ff 	mov.w	r0, #4294967295
 800ccd8:	4770      	bx	lr

0800ccda <_fstat>:
 800ccda:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ccde:	604b      	str	r3, [r1, #4]
 800cce0:	2000      	movs	r0, #0
 800cce2:	4770      	bx	lr

0800cce4 <_isatty>:
 800cce4:	2001      	movs	r0, #1
 800cce6:	4770      	bx	lr

0800cce8 <_lseek>:
 800cce8:	2000      	movs	r0, #0
 800ccea:	4770      	bx	lr

0800ccec <_read>:
 800ccec:	b510      	push	{r4, lr}
 800ccee:	460c      	mov	r4, r1
 800ccf0:	f001 f938 	bl	800df64 <__io_getchar>
 800ccf4:	7020      	strb	r0, [r4, #0]
 800ccf6:	2001      	movs	r0, #1
 800ccf8:	bd10      	pop	{r4, pc}
	...

0800ccfc <MotionSP_SetDefaultVibrationParam>:
 800ccfc:	b508      	push	{r3, lr}
 800ccfe:	4812      	ldr	r0, [pc, #72]	; (800cd48 <MotionSP_SetDefaultVibrationParam+0x4c>)
 800cd00:	f009 fa7c 	bl	80161fc <puts>
 800cd04:	4811      	ldr	r0, [pc, #68]	; (800cd4c <MotionSP_SetDefaultVibrationParam+0x50>)
 800cd06:	f009 fa79 	bl	80161fc <puts>
 800cd0a:	4811      	ldr	r0, [pc, #68]	; (800cd50 <MotionSP_SetDefaultVibrationParam+0x54>)
 800cd0c:	f009 fa76 	bl	80161fc <puts>
 800cd10:	4b10      	ldr	r3, [pc, #64]	; (800cd54 <MotionSP_SetDefaultVibrationParam+0x58>)
 800cd12:	2203      	movs	r2, #3
 800cd14:	701a      	strb	r2, [r3, #0]
 800cd16:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 800cd1a:	805a      	strh	r2, [r3, #2]
 800cd1c:	809a      	strh	r2, [r3, #4]
 800cd1e:	2204      	movs	r2, #4
 800cd20:	80da      	strh	r2, [r3, #6]
 800cd22:	4b0d      	ldr	r3, [pc, #52]	; (800cd58 <MotionSP_SetDefaultVibrationParam+0x5c>)
 800cd24:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800cd28:	801a      	strh	r2, [r3, #0]
 800cd2a:	2232      	movs	r2, #50	; 0x32
 800cd2c:	805a      	strh	r2, [r3, #2]
 800cd2e:	2201      	movs	r2, #1
 800cd30:	809a      	strh	r2, [r3, #4]
 800cd32:	2200      	movs	r2, #0
 800cd34:	80da      	strh	r2, [r3, #6]
 800cd36:	f241 3288 	movw	r2, #5000	; 0x1388
 800cd3a:	811a      	strh	r2, [r3, #8]
 800cd3c:	2208      	movs	r2, #8
 800cd3e:	819a      	strh	r2, [r3, #12]
 800cd40:	224b      	movs	r2, #75	; 0x4b
 800cd42:	729a      	strb	r2, [r3, #10]
 800cd44:	bd08      	pop	{r3, pc}
 800cd46:	bf00      	nop
 800cd48:	0801a383 	.word	0x0801a383
 800cd4c:	0801a3cd 	.word	0x0801a3cd
 800cd50:	0801a3ef 	.word	0x0801a3ef
 800cd54:	20011ee0 	.word	0x20011ee0
 800cd58:	2000b0f8 	.word	0x2000b0f8

0800cd5c <MotionSP_VibrationInit>:
 800cd5c:	b570      	push	{r4, r5, r6, lr}
 800cd5e:	4c28      	ldr	r4, [pc, #160]	; (800ce00 <MotionSP_VibrationInit+0xa4>)
 800cd60:	4828      	ldr	r0, [pc, #160]	; (800ce04 <MotionSP_VibrationInit+0xa8>)
 800cd62:	f009 f9d7 	bl	8016114 <iprintf>
 800cd66:	8826      	ldrh	r6, [r4, #0]
 800cd68:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800cd6c:	d845      	bhi.n	800cdfa <MotionSP_VibrationInit+0x9e>
 800cd6e:	4b26      	ldr	r3, [pc, #152]	; (800ce08 <MotionSP_VibrationInit+0xac>)
 800cd70:	f643 1298 	movw	r2, #14744	; 0x3998
 800cd74:	2100      	movs	r1, #0
 800cd76:	4618      	mov	r0, r3
 800cd78:	f009 f91b 	bl	8015fb2 <memset>
 800cd7c:	ee07 6a90 	vmov	s15, r6
 800cd80:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800ce0c <MotionSP_VibrationInit+0xb0>
 800cd84:	4b22      	ldr	r3, [pc, #136]	; (800ce10 <MotionSP_VibrationInit+0xb4>)
 800cd86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cd8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cd8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cd92:	8042      	strh	r2, [r0, #2]
 800cd94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cd98:	2100      	movs	r1, #0
 800cd9a:	ee17 2a90 	vmov	r2, s15
 800cd9e:	8002      	strh	r2, [r0, #0]
 800cda0:	0872      	lsrs	r2, r6, #1
 800cda2:	801a      	strh	r2, [r3, #0]
 800cda4:	481b      	ldr	r0, [pc, #108]	; (800ce14 <MotionSP_VibrationInit+0xb8>)
 800cda6:	2224      	movs	r2, #36	; 0x24
 800cda8:	f009 f903 	bl	8015fb2 <memset>
 800cdac:	4b1a      	ldr	r3, [pc, #104]	; (800ce18 <MotionSP_VibrationInit+0xbc>)
 800cdae:	7922      	ldrb	r2, [r4, #4]
 800cdb0:	481a      	ldr	r0, [pc, #104]	; (800ce1c <MotionSP_VibrationInit+0xc0>)
 800cdb2:	2500      	movs	r5, #0
 800cdb4:	601d      	str	r5, [r3, #0]
 800cdb6:	809d      	strh	r5, [r3, #4]
 800cdb8:	4631      	mov	r1, r6
 800cdba:	f7ff fcfb 	bl	800c7b4 <MotionSP_SetWindFiltArray>
 800cdbe:	4b18      	ldr	r3, [pc, #96]	; (800ce20 <MotionSP_VibrationInit+0xc4>)
 800cdc0:	8821      	ldrh	r1, [r4, #0]
 800cdc2:	4818      	ldr	r0, [pc, #96]	; (800ce24 <MotionSP_VibrationInit+0xc8>)
 800cdc4:	701d      	strb	r5, [r3, #0]
 800cdc6:	f005 fc95 	bl	80126f4 <arm_rfft_fast_init_f32>
 800cdca:	8823      	ldrh	r3, [r4, #0]
 800cdcc:	4a16      	ldr	r2, [pc, #88]	; (800ce28 <MotionSP_VibrationInit+0xcc>)
 800cdce:	4c17      	ldr	r4, [pc, #92]	; (800ce2c <MotionSP_VibrationInit+0xd0>)
 800cdd0:	3b01      	subs	r3, #1
 800cdd2:	8013      	strh	r3, [r2, #0]
 800cdd4:	7823      	ldrb	r3, [r4, #0]
 800cdd6:	b123      	cbz	r3, 800cde2 <MotionSP_VibrationInit+0x86>
 800cdd8:	4b15      	ldr	r3, [pc, #84]	; (800ce30 <MotionSP_VibrationInit+0xd4>)
 800cdda:	6818      	ldr	r0, [r3, #0]
 800cddc:	f009 f8d6 	bl	8015f8c <free>
 800cde0:	7025      	strb	r5, [r4, #0]
 800cde2:	4a14      	ldr	r2, [pc, #80]	; (800ce34 <MotionSP_VibrationInit+0xd8>)
 800cde4:	4814      	ldr	r0, [pc, #80]	; (800ce38 <MotionSP_VibrationInit+0xdc>)
 800cde6:	2300      	movs	r3, #0
 800cde8:	7013      	strb	r3, [r2, #0]
 800cdea:	4a14      	ldr	r2, [pc, #80]	; (800ce3c <MotionSP_VibrationInit+0xe0>)
 800cdec:	7063      	strb	r3, [r4, #1]
 800cdee:	2101      	movs	r1, #1
 800cdf0:	7011      	strb	r1, [r2, #0]
 800cdf2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cdf6:	f009 ba01 	b.w	80161fc <puts>
 800cdfa:	4811      	ldr	r0, [pc, #68]	; (800ce40 <MotionSP_VibrationInit+0xe4>)
 800cdfc:	e7f9      	b.n	800cdf2 <MotionSP_VibrationInit+0x96>
 800cdfe:	bf00      	nop
 800ce00:	2000b0f8 	.word	0x2000b0f8
 800ce04:	0801a419 	.word	0x0801a419
 800ce08:	2000b10c 	.word	0x2000b10c
 800ce0c:	3f99999a 	.word	0x3f99999a
 800ce10:	200031e0 	.word	0x200031e0
 800ce14:	2000eaa4 	.word	0x2000eaa4
 800ce18:	200098d8 	.word	0x200098d8
 800ce1c:	200085d8 	.word	0x200085d8
 800ce20:	2000eac8 	.word	0x2000eac8
 800ce24:	200098e0 	.word	0x200098e0
 800ce28:	200085b0 	.word	0x200085b0
 800ce2c:	200081e8 	.word	0x200081e8
 800ce30:	20011eec 	.word	0x20011eec
 800ce34:	20011acc 	.word	0x20011acc
 800ce38:	0801a433 	.word	0x0801a433
 800ce3c:	20000452 	.word	0x20000452
 800ce40:	0801a43c 	.word	0x0801a43c

0800ce44 <MotionSP_TimeDomainAlarmInit>:
 800ce44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce46:	4607      	mov	r7, r0
 800ce48:	4812      	ldr	r0, [pc, #72]	; (800ce94 <MotionSP_TimeDomainAlarmInit+0x50>)
 800ce4a:	461c      	mov	r4, r3
 800ce4c:	460e      	mov	r6, r1
 800ce4e:	4615      	mov	r5, r2
 800ce50:	f009 f9d4 	bl	80161fc <puts>
 800ce54:	2300      	movs	r3, #0
 800ce56:	703b      	strb	r3, [r7, #0]
 800ce58:	707b      	strb	r3, [r7, #1]
 800ce5a:	70bb      	strb	r3, [r7, #2]
 800ce5c:	70fb      	strb	r3, [r7, #3]
 800ce5e:	713b      	strb	r3, [r7, #4]
 800ce60:	717b      	strb	r3, [r7, #5]
 800ce62:	2300      	movs	r3, #0
 800ce64:	60f3      	str	r3, [r6, #12]
 800ce66:	6133      	str	r3, [r6, #16]
 800ce68:	6173      	str	r3, [r6, #20]
 800ce6a:	61b3      	str	r3, [r6, #24]
 800ce6c:	61f3      	str	r3, [r6, #28]
 800ce6e:	6233      	str	r3, [r6, #32]
 800ce70:	4b09      	ldr	r3, [pc, #36]	; (800ce98 <MotionSP_TimeDomainAlarmInit+0x54>)
 800ce72:	602b      	str	r3, [r5, #0]
 800ce74:	606b      	str	r3, [r5, #4]
 800ce76:	60ab      	str	r3, [r5, #8]
 800ce78:	4b08      	ldr	r3, [pc, #32]	; (800ce9c <MotionSP_TimeDomainAlarmInit+0x58>)
 800ce7a:	60eb      	str	r3, [r5, #12]
 800ce7c:	612b      	str	r3, [r5, #16]
 800ce7e:	616b      	str	r3, [r5, #20]
 800ce80:	4b07      	ldr	r3, [pc, #28]	; (800cea0 <MotionSP_TimeDomainAlarmInit+0x5c>)
 800ce82:	6023      	str	r3, [r4, #0]
 800ce84:	6063      	str	r3, [r4, #4]
 800ce86:	60a3      	str	r3, [r4, #8]
 800ce88:	4b06      	ldr	r3, [pc, #24]	; (800cea4 <MotionSP_TimeDomainAlarmInit+0x60>)
 800ce8a:	60e3      	str	r3, [r4, #12]
 800ce8c:	6123      	str	r3, [r4, #16]
 800ce8e:	6163      	str	r3, [r4, #20]
 800ce90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce92:	bf00      	nop
 800ce94:	0801a45e 	.word	0x0801a45e
 800ce98:	40b4cccd 	.word	0x40b4cccd
 800ce9c:	411a6666 	.word	0x411a6666
 800cea0:	40600000 	.word	0x40600000
 800cea4:	40d00000 	.word	0x40d00000

0800cea8 <MotionSP_FreqDomainAlarmInit>:
 800cea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ceaa:	4617      	mov	r7, r2
 800ceac:	4605      	mov	r5, r0
 800ceae:	4813      	ldr	r0, [pc, #76]	; (800cefc <MotionSP_FreqDomainAlarmInit+0x54>)
 800ceb0:	461e      	mov	r6, r3
 800ceb2:	460c      	mov	r4, r1
 800ceb4:	f009 f9a2 	bl	80161fc <puts>
 800ceb8:	22c0      	movs	r2, #192	; 0xc0
 800ceba:	2100      	movs	r1, #0
 800cebc:	4638      	mov	r0, r7
 800cebe:	f009 f878 	bl	8015fb2 <memset>
 800cec2:	2e10      	cmp	r6, #16
 800cec4:	d011      	beq.n	800ceea <MotionSP_FreqDomainAlarmInit+0x42>
 800cec6:	d802      	bhi.n	800cece <MotionSP_FreqDomainAlarmInit+0x26>
 800cec8:	2e08      	cmp	r6, #8
 800ceca:	d009      	beq.n	800cee0 <MotionSP_FreqDomainAlarmInit+0x38>
 800cecc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cece:	2e20      	cmp	r6, #32
 800ced0:	d00f      	beq.n	800cef2 <MotionSP_FreqDomainAlarmInit+0x4a>
 800ced2:	2e40      	cmp	r6, #64	; 0x40
 800ced4:	d1fa      	bne.n	800cecc <MotionSP_FreqDomainAlarmInit+0x24>
 800ced6:	4b0a      	ldr	r3, [pc, #40]	; (800cf00 <MotionSP_FreqDomainAlarmInit+0x58>)
 800ced8:	602b      	str	r3, [r5, #0]
 800ceda:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800cede:	e002      	b.n	800cee6 <MotionSP_FreqDomainAlarmInit+0x3e>
 800cee0:	4b08      	ldr	r3, [pc, #32]	; (800cf04 <MotionSP_FreqDomainAlarmInit+0x5c>)
 800cee2:	602b      	str	r3, [r5, #0]
 800cee4:	3360      	adds	r3, #96	; 0x60
 800cee6:	6023      	str	r3, [r4, #0]
 800cee8:	e7f0      	b.n	800cecc <MotionSP_FreqDomainAlarmInit+0x24>
 800ceea:	4b07      	ldr	r3, [pc, #28]	; (800cf08 <MotionSP_FreqDomainAlarmInit+0x60>)
 800ceec:	602b      	str	r3, [r5, #0]
 800ceee:	33c0      	adds	r3, #192	; 0xc0
 800cef0:	e7f9      	b.n	800cee6 <MotionSP_FreqDomainAlarmInit+0x3e>
 800cef2:	4b06      	ldr	r3, [pc, #24]	; (800cf0c <MotionSP_FreqDomainAlarmInit+0x64>)
 800cef4:	602b      	str	r3, [r5, #0]
 800cef6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800cefa:	e7f4      	b.n	800cee6 <MotionSP_FreqDomainAlarmInit+0x3e>
 800cefc:	0801a47f 	.word	0x0801a47f
 800cf00:	080199f8 	.word	0x080199f8
 800cf04:	080194b8 	.word	0x080194b8
 800cf08:	08019578 	.word	0x08019578
 800cf0c:	080196f8 	.word	0x080196f8

0800cf10 <SetAccelerometerParameters>:
 800cf10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf14:	ed2d 8b02 	vpush	{d8}
 800cf18:	4e87      	ldr	r6, [pc, #540]	; (800d138 <SetAccelerometerParameters+0x228>)
 800cf1a:	4888      	ldr	r0, [pc, #544]	; (800d13c <SetAccelerometerParameters+0x22c>)
 800cf1c:	b085      	sub	sp, #20
 800cf1e:	f009 f96d 	bl	80161fc <puts>
 800cf22:	2400      	movs	r4, #0
 800cf24:	2103      	movs	r1, #3
 800cf26:	2002      	movs	r0, #2
 800cf28:	e9c6 4400 	strd	r4, r4, [r6]
 800cf2c:	60b4      	str	r4, [r6, #8]
 800cf2e:	f004 fcef 	bl	8011910 <IKS01A2_MOTION_SENSOR_Enable_HP_Filter>
 800cf32:	b241      	sxtb	r1, r0
 800cf34:	2900      	cmp	r1, #0
 800cf36:	f000 80d7 	beq.w	800d0e8 <SetAccelerometerParameters+0x1d8>
 800cf3a:	4881      	ldr	r0, [pc, #516]	; (800d140 <SetAccelerometerParameters+0x230>)
 800cf3c:	f009 f8ea 	bl	8016114 <iprintf>
 800cf40:	4f80      	ldr	r7, [pc, #512]	; (800d144 <SetAccelerometerParameters+0x234>)
 800cf42:	2102      	movs	r1, #2
 800cf44:	4608      	mov	r0, r1
 800cf46:	88fa      	ldrh	r2, [r7, #6]
 800cf48:	f004 fcba 	bl	80118c0 <IKS01A2_MOTION_SENSOR_SetFullScale>
 800cf4c:	b241      	sxtb	r1, r0
 800cf4e:	2900      	cmp	r1, #0
 800cf50:	f000 80cf 	beq.w	800d0f2 <SetAccelerometerParameters+0x1e2>
 800cf54:	487c      	ldr	r0, [pc, #496]	; (800d148 <SetAccelerometerParameters+0x238>)
 800cf56:	f009 f8dd 	bl	8016114 <iprintf>
 800cf5a:	2400      	movs	r4, #0
 800cf5c:	887b      	ldrh	r3, [r7, #2]
 800cf5e:	ee00 3a10 	vmov	s0, r3
 800cf62:	2102      	movs	r1, #2
 800cf64:	4608      	mov	r0, r1
 800cf66:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 800cf6a:	f004 fc83 	bl	8011874 <IKS01A2_MOTION_SENSOR_SetOutputDataRate>
 800cf6e:	b241      	sxtb	r1, r0
 800cf70:	2900      	cmp	r1, #0
 800cf72:	f000 80c7 	beq.w	800d104 <SetAccelerometerParameters+0x1f4>
 800cf76:	4875      	ldr	r0, [pc, #468]	; (800d14c <SetAccelerometerParameters+0x23c>)
 800cf78:	f009 f8cc 	bl	8016114 <iprintf>
 800cf7c:	2400      	movs	r4, #0
 800cf7e:	2028      	movs	r0, #40	; 0x28
 800cf80:	f001 f9a6 	bl	800e2d0 <HAL_Delay>
 800cf84:	887b      	ldrh	r3, [r7, #2]
 800cf86:	f8df 91f4 	ldr.w	r9, [pc, #500]	; 800d17c <SetAccelerometerParameters+0x26c>
 800cf8a:	ee00 3a10 	vmov	s0, r3
 800cf8e:	2102      	movs	r1, #2
 800cf90:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 800cf94:	4608      	mov	r0, r1
 800cf96:	f004 fc6d 	bl	8011874 <IKS01A2_MOTION_SENSOR_SetOutputDataRate>
 800cf9a:	2102      	movs	r1, #2
 800cf9c:	88fa      	ldrh	r2, [r7, #6]
 800cf9e:	4608      	mov	r0, r1
 800cfa0:	f004 fc8e 	bl	80118c0 <IKS01A2_MOTION_SENSOR_SetFullScale>
 800cfa4:	2102      	movs	r1, #2
 800cfa6:	4a6a      	ldr	r2, [pc, #424]	; (800d150 <SetAccelerometerParameters+0x240>)
 800cfa8:	4608      	mov	r0, r1
 800cfaa:	f004 fc3b 	bl	8011824 <IKS01A2_MOTION_SENSOR_GetSensitivity>
 800cfae:	7839      	ldrb	r1, [r7, #0]
 800cfb0:	2002      	movs	r0, #2
 800cfb2:	f004 fcad 	bl	8011910 <IKS01A2_MOTION_SENSOR_Enable_HP_Filter>
 800cfb6:	f04f 0a01 	mov.w	sl, #1
 800cfba:	f04f 0b00 	mov.w	fp, #0
 800cfbe:	f04f 0800 	mov.w	r8, #0
 800cfc2:	210b      	movs	r1, #11
 800cfc4:	2002      	movs	r0, #2
 800cfc6:	f004 fccf 	bl	8011968 <IKS01A2_MOTION_SENSOR_DRDY_Set_Mode>
 800cfca:	2101      	movs	r1, #1
 800cfcc:	2002      	movs	r0, #2
 800cfce:	f004 fcb5 	bl	801193c <IKS01A2_MOTION_SENSOR_Set_INT2_DRDY>
 800cfd2:	4b60      	ldr	r3, [pc, #384]	; (800d154 <SetAccelerometerParameters+0x244>)
 800cfd4:	9300      	str	r3, [sp, #0]
 800cfd6:	f883 b008 	strb.w	fp, [r3, #8]
 800cfda:	f001 ff6f 	bl	800eebc <BSP_GetTick>
 800cfde:	9b00      	ldr	r3, [sp, #0]
 800cfe0:	4602      	mov	r2, r0
 800cfe2:	2500      	movs	r5, #0
 800cfe4:	7a19      	ldrb	r1, [r3, #8]
 800cfe6:	b119      	cbz	r1, 800cff0 <SetAccelerometerParameters+0xe0>
 800cfe8:	3501      	adds	r5, #1
 800cfea:	f883 b008 	strb.w	fp, [r3, #8]
 800cfee:	b2ad      	uxth	r5, r5
 800cff0:	9303      	str	r3, [sp, #12]
 800cff2:	9200      	str	r2, [sp, #0]
 800cff4:	f001 ff62 	bl	800eebc <BSP_GetTick>
 800cff8:	9a00      	ldr	r2, [sp, #0]
 800cffa:	9b03      	ldr	r3, [sp, #12]
 800cffc:	1a80      	subs	r0, r0, r2
 800cffe:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800d002:	d3ef      	bcc.n	800cfe4 <SetAccelerometerParameters+0xd4>
 800d004:	2100      	movs	r1, #0
 800d006:	2002      	movs	r0, #2
 800d008:	f004 fc98 	bl	801193c <IKS01A2_MOTION_SENSOR_Set_INT2_DRDY>
 800d00c:	8878      	ldrh	r0, [r7, #2]
 800d00e:	f7f7 fb01 	bl	8004614 <__aeabi_i2d>
 800d012:	a345      	add	r3, pc, #276	; (adr r3, 800d128 <SetAccelerometerParameters+0x218>)
 800d014:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d018:	e9cd 0100 	strd	r0, r1, [sp]
 800d01c:	f7f7 fb64 	bl	80046e8 <__aeabi_dmul>
 800d020:	4642      	mov	r2, r8
 800d022:	464b      	mov	r3, r9
 800d024:	f7f7 fb60 	bl	80046e8 <__aeabi_dmul>
 800d028:	4642      	mov	r2, r8
 800d02a:	464b      	mov	r3, r9
 800d02c:	f7f7 fc86 	bl	800493c <__aeabi_ddiv>
 800d030:	f7f7 fe32 	bl	8004c98 <__aeabi_d2uiz>
 800d034:	b280      	uxth	r0, r0
 800d036:	42a8      	cmp	r0, r5
 800d038:	d868      	bhi.n	800d10c <SetAccelerometerParameters+0x1fc>
 800d03a:	a33d      	add	r3, pc, #244	; (adr r3, 800d130 <SetAccelerometerParameters+0x220>)
 800d03c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d040:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d044:	f7f7 fb50 	bl	80046e8 <__aeabi_dmul>
 800d048:	4642      	mov	r2, r8
 800d04a:	464b      	mov	r3, r9
 800d04c:	f7f7 fb4c 	bl	80046e8 <__aeabi_dmul>
 800d050:	4642      	mov	r2, r8
 800d052:	464b      	mov	r3, r9
 800d054:	f7f7 fc72 	bl	800493c <__aeabi_ddiv>
 800d058:	f7f7 fe1e 	bl	8004c98 <__aeabi_d2uiz>
 800d05c:	b280      	uxth	r0, r0
 800d05e:	42a8      	cmp	r0, r5
 800d060:	d354      	bcc.n	800d10c <SetAccelerometerParameters+0x1fc>
 800d062:	ee07 5a90 	vmov	s15, r5
 800d066:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d06a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d06e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800d072:	4b39      	ldr	r3, [pc, #228]	; (800d158 <SetAccelerometerParameters+0x248>)
 800d074:	885b      	ldrh	r3, [r3, #2]
 800d076:	edc6 7a00 	vstr	s15, [r6]
 800d07a:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800d15c <SetAccelerometerParameters+0x24c>
 800d07e:	edc6 6a01 	vstr	s13, [r6, #4]
 800d082:	ee07 3a90 	vmov	s15, r3
 800d086:	ee27 7a66 	vnmul.f32	s14, s14, s13
 800d08a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d08e:	eec7 7a27 	vdiv.f32	s15, s14, s15
 800d092:	ee17 0a90 	vmov	r0, s15
 800d096:	f7f7 facf 	bl	8004638 <__aeabi_f2d>
 800d09a:	ec41 0b10 	vmov	d0, r0, r1
 800d09e:	f00a f80f 	bl	80170c0 <exp>
 800d0a2:	ec51 0b10 	vmov	r0, r1, d0
 800d0a6:	f7f7 fe17 	bl	8004cd8 <__aeabi_d2f>
 800d0aa:	ed96 8a00 	vldr	s16, [r6]
 800d0ae:	60b0      	str	r0, [r6, #8]
 800d0b0:	eefd 8ac8 	vcvt.s32.f32	s17, s16
 800d0b4:	482a      	ldr	r0, [pc, #168]	; (800d160 <SetAccelerometerParameters+0x250>)
 800d0b6:	f009 f82d 	bl	8016114 <iprintf>
 800d0ba:	eef8 7a68 	vcvt.f32.u32	s15, s17
 800d0be:	ee18 1a90 	vmov	r1, s17
 800d0c2:	ee38 8a67 	vsub.f32	s16, s16, s15
 800d0c6:	eddf 7a27 	vldr	s15, [pc, #156]	; 800d164 <SetAccelerometerParameters+0x254>
 800d0ca:	4827      	ldr	r0, [pc, #156]	; (800d168 <SetAccelerometerParameters+0x258>)
 800d0cc:	ee28 8a27 	vmul.f32	s16, s16, s15
 800d0d0:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800d0d4:	ee17 2a90 	vmov	r2, s15
 800d0d8:	f009 f81c 	bl	8016114 <iprintf>
 800d0dc:	4620      	mov	r0, r4
 800d0de:	b005      	add	sp, #20
 800d0e0:	ecbd 8b02 	vpop	{d8}
 800d0e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0e8:	4820      	ldr	r0, [pc, #128]	; (800d16c <SetAccelerometerParameters+0x25c>)
 800d0ea:	f009 f887 	bl	80161fc <puts>
 800d0ee:	2401      	movs	r4, #1
 800d0f0:	e726      	b.n	800cf40 <SetAccelerometerParameters+0x30>
 800d0f2:	2102      	movs	r1, #2
 800d0f4:	4a16      	ldr	r2, [pc, #88]	; (800d150 <SetAccelerometerParameters+0x240>)
 800d0f6:	4608      	mov	r0, r1
 800d0f8:	f004 fb94 	bl	8011824 <IKS01A2_MOTION_SENSOR_GetSensitivity>
 800d0fc:	481c      	ldr	r0, [pc, #112]	; (800d170 <SetAccelerometerParameters+0x260>)
 800d0fe:	f009 f87d 	bl	80161fc <puts>
 800d102:	e72b      	b.n	800cf5c <SetAccelerometerParameters+0x4c>
 800d104:	481b      	ldr	r0, [pc, #108]	; (800d174 <SetAccelerometerParameters+0x264>)
 800d106:	f009 f879 	bl	80161fc <puts>
 800d10a:	e738      	b.n	800cf7e <SetAccelerometerParameters+0x6e>
 800d10c:	f10a 0a01 	add.w	sl, sl, #1
 800d110:	fa5f fa8a 	uxtb.w	sl, sl
 800d114:	f1ba 0f04 	cmp.w	sl, #4
 800d118:	f47f af53 	bne.w	800cfc2 <SetAccelerometerParameters+0xb2>
 800d11c:	4816      	ldr	r0, [pc, #88]	; (800d178 <SetAccelerometerParameters+0x268>)
 800d11e:	f009 f86d 	bl	80161fc <puts>
 800d122:	2400      	movs	r4, #0
 800d124:	e7da      	b.n	800d0dc <SetAccelerometerParameters+0x1cc>
 800d126:	bf00      	nop
 800d128:	cccccccd 	.word	0xcccccccd
 800d12c:	3feccccc 	.word	0x3feccccc
 800d130:	9999999a 	.word	0x9999999a
 800d134:	3ff19999 	.word	0x3ff19999
 800d138:	20011dd0 	.word	0x20011dd0
 800d13c:	0801a4a5 	.word	0x0801a4a5
 800d140:	0801a4c4 	.word	0x0801a4c4
 800d144:	20011ee0 	.word	0x20011ee0
 800d148:	0801a505 	.word	0x0801a505
 800d14c:	0801a54a 	.word	0x0801a54a
 800d150:	200081ec 	.word	0x200081ec
 800d154:	200081e8 	.word	0x200081e8
 800d158:	2000b0f8 	.word	0x2000b0f8
 800d15c:	447a0000 	.word	0x447a0000
 800d160:	0801a593 	.word	0x0801a593
 800d164:	42c80000 	.word	0x42c80000
 800d168:	0801a5b3 	.word	0x0801a5b3
 800d16c:	0801a4ef 	.word	0x0801a4ef
 800d170:	0801a533 	.word	0x0801a533
 800d174:	0801a579 	.word	0x0801a579
 800d178:	0801a5c5 	.word	0x0801a5c5
 800d17c:	408f4000 	.word	0x408f4000

0800d180 <MotionSP_ConfigFifo>:
 800d180:	b538      	push	{r3, r4, r5, lr}
 800d182:	4848      	ldr	r0, [pc, #288]	; (800d2a4 <MotionSP_ConfigFifo+0x124>)
 800d184:	4c48      	ldr	r4, [pc, #288]	; (800d2a8 <MotionSP_ConfigFifo+0x128>)
 800d186:	f009 f839 	bl	80161fc <puts>
 800d18a:	4b48      	ldr	r3, [pc, #288]	; (800d2ac <MotionSP_ConfigFifo+0x12c>)
 800d18c:	eddf 7a48 	vldr	s15, [pc, #288]	; 800d2b0 <MotionSP_ConfigFifo+0x130>
 800d190:	7a9a      	ldrb	r2, [r3, #10]
 800d192:	881b      	ldrh	r3, [r3, #0]
 800d194:	ee06 2a90 	vmov	s13, r2
 800d198:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800d19c:	2102      	movs	r1, #2
 800d19e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d1a2:	4608      	mov	r0, r1
 800d1a4:	2201      	movs	r2, #1
 800d1a6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800d1aa:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800d1ae:	ee07 3a90 	vmov	s15, r3
 800d1b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d1b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d1ba:	eeb6 7a08 	vmov.f32	s14, #104	; 0x3f400000  0.750
 800d1be:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d1c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d1c6:	ee17 3a90 	vmov	r3, s15
 800d1ca:	8123      	strh	r3, [r4, #8]
 800d1cc:	f004 fbe2 	bl	8011994 <IKS01A2_MOTION_SENSOR_FIFO_Set_Decimation>
 800d1d0:	b241      	sxtb	r1, r0
 800d1d2:	2900      	cmp	r1, #0
 800d1d4:	d04a      	beq.n	800d26c <MotionSP_ConfigFifo+0xec>
 800d1d6:	4837      	ldr	r0, [pc, #220]	; (800d2b4 <MotionSP_ConfigFifo+0x134>)
 800d1d8:	f008 ff9c 	bl	8016114 <iprintf>
 800d1dc:	88a3      	ldrh	r3, [r4, #4]
 800d1de:	ee00 3a10 	vmov	s0, r3
 800d1e2:	2002      	movs	r0, #2
 800d1e4:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 800d1e8:	f004 fbf4 	bl	80119d4 <IKS01A2_MOTION_SENSOR_FIFO_Set_ODR_Value>
 800d1ec:	b241      	sxtb	r1, r0
 800d1ee:	2900      	cmp	r1, #0
 800d1f0:	d040      	beq.n	800d274 <MotionSP_ConfigFifo+0xf4>
 800d1f2:	4831      	ldr	r0, [pc, #196]	; (800d2b8 <MotionSP_ConfigFifo+0x138>)
 800d1f4:	f008 ff8e 	bl	8016114 <iprintf>
 800d1f8:	8921      	ldrh	r1, [r4, #8]
 800d1fa:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800d1fe:	b289      	uxth	r1, r1
 800d200:	2002      	movs	r0, #2
 800d202:	f004 fc13 	bl	8011a2c <IKS01A2_MOTION_SENSOR_FIFO_Set_Watermark_Level>
 800d206:	b241      	sxtb	r1, r0
 800d208:	2900      	cmp	r1, #0
 800d20a:	d037      	beq.n	800d27c <MotionSP_ConfigFifo+0xfc>
 800d20c:	482b      	ldr	r0, [pc, #172]	; (800d2bc <MotionSP_ConfigFifo+0x13c>)
 800d20e:	f008 ff81 	bl	8016114 <iprintf>
 800d212:	2101      	movs	r1, #1
 800d214:	2002      	movs	r0, #2
 800d216:	f004 fc1f 	bl	8011a58 <IKS01A2_MOTION_SENSOR_FIFO_Set_Stop_On_Fth>
 800d21a:	b245      	sxtb	r5, r0
 800d21c:	b395      	cbz	r5, 800d284 <MotionSP_ConfigFifo+0x104>
 800d21e:	4629      	mov	r1, r5
 800d220:	4827      	ldr	r0, [pc, #156]	; (800d2c0 <MotionSP_ConfigFifo+0x140>)
 800d222:	f008 ff77 	bl	8016114 <iprintf>
 800d226:	8923      	ldrh	r3, [r4, #8]
 800d228:	2106      	movs	r1, #6
 800d22a:	4359      	muls	r1, r3
 800d22c:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800d230:	dd08      	ble.n	800d244 <MotionSP_ConfigFifo+0xc4>
 800d232:	b289      	uxth	r1, r1
 800d234:	4823      	ldr	r0, [pc, #140]	; (800d2c4 <MotionSP_ConfigFifo+0x144>)
 800d236:	f008 ff6d 	bl	8016114 <iprintf>
 800d23a:	4823      	ldr	r0, [pc, #140]	; (800d2c8 <MotionSP_ConfigFifo+0x148>)
 800d23c:	f008 ffde 	bl	80161fc <puts>
 800d240:	f001 f855 	bl	800e2ee <Error_Handler>
 800d244:	2106      	movs	r1, #6
 800d246:	2002      	movs	r0, #2
 800d248:	f004 fc1c 	bl	8011a84 <IKS01A2_MOTION_SENSOR_FIFO_Set_Mode>
 800d24c:	b1f0      	cbz	r0, 800d28c <MotionSP_ConfigFifo+0x10c>
 800d24e:	4629      	mov	r1, r5
 800d250:	481e      	ldr	r0, [pc, #120]	; (800d2cc <MotionSP_ConfigFifo+0x14c>)
 800d252:	f008 ff5f 	bl	8016114 <iprintf>
 800d256:	2101      	movs	r1, #1
 800d258:	2002      	movs	r0, #2
 800d25a:	f004 fbd1 	bl	8011a00 <IKS01A2_MOTION_SENSOR_FIFO_Set_INT2_FIFO_Full>
 800d25e:	b1c8      	cbz	r0, 800d294 <MotionSP_ConfigFifo+0x114>
 800d260:	4629      	mov	r1, r5
 800d262:	481b      	ldr	r0, [pc, #108]	; (800d2d0 <MotionSP_ConfigFifo+0x150>)
 800d264:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d268:	f008 bf54 	b.w	8016114 <iprintf>
 800d26c:	4819      	ldr	r0, [pc, #100]	; (800d2d4 <MotionSP_ConfigFifo+0x154>)
 800d26e:	f008 ffc5 	bl	80161fc <puts>
 800d272:	e7b3      	b.n	800d1dc <MotionSP_ConfigFifo+0x5c>
 800d274:	4818      	ldr	r0, [pc, #96]	; (800d2d8 <MotionSP_ConfigFifo+0x158>)
 800d276:	f008 ffc1 	bl	80161fc <puts>
 800d27a:	e7bd      	b.n	800d1f8 <MotionSP_ConfigFifo+0x78>
 800d27c:	4817      	ldr	r0, [pc, #92]	; (800d2dc <MotionSP_ConfigFifo+0x15c>)
 800d27e:	f008 ffbd 	bl	80161fc <puts>
 800d282:	e7c6      	b.n	800d212 <MotionSP_ConfigFifo+0x92>
 800d284:	4816      	ldr	r0, [pc, #88]	; (800d2e0 <MotionSP_ConfigFifo+0x160>)
 800d286:	f008 ffb9 	bl	80161fc <puts>
 800d28a:	e7cc      	b.n	800d226 <MotionSP_ConfigFifo+0xa6>
 800d28c:	4815      	ldr	r0, [pc, #84]	; (800d2e4 <MotionSP_ConfigFifo+0x164>)
 800d28e:	f008 ffb5 	bl	80161fc <puts>
 800d292:	e7e0      	b.n	800d256 <MotionSP_ConfigFifo+0xd6>
 800d294:	4814      	ldr	r0, [pc, #80]	; (800d2e8 <MotionSP_ConfigFifo+0x168>)
 800d296:	f008 ffb1 	bl	80161fc <puts>
 800d29a:	f7fa fb71 	bl	8007980 <HAL_GetTick>
 800d29e:	4b13      	ldr	r3, [pc, #76]	; (800d2ec <MotionSP_ConfigFifo+0x16c>)
 800d2a0:	60d8      	str	r0, [r3, #12]
 800d2a2:	bd38      	pop	{r3, r4, r5, pc}
 800d2a4:	0801a5e7 	.word	0x0801a5e7
 800d2a8:	20011ee0 	.word	0x20011ee0
 800d2ac:	2000b0f8 	.word	0x2000b0f8
 800d2b0:	42c80000 	.word	0x42c80000
 800d2b4:	0801a5f7 	.word	0x0801a5f7
 800d2b8:	0801a63e 	.word	0x0801a63e
 800d2bc:	0801a683 	.word	0x0801a683
 800d2c0:	0801a6d4 	.word	0x0801a6d4
 800d2c4:	0801a71d 	.word	0x0801a71d
 800d2c8:	0801a762 	.word	0x0801a762
 800d2cc:	0801a798 	.word	0x0801a798
 800d2d0:	0801a7ef 	.word	0x0801a7ef
 800d2d4:	0801a625 	.word	0x0801a625
 800d2d8:	0801a66b 	.word	0x0801a66b
 800d2dc:	0801a6b6 	.word	0x0801a6b6
 800d2e0:	0801a703 	.word	0x0801a703
 800d2e4:	0801a7ce 	.word	0x0801a7ce
 800d2e8:	0801a829 	.word	0x0801a829
 800d2ec:	200081e8 	.word	0x200081e8

0800d2f0 <enable_FIFO>:
 800d2f0:	b510      	push	{r4, lr}
 800d2f2:	2106      	movs	r1, #6
 800d2f4:	2002      	movs	r0, #2
 800d2f6:	f004 fbc5 	bl	8011a84 <IKS01A2_MOTION_SENSOR_FIFO_Set_Mode>
 800d2fa:	b108      	cbz	r0, 800d300 <enable_FIFO+0x10>
 800d2fc:	2000      	movs	r0, #0
 800d2fe:	bd10      	pop	{r4, pc}
 800d300:	2101      	movs	r1, #1
 800d302:	2002      	movs	r0, #2
 800d304:	f004 fb7c 	bl	8011a00 <IKS01A2_MOTION_SENSOR_FIFO_Set_INT2_FIFO_Full>
 800d308:	2800      	cmp	r0, #0
 800d30a:	d1f7      	bne.n	800d2fc <enable_FIFO+0xc>
 800d30c:	4b03      	ldr	r3, [pc, #12]	; (800d31c <enable_FIFO+0x2c>)
 800d30e:	4804      	ldr	r0, [pc, #16]	; (800d320 <enable_FIFO+0x30>)
 800d310:	2401      	movs	r4, #1
 800d312:	701c      	strb	r4, [r3, #0]
 800d314:	f008 ff72 	bl	80161fc <puts>
 800d318:	4620      	mov	r0, r4
 800d31a:	e7f0      	b.n	800d2fe <enable_FIFO+0xe>
 800d31c:	20008331 	.word	0x20008331
 800d320:	0801a84e 	.word	0x0801a84e

0800d324 <disable_FIFO>:
 800d324:	2100      	movs	r1, #0
 800d326:	b508      	push	{r3, lr}
 800d328:	2002      	movs	r0, #2
 800d32a:	f004 fbab 	bl	8011a84 <IKS01A2_MOTION_SENSOR_FIFO_Set_Mode>
 800d32e:	4601      	mov	r1, r0
 800d330:	b108      	cbz	r0, 800d336 <disable_FIFO+0x12>
 800d332:	2000      	movs	r0, #0
 800d334:	bd08      	pop	{r3, pc}
 800d336:	2002      	movs	r0, #2
 800d338:	f004 fb62 	bl	8011a00 <IKS01A2_MOTION_SENSOR_FIFO_Set_INT2_FIFO_Full>
 800d33c:	2800      	cmp	r0, #0
 800d33e:	d1f8      	bne.n	800d332 <disable_FIFO+0xe>
 800d340:	4b03      	ldr	r3, [pc, #12]	; (800d350 <disable_FIFO+0x2c>)
 800d342:	7018      	strb	r0, [r3, #0]
 800d344:	4803      	ldr	r0, [pc, #12]	; (800d354 <disable_FIFO+0x30>)
 800d346:	f008 ff59 	bl	80161fc <puts>
 800d34a:	2001      	movs	r0, #1
 800d34c:	e7f2      	b.n	800d334 <disable_FIFO+0x10>
 800d34e:	bf00      	nop
 800d350:	20008331 	.word	0x20008331
 800d354:	0801a85b 	.word	0x0801a85b

0800d358 <MotionSP_VibrationAnalysis>:
 800d358:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d35c:	4ccd      	ldr	r4, [pc, #820]	; (800d694 <MotionSP_VibrationAnalysis+0x33c>)
 800d35e:	7863      	ldrb	r3, [r4, #1]
 800d360:	2b00      	cmp	r3, #0
 800d362:	f040 8280 	bne.w	800d866 <MotionSP_VibrationAnalysis+0x50e>
 800d366:	4dcc      	ldr	r5, [pc, #816]	; (800d698 <MotionSP_VibrationAnalysis+0x340>)
 800d368:	4acc      	ldr	r2, [pc, #816]	; (800d69c <MotionSP_VibrationAnalysis+0x344>)
 800d36a:	886b      	ldrh	r3, [r5, #2]
 800d36c:	8851      	ldrh	r1, [r2, #2]
 800d36e:	4fcc      	ldr	r7, [pc, #816]	; (800d6a0 <MotionSP_VibrationAnalysis+0x348>)
 800d370:	4299      	cmp	r1, r3
 800d372:	f000 810c 	beq.w	800d58e <MotionSP_VibrationAnalysis+0x236>
 800d376:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d37a:	428b      	cmp	r3, r1
 800d37c:	f000 8107 	beq.w	800d58e <MotionSP_VibrationAnalysis+0x236>
 800d380:	8828      	ldrh	r0, [r5, #0]
 800d382:	7929      	ldrb	r1, [r5, #4]
 800d384:	4ec7      	ldr	r6, [pc, #796]	; (800d6a4 <MotionSP_VibrationAnalysis+0x34c>)
 800d386:	8053      	strh	r3, [r2, #2]
 800d388:	fb11 f100 	smulbb	r1, r1, r0
 800d38c:	7c22      	ldrb	r2, [r4, #16]
 800d38e:	440b      	add	r3, r1
 800d390:	8831      	ldrh	r1, [r6, #0]
 800d392:	fb12 f200 	smulbb	r2, r2, r0
 800d396:	440a      	add	r2, r1
 800d398:	b29b      	uxth	r3, r3
 800d39a:	b292      	uxth	r2, r2
 800d39c:	4293      	cmp	r3, r2
 800d39e:	f0c0 80f6 	bcc.w	800d58e <MotionSP_VibrationAnalysis+0x236>
 800d3a2:	f7fa faed 	bl	8007980 <HAL_GetTick>
 800d3a6:	68e3      	ldr	r3, [r4, #12]
 800d3a8:	1ac0      	subs	r0, r0, r3
 800d3aa:	4bbf      	ldr	r3, [pc, #764]	; (800d6a8 <MotionSP_VibrationAnalysis+0x350>)
 800d3ac:	891a      	ldrh	r2, [r3, #8]
 800d3ae:	4290      	cmp	r0, r2
 800d3b0:	469a      	mov	sl, r3
 800d3b2:	bf84      	itt	hi
 800d3b4:	2301      	movhi	r3, #1
 800d3b6:	703b      	strbhi	r3, [r7, #0]
 800d3b8:	f7ff fb48 	bl	800ca4c <MotionSP_FrequencyDomainProcess>
 800d3bc:	49bb      	ldr	r1, [pc, #748]	; (800d6ac <MotionSP_VibrationAnalysis+0x354>)
 800d3be:	4bbc      	ldr	r3, [pc, #752]	; (800d6b0 <MotionSP_VibrationAnalysis+0x358>)
 800d3c0:	edd1 6a03 	vldr	s13, [r1, #12]
 800d3c4:	ed91 7a04 	vldr	s14, [r1, #16]
 800d3c8:	edd1 7a05 	vldr	s15, [r1, #20]
 800d3cc:	ed9f 6ab9 	vldr	s12, [pc, #740]	; 800d6b4 <MotionSP_VibrationAnalysis+0x35c>
 800d3d0:	4ab9      	ldr	r2, [pc, #740]	; (800d6b8 <MotionSP_VibrationAnalysis+0x360>)
 800d3d2:	ee66 6a86 	vmul.f32	s13, s13, s12
 800d3d6:	ee27 7a06 	vmul.f32	s14, s14, s12
 800d3da:	ee67 7a86 	vmul.f32	s15, s15, s12
 800d3de:	ed93 6a00 	vldr	s12, [r3]
 800d3e2:	edc2 6a03 	vstr	s13, [r2, #12]
 800d3e6:	eef4 6ac6 	vcmpe.f32	s13, s12
 800d3ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3ee:	ed93 6a01 	vldr	s12, [r3, #4]
 800d3f2:	bfc8      	it	gt
 800d3f4:	48b1      	ldrgt	r0, [pc, #708]	; (800d6bc <MotionSP_VibrationAnalysis+0x364>)
 800d3f6:	ed82 7a04 	vstr	s14, [r2, #16]
 800d3fa:	bfc8      	it	gt
 800d3fc:	f04f 0c01 	movgt.w	ip, #1
 800d400:	eeb4 7ac6 	vcmpe.f32	s14, s12
 800d404:	bfc8      	it	gt
 800d406:	f880 c000 	strbgt.w	ip, [r0]
 800d40a:	ed93 6a02 	vldr	s12, [r3, #8]
 800d40e:	edc2 7a05 	vstr	s15, [r2, #20]
 800d412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d416:	bfc4      	itt	gt
 800d418:	48a8      	ldrgt	r0, [pc, #672]	; (800d6bc <MotionSP_VibrationAnalysis+0x364>)
 800d41a:	f04f 0c01 	movgt.w	ip, #1
 800d41e:	eef4 7ac6 	vcmpe.f32	s15, s12
 800d422:	bfc8      	it	gt
 800d424:	f880 c001 	strbgt.w	ip, [r0, #1]
 800d428:	ed93 6a03 	vldr	s12, [r3, #12]
 800d42c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d430:	bfc4      	itt	gt
 800d432:	48a2      	ldrgt	r0, [pc, #648]	; (800d6bc <MotionSP_VibrationAnalysis+0x364>)
 800d434:	f04f 0c01 	movgt.w	ip, #1
 800d438:	eef4 6ac6 	vcmpe.f32	s13, s12
 800d43c:	bfc8      	it	gt
 800d43e:	f880 c002 	strbgt.w	ip, [r0, #2]
 800d442:	edd3 6a04 	vldr	s13, [r3, #16]
 800d446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d44a:	bfc4      	itt	gt
 800d44c:	489b      	ldrgt	r0, [pc, #620]	; (800d6bc <MotionSP_VibrationAnalysis+0x364>)
 800d44e:	f04f 0c02 	movgt.w	ip, #2
 800d452:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800d456:	bfc8      	it	gt
 800d458:	f880 c000 	strbgt.w	ip, [r0]
 800d45c:	ed93 7a05 	vldr	s14, [r3, #20]
 800d460:	edd1 6a06 	vldr	s13, [r1, #24]
 800d464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d468:	bfc8      	it	gt
 800d46a:	4894      	ldrgt	r0, [pc, #592]	; (800d6bc <MotionSP_VibrationAnalysis+0x364>)
 800d46c:	edc2 6a06 	vstr	s13, [r2, #24]
 800d470:	bfc8      	it	gt
 800d472:	f04f 0c02 	movgt.w	ip, #2
 800d476:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d47a:	bfc8      	it	gt
 800d47c:	f880 c001 	strbgt.w	ip, [r0, #1]
 800d480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d484:	bfc8      	it	gt
 800d486:	4b8d      	ldrgt	r3, [pc, #564]	; (800d6bc <MotionSP_VibrationAnalysis+0x364>)
 800d488:	edd1 7a08 	vldr	s15, [r1, #32]
 800d48c:	ed91 7a07 	vldr	s14, [r1, #28]
 800d490:	edc2 7a08 	vstr	s15, [r2, #32]
 800d494:	bfc4      	itt	gt
 800d496:	2002      	movgt	r0, #2
 800d498:	7098      	strbgt	r0, [r3, #2]
 800d49a:	4b89      	ldr	r3, [pc, #548]	; (800d6c0 <MotionSP_VibrationAnalysis+0x368>)
 800d49c:	ed82 7a07 	vstr	s14, [r2, #28]
 800d4a0:	ed93 6a00 	vldr	s12, [r3]
 800d4a4:	eef4 6ac6 	vcmpe.f32	s13, s12
 800d4a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4ac:	ed93 6a01 	vldr	s12, [r3, #4]
 800d4b0:	bfc4      	itt	gt
 800d4b2:	4a82      	ldrgt	r2, [pc, #520]	; (800d6bc <MotionSP_VibrationAnalysis+0x364>)
 800d4b4:	2101      	movgt	r1, #1
 800d4b6:	eeb4 7ac6 	vcmpe.f32	s14, s12
 800d4ba:	bfc8      	it	gt
 800d4bc:	70d1      	strbgt	r1, [r2, #3]
 800d4be:	ed93 6a02 	vldr	s12, [r3, #8]
 800d4c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4c6:	bfc8      	it	gt
 800d4c8:	4a7c      	ldrgt	r2, [pc, #496]	; (800d6bc <MotionSP_VibrationAnalysis+0x364>)
 800d4ca:	eef4 7ac6 	vcmpe.f32	s15, s12
 800d4ce:	bfc8      	it	gt
 800d4d0:	2101      	movgt	r1, #1
 800d4d2:	ed93 6a03 	vldr	s12, [r3, #12]
 800d4d6:	bfc8      	it	gt
 800d4d8:	7111      	strbgt	r1, [r2, #4]
 800d4da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4de:	bfc8      	it	gt
 800d4e0:	4a76      	ldrgt	r2, [pc, #472]	; (800d6bc <MotionSP_VibrationAnalysis+0x364>)
 800d4e2:	eef4 6ac6 	vcmpe.f32	s13, s12
 800d4e6:	bfc4      	itt	gt
 800d4e8:	2101      	movgt	r1, #1
 800d4ea:	7151      	strbgt	r1, [r2, #5]
 800d4ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4f0:	bfc2      	ittt	gt
 800d4f2:	4a72      	ldrgt	r2, [pc, #456]	; (800d6bc <MotionSP_VibrationAnalysis+0x364>)
 800d4f4:	2102      	movgt	r1, #2
 800d4f6:	70d1      	strbgt	r1, [r2, #3]
 800d4f8:	edd3 6a04 	vldr	s13, [r3, #16]
 800d4fc:	f89a 000a 	ldrb.w	r0, [sl, #10]
 800d500:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800d504:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d508:	ed93 7a05 	vldr	s14, [r3, #20]
 800d50c:	bfc8      	it	gt
 800d50e:	4a6b      	ldrgt	r2, [pc, #428]	; (800d6bc <MotionSP_VibrationAnalysis+0x364>)
 800d510:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d514:	bfc4      	itt	gt
 800d516:	2102      	movgt	r1, #2
 800d518:	7111      	strbgt	r1, [r2, #4]
 800d51a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d51e:	bfc2      	ittt	gt
 800d520:	4b66      	ldrgt	r3, [pc, #408]	; (800d6bc <MotionSP_VibrationAnalysis+0x364>)
 800d522:	2202      	movgt	r2, #2
 800d524:	715a      	strbgt	r2, [r3, #5]
 800d526:	2300      	movs	r3, #0
 800d528:	7423      	strb	r3, [r4, #16]
 800d52a:	f7f7 f873 	bl	8004614 <__aeabi_i2d>
 800d52e:	4602      	mov	r2, r0
 800d530:	460b      	mov	r3, r1
 800d532:	2000      	movs	r0, #0
 800d534:	4963      	ldr	r1, [pc, #396]	; (800d6c4 <MotionSP_VibrationAnalysis+0x36c>)
 800d536:	f7f6 ff1f 	bl	8004378 <__aeabi_dsub>
 800d53a:	2200      	movs	r2, #0
 800d53c:	4b61      	ldr	r3, [pc, #388]	; (800d6c4 <MotionSP_VibrationAnalysis+0x36c>)
 800d53e:	f7f7 f9fd 	bl	800493c <__aeabi_ddiv>
 800d542:	4680      	mov	r8, r0
 800d544:	f8ba 0000 	ldrh.w	r0, [sl]
 800d548:	4689      	mov	r9, r1
 800d54a:	f7f7 f863 	bl	8004614 <__aeabi_i2d>
 800d54e:	4602      	mov	r2, r0
 800d550:	460b      	mov	r3, r1
 800d552:	4640      	mov	r0, r8
 800d554:	4649      	mov	r1, r9
 800d556:	f7f7 f8c7 	bl	80046e8 <__aeabi_dmul>
 800d55a:	4680      	mov	r8, r0
 800d55c:	8830      	ldrh	r0, [r6, #0]
 800d55e:	4689      	mov	r9, r1
 800d560:	f7f7 f858 	bl	8004614 <__aeabi_i2d>
 800d564:	460b      	mov	r3, r1
 800d566:	4602      	mov	r2, r0
 800d568:	4649      	mov	r1, r9
 800d56a:	4640      	mov	r0, r8
 800d56c:	f7f6 ff06 	bl	800437c <__adddf3>
 800d570:	f7f7 fb92 	bl	8004c98 <__aeabi_d2uiz>
 800d574:	882b      	ldrh	r3, [r5, #0]
 800d576:	b280      	uxth	r0, r0
 800d578:	4298      	cmp	r0, r3
 800d57a:	8030      	strh	r0, [r6, #0]
 800d57c:	d305      	bcc.n	800d58a <MotionSP_VibrationAnalysis+0x232>
 800d57e:	1ac0      	subs	r0, r0, r3
 800d580:	792b      	ldrb	r3, [r5, #4]
 800d582:	8030      	strh	r0, [r6, #0]
 800d584:	b90b      	cbnz	r3, 800d58a <MotionSP_VibrationAnalysis+0x232>
 800d586:	2301      	movs	r3, #1
 800d588:	7423      	strb	r3, [r4, #16]
 800d58a:	2300      	movs	r3, #0
 800d58c:	712b      	strb	r3, [r5, #4]
 800d58e:	783f      	ldrb	r7, [r7, #0]
 800d590:	2f01      	cmp	r7, #1
 800d592:	f040 8175 	bne.w	800d880 <MotionSP_VibrationAnalysis+0x528>
 800d596:	f7ff fec5 	bl	800d324 <disable_FIFO>
 800d59a:	6963      	ldr	r3, [r4, #20]
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d059      	beq.n	800d654 <MotionSP_VibrationAnalysis+0x2fc>
 800d5a0:	4e49      	ldr	r6, [pc, #292]	; (800d6c8 <MotionSP_VibrationAnalysis+0x370>)
 800d5a2:	4d4a      	ldr	r5, [pc, #296]	; (800d6cc <MotionSP_VibrationAnalysis+0x374>)
 800d5a4:	f8b6 8000 	ldrh.w	r8, [r6]
 800d5a8:	eb08 0048 	add.w	r0, r8, r8, lsl #1
 800d5ac:	0080      	lsls	r0, r0, #2
 800d5ae:	3007      	adds	r0, #7
 800d5b0:	b280      	uxth	r0, r0
 800d5b2:	f008 fce3 	bl	8015f7c <malloc>
 800d5b6:	4b46      	ldr	r3, [pc, #280]	; (800d6d0 <MotionSP_VibrationAnalysis+0x378>)
 800d5b8:	7027      	strb	r7, [r4, #0]
 800d5ba:	edd3 7a00 	vldr	s15, [r3]
 800d5be:	4f45      	ldr	r7, [pc, #276]	; (800d6d4 <MotionSP_VibrationAnalysis+0x37c>)
 800d5c0:	6028      	str	r0, [r5, #0]
 800d5c2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800d5c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d5ca:	ee07 8a10 	vmov	s14, r8
 800d5ce:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d5d2:	ea4f 2318 	mov.w	r3, r8, lsr #8
 800d5d6:	eec7 7a87 	vdiv.f32	s15, s15, s14
 800d5da:	7043      	strb	r3, [r0, #1]
 800d5dc:	2303      	movs	r3, #3
 800d5de:	7083      	strb	r3, [r0, #2]
 800d5e0:	f880 8000 	strb.w	r8, [r0]
 800d5e4:	ee17 3a90 	vmov	r3, s15
 800d5e8:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800d5ec:	7102      	strb	r2, [r0, #4]
 800d5ee:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800d5f2:	70c3      	strb	r3, [r0, #3]
 800d5f4:	7142      	strb	r2, [r0, #5]
 800d5f6:	f3c3 6307 	ubfx	r3, r3, #24, #8
 800d5fa:	ea4f 0288 	mov.w	r2, r8, lsl #2
 800d5fe:	7183      	strb	r3, [r0, #6]
 800d600:	f102 0c07 	add.w	ip, r2, #7
 800d604:	2307      	movs	r3, #7
 800d606:	4563      	cmp	r3, ip
 800d608:	f040 8096 	bne.w	800d738 <MotionSP_VibrationAnalysis+0x3e0>
 800d60c:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 800d610:	f8df e0e8 	ldr.w	lr, [pc, #232]	; 800d6fc <MotionSP_VibrationAnalysis+0x3a4>
 800d614:	f10c 0c07 	add.w	ip, ip, #7
 800d618:	4618      	mov	r0, r3
 800d61a:	4560      	cmp	r0, ip
 800d61c:	f040 80a3 	bne.w	800d766 <MotionSP_VibrationAnalysis+0x40e>
 800d620:	4413      	add	r3, r2
 800d622:	4f2d      	ldr	r7, [pc, #180]	; (800d6d8 <MotionSP_VibrationAnalysis+0x380>)
 800d624:	441a      	add	r2, r3
 800d626:	4293      	cmp	r3, r2
 800d628:	f040 80b4 	bne.w	800d794 <MotionSP_VibrationAnalysis+0x43c>
 800d62c:	482b      	ldr	r0, [pc, #172]	; (800d6dc <MotionSP_VibrationAnalysis+0x384>)
 800d62e:	f008 fde5 	bl	80161fc <puts>
 800d632:	481e      	ldr	r0, [pc, #120]	; (800d6ac <MotionSP_VibrationAnalysis+0x354>)
 800d634:	f002 f948 	bl	800f8c8 <TimeDomain_Update>
 800d638:	4829      	ldr	r0, [pc, #164]	; (800d6e0 <MotionSP_VibrationAnalysis+0x388>)
 800d63a:	f008 fddf 	bl	80161fc <puts>
 800d63e:	2301      	movs	r3, #1
 800d640:	7063      	strb	r3, [r4, #1]
 800d642:	2300      	movs	r3, #0
 800d644:	8323      	strh	r3, [r4, #24]
 800d646:	4b27      	ldr	r3, [pc, #156]	; (800d6e4 <MotionSP_VibrationAnalysis+0x38c>)
 800d648:	8831      	ldrh	r1, [r6, #0]
 800d64a:	6828      	ldr	r0, [r5, #0]
 800d64c:	f1a3 0217 	sub.w	r2, r3, #23
 800d650:	f002 f8de 	bl	800f810 <FFT_Amplitude_Update>
 800d654:	69e3      	ldr	r3, [r4, #28]
 800d656:	2b00      	cmp	r3, #0
 800d658:	f000 8112 	beq.w	800d880 <MotionSP_VibrationAnalysis+0x528>
 800d65c:	4b22      	ldr	r3, [pc, #136]	; (800d6e8 <MotionSP_VibrationAnalysis+0x390>)
 800d65e:	4d23      	ldr	r5, [pc, #140]	; (800d6ec <MotionSP_VibrationAnalysis+0x394>)
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	9300      	str	r3, [sp, #0]
 800d664:	4b22      	ldr	r3, [pc, #136]	; (800d6f0 <MotionSP_VibrationAnalysis+0x398>)
 800d666:	4823      	ldr	r0, [pc, #140]	; (800d6f4 <MotionSP_VibrationAnalysis+0x39c>)
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	9301      	str	r3, [sp, #4]
 800d66c:	4b0e      	ldr	r3, [pc, #56]	; (800d6a8 <MotionSP_VibrationAnalysis+0x350>)
 800d66e:	f8df b090 	ldr.w	fp, [pc, #144]	; 800d700 <MotionSP_VibrationAnalysis+0x3a8>
 800d672:	f893 900c 	ldrb.w	r9, [r3, #12]
 800d676:	2100      	movs	r1, #0
 800d678:	4698      	mov	r8, r3
 800d67a:	f04f 0a0c 	mov.w	sl, #12
 800d67e:	2702      	movs	r7, #2
 800d680:	f04f 0c01 	mov.w	ip, #1
 800d684:	4549      	cmp	r1, r9
 800d686:	f2c0 809c 	blt.w	800d7c2 <MotionSP_VibrationAnalysis+0x46a>
 800d68a:	481b      	ldr	r0, [pc, #108]	; (800d6f8 <MotionSP_VibrationAnalysis+0x3a0>)
 800d68c:	f008 fdb6 	bl	80161fc <puts>
 800d690:	e038      	b.n	800d704 <MotionSP_VibrationAnalysis+0x3ac>
 800d692:	bf00      	nop
 800d694:	200081e8 	.word	0x200081e8
 800d698:	2000b10c 	.word	0x2000b10c
 800d69c:	20000452 	.word	0x20000452
 800d6a0:	20011acc 	.word	0x20011acc
 800d6a4:	200085b0 	.word	0x200085b0
 800d6a8:	2000b0f8 	.word	0x2000b0f8
 800d6ac:	2000eaa4 	.word	0x2000eaa4
 800d6b0:	200121f4 	.word	0x200121f4
 800d6b4:	447a0000 	.word	0x447a0000
 800d6b8:	20011ddc 	.word	0x20011ddc
 800d6bc:	20011e18 	.word	0x20011e18
 800d6c0:	20011e00 	.word	0x20011e00
 800d6c4:	40590000 	.word	0x40590000
 800d6c8:	200031e0 	.word	0x200031e0
 800d6cc:	20011eec 	.word	0x20011eec
 800d6d0:	20011dd0 	.word	0x20011dd0
 800d6d4:	200098f8 	.word	0x200098f8
 800d6d8:	2000a8f8 	.word	0x2000a8f8
 800d6dc:	0801a869 	.word	0x0801a869
 800d6e0:	0801a893 	.word	0x0801a893
 800d6e4:	20008200 	.word	0x20008200
 800d6e8:	20012484 	.word	0x20012484
 800d6ec:	200095d8 	.word	0x200095d8
 800d6f0:	20012564 	.word	0x20012564
 800d6f4:	20011ef4 	.word	0x20011ef4
 800d6f8:	0801a8bf 	.word	0x0801a8bf
 800d6fc:	2000a0f8 	.word	0x2000a0f8
 800d700:	20011e1f 	.word	0x20011e1f
 800d704:	496e      	ldr	r1, [pc, #440]	; (800d8c0 <MotionSP_VibrationAnalysis+0x568>)
 800d706:	486f      	ldr	r0, [pc, #444]	; (800d8c4 <MotionSP_VibrationAnalysis+0x56c>)
 800d708:	f002 f986 	bl	800fa18 <FFT_AlarmSpeedRMS_Status_Update>
 800d70c:	486e      	ldr	r0, [pc, #440]	; (800d8c8 <MotionSP_VibrationAnalysis+0x570>)
 800d70e:	f008 fd75 	bl	80161fc <puts>
 800d712:	496b      	ldr	r1, [pc, #428]	; (800d8c0 <MotionSP_VibrationAnalysis+0x568>)
 800d714:	486b      	ldr	r0, [pc, #428]	; (800d8c4 <MotionSP_VibrationAnalysis+0x56c>)
 800d716:	f002 f9f1 	bl	800fafc <FFT_AlarmAccStatus_Update>
 800d71a:	486c      	ldr	r0, [pc, #432]	; (800d8cc <MotionSP_VibrationAnalysis+0x574>)
 800d71c:	f008 fd6e 	bl	80161fc <puts>
 800d720:	4b6b      	ldr	r3, [pc, #428]	; (800d8d0 <MotionSP_VibrationAnalysis+0x578>)
 800d722:	f8b8 200c 	ldrh.w	r2, [r8, #12]
 800d726:	881b      	ldrh	r3, [r3, #0]
 800d728:	496a      	ldr	r1, [pc, #424]	; (800d8d4 <MotionSP_VibrationAnalysis+0x57c>)
 800d72a:	486b      	ldr	r0, [pc, #428]	; (800d8d8 <MotionSP_VibrationAnalysis+0x580>)
 800d72c:	f002 fa58 	bl	800fbe0 <FFT_AlarmSubrangeStatus_Update>
 800d730:	2301      	movs	r3, #1
 800d732:	f884 3020 	strb.w	r3, [r4, #32]
 800d736:	e0a3      	b.n	800d880 <MotionSP_VibrationAnalysis+0x528>
 800d738:	6828      	ldr	r0, [r5, #0]
 800d73a:	f857 1b04 	ldr.w	r1, [r7], #4
 800d73e:	54c1      	strb	r1, [r0, r3]
 800d740:	6828      	ldr	r0, [r5, #0]
 800d742:	4418      	add	r0, r3
 800d744:	f3c1 2e07 	ubfx	lr, r1, #8, #8
 800d748:	f880 e001 	strb.w	lr, [r0, #1]
 800d74c:	6828      	ldr	r0, [r5, #0]
 800d74e:	4418      	add	r0, r3
 800d750:	f3c1 4e07 	ubfx	lr, r1, #16, #8
 800d754:	f880 e002 	strb.w	lr, [r0, #2]
 800d758:	6828      	ldr	r0, [r5, #0]
 800d75a:	4418      	add	r0, r3
 800d75c:	f3c1 6107 	ubfx	r1, r1, #24, #8
 800d760:	70c1      	strb	r1, [r0, #3]
 800d762:	3304      	adds	r3, #4
 800d764:	e74f      	b.n	800d606 <MotionSP_VibrationAnalysis+0x2ae>
 800d766:	682f      	ldr	r7, [r5, #0]
 800d768:	f85e 1b04 	ldr.w	r1, [lr], #4
 800d76c:	5439      	strb	r1, [r7, r0]
 800d76e:	682f      	ldr	r7, [r5, #0]
 800d770:	4407      	add	r7, r0
 800d772:	f3c1 2807 	ubfx	r8, r1, #8, #8
 800d776:	f887 8001 	strb.w	r8, [r7, #1]
 800d77a:	682f      	ldr	r7, [r5, #0]
 800d77c:	4407      	add	r7, r0
 800d77e:	f3c1 4807 	ubfx	r8, r1, #16, #8
 800d782:	f887 8002 	strb.w	r8, [r7, #2]
 800d786:	682f      	ldr	r7, [r5, #0]
 800d788:	4407      	add	r7, r0
 800d78a:	f3c1 6107 	ubfx	r1, r1, #24, #8
 800d78e:	70f9      	strb	r1, [r7, #3]
 800d790:	3004      	adds	r0, #4
 800d792:	e742      	b.n	800d61a <MotionSP_VibrationAnalysis+0x2c2>
 800d794:	6828      	ldr	r0, [r5, #0]
 800d796:	f857 1b04 	ldr.w	r1, [r7], #4
 800d79a:	54c1      	strb	r1, [r0, r3]
 800d79c:	6828      	ldr	r0, [r5, #0]
 800d79e:	4418      	add	r0, r3
 800d7a0:	f3c1 2c07 	ubfx	ip, r1, #8, #8
 800d7a4:	f880 c001 	strb.w	ip, [r0, #1]
 800d7a8:	6828      	ldr	r0, [r5, #0]
 800d7aa:	4418      	add	r0, r3
 800d7ac:	f3c1 4c07 	ubfx	ip, r1, #16, #8
 800d7b0:	f880 c002 	strb.w	ip, [r0, #2]
 800d7b4:	6828      	ldr	r0, [r5, #0]
 800d7b6:	4418      	add	r0, r3
 800d7b8:	f3c1 6107 	ubfx	r1, r1, #24, #8
 800d7bc:	70c1      	strb	r1, [r0, #3]
 800d7be:	3304      	adds	r3, #4
 800d7c0:	e731      	b.n	800d626 <MotionSP_VibrationAnalysis+0x2ce>
 800d7c2:	9b00      	ldr	r3, [sp, #0]
 800d7c4:	fb0a f601 	mul.w	r6, sl, r1
 800d7c8:	eb03 0e06 	add.w	lr, r3, r6
 800d7cc:	9b01      	ldr	r3, [sp, #4]
 800d7ce:	eb0b 0201 	add.w	r2, fp, r1
 800d7d2:	441e      	add	r6, r3
 800d7d4:	2300      	movs	r3, #0
 800d7d6:	2b01      	cmp	r3, #1
 800d7d8:	ecfe 6a01 	vldmia	lr!, {s13}
 800d7dc:	ecb6 7a01 	vldmia	r6!, {s14}
 800d7e0:	d01b      	beq.n	800d81a <MotionSP_VibrationAnalysis+0x4c2>
 800d7e2:	2b02      	cmp	r3, #2
 800d7e4:	d02c      	beq.n	800d840 <MotionSP_VibrationAnalysis+0x4e8>
 800d7e6:	edd5 7a00 	vldr	s15, [r5]
 800d7ea:	eef4 6ae7 	vcmpe.f32	s13, s15
 800d7ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d7f6:	bf48      	it	mi
 800d7f8:	f882 c000 	strbmi.w	ip, [r2]
 800d7fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d800:	edc0 7a00 	vstr	s15, [r0]
 800d804:	d500      	bpl.n	800d808 <MotionSP_VibrationAnalysis+0x4b0>
 800d806:	7017      	strb	r7, [r2, #0]
 800d808:	3301      	adds	r3, #1
 800d80a:	2b03      	cmp	r3, #3
 800d80c:	d1e3      	bne.n	800d7d6 <MotionSP_VibrationAnalysis+0x47e>
 800d80e:	3101      	adds	r1, #1
 800d810:	3504      	adds	r5, #4
 800d812:	3004      	adds	r0, #4
 800d814:	e736      	b.n	800d684 <MotionSP_VibrationAnalysis+0x32c>
 800d816:	2302      	movs	r3, #2
 800d818:	e7dd      	b.n	800d7d6 <MotionSP_VibrationAnalysis+0x47e>
 800d81a:	edd5 7a40 	vldr	s15, [r5, #256]	; 0x100
 800d81e:	eef4 6ae7 	vcmpe.f32	s13, s15
 800d822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d826:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d82a:	bf48      	it	mi
 800d82c:	f882 3040 	strbmi.w	r3, [r2, #64]	; 0x40
 800d830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d834:	edc0 7a40 	vstr	s15, [r0, #256]	; 0x100
 800d838:	d5ed      	bpl.n	800d816 <MotionSP_VibrationAnalysis+0x4be>
 800d83a:	f882 7040 	strb.w	r7, [r2, #64]	; 0x40
 800d83e:	e7e3      	b.n	800d808 <MotionSP_VibrationAnalysis+0x4b0>
 800d840:	edd5 7a80 	vldr	s15, [r5, #512]	; 0x200
 800d844:	eef4 6ae7 	vcmpe.f32	s13, s15
 800d848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d84c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d850:	bf48      	it	mi
 800d852:	f882 c080 	strbmi.w	ip, [r2, #128]	; 0x80
 800d856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d85a:	edc0 7a80 	vstr	s15, [r0, #512]	; 0x200
 800d85e:	d5d6      	bpl.n	800d80e <MotionSP_VibrationAnalysis+0x4b6>
 800d860:	f882 7080 	strb.w	r7, [r2, #128]	; 0x80
 800d864:	e7d0      	b.n	800d808 <MotionSP_VibrationAnalysis+0x4b0>
 800d866:	491a      	ldr	r1, [pc, #104]	; (800d8d0 <MotionSP_VibrationAnalysis+0x578>)
 800d868:	481c      	ldr	r0, [pc, #112]	; (800d8dc <MotionSP_VibrationAnalysis+0x584>)
 800d86a:	8809      	ldrh	r1, [r1, #0]
 800d86c:	6800      	ldr	r0, [r0, #0]
 800d86e:	f104 0318 	add.w	r3, r4, #24
 800d872:	1c62      	adds	r2, r4, #1
 800d874:	f001 ffcc 	bl	800f810 <FFT_Amplitude_Update>
 800d878:	7863      	ldrb	r3, [r4, #1]
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	f43f af58 	beq.w	800d730 <MotionSP_VibrationAnalysis+0x3d8>
 800d880:	f894 3020 	ldrb.w	r3, [r4, #32]
 800d884:	b1c3      	cbz	r3, 800d8b8 <MotionSP_VibrationAnalysis+0x560>
 800d886:	f7ff fa69 	bl	800cd5c <MotionSP_VibrationInit>
 800d88a:	69e3      	ldr	r3, [r4, #28]
 800d88c:	b163      	cbz	r3, 800d8a8 <MotionSP_VibrationAnalysis+0x550>
 800d88e:	4b14      	ldr	r3, [pc, #80]	; (800d8e0 <MotionSP_VibrationAnalysis+0x588>)
 800d890:	4a14      	ldr	r2, [pc, #80]	; (800d8e4 <MotionSP_VibrationAnalysis+0x58c>)
 800d892:	490b      	ldr	r1, [pc, #44]	; (800d8c0 <MotionSP_VibrationAnalysis+0x568>)
 800d894:	480b      	ldr	r0, [pc, #44]	; (800d8c4 <MotionSP_VibrationAnalysis+0x56c>)
 800d896:	f7ff fad5 	bl	800ce44 <MotionSP_TimeDomainAlarmInit>
 800d89a:	4b13      	ldr	r3, [pc, #76]	; (800d8e8 <MotionSP_VibrationAnalysis+0x590>)
 800d89c:	4a0d      	ldr	r2, [pc, #52]	; (800d8d4 <MotionSP_VibrationAnalysis+0x57c>)
 800d89e:	7b1b      	ldrb	r3, [r3, #12]
 800d8a0:	4912      	ldr	r1, [pc, #72]	; (800d8ec <MotionSP_VibrationAnalysis+0x594>)
 800d8a2:	4813      	ldr	r0, [pc, #76]	; (800d8f0 <MotionSP_VibrationAnalysis+0x598>)
 800d8a4:	f7ff fb00 	bl	800cea8 <MotionSP_FreqDomainAlarmInit>
 800d8a8:	f7ff fd22 	bl	800d2f0 <enable_FIFO>
 800d8ac:	f7fa f868 	bl	8007980 <HAL_GetTick>
 800d8b0:	2300      	movs	r3, #0
 800d8b2:	60e0      	str	r0, [r4, #12]
 800d8b4:	f884 3020 	strb.w	r3, [r4, #32]
 800d8b8:	b003      	add	sp, #12
 800d8ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8be:	bf00      	nop
 800d8c0:	20011ddc 	.word	0x20011ddc
 800d8c4:	20011e18 	.word	0x20011e18
 800d8c8:	0801a8f8 	.word	0x0801a8f8
 800d8cc:	0801a930 	.word	0x0801a930
 800d8d0:	200031e0 	.word	0x200031e0
 800d8d4:	20011e1f 	.word	0x20011e1f
 800d8d8:	200085b4 	.word	0x200085b4
 800d8dc:	20011eec 	.word	0x20011eec
 800d8e0:	20011e00 	.word	0x20011e00
 800d8e4:	200121f4 	.word	0x200121f4
 800d8e8:	2000b0f8 	.word	0x2000b0f8
 800d8ec:	20012564 	.word	0x20012564
 800d8f0:	20012484 	.word	0x20012484

0800d8f4 <FuncOn_DRDY_XL>:
 800d8f4:	4b01      	ldr	r3, [pc, #4]	; (800d8fc <FuncOn_DRDY_XL+0x8>)
 800d8f6:	2201      	movs	r2, #1
 800d8f8:	721a      	strb	r2, [r3, #8]
 800d8fa:	4770      	bx	lr
 800d8fc:	200081e8 	.word	0x200081e8

0800d900 <FuncOn_FifoFull>:
 800d900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d904:	ed2d 8b02 	vpush	{d8}
 800d908:	4c3d      	ldr	r4, [pc, #244]	; (800da00 <FuncOn_FifoFull+0x100>)
 800d90a:	4e3e      	ldr	r6, [pc, #248]	; (800da04 <FuncOn_FifoFull+0x104>)
 800d90c:	4f3e      	ldr	r7, [pc, #248]	; (800da08 <FuncOn_FifoFull+0x108>)
 800d90e:	b088      	sub	sp, #32
 800d910:	f000 faa4 	bl	800de5c <LedOnTargetPlatform>
 800d914:	2301      	movs	r3, #1
 800d916:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
 800d91a:	4d3c      	ldr	r5, [pc, #240]	; (800da0c <FuncOn_FifoFull+0x10c>)
 800d91c:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 800d920:	b923      	cbnz	r3, 800d92c <FuncOn_FifoFull+0x2c>
 800d922:	b008      	add	sp, #32
 800d924:	ecbd 8b02 	vpop	{d8}
 800d928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d92c:	6973      	ldr	r3, [r6, #20]
 800d92e:	f013 0802 	ands.w	r8, r3, #2
 800d932:	d000      	beq.n	800d936 <FuncOn_FifoFull+0x36>
 800d934:	e7fe      	b.n	800d934 <FuncOn_FifoFull+0x34>
 800d936:	2102      	movs	r1, #2
 800d938:	aa05      	add	r2, sp, #20
 800d93a:	4608      	mov	r0, r1
 800d93c:	ed94 8a01 	vldr	s16, [r4, #4]
 800d940:	f004 f8b6 	bl	8011ab0 <IKS01A2_MOTION_SENSOR_FIFO_Get_Data_Word>
 800d944:	2102      	movs	r1, #2
 800d946:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800d94a:	f8ad 3000 	strh.w	r3, [sp]
 800d94e:	aa05      	add	r2, sp, #20
 800d950:	4608      	mov	r0, r1
 800d952:	f004 f8ad 	bl	8011ab0 <IKS01A2_MOTION_SENSOR_FIFO_Get_Data_Word>
 800d956:	2102      	movs	r1, #2
 800d958:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800d95c:	f8ad 3002 	strh.w	r3, [sp, #2]
 800d960:	aa05      	add	r2, sp, #20
 800d962:	4608      	mov	r0, r1
 800d964:	f004 f8a4 	bl	8011ab0 <IKS01A2_MOTION_SENSOR_FIFO_Get_Data_Word>
 800d968:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800d96c:	f8ad 3004 	strh.w	r3, [sp, #4]
 800d970:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 800d972:	893a      	ldrh	r2, [r7, #8]
 800d974:	3301      	adds	r3, #1
 800d976:	b29b      	uxth	r3, r3
 800d978:	429a      	cmp	r2, r3
 800d97a:	8463      	strh	r3, [r4, #34]	; 0x22
 800d97c:	d105      	bne.n	800d98a <FuncOn_FifoFull+0x8a>
 800d97e:	f8a4 8022 	strh.w	r8, [r4, #34]	; 0x22
 800d982:	f884 8021 	strb.w	r8, [r4, #33]	; 0x21
 800d986:	f000 fa73 	bl	800de70 <LedOffTargetPlatform>
 800d98a:	f9bd 3000 	ldrsh.w	r3, [sp]
 800d98e:	782a      	ldrb	r2, [r5, #0]
 800d990:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 800da10 <FuncOn_FifoFull+0x110>
 800d994:	ee07 3a10 	vmov	s14, r3
 800d998:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d99c:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 800d9a0:	ee27 7a08 	vmul.f32	s14, s14, s16
 800d9a4:	a902      	add	r1, sp, #8
 800d9a6:	ed8d 7a02 	vstr	s14, [sp, #8]
 800d9aa:	ee07 3a10 	vmov	s14, r3
 800d9ae:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 800d9b2:	ee07 3a90 	vmov	s15, r3
 800d9b6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d9ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d9be:	ee27 7a08 	vmul.f32	s14, s14, s16
 800d9c2:	ee67 7a88 	vmul.f32	s15, s15, s16
 800d9c6:	a805      	add	r0, sp, #20
 800d9c8:	ed8d 7a03 	vstr	s14, [sp, #12]
 800d9cc:	edcd 7a04 	vstr	s15, [sp, #16]
 800d9d0:	f7fe fd8e 	bl	800c4f0 <MotionSP_accDelOffset>
 800d9d4:	ed9d 0a05 	vldr	s0, [sp, #20]
 800d9d8:	eddd 0a06 	vldr	s1, [sp, #24]
 800d9dc:	ed9d 1a07 	vldr	s2, [sp, #28]
 800d9e0:	480c      	ldr	r0, [pc, #48]	; (800da14 <FuncOn_FifoFull+0x114>)
 800d9e2:	f7fe fdcf 	bl	800c584 <MotionSP_CreateAccCircBuffer>
 800d9e6:	4b0c      	ldr	r3, [pc, #48]	; (800da18 <FuncOn_FifoFull+0x118>)
 800d9e8:	782a      	ldrb	r2, [r5, #0]
 800d9ea:	7999      	ldrb	r1, [r3, #6]
 800d9ec:	480b      	ldr	r0, [pc, #44]	; (800da1c <FuncOn_FifoFull+0x11c>)
 800d9ee:	f7fe fdfb 	bl	800c5e8 <MotionSP_TimeDomainProcess>
 800d9f2:	782b      	ldrb	r3, [r5, #0]
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d091      	beq.n	800d91c <FuncOn_FifoFull+0x1c>
 800d9f8:	2300      	movs	r3, #0
 800d9fa:	702b      	strb	r3, [r5, #0]
 800d9fc:	e78d      	b.n	800d91a <FuncOn_FifoFull+0x1a>
 800d9fe:	bf00      	nop
 800da00:	200081e8 	.word	0x200081e8
 800da04:	40013c00 	.word	0x40013c00
 800da08:	20011ee0 	.word	0x20011ee0
 800da0c:	20000452 	.word	0x20000452
 800da10:	3f79999a 	.word	0x3f79999a
 800da14:	2000b10c 	.word	0x2000b10c
 800da18:	2000b0f8 	.word	0x2000b0f8
 800da1c:	2000eaa4 	.word	0x2000eaa4

0800da20 <CheckBootLoaderCompliance>:
 800da20:	4b06      	ldr	r3, [pc, #24]	; (800da3c <CheckBootLoaderCompliance+0x1c>)
 800da22:	4a07      	ldr	r2, [pc, #28]	; (800da40 <CheckBootLoaderCompliance+0x20>)
 800da24:	6859      	ldr	r1, [r3, #4]
 800da26:	4291      	cmp	r1, r2
 800da28:	d105      	bne.n	800da36 <CheckBootLoaderCompliance+0x16>
 800da2a:	6898      	ldr	r0, [r3, #8]
 800da2c:	4b05      	ldr	r3, [pc, #20]	; (800da44 <CheckBootLoaderCompliance+0x24>)
 800da2e:	1ac3      	subs	r3, r0, r3
 800da30:	4258      	negs	r0, r3
 800da32:	4158      	adcs	r0, r3
 800da34:	4770      	bx	lr
 800da36:	2000      	movs	r0, #0
 800da38:	4770      	bx	lr
 800da3a:	bf00      	nop
 800da3c:	08003f00 	.word	0x08003f00
 800da40:	deadbeef 	.word	0xdeadbeef
 800da44:	08040000 	.word	0x08040000

0800da48 <UpdateFWBlueMS>:
 800da48:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800da4c:	461c      	mov	r4, r3
 800da4e:	6803      	ldr	r3, [r0, #0]
 800da50:	4293      	cmp	r3, r2
 800da52:	4605      	mov	r5, r0
 800da54:	4689      	mov	r9, r1
 800da56:	4616      	mov	r6, r2
 800da58:	d207      	bcs.n	800da6a <UpdateFWBlueMS+0x22>
 800da5a:	2300      	movs	r3, #0
 800da5c:	6003      	str	r3, [r0, #0]
 800da5e:	f04f 34ff 	mov.w	r4, #4294967295
 800da62:	4620      	mov	r0, r4
 800da64:	b003      	add	sp, #12
 800da66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800da6a:	f7fa fac3 	bl	8007ff4 <HAL_FLASH_Unlock>
 800da6e:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 800db1c <UpdateFWBlueMS+0xd4>
 800da72:	464f      	mov	r7, r9
 800da74:	eba7 0309 	sub.w	r3, r7, r9
 800da78:	429e      	cmp	r6, r3
 800da7a:	dc18      	bgt.n	800daae <UpdateFWBlueMS+0x66>
 800da7c:	682a      	ldr	r2, [r5, #0]
 800da7e:	1b92      	subs	r2, r2, r6
 800da80:	602a      	str	r2, [r5, #0]
 800da82:	2a00      	cmp	r2, #0
 800da84:	d13c      	bne.n	800db00 <UpdateFWBlueMS+0xb8>
 800da86:	b36c      	cbz	r4, 800dae4 <UpdateFWBlueMS+0x9c>
 800da88:	4d21      	ldr	r5, [pc, #132]	; (800db10 <UpdateFWBlueMS+0xc8>)
 800da8a:	682b      	ldr	r3, [r5, #0]
 800da8c:	b36b      	cbz	r3, 800daea <UpdateFWBlueMS+0xa2>
 800da8e:	ac02      	add	r4, sp, #8
 800da90:	4b20      	ldr	r3, [pc, #128]	; (800db14 <UpdateFWBlueMS+0xcc>)
 800da92:	f844 3d08 	str.w	r3, [r4, #-8]!
 800da96:	4620      	mov	r0, r4
 800da98:	f7fa f833 	bl	8007b02 <HAL_CRC_GetState>
 800da9c:	b110      	cbz	r0, 800daa4 <UpdateFWBlueMS+0x5c>
 800da9e:	4620      	mov	r0, r4
 800daa0:	f7fa f804 	bl	8007aac <HAL_CRC_DeInit>
 800daa4:	4620      	mov	r0, r4
 800daa6:	f7f9 ffef 	bl	8007a88 <HAL_CRC_Init>
 800daaa:	b180      	cbz	r0, 800dace <UpdateFWBlueMS+0x86>
 800daac:	e7fe      	b.n	800daac <UpdateFWBlueMS+0x64>
 800daae:	f817 2b01 	ldrb.w	r2, [r7], #1
 800dab2:	f8d8 1000 	ldr.w	r1, [r8]
 800dab6:	2300      	movs	r3, #0
 800dab8:	2000      	movs	r0, #0
 800daba:	f7fa fae1 	bl	8008080 <HAL_FLASH_Program>
 800dabe:	b928      	cbnz	r0, 800dacc <UpdateFWBlueMS+0x84>
 800dac0:	f8d8 3000 	ldr.w	r3, [r8]
 800dac4:	3301      	adds	r3, #1
 800dac6:	f8c8 3000 	str.w	r3, [r8]
 800daca:	e7d3      	b.n	800da74 <UpdateFWBlueMS+0x2c>
 800dacc:	e7fe      	b.n	800dacc <UpdateFWBlueMS+0x84>
 800dace:	686a      	ldr	r2, [r5, #4]
 800dad0:	4911      	ldr	r1, [pc, #68]	; (800db18 <UpdateFWBlueMS+0xd0>)
 800dad2:	0892      	lsrs	r2, r2, #2
 800dad4:	4620      	mov	r0, r4
 800dad6:	f7f9 fff6 	bl	8007ac6 <HAL_CRC_Calculate>
 800dada:	682b      	ldr	r3, [r5, #0]
 800dadc:	4283      	cmp	r3, r0
 800dade:	d004      	beq.n	800daea <UpdateFWBlueMS+0xa2>
 800dae0:	f04f 34ff 	mov.w	r4, #4294967295
 800dae4:	f7fa fa98 	bl	8008018 <HAL_FLASH_Lock>
 800dae8:	e7bb      	b.n	800da62 <UpdateFWBlueMS+0x1a>
 800daea:	4b0c      	ldr	r3, [pc, #48]	; (800db1c <UpdateFWBlueMS+0xd4>)
 800daec:	490c      	ldr	r1, [pc, #48]	; (800db20 <UpdateFWBlueMS+0xd8>)
 800daee:	6019      	str	r1, [r3, #0]
 800daf0:	2002      	movs	r0, #2
 800daf2:	a305      	add	r3, pc, #20	; (adr r3, 800db08 <UpdateFWBlueMS+0xc0>)
 800daf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daf8:	f7fa fac2 	bl	8008080 <HAL_FLASH_Program>
 800dafc:	b110      	cbz	r0, 800db04 <UpdateFWBlueMS+0xbc>
 800dafe:	e7fe      	b.n	800dafe <UpdateFWBlueMS+0xb6>
 800db00:	2400      	movs	r4, #0
 800db02:	e7ef      	b.n	800dae4 <UpdateFWBlueMS+0x9c>
 800db04:	2401      	movs	r4, #1
 800db06:	e7ed      	b.n	800dae4 <UpdateFWBlueMS+0x9c>
 800db08:	deadbeef 	.word	0xdeadbeef
 800db0c:	00000000 	.word	0x00000000
 800db10:	20008214 	.word	0x20008214
 800db14:	40023000 	.word	0x40023000
 800db18:	08040008 	.word	0x08040008
 800db1c:	20000458 	.word	0x20000458
 800db20:	08040000 	.word	0x08040000

0800db24 <StartUpdateFWBlueMS>:
 800db24:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800db26:	4a0e      	ldr	r2, [pc, #56]	; (800db60 <StartUpdateFWBlueMS+0x3c>)
 800db28:	e9c2 1000 	strd	r1, r0, [r2]
 800db2c:	2206      	movs	r2, #6
 800db2e:	9203      	str	r2, [sp, #12]
 800db30:	4a0c      	ldr	r2, [pc, #48]	; (800db64 <StartUpdateFWBlueMS+0x40>)
 800db32:	2300      	movs	r3, #0
 800db34:	4290      	cmp	r0, r2
 800db36:	9300      	str	r3, [sp, #0]
 800db38:	9301      	str	r3, [sp, #4]
 800db3a:	f04f 0302 	mov.w	r3, #2
 800db3e:	9305      	str	r3, [sp, #20]
 800db40:	bf98      	it	ls
 800db42:	2301      	movls	r3, #1
 800db44:	9304      	str	r3, [sp, #16]
 800db46:	f7fa fa55 	bl	8007ff4 <HAL_FLASH_Unlock>
 800db4a:	4669      	mov	r1, sp
 800db4c:	a801      	add	r0, sp, #4
 800db4e:	f7fa fb41 	bl	80081d4 <HAL_FLASHEx_Erase>
 800db52:	b100      	cbz	r0, 800db56 <StartUpdateFWBlueMS+0x32>
 800db54:	e7fe      	b.n	800db54 <StartUpdateFWBlueMS+0x30>
 800db56:	f7fa fa5f 	bl	8008018 <HAL_FLASH_Lock>
 800db5a:	b007      	add	sp, #28
 800db5c:	f85d fb04 	ldr.w	pc, [sp], #4
 800db60:	20008214 	.word	0x20008214
 800db64:	0001fff8 	.word	0x0001fff8

0800db68 <Init_MEMS_Mics>:
 800db68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db6a:	460c      	mov	r4, r1
 800db6c:	4913      	ldr	r1, [pc, #76]	; (800dbbc <Init_MEMS_Mics+0x54>)
 800db6e:	2310      	movs	r3, #16
 800db70:	2502      	movs	r5, #2
 800db72:	e9c1 3502 	strd	r3, r5, [r1, #8]
 800db76:	23f0      	movs	r3, #240	; 0xf0
 800db78:	e9c1 3000 	strd	r3, r0, [r1]
 800db7c:	4607      	mov	r7, r0
 800db7e:	2000      	movs	r0, #0
 800db80:	610c      	str	r4, [r1, #16]
 800db82:	f7f9 f937 	bl	8006df4 <BSP_AUDIO_IN_Init>
 800db86:	4606      	mov	r6, r0
 800db88:	b118      	cbz	r0, 800db92 <Init_MEMS_Mics+0x2a>
 800db8a:	480d      	ldr	r0, [pc, #52]	; (800dbc0 <Init_MEMS_Mics+0x58>)
 800db8c:	f008 fb36 	bl	80161fc <puts>
 800db90:	e7fe      	b.n	800db90 <Init_MEMS_Mics+0x28>
 800db92:	4639      	mov	r1, r7
 800db94:	480b      	ldr	r0, [pc, #44]	; (800dbc4 <Init_MEMS_Mics+0x5c>)
 800db96:	f008 fabd 	bl	8016114 <iprintf>
 800db9a:	4621      	mov	r1, r4
 800db9c:	4630      	mov	r0, r6
 800db9e:	f7f9 fb7f 	bl	80072a0 <BSP_AUDIO_IN_SetVolume>
 800dba2:	b118      	cbz	r0, 800dbac <Init_MEMS_Mics+0x44>
 800dba4:	4808      	ldr	r0, [pc, #32]	; (800dbc8 <Init_MEMS_Mics+0x60>)
 800dba6:	f008 fb29 	bl	80161fc <puts>
 800dbaa:	e7fe      	b.n	800dbaa <Init_MEMS_Mics+0x42>
 800dbac:	4621      	mov	r1, r4
 800dbae:	4807      	ldr	r0, [pc, #28]	; (800dbcc <Init_MEMS_Mics+0x64>)
 800dbb0:	f008 fab0 	bl	8016114 <iprintf>
 800dbb4:	4b06      	ldr	r3, [pc, #24]	; (800dbd0 <Init_MEMS_Mics+0x68>)
 800dbb6:	60dd      	str	r5, [r3, #12]
 800dbb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dbba:	bf00      	nop
 800dbbc:	2001220c 	.word	0x2001220c
 800dbc0:	0801a98b 	.word	0x0801a98b
 800dbc4:	0801a99e 	.word	0x0801a99e
 800dbc8:	0801a9c2 	.word	0x0801a9c2
 800dbcc:	0801a9d7 	.word	0x0801a9d7
 800dbd0:	20012220 	.word	0x20012220

0800dbd4 <InitTargetPlatform>:
 800dbd4:	b570      	push	{r4, r5, r6, lr}
 800dbd6:	4c6e      	ldr	r4, [pc, #440]	; (800dd90 <InitTargetPlatform+0x1bc>)
 800dbd8:	b088      	sub	sp, #32
 800dbda:	7020      	strb	r0, [r4, #0]
 800dbdc:	f003 fa5e 	bl	801109c <UART_Global_Init>
 800dbe0:	2800      	cmp	r0, #0
 800dbe2:	f000 80c6 	beq.w	800dd72 <InitTargetPlatform+0x19e>
 800dbe6:	f000 fb82 	bl	800e2ee <Error_Handler>
 800dbea:	2101      	movs	r1, #1
 800dbec:	2000      	movs	r0, #0
 800dbee:	f7f8 ff4b 	bl	8006a88 <BSP_PB_Init>
 800dbf2:	2000      	movs	r0, #0
 800dbf4:	f7f8 ff0c 	bl	8006a10 <BSP_LED_Init>
 800dbf8:	2330      	movs	r3, #48	; 0x30
 800dbfa:	e9cd 3300 	strd	r3, r3, [sp]
 800dbfe:	4a65      	ldr	r2, [pc, #404]	; (800dd94 <InitTargetPlatform+0x1c0>)
 800dc00:	4965      	ldr	r1, [pc, #404]	; (800dd98 <InitTargetPlatform+0x1c4>)
 800dc02:	4866      	ldr	r0, [pc, #408]	; (800dd9c <InitTargetPlatform+0x1c8>)
 800dc04:	2331      	movs	r3, #49	; 0x31
 800dc06:	f008 fa85 	bl	8016114 <iprintf>
 800dc0a:	2214      	movs	r2, #20
 800dc0c:	2100      	movs	r1, #0
 800dc0e:	4860      	ldr	r0, [pc, #384]	; (800dd90 <InitTargetPlatform+0x1bc>)
 800dc10:	f008 f9cf 	bl	8015fb2 <memset>
 800dc14:	2600      	movs	r6, #0
 800dc16:	4b62      	ldr	r3, [pc, #392]	; (800dda0 <InitTargetPlatform+0x1cc>)
 800dc18:	9602      	str	r6, [sp, #8]
 800dc1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dc1c:	4861      	ldr	r0, [pc, #388]	; (800dda4 <InitTargetPlatform+0x1d0>)
 800dc1e:	f042 0204 	orr.w	r2, r2, #4
 800dc22:	631a      	str	r2, [r3, #48]	; 0x30
 800dc24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc26:	f003 0304 	and.w	r3, r3, #4
 800dc2a:	9302      	str	r3, [sp, #8]
 800dc2c:	9b02      	ldr	r3, [sp, #8]
 800dc2e:	4b5e      	ldr	r3, [pc, #376]	; (800dda8 <InitTargetPlatform+0x1d4>)
 800dc30:	2502      	movs	r5, #2
 800dc32:	a903      	add	r1, sp, #12
 800dc34:	e9cd 5303 	strd	r5, r3, [sp, #12]
 800dc38:	e9cd 6505 	strd	r6, r5, [sp, #20]
 800dc3c:	f7fa fb18 	bl	8008270 <HAL_GPIO_Init>
 800dc40:	4631      	mov	r1, r6
 800dc42:	4632      	mov	r2, r6
 800dc44:	2007      	movs	r0, #7
 800dc46:	f7f9 feb7 	bl	80079b8 <HAL_NVIC_SetPriority>
 800dc4a:	2007      	movs	r0, #7
 800dc4c:	f7f9 fee8 	bl	8007a20 <HAL_NVIC_EnableIRQ>
 800dc50:	4856      	ldr	r0, [pc, #344]	; (800ddac <InitTargetPlatform+0x1d8>)
 800dc52:	f008 fad3 	bl	80161fc <puts>
 800dc56:	2103      	movs	r1, #3
 800dc58:	4628      	mov	r0, r5
 800dc5a:	f003 fc2b 	bl	80114b4 <IKS01A2_MOTION_SENSOR_Init>
 800dc5e:	2800      	cmp	r0, #0
 800dc60:	f040 808b 	bne.w	800dd7a <InitTargetPlatform+0x1a6>
 800dc64:	2301      	movs	r3, #1
 800dc66:	4852      	ldr	r0, [pc, #328]	; (800ddb0 <InitTargetPlatform+0x1dc>)
 800dc68:	7163      	strb	r3, [r4, #5]
 800dc6a:	71a3      	strb	r3, [r4, #6]
 800dc6c:	f008 fa52 	bl	8016114 <iprintf>
 800dc70:	4850      	ldr	r0, [pc, #320]	; (800ddb4 <InitTargetPlatform+0x1e0>)
 800dc72:	f008 fa4f 	bl	8016114 <iprintf>
 800dc76:	4850      	ldr	r0, [pc, #320]	; (800ddb8 <InitTargetPlatform+0x1e4>)
 800dc78:	f008 fa4c 	bl	8016114 <iprintf>
 800dc7c:	2104      	movs	r1, #4
 800dc7e:	2001      	movs	r0, #1
 800dc80:	f003 fc18 	bl	80114b4 <IKS01A2_MOTION_SENSOR_Init>
 800dc84:	2800      	cmp	r0, #0
 800dc86:	d17d      	bne.n	800dd84 <InitTargetPlatform+0x1b0>
 800dc88:	2301      	movs	r3, #1
 800dc8a:	484c      	ldr	r0, [pc, #304]	; (800ddbc <InitTargetPlatform+0x1e8>)
 800dc8c:	71e3      	strb	r3, [r4, #7]
 800dc8e:	f008 fa41 	bl	8016114 <iprintf>
 800dc92:	2105      	movs	r1, #5
 800dc94:	2000      	movs	r0, #0
 800dc96:	f7f9 fc99 	bl	80075cc <IKS01A2_ENV_SENSOR_Init>
 800dc9a:	2800      	cmp	r0, #0
 800dc9c:	d174      	bne.n	800dd88 <InitTargetPlatform+0x1b4>
 800dc9e:	2301      	movs	r3, #1
 800dca0:	7063      	strb	r3, [r4, #1]
 800dca2:	7123      	strb	r3, [r4, #4]
 800dca4:	68a3      	ldr	r3, [r4, #8]
 800dca6:	4846      	ldr	r0, [pc, #280]	; (800ddc0 <InitTargetPlatform+0x1ec>)
 800dca8:	3301      	adds	r3, #1
 800dcaa:	60a3      	str	r3, [r4, #8]
 800dcac:	f008 fa32 	bl	8016114 <iprintf>
 800dcb0:	2103      	movs	r1, #3
 800dcb2:	2001      	movs	r0, #1
 800dcb4:	f7f9 fc8a 	bl	80075cc <IKS01A2_ENV_SENSOR_Init>
 800dcb8:	2800      	cmp	r0, #0
 800dcba:	d167      	bne.n	800dd8c <InitTargetPlatform+0x1b8>
 800dcbc:	f240 1301 	movw	r3, #257	; 0x101
 800dcc0:	8063      	strh	r3, [r4, #2]
 800dcc2:	68a3      	ldr	r3, [r4, #8]
 800dcc4:	483f      	ldr	r0, [pc, #252]	; (800ddc4 <InitTargetPlatform+0x1f0>)
 800dcc6:	3301      	adds	r3, #1
 800dcc8:	60a3      	str	r3, [r4, #8]
 800dcca:	f008 fa23 	bl	8016114 <iprintf>
 800dcce:	7963      	ldrb	r3, [r4, #5]
 800dcd0:	b13b      	cbz	r3, 800dce2 <InitTargetPlatform+0x10e>
 800dcd2:	2102      	movs	r1, #2
 800dcd4:	4608      	mov	r0, r1
 800dcd6:	f003 fd57 	bl	8011788 <IKS01A2_MOTION_SENSOR_Enable>
 800dcda:	b910      	cbnz	r0, 800dce2 <InitTargetPlatform+0x10e>
 800dcdc:	483a      	ldr	r0, [pc, #232]	; (800ddc8 <InitTargetPlatform+0x1f4>)
 800dcde:	f008 fa19 	bl	8016114 <iprintf>
 800dce2:	79a3      	ldrb	r3, [r4, #6]
 800dce4:	b13b      	cbz	r3, 800dcf6 <InitTargetPlatform+0x122>
 800dce6:	2101      	movs	r1, #1
 800dce8:	2002      	movs	r0, #2
 800dcea:	f003 fd4d 	bl	8011788 <IKS01A2_MOTION_SENSOR_Enable>
 800dcee:	b910      	cbnz	r0, 800dcf6 <InitTargetPlatform+0x122>
 800dcf0:	4836      	ldr	r0, [pc, #216]	; (800ddcc <InitTargetPlatform+0x1f8>)
 800dcf2:	f008 fa0f 	bl	8016114 <iprintf>
 800dcf6:	79e3      	ldrb	r3, [r4, #7]
 800dcf8:	b13b      	cbz	r3, 800dd0a <InitTargetPlatform+0x136>
 800dcfa:	2104      	movs	r1, #4
 800dcfc:	2001      	movs	r0, #1
 800dcfe:	f003 fd43 	bl	8011788 <IKS01A2_MOTION_SENSOR_Enable>
 800dd02:	b910      	cbnz	r0, 800dd0a <InitTargetPlatform+0x136>
 800dd04:	4832      	ldr	r0, [pc, #200]	; (800ddd0 <InitTargetPlatform+0x1fc>)
 800dd06:	f008 fa05 	bl	8016114 <iprintf>
 800dd0a:	7863      	ldrb	r3, [r4, #1]
 800dd0c:	b13b      	cbz	r3, 800dd1e <InitTargetPlatform+0x14a>
 800dd0e:	2101      	movs	r1, #1
 800dd10:	2000      	movs	r0, #0
 800dd12:	f7f9 fd77 	bl	8007804 <IKS01A2_ENV_SENSOR_Enable>
 800dd16:	b910      	cbnz	r0, 800dd1e <InitTargetPlatform+0x14a>
 800dd18:	482e      	ldr	r0, [pc, #184]	; (800ddd4 <InitTargetPlatform+0x200>)
 800dd1a:	f008 f9fb 	bl	8016114 <iprintf>
 800dd1e:	7923      	ldrb	r3, [r4, #4]
 800dd20:	b13b      	cbz	r3, 800dd32 <InitTargetPlatform+0x15e>
 800dd22:	2104      	movs	r1, #4
 800dd24:	2000      	movs	r0, #0
 800dd26:	f7f9 fd6d 	bl	8007804 <IKS01A2_ENV_SENSOR_Enable>
 800dd2a:	b910      	cbnz	r0, 800dd32 <InitTargetPlatform+0x15e>
 800dd2c:	482a      	ldr	r0, [pc, #168]	; (800ddd8 <InitTargetPlatform+0x204>)
 800dd2e:	f008 f9f1 	bl	8016114 <iprintf>
 800dd32:	78a3      	ldrb	r3, [r4, #2]
 800dd34:	b13b      	cbz	r3, 800dd46 <InitTargetPlatform+0x172>
 800dd36:	2101      	movs	r1, #1
 800dd38:	4608      	mov	r0, r1
 800dd3a:	f7f9 fd63 	bl	8007804 <IKS01A2_ENV_SENSOR_Enable>
 800dd3e:	b910      	cbnz	r0, 800dd46 <InitTargetPlatform+0x172>
 800dd40:	4826      	ldr	r0, [pc, #152]	; (800dddc <InitTargetPlatform+0x208>)
 800dd42:	f008 f9e7 	bl	8016114 <iprintf>
 800dd46:	78e3      	ldrb	r3, [r4, #3]
 800dd48:	b13b      	cbz	r3, 800dd5a <InitTargetPlatform+0x186>
 800dd4a:	2102      	movs	r1, #2
 800dd4c:	2001      	movs	r0, #1
 800dd4e:	f7f9 fd59 	bl	8007804 <IKS01A2_ENV_SENSOR_Enable>
 800dd52:	b910      	cbnz	r0, 800dd5a <InitTargetPlatform+0x186>
 800dd54:	4822      	ldr	r0, [pc, #136]	; (800dde0 <InitTargetPlatform+0x20c>)
 800dd56:	f008 f9dd 	bl	8016114 <iprintf>
 800dd5a:	2140      	movs	r1, #64	; 0x40
 800dd5c:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 800dd60:	f7ff ff02 	bl	800db68 <Init_MEMS_Mics>
 800dd64:	481f      	ldr	r0, [pc, #124]	; (800dde4 <InitTargetPlatform+0x210>)
 800dd66:	f008 f9d5 	bl	8016114 <iprintf>
 800dd6a:	2300      	movs	r3, #0
 800dd6c:	7463      	strb	r3, [r4, #17]
 800dd6e:	b008      	add	sp, #32
 800dd70:	bd70      	pop	{r4, r5, r6, pc}
 800dd72:	481d      	ldr	r0, [pc, #116]	; (800dde8 <InitTargetPlatform+0x214>)
 800dd74:	f008 fa42 	bl	80161fc <puts>
 800dd78:	e737      	b.n	800dbea <InitTargetPlatform+0x16>
 800dd7a:	481c      	ldr	r0, [pc, #112]	; (800ddec <InitTargetPlatform+0x218>)
 800dd7c:	f008 f9ca 	bl	8016114 <iprintf>
 800dd80:	481b      	ldr	r0, [pc, #108]	; (800ddf0 <InitTargetPlatform+0x21c>)
 800dd82:	e779      	b.n	800dc78 <InitTargetPlatform+0xa4>
 800dd84:	481b      	ldr	r0, [pc, #108]	; (800ddf4 <InitTargetPlatform+0x220>)
 800dd86:	e782      	b.n	800dc8e <InitTargetPlatform+0xba>
 800dd88:	481b      	ldr	r0, [pc, #108]	; (800ddf8 <InitTargetPlatform+0x224>)
 800dd8a:	e78f      	b.n	800dcac <InitTargetPlatform+0xd8>
 800dd8c:	481b      	ldr	r0, [pc, #108]	; (800ddfc <InitTargetPlatform+0x228>)
 800dd8e:	e79c      	b.n	800dcca <InitTargetPlatform+0xf6>
 800dd90:	20012220 	.word	0x20012220
 800dd94:	0801aa09 	.word	0x0801aa09
 800dd98:	0801aa2e 	.word	0x0801aa2e
 800dd9c:	0801aa3e 	.word	0x0801aa3e
 800dda0:	40023800 	.word	0x40023800
 800dda4:	40020800 	.word	0x40020800
 800dda8:	10110000 	.word	0x10110000
 800ddac:	0801aa8d 	.word	0x0801aa8d
 800ddb0:	0801aaa6 	.word	0x0801aaa6
 800ddb4:	0801aac1 	.word	0x0801aac1
 800ddb8:	0801aad7 	.word	0x0801aad7
 800ddbc:	0801ab21 	.word	0x0801ab21
 800ddc0:	0801ab4e 	.word	0x0801ab4e
 800ddc4:	0801aba3 	.word	0x0801aba3
 800ddc8:	0801abf8 	.word	0x0801abf8
 800ddcc:	0801ac13 	.word	0x0801ac13
 800ddd0:	0801ac2f 	.word	0x0801ac2f
 800ddd4:	0801ac49 	.word	0x0801ac49
 800ddd8:	0801ac6a 	.word	0x0801ac6a
 800dddc:	0801ac88 	.word	0x0801ac88
 800dde0:	0801aca9 	.word	0x0801aca9
 800dde4:	0801b281 	.word	0x0801b281
 800dde8:	0801a9f7 	.word	0x0801a9f7
 800ddec:	0801aaee 	.word	0x0801aaee
 800ddf0:	0801ab07 	.word	0x0801ab07
 800ddf4:	0801ab36 	.word	0x0801ab36
 800ddf8:	0801ab77 	.word	0x0801ab77
 800ddfc:	0801abcc 	.word	0x0801abcc

0800de00 <InitMics>:
 800de00:	b508      	push	{r3, lr}
 800de02:	f7ff feb1 	bl	800db68 <Init_MEMS_Mics>
 800de06:	2200      	movs	r2, #0
 800de08:	4902      	ldr	r1, [pc, #8]	; (800de14 <InitMics+0x14>)
 800de0a:	4610      	mov	r0, r2
 800de0c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800de10:	f7f9 b9f0 	b.w	80071f4 <BSP_AUDIO_IN_Record>
 800de14:	20012274 	.word	0x20012274

0800de18 <DeInitMics>:
 800de18:	b510      	push	{r4, lr}
 800de1a:	2000      	movs	r0, #0
 800de1c:	f7f9 fa22 	bl	8007264 <BSP_AUDIO_IN_Stop>
 800de20:	4604      	mov	r4, r0
 800de22:	b118      	cbz	r0, 800de2c <DeInitMics+0x14>
 800de24:	4809      	ldr	r0, [pc, #36]	; (800de4c <DeInitMics+0x34>)
 800de26:	f008 f9e9 	bl	80161fc <puts>
 800de2a:	e7fe      	b.n	800de2a <DeInitMics+0x12>
 800de2c:	4808      	ldr	r0, [pc, #32]	; (800de50 <DeInitMics+0x38>)
 800de2e:	f008 f9e5 	bl	80161fc <puts>
 800de32:	4620      	mov	r0, r4
 800de34:	f7f8 fe66 	bl	8006b04 <BSP_AUDIO_IN_DeInit>
 800de38:	b118      	cbz	r0, 800de42 <DeInitMics+0x2a>
 800de3a:	4806      	ldr	r0, [pc, #24]	; (800de54 <DeInitMics+0x3c>)
 800de3c:	f008 f9de 	bl	80161fc <puts>
 800de40:	e7fe      	b.n	800de40 <DeInitMics+0x28>
 800de42:	4805      	ldr	r0, [pc, #20]	; (800de58 <DeInitMics+0x40>)
 800de44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800de48:	f008 b9d8 	b.w	80161fc <puts>
 800de4c:	0801acc7 	.word	0x0801acc7
 800de50:	0801acd9 	.word	0x0801acd9
 800de54:	0801ace8 	.word	0x0801ace8
 800de58:	0801acfc 	.word	0x0801acfc

0800de5c <LedOnTargetPlatform>:
 800de5c:	b508      	push	{r3, lr}
 800de5e:	2000      	movs	r0, #0
 800de60:	f7f8 fdfe 	bl	8006a60 <BSP_LED_On>
 800de64:	4b01      	ldr	r3, [pc, #4]	; (800de6c <LedOnTargetPlatform+0x10>)
 800de66:	2201      	movs	r2, #1
 800de68:	741a      	strb	r2, [r3, #16]
 800de6a:	bd08      	pop	{r3, pc}
 800de6c:	20012220 	.word	0x20012220

0800de70 <LedOffTargetPlatform>:
 800de70:	b508      	push	{r3, lr}
 800de72:	2000      	movs	r0, #0
 800de74:	f7f8 fdfe 	bl	8006a74 <BSP_LED_Off>
 800de78:	4b01      	ldr	r3, [pc, #4]	; (800de80 <LedOffTargetPlatform+0x10>)
 800de7a:	2200      	movs	r2, #0
 800de7c:	741a      	strb	r2, [r3, #16]
 800de7e:	bd08      	pop	{r3, pc}
 800de80:	20012220 	.word	0x20012220

0800de84 <UserFunctionForErasingFlash>:
 800de84:	b530      	push	{r4, r5, lr}
 800de86:	b087      	sub	sp, #28
 800de88:	2302      	movs	r3, #2
 800de8a:	9305      	str	r3, [sp, #20]
 800de8c:	2500      	movs	r5, #0
 800de8e:	2307      	movs	r3, #7
 800de90:	2401      	movs	r4, #1
 800de92:	e9cd 5500 	strd	r5, r5, [sp]
 800de96:	e9cd 3403 	strd	r3, r4, [sp, #12]
 800de9a:	f7fa f8ab 	bl	8007ff4 <HAL_FLASH_Unlock>
 800de9e:	4669      	mov	r1, sp
 800dea0:	a801      	add	r0, sp, #4
 800dea2:	f7fa f997 	bl	80081d4 <HAL_FLASHEx_Erase>
 800dea6:	b110      	cbz	r0, 800deae <UserFunctionForErasingFlash+0x2a>
 800dea8:	f000 fa21 	bl	800e2ee <Error_Handler>
 800deac:	462c      	mov	r4, r5
 800deae:	f7fa f8b3 	bl	8008018 <HAL_FLASH_Lock>
 800deb2:	4620      	mov	r0, r4
 800deb4:	b007      	add	sp, #28
 800deb6:	bd30      	pop	{r4, r5, pc}

0800deb8 <UserFunctionForSavingFlash>:
 800deb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800deba:	4604      	mov	r4, r0
 800debc:	460f      	mov	r7, r1
 800debe:	f7fa f899 	bl	8007ff4 <HAL_FLASH_Unlock>
 800dec2:	4d0b      	ldr	r5, [pc, #44]	; (800def0 <UserFunctionForSavingFlash+0x38>)
 800dec4:	2601      	movs	r6, #1
 800dec6:	42a7      	cmp	r7, r4
 800dec8:	4623      	mov	r3, r4
 800deca:	d803      	bhi.n	800ded4 <UserFunctionForSavingFlash+0x1c>
 800decc:	f7fa f8a4 	bl	8008018 <HAL_FLASH_Lock>
 800ded0:	4630      	mov	r0, r6
 800ded2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ded4:	681a      	ldr	r2, [r3, #0]
 800ded6:	4629      	mov	r1, r5
 800ded8:	2300      	movs	r3, #0
 800deda:	2002      	movs	r0, #2
 800dedc:	3404      	adds	r4, #4
 800dede:	f7fa f8cf 	bl	8008080 <HAL_FLASH_Program>
 800dee2:	b908      	cbnz	r0, 800dee8 <UserFunctionForSavingFlash+0x30>
 800dee4:	3504      	adds	r5, #4
 800dee6:	e7ee      	b.n	800dec6 <UserFunctionForSavingFlash+0xe>
 800dee8:	f000 fa01 	bl	800e2ee <Error_Handler>
 800deec:	2600      	movs	r6, #0
 800deee:	e7ea      	b.n	800dec6 <UserFunctionForSavingFlash+0xe>
 800def0:	0807f000 	.word	0x0807f000

0800def4 <uartSendChar>:
 800def4:	b507      	push	{r0, r1, r2, lr}
 800def6:	a902      	add	r1, sp, #8
 800def8:	f04f 33ff 	mov.w	r3, #4294967295
 800defc:	f841 0d04 	str.w	r0, [r1, #-4]!
 800df00:	2201      	movs	r2, #1
 800df02:	4803      	ldr	r0, [pc, #12]	; (800df10 <uartSendChar+0x1c>)
 800df04:	f7fd f8f0 	bl	800b0e8 <HAL_UART_Transmit>
 800df08:	9801      	ldr	r0, [sp, #4]
 800df0a:	b003      	add	sp, #12
 800df0c:	f85d fb04 	ldr.w	pc, [sp], #4
 800df10:	20012720 	.word	0x20012720

0800df14 <uartReceiveChar>:
 800df14:	b507      	push	{r0, r1, r2, lr}
 800df16:	f04f 33ff 	mov.w	r3, #4294967295
 800df1a:	2201      	movs	r2, #1
 800df1c:	f10d 0106 	add.w	r1, sp, #6
 800df20:	480e      	ldr	r0, [pc, #56]	; (800df5c <uartReceiveChar+0x48>)
 800df22:	f7fd f93b 	bl	800b19c <HAL_UART_Receive>
 800df26:	f04f 33ff 	mov.w	r3, #4294967295
 800df2a:	2201      	movs	r2, #1
 800df2c:	f10d 0106 	add.w	r1, sp, #6
 800df30:	480a      	ldr	r0, [pc, #40]	; (800df5c <uartReceiveChar+0x48>)
 800df32:	f7fd f8d9 	bl	800b0e8 <HAL_UART_Transmit>
 800df36:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800df3a:	2b0d      	cmp	r3, #13
 800df3c:	d109      	bne.n	800df52 <uartReceiveChar+0x3e>
 800df3e:	a902      	add	r1, sp, #8
 800df40:	230a      	movs	r3, #10
 800df42:	f801 3d01 	strb.w	r3, [r1, #-1]!
 800df46:	2201      	movs	r2, #1
 800df48:	f04f 33ff 	mov.w	r3, #4294967295
 800df4c:	4803      	ldr	r0, [pc, #12]	; (800df5c <uartReceiveChar+0x48>)
 800df4e:	f7fd f8cb 	bl	800b0e8 <HAL_UART_Transmit>
 800df52:	f89d 0006 	ldrb.w	r0, [sp, #6]
 800df56:	b003      	add	sp, #12
 800df58:	f85d fb04 	ldr.w	pc, [sp], #4
 800df5c:	20012720 	.word	0x20012720

0800df60 <__io_putchar>:
 800df60:	f7ff bfc8 	b.w	800def4 <uartSendChar>

0800df64 <__io_getchar>:
 800df64:	f7ff bfd6 	b.w	800df14 <uartReceiveChar>

0800df68 <HCI_TL_SPI_Init>:
 800df68:	b570      	push	{r4, r5, r6, lr}
 800df6a:	b086      	sub	sp, #24
 800df6c:	2400      	movs	r4, #0
 800df6e:	4b16      	ldr	r3, [pc, #88]	; (800dfc8 <HCI_TL_SPI_Init+0x60>)
 800df70:	9400      	str	r4, [sp, #0]
 800df72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800df74:	4d15      	ldr	r5, [pc, #84]	; (800dfcc <HCI_TL_SPI_Init+0x64>)
 800df76:	f042 0201 	orr.w	r2, r2, #1
 800df7a:	631a      	str	r2, [r3, #48]	; 0x30
 800df7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df7e:	9403      	str	r4, [sp, #12]
 800df80:	f003 0301 	and.w	r3, r3, #1
 800df84:	9300      	str	r3, [sp, #0]
 800df86:	9b00      	ldr	r3, [sp, #0]
 800df88:	4b11      	ldr	r3, [pc, #68]	; (800dfd0 <HCI_TL_SPI_Init+0x68>)
 800df8a:	2601      	movs	r6, #1
 800df8c:	a901      	add	r1, sp, #4
 800df8e:	4628      	mov	r0, r5
 800df90:	e9cd 6301 	strd	r6, r3, [sp, #4]
 800df94:	f7fa f96c 	bl	8008270 <HAL_GPIO_Init>
 800df98:	f44f 7380 	mov.w	r3, #256	; 0x100
 800df9c:	a901      	add	r1, sp, #4
 800df9e:	4628      	mov	r0, r5
 800dfa0:	e9cd 3601 	strd	r3, r6, [sp, #4]
 800dfa4:	e9cd 4403 	strd	r4, r4, [sp, #12]
 800dfa8:	f7fa f962 	bl	8008270 <HAL_GPIO_Init>
 800dfac:	2302      	movs	r3, #2
 800dfae:	a901      	add	r1, sp, #4
 800dfb0:	4628      	mov	r0, r5
 800dfb2:	e9cd 3601 	strd	r3, r6, [sp, #4]
 800dfb6:	e9cd 4403 	strd	r4, r4, [sp, #12]
 800dfba:	f7fa f959 	bl	8008270 <HAL_GPIO_Init>
 800dfbe:	f000 fff5 	bl	800efac <BSP_SPI1_Init>
 800dfc2:	b006      	add	sp, #24
 800dfc4:	bd70      	pop	{r4, r5, r6, pc}
 800dfc6:	bf00      	nop
 800dfc8:	40023800 	.word	0x40023800
 800dfcc:	40020000 	.word	0x40020000
 800dfd0:	10110000 	.word	0x10110000

0800dfd4 <HCI_TL_SPI_DeInit>:
 800dfd4:	b510      	push	{r4, lr}
 800dfd6:	4c08      	ldr	r4, [pc, #32]	; (800dff8 <HCI_TL_SPI_DeInit+0x24>)
 800dfd8:	2101      	movs	r1, #1
 800dfda:	4620      	mov	r0, r4
 800dfdc:	f7fa fa22 	bl	8008424 <HAL_GPIO_DeInit>
 800dfe0:	4620      	mov	r0, r4
 800dfe2:	2102      	movs	r1, #2
 800dfe4:	f7fa fa1e 	bl	8008424 <HAL_GPIO_DeInit>
 800dfe8:	4620      	mov	r0, r4
 800dfea:	f44f 7180 	mov.w	r1, #256	; 0x100
 800dfee:	f7fa fa19 	bl	8008424 <HAL_GPIO_DeInit>
 800dff2:	2000      	movs	r0, #0
 800dff4:	bd10      	pop	{r4, pc}
 800dff6:	bf00      	nop
 800dff8:	40020000 	.word	0x40020000

0800dffc <HCI_TL_SPI_Reset>:
 800dffc:	b510      	push	{r4, lr}
 800dffe:	4c0a      	ldr	r4, [pc, #40]	; (800e028 <HCI_TL_SPI_Reset+0x2c>)
 800e000:	2200      	movs	r2, #0
 800e002:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e006:	4620      	mov	r0, r4
 800e008:	f7fa faa6 	bl	8008558 <HAL_GPIO_WritePin>
 800e00c:	2005      	movs	r0, #5
 800e00e:	f000 f95f 	bl	800e2d0 <HAL_Delay>
 800e012:	2201      	movs	r2, #1
 800e014:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e018:	4620      	mov	r0, r4
 800e01a:	f7fa fa9d 	bl	8008558 <HAL_GPIO_WritePin>
 800e01e:	2005      	movs	r0, #5
 800e020:	f000 f956 	bl	800e2d0 <HAL_Delay>
 800e024:	2000      	movs	r0, #0
 800e026:	bd10      	pop	{r4, pc}
 800e028:	40020000 	.word	0x40020000

0800e02c <HCI_TL_SPI_Receive>:
 800e02c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e02e:	b087      	sub	sp, #28
 800e030:	23ff      	movs	r3, #255	; 0xff
 800e032:	2500      	movs	r5, #0
 800e034:	f88d 3006 	strb.w	r3, [sp, #6]
 800e038:	462a      	mov	r2, r5
 800e03a:	230b      	movs	r3, #11
 800e03c:	4607      	mov	r7, r0
 800e03e:	460e      	mov	r6, r1
 800e040:	4819      	ldr	r0, [pc, #100]	; (800e0a8 <HCI_TL_SPI_Receive+0x7c>)
 800e042:	9302      	str	r3, [sp, #8]
 800e044:	2102      	movs	r1, #2
 800e046:	f88d 500c 	strb.w	r5, [sp, #12]
 800e04a:	f7fa fa85 	bl	8008558 <HAL_GPIO_WritePin>
 800e04e:	2205      	movs	r2, #5
 800e050:	a904      	add	r1, sp, #16
 800e052:	a802      	add	r0, sp, #8
 800e054:	f000 ff1e 	bl	800ee94 <BSP_SPI1_SendRecv>
 800e058:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800e05c:	2b02      	cmp	r3, #2
 800e05e:	d121      	bne.n	800e0a4 <HCI_TL_SPI_Receive+0x78>
 800e060:	f89d 4014 	ldrb.w	r4, [sp, #20]
 800e064:	f89d 3013 	ldrb.w	r3, [sp, #19]
 800e068:	ea53 2404 	orrs.w	r4, r3, r4, lsl #8
 800e06c:	d007      	beq.n	800e07e <HCI_TL_SPI_Receive+0x52>
 800e06e:	42a6      	cmp	r6, r4
 800e070:	bf28      	it	cs
 800e072:	4626      	movcs	r6, r4
 800e074:	b2ec      	uxtb	r4, r5
 800e076:	42b4      	cmp	r4, r6
 800e078:	f105 0501 	add.w	r5, r5, #1
 800e07c:	d307      	bcc.n	800e08e <HCI_TL_SPI_Receive+0x62>
 800e07e:	2201      	movs	r2, #1
 800e080:	2102      	movs	r1, #2
 800e082:	4809      	ldr	r0, [pc, #36]	; (800e0a8 <HCI_TL_SPI_Receive+0x7c>)
 800e084:	f7fa fa68 	bl	8008558 <HAL_GPIO_WritePin>
 800e088:	4620      	mov	r0, r4
 800e08a:	b007      	add	sp, #28
 800e08c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e08e:	2201      	movs	r2, #1
 800e090:	f10d 0107 	add.w	r1, sp, #7
 800e094:	f10d 0006 	add.w	r0, sp, #6
 800e098:	f000 fefc 	bl	800ee94 <BSP_SPI1_SendRecv>
 800e09c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e0a0:	553b      	strb	r3, [r7, r4]
 800e0a2:	e7e7      	b.n	800e074 <HCI_TL_SPI_Receive+0x48>
 800e0a4:	462c      	mov	r4, r5
 800e0a6:	e7ea      	b.n	800e07e <HCI_TL_SPI_Receive+0x52>
 800e0a8:	40020000 	.word	0x40020000

0800e0ac <HCI_TL_SPI_Send>:
 800e0ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e0b0:	b085      	sub	sp, #20
 800e0b2:	230a      	movs	r3, #10
 800e0b4:	9300      	str	r3, [sp, #0]
 800e0b6:	2300      	movs	r3, #0
 800e0b8:	4680      	mov	r8, r0
 800e0ba:	460d      	mov	r5, r1
 800e0bc:	f88d 3004 	strb.w	r3, [sp, #4]
 800e0c0:	f7f9 fc5e 	bl	8007980 <HAL_GetTick>
 800e0c4:	4e1a      	ldr	r6, [pc, #104]	; (800e130 <HCI_TL_SPI_Send+0x84>)
 800e0c6:	f8df 906c 	ldr.w	r9, [pc, #108]	; 800e134 <HCI_TL_SPI_Send+0x88>
 800e0ca:	4607      	mov	r7, r0
 800e0cc:	2200      	movs	r2, #0
 800e0ce:	2102      	movs	r1, #2
 800e0d0:	4630      	mov	r0, r6
 800e0d2:	f7fa fa41 	bl	8008558 <HAL_GPIO_WritePin>
 800e0d6:	2205      	movs	r2, #5
 800e0d8:	a902      	add	r1, sp, #8
 800e0da:	4668      	mov	r0, sp
 800e0dc:	f000 feda 	bl	800ee94 <BSP_SPI1_SendRecv>
 800e0e0:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800e0e4:	2b02      	cmp	r3, #2
 800e0e6:	d119      	bne.n	800e11c <HCI_TL_SPI_Send+0x70>
 800e0e8:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800e0ec:	42ab      	cmp	r3, r5
 800e0ee:	d318      	bcc.n	800e122 <HCI_TL_SPI_Send+0x76>
 800e0f0:	462a      	mov	r2, r5
 800e0f2:	4649      	mov	r1, r9
 800e0f4:	4640      	mov	r0, r8
 800e0f6:	f000 fecd 	bl	800ee94 <BSP_SPI1_SendRecv>
 800e0fa:	2400      	movs	r4, #0
 800e0fc:	2201      	movs	r2, #1
 800e0fe:	2102      	movs	r1, #2
 800e100:	4630      	mov	r0, r6
 800e102:	f7fa fa29 	bl	8008558 <HAL_GPIO_WritePin>
 800e106:	f7f9 fc3b 	bl	8007980 <HAL_GetTick>
 800e10a:	1bc0      	subs	r0, r0, r7
 800e10c:	280f      	cmp	r0, #15
 800e10e:	d80b      	bhi.n	800e128 <HCI_TL_SPI_Send+0x7c>
 800e110:	2c00      	cmp	r4, #0
 800e112:	d1db      	bne.n	800e0cc <HCI_TL_SPI_Send+0x20>
 800e114:	4620      	mov	r0, r4
 800e116:	b005      	add	sp, #20
 800e118:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e11c:	f04f 34ff 	mov.w	r4, #4294967295
 800e120:	e7ec      	b.n	800e0fc <HCI_TL_SPI_Send+0x50>
 800e122:	f06f 0401 	mvn.w	r4, #1
 800e126:	e7e9      	b.n	800e0fc <HCI_TL_SPI_Send+0x50>
 800e128:	f06f 0402 	mvn.w	r4, #2
 800e12c:	e7f2      	b.n	800e114 <HCI_TL_SPI_Send+0x68>
 800e12e:	bf00      	nop
 800e130:	40020000 	.word	0x40020000
 800e134:	2000821c 	.word	0x2000821c

0800e138 <hci_tl_lowlevel_init>:
 800e138:	b500      	push	{lr}
 800e13a:	b089      	sub	sp, #36	; 0x24
 800e13c:	4b0c      	ldr	r3, [pc, #48]	; (800e170 <hci_tl_lowlevel_init+0x38>)
 800e13e:	9301      	str	r3, [sp, #4]
 800e140:	4b0c      	ldr	r3, [pc, #48]	; (800e174 <hci_tl_lowlevel_init+0x3c>)
 800e142:	9302      	str	r3, [sp, #8]
 800e144:	4b0c      	ldr	r3, [pc, #48]	; (800e178 <hci_tl_lowlevel_init+0x40>)
 800e146:	9305      	str	r3, [sp, #20]
 800e148:	4b0c      	ldr	r3, [pc, #48]	; (800e17c <hci_tl_lowlevel_init+0x44>)
 800e14a:	9304      	str	r3, [sp, #16]
 800e14c:	4b0c      	ldr	r3, [pc, #48]	; (800e180 <hci_tl_lowlevel_init+0x48>)
 800e14e:	9303      	str	r3, [sp, #12]
 800e150:	a801      	add	r0, sp, #4
 800e152:	4b0c      	ldr	r3, [pc, #48]	; (800e184 <hci_tl_lowlevel_init+0x4c>)
 800e154:	9307      	str	r3, [sp, #28]
 800e156:	f7fd fbf5 	bl	800b944 <hci_register_io_bus>
 800e15a:	2200      	movs	r2, #0
 800e15c:	2103      	movs	r1, #3
 800e15e:	2006      	movs	r0, #6
 800e160:	f7f9 fc2a 	bl	80079b8 <HAL_NVIC_SetPriority>
 800e164:	2006      	movs	r0, #6
 800e166:	f7f9 fc5b 	bl	8007a20 <HAL_NVIC_EnableIRQ>
 800e16a:	b009      	add	sp, #36	; 0x24
 800e16c:	f85d fb04 	ldr.w	pc, [sp], #4
 800e170:	0800df69 	.word	0x0800df69
 800e174:	0800dfd5 	.word	0x0800dfd5
 800e178:	0800e0ad 	.word	0x0800e0ad
 800e17c:	0800e02d 	.word	0x0800e02d
 800e180:	0800dffd 	.word	0x0800dffd
 800e184:	0800eebd 	.word	0x0800eebd

0800e188 <hci_tl_lowlevel_isr>:
 800e188:	b510      	push	{r4, lr}
 800e18a:	4c06      	ldr	r4, [pc, #24]	; (800e1a4 <hci_tl_lowlevel_isr+0x1c>)
 800e18c:	2101      	movs	r1, #1
 800e18e:	4620      	mov	r0, r4
 800e190:	f7fa f9dc 	bl	800854c <HAL_GPIO_ReadPin>
 800e194:	2801      	cmp	r0, #1
 800e196:	d000      	beq.n	800e19a <hci_tl_lowlevel_isr+0x12>
 800e198:	bd10      	pop	{r4, pc}
 800e19a:	2000      	movs	r0, #0
 800e19c:	f7fd fcc0 	bl	800bb20 <hci_notify_asynch_evt>
 800e1a0:	e7f4      	b.n	800e18c <hci_tl_lowlevel_isr+0x4>
 800e1a2:	bf00      	nop
 800e1a4:	40020000 	.word	0x40020000

0800e1a8 <AudioProcess>:
 800e1a8:	b538      	push	{r3, r4, r5, lr}
 800e1aa:	4a18      	ldr	r2, [pc, #96]	; (800e20c <AudioProcess+0x64>)
 800e1ac:	4918      	ldr	r1, [pc, #96]	; (800e210 <AudioProcess+0x68>)
 800e1ae:	2000      	movs	r0, #0
 800e1b0:	f7f8 ffe0 	bl	8007174 <BSP_AUDIO_IN_PDMToPCM>
 800e1b4:	4b17      	ldr	r3, [pc, #92]	; (800e214 <AudioProcess+0x6c>)
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	071b      	lsls	r3, r3, #28
 800e1ba:	d525      	bpl.n	800e208 <AudioProcess+0x60>
 800e1bc:	4b16      	ldr	r3, [pc, #88]	; (800e218 <AudioProcess+0x70>)
 800e1be:	4917      	ldr	r1, [pc, #92]	; (800e21c <AudioProcess+0x74>)
 800e1c0:	6818      	ldr	r0, [r3, #0]
 800e1c2:	4c12      	ldr	r4, [pc, #72]	; (800e20c <AudioProcess+0x64>)
 800e1c4:	0840      	lsrs	r0, r0, #1
 800e1c6:	2200      	movs	r2, #0
 800e1c8:	4290      	cmp	r0, r2
 800e1ca:	d01d      	beq.n	800e208 <AudioProcess+0x60>
 800e1cc:	f934 3022 	ldrsh.w	r3, [r4, r2, lsl #2]
 800e1d0:	ed91 7a00 	vldr	s14, [r1]
 800e1d4:	435b      	muls	r3, r3
 800e1d6:	ee07 3a90 	vmov	s15, r3
 800e1da:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e1de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e1e2:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 800e1e6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e1ea:	435b      	muls	r3, r3
 800e1ec:	edc1 7a00 	vstr	s15, [r1]
 800e1f0:	ee07 3a90 	vmov	s15, r3
 800e1f4:	ed91 7a01 	vldr	s14, [r1, #4]
 800e1f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e1fc:	3201      	adds	r2, #1
 800e1fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e202:	edc1 7a01 	vstr	s15, [r1, #4]
 800e206:	e7df      	b.n	800e1c8 <AudioProcess+0x20>
 800e208:	bd38      	pop	{r3, r4, r5, pc}
 800e20a:	bf00      	nop
 800e20c:	20012234 	.word	0x20012234
 800e210:	20012274 	.word	0x20012274
 800e214:	2000831c 	.word	0x2000831c
 800e218:	2000045c 	.word	0x2000045c
 800e21c:	2001247c 	.word	0x2001247c

0800e220 <HAL_TIM_OC_DelayElapsedCallback>:
 800e220:	b508      	push	{r3, lr}
 800e222:	7e03      	ldrb	r3, [r0, #24]
 800e224:	2b08      	cmp	r3, #8
 800e226:	d10b      	bne.n	800e240 <HAL_TIM_OC_DelayElapsedCallback+0x20>
 800e228:	210c      	movs	r1, #12
 800e22a:	f7fc fa3f 	bl	800a6ac <HAL_TIM_ReadCapturedValue>
 800e22e:	4b05      	ldr	r3, [pc, #20]	; (800e244 <HAL_TIM_OC_DelayElapsedCallback+0x24>)
 800e230:	681a      	ldr	r2, [r3, #0]
 800e232:	4b05      	ldr	r3, [pc, #20]	; (800e248 <HAL_TIM_OC_DelayElapsedCallback+0x28>)
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	4418      	add	r0, r3
 800e238:	4b04      	ldr	r3, [pc, #16]	; (800e24c <HAL_TIM_OC_DelayElapsedCallback+0x2c>)
 800e23a:	6410      	str	r0, [r2, #64]	; 0x40
 800e23c:	2201      	movs	r2, #1
 800e23e:	605a      	str	r2, [r3, #4]
 800e240:	bd08      	pop	{r3, pc}
 800e242:	bf00      	nop
 800e244:	200124ec 	.word	0x200124ec
 800e248:	20000460 	.word	0x20000460
 800e24c:	2000831c 	.word	0x2000831c

0800e250 <HAL_TIM_PeriodElapsedCallback>:
 800e250:	4b09      	ldr	r3, [pc, #36]	; (800e278 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800e252:	4298      	cmp	r0, r3
 800e254:	d106      	bne.n	800e264 <HAL_TIM_PeriodElapsedCallback+0x14>
 800e256:	4b09      	ldr	r3, [pc, #36]	; (800e27c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800e258:	681a      	ldr	r2, [r3, #0]
 800e25a:	07d1      	lsls	r1, r2, #31
 800e25c:	d50b      	bpl.n	800e276 <HAL_TIM_PeriodElapsedCallback+0x26>
 800e25e:	2201      	movs	r2, #1
 800e260:	609a      	str	r2, [r3, #8]
 800e262:	4770      	bx	lr
 800e264:	4b06      	ldr	r3, [pc, #24]	; (800e280 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800e266:	4298      	cmp	r0, r3
 800e268:	d105      	bne.n	800e276 <HAL_TIM_PeriodElapsedCallback+0x26>
 800e26a:	4b04      	ldr	r3, [pc, #16]	; (800e27c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800e26c:	681a      	ldr	r2, [r3, #0]
 800e26e:	0712      	lsls	r2, r2, #28
 800e270:	bf44      	itt	mi
 800e272:	2201      	movmi	r2, #1
 800e274:	60da      	strmi	r2, [r3, #12]
 800e276:	4770      	bx	lr
 800e278:	20012488 	.word	0x20012488
 800e27c:	2000831c 	.word	0x2000831c
 800e280:	20012528 	.word	0x20012528

0800e284 <BSP_AUDIO_IN_HalfTransfer_CallBack>:
 800e284:	f7ff bf90 	b.w	800e1a8 <AudioProcess>

0800e288 <BSP_AUDIO_IN_TransferComplete_CallBack>:
 800e288:	f7ff bf8e 	b.w	800e1a8 <AudioProcess>

0800e28c <HAL_GPIO_EXTI_Callback>:
 800e28c:	2802      	cmp	r0, #2
 800e28e:	b510      	push	{r4, lr}
 800e290:	4604      	mov	r4, r0
 800e292:	d009      	beq.n	800e2a8 <HAL_GPIO_EXTI_Callback+0x1c>
 800e294:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 800e298:	d013      	beq.n	800e2c2 <HAL_GPIO_EXTI_Callback+0x36>
 800e29a:	2801      	cmp	r0, #1
 800e29c:	d103      	bne.n	800e2a6 <HAL_GPIO_EXTI_Callback+0x1a>
 800e29e:	f7ff ff73 	bl	800e188 <hci_tl_lowlevel_isr>
 800e2a2:	4b0a      	ldr	r3, [pc, #40]	; (800e2cc <HAL_GPIO_EXTI_Callback+0x40>)
 800e2a4:	611c      	str	r4, [r3, #16]
 800e2a6:	bd10      	pop	{r4, pc}
 800e2a8:	4b08      	ldr	r3, [pc, #32]	; (800e2cc <HAL_GPIO_EXTI_Callback+0x40>)
 800e2aa:	2201      	movs	r2, #1
 800e2ac:	751a      	strb	r2, [r3, #20]
 800e2ae:	7d5b      	ldrb	r3, [r3, #21]
 800e2b0:	b11b      	cbz	r3, 800e2ba <HAL_GPIO_EXTI_Callback+0x2e>
 800e2b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e2b6:	f7ff bb23 	b.w	800d900 <FuncOn_FifoFull>
 800e2ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e2be:	f7ff bb19 	b.w	800d8f4 <FuncOn_DRDY_XL>
 800e2c2:	4b02      	ldr	r3, [pc, #8]	; (800e2cc <HAL_GPIO_EXTI_Callback+0x40>)
 800e2c4:	2201      	movs	r2, #1
 800e2c6:	619a      	str	r2, [r3, #24]
 800e2c8:	e7ed      	b.n	800e2a6 <HAL_GPIO_EXTI_Callback+0x1a>
 800e2ca:	bf00      	nop
 800e2cc:	2000831c 	.word	0x2000831c

0800e2d0 <HAL_Delay>:
 800e2d0:	b513      	push	{r0, r1, r4, lr}
 800e2d2:	9001      	str	r0, [sp, #4]
 800e2d4:	f7f9 fb54 	bl	8007980 <HAL_GetTick>
 800e2d8:	4604      	mov	r4, r0
 800e2da:	f7f9 fb51 	bl	8007980 <HAL_GetTick>
 800e2de:	9b01      	ldr	r3, [sp, #4]
 800e2e0:	1b00      	subs	r0, r0, r4
 800e2e2:	4298      	cmp	r0, r3
 800e2e4:	d301      	bcc.n	800e2ea <HAL_Delay+0x1a>
 800e2e6:	b002      	add	sp, #8
 800e2e8:	bd10      	pop	{r4, pc}
 800e2ea:	bf30      	wfi
 800e2ec:	e7f5      	b.n	800e2da <HAL_Delay+0xa>

0800e2ee <Error_Handler>:
 800e2ee:	e7fe      	b.n	800e2ee <Error_Handler>

0800e2f0 <SaveVibrationParamToMemory>:
 800e2f0:	b510      	push	{r4, lr}
 800e2f2:	4c13      	ldr	r4, [pc, #76]	; (800e340 <SaveVibrationParamToMemory+0x50>)
 800e2f4:	4813      	ldr	r0, [pc, #76]	; (800e344 <SaveVibrationParamToMemory+0x54>)
 800e2f6:	f241 2334 	movw	r3, #4660	; 0x1234
 800e2fa:	8023      	strh	r3, [r4, #0]
 800e2fc:	4b12      	ldr	r3, [pc, #72]	; (800e348 <SaveVibrationParamToMemory+0x58>)
 800e2fe:	885a      	ldrh	r2, [r3, #2]
 800e300:	8062      	strh	r2, [r4, #2]
 800e302:	889a      	ldrh	r2, [r3, #4]
 800e304:	88db      	ldrh	r3, [r3, #6]
 800e306:	80e3      	strh	r3, [r4, #6]
 800e308:	4b10      	ldr	r3, [pc, #64]	; (800e34c <SaveVibrationParamToMemory+0x5c>)
 800e30a:	80a2      	strh	r2, [r4, #4]
 800e30c:	881a      	ldrh	r2, [r3, #0]
 800e30e:	8122      	strh	r2, [r4, #8]
 800e310:	885a      	ldrh	r2, [r3, #2]
 800e312:	8162      	strh	r2, [r4, #10]
 800e314:	889a      	ldrh	r2, [r3, #4]
 800e316:	81a2      	strh	r2, [r4, #12]
 800e318:	88da      	ldrh	r2, [r3, #6]
 800e31a:	81e2      	strh	r2, [r4, #14]
 800e31c:	891a      	ldrh	r2, [r3, #8]
 800e31e:	8222      	strh	r2, [r4, #16]
 800e320:	7a9a      	ldrb	r2, [r3, #10]
 800e322:	899b      	ldrh	r3, [r3, #12]
 800e324:	8262      	strh	r2, [r4, #18]
 800e326:	82a3      	strh	r3, [r4, #20]
 800e328:	f007 ff68 	bl	80161fc <puts>
 800e32c:	4621      	mov	r1, r4
 800e32e:	200b      	movs	r0, #11
 800e330:	f7fd ff0a 	bl	800c148 <MDM_SaveGMD>
 800e334:	4b06      	ldr	r3, [pc, #24]	; (800e350 <SaveVibrationParamToMemory+0x60>)
 800e336:	2201      	movs	r2, #1
 800e338:	601a      	str	r2, [r3, #0]
 800e33a:	2000      	movs	r0, #0
 800e33c:	bd10      	pop	{r4, pc}
 800e33e:	bf00      	nop
 800e340:	200124c4 	.word	0x200124c4
 800e344:	0801ad0d 	.word	0x0801ad0d
 800e348:	20011ee0 	.word	0x20011ee0
 800e34c:	2000b0f8 	.word	0x2000b0f8
 800e350:	20002118 	.word	0x20002118

0800e354 <main>:
 800e354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e358:	ed2d 8b02 	vpush	{d8}
 800e35c:	b0bb      	sub	sp, #236	; 0xec
 800e35e:	f7f9 fae9 	bl	8007934 <HAL_Init>
 800e362:	2500      	movs	r5, #0
 800e364:	4bb9      	ldr	r3, [pc, #740]	; (800e64c <main+0x2f8>)
 800e366:	950f      	str	r5, [sp, #60]	; 0x3c
 800e368:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e36a:	4eb9      	ldr	r6, [pc, #740]	; (800e650 <main+0x2fc>)
 800e36c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800e370:	641a      	str	r2, [r3, #64]	; 0x40
 800e372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e374:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e378:	930f      	str	r3, [sp, #60]	; 0x3c
 800e37a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e37c:	4bb5      	ldr	r3, [pc, #724]	; (800e654 <main+0x300>)
 800e37e:	9510      	str	r5, [sp, #64]	; 0x40
 800e380:	681a      	ldr	r2, [r3, #0]
 800e382:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800e386:	601a      	str	r2, [r3, #0]
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800e38e:	9310      	str	r3, [sp, #64]	; 0x40
 800e390:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e392:	f04f 0801 	mov.w	r8, #1
 800e396:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800e39a:	2402      	movs	r4, #2
 800e39c:	e9cd 8316 	strd	r8, r3, [sp, #88]	; 0x58
 800e3a0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800e3a4:	e9cd 431c 	strd	r4, r3, [sp, #112]	; 0x70
 800e3a8:	f04f 0b08 	mov.w	fp, #8
 800e3ac:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800e3b0:	2707      	movs	r7, #7
 800e3b2:	a816      	add	r0, sp, #88	; 0x58
 800e3b4:	f10d 098c 	add.w	r9, sp, #140	; 0x8c
 800e3b8:	e9cd b31e 	strd	fp, r3, [sp, #120]	; 0x78
 800e3bc:	9420      	str	r4, [sp, #128]	; 0x80
 800e3be:	e9cd 7421 	strd	r7, r4, [sp, #132]	; 0x84
 800e3c2:	f7fb fafd 	bl	80099c0 <HAL_RCC_OscConfig>
 800e3c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e3ca:	4648      	mov	r0, r9
 800e3cc:	9323      	str	r3, [sp, #140]	; 0x8c
 800e3ce:	9538      	str	r5, [sp, #224]	; 0xe0
 800e3d0:	f7fa ff54 	bl	800927c <HAL_RCCEx_PeriphCLKConfig>
 800e3d4:	230f      	movs	r3, #15
 800e3d6:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800e3da:	e9cd 3411 	strd	r3, r4, [sp, #68]	; 0x44
 800e3de:	2105      	movs	r1, #5
 800e3e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e3e4:	a811      	add	r0, sp, #68	; 0x44
 800e3e6:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800e3ea:	9513      	str	r5, [sp, #76]	; 0x4c
 800e3ec:	f7fa fe8e 	bl	800910c <HAL_RCC_ClockConfig>
 800e3f0:	4628      	mov	r0, r5
 800e3f2:	f7ff fbef 	bl	800dbd4 <InitTargetPlatform>
 800e3f6:	4630      	mov	r0, r6
 800e3f8:	4b97      	ldr	r3, [pc, #604]	; (800e658 <main+0x304>)
 800e3fa:	f840 3f1c 	str.w	r3, [r0, #28]!
 800e3fe:	f7f9 fb43 	bl	8007a88 <HAL_CRC_Init>
 800e402:	4604      	mov	r4, r0
 800e404:	b100      	cbz	r0, 800e408 <main+0xb4>
 800e406:	e7fe      	b.n	800e406 <main+0xb2>
 800e408:	4602      	mov	r2, r0
 800e40a:	4641      	mov	r1, r8
 800e40c:	4893      	ldr	r0, [pc, #588]	; (800e65c <main+0x308>)
 800e40e:	f7fd fc69 	bl	800bce4 <InitMetaDataManager>
 800e412:	f7f9 fabb 	bl	800798c <HAL_GetHalVersion>
 800e416:	4680      	mov	r8, r0
 800e418:	f7f9 fab8 	bl	800798c <HAL_GetHalVersion>
 800e41c:	4682      	mov	sl, r0
 800e41e:	f7f9 fab5 	bl	800798c <HAL_GetHalVersion>
 800e422:	4683      	mov	fp, r0
 800e424:	f7f9 fab2 	bl	800798c <HAL_GetHalVersion>
 800e428:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800e42c:	9303      	str	r3, [sp, #12]
 800e42e:	4b8c      	ldr	r3, [pc, #560]	; (800e660 <main+0x30c>)
 800e430:	9302      	str	r3, [sp, #8]
 800e432:	2532      	movs	r5, #50	; 0x32
 800e434:	4b8b      	ldr	r3, [pc, #556]	; (800e664 <main+0x310>)
 800e436:	9301      	str	r3, [sp, #4]
 800e438:	b2c0      	uxtb	r0, r0
 800e43a:	f3cb 2307 	ubfx	r3, fp, #8, #8
 800e43e:	f3ca 4207 	ubfx	r2, sl, #16, #8
 800e442:	ea4f 6118 	mov.w	r1, r8, lsr #24
 800e446:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800e44a:	9000      	str	r0, [sp, #0]
 800e44c:	4886      	ldr	r0, [pc, #536]	; (800e668 <main+0x314>)
 800e44e:	4d87      	ldr	r5, [pc, #540]	; (800e66c <main+0x318>)
 800e450:	f007 fe60 	bl	8016114 <iprintf>
 800e454:	4886      	ldr	r0, [pc, #536]	; (800e670 <main+0x31c>)
 800e456:	f007 fed1 	bl	80161fc <puts>
 800e45a:	4886      	ldr	r0, [pc, #536]	; (800e674 <main+0x320>)
 800e45c:	f007 fece 	bl	80161fc <puts>
 800e460:	4b85      	ldr	r3, [pc, #532]	; (800e678 <main+0x324>)
 800e462:	9323      	str	r3, [sp, #140]	; 0x8c
 800e464:	f243 0331 	movw	r3, #12337	; 0x3031
 800e468:	f8ad 3090 	strh.w	r3, [sp, #144]	; 0x90
 800e46c:	4629      	mov	r1, r5
 800e46e:	2330      	movs	r3, #48	; 0x30
 800e470:	4638      	mov	r0, r7
 800e472:	f88d 3092 	strb.w	r3, [sp, #146]	; 0x92
 800e476:	f7fd fe8b 	bl	800c190 <MDM_ReCallGMD>
 800e47a:	782b      	ldrb	r3, [r5, #0]
 800e47c:	2b12      	cmp	r3, #18
 800e47e:	d010      	beq.n	800e4a2 <main+0x14e>
 800e480:	2312      	movs	r3, #18
 800e482:	702b      	strb	r3, [r5, #0]
 800e484:	4620      	mov	r0, r4
 800e486:	3001      	adds	r0, #1
 800e488:	eb09 0300 	add.w	r3, r9, r0
 800e48c:	2807      	cmp	r0, #7
 800e48e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800e492:	542b      	strb	r3, [r5, r0]
 800e494:	d1f7      	bne.n	800e486 <main+0x132>
 800e496:	4975      	ldr	r1, [pc, #468]	; (800e66c <main+0x318>)
 800e498:	f7fd fe56 	bl	800c148 <MDM_SaveGMD>
 800e49c:	4b77      	ldr	r3, [pc, #476]	; (800e67c <main+0x328>)
 800e49e:	2201      	movs	r2, #1
 800e4a0:	601a      	str	r2, [r3, #0]
 800e4a2:	2300      	movs	r3, #0
 800e4a4:	3301      	adds	r3, #1
 800e4a6:	eb09 0203 	add.w	r2, r9, r3
 800e4aa:	5ce9      	ldrb	r1, [r5, r3]
 800e4ac:	f802 1c01 	strb.w	r1, [r2, #-1]
 800e4b0:	2b07      	cmp	r3, #7
 800e4b2:	d1f7      	bne.n	800e4a4 <main+0x150>
 800e4b4:	2400      	movs	r4, #0
 800e4b6:	4621      	mov	r1, r4
 800e4b8:	4871      	ldr	r0, [pc, #452]	; (800e680 <main+0x32c>)
 800e4ba:	f88d 4093 	strb.w	r4, [sp, #147]	; 0x93
 800e4be:	f7fd fa13 	bl	800b8e8 <hci_init>
 800e4c2:	a916      	add	r1, sp, #88	; 0x58
 800e4c4:	f10d 0037 	add.w	r0, sp, #55	; 0x37
 800e4c8:	f7fd f938 	bl	800b73c <getBlueNRGVersion>
 800e4cc:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
 800e4d0:	f8df 8208 	ldr.w	r8, [pc, #520]	; 800e6dc <main+0x388>
 800e4d4:	2b30      	cmp	r3, #48	; 0x30
 800e4d6:	bf86      	itte	hi
 800e4d8:	2301      	movhi	r3, #1
 800e4da:	f888 3011 	strbhi.w	r3, [r8, #17]
 800e4de:	f888 4011 	strbls.w	r4, [r8, #17]
 800e4e2:	f7fd f94c 	bl	800b77e <hci_reset>
 800e4e6:	4b67      	ldr	r3, [pc, #412]	; (800e684 <main+0x330>)
 800e4e8:	4c67      	ldr	r4, [pc, #412]	; (800e688 <main+0x334>)
 800e4ea:	78db      	ldrb	r3, [r3, #3]
 800e4ec:	4a67      	ldr	r2, [pc, #412]	; (800e68c <main+0x338>)
 800e4ee:	7023      	strb	r3, [r4, #0]
 800e4f0:	6813      	ldr	r3, [r2, #0]
 800e4f2:	7063      	strb	r3, [r4, #1]
 800e4f4:	4b66      	ldr	r3, [pc, #408]	; (800e690 <main+0x33c>)
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	0a1b      	lsrs	r3, r3, #8
 800e4fa:	70a3      	strb	r3, [r4, #2]
 800e4fc:	8853      	ldrh	r3, [r2, #2]
 800e4fe:	70e3      	strb	r3, [r4, #3]
 800e500:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
 800e504:	2b31      	cmp	r3, #49	; 0x31
 800e506:	bf34      	ite	cc
 800e508:	230a      	movcc	r3, #10
 800e50a:	236e      	movcs	r3, #110	; 0x6e
 800e50c:	7123      	strb	r3, [r4, #4]
 800e50e:	23c0      	movs	r3, #192	; 0xc0
 800e510:	7163      	strb	r3, [r4, #5]
 800e512:	f7fc ffd1 	bl	800b4b8 <aci_gatt_init>
 800e516:	4601      	mov	r1, r0
 800e518:	2800      	cmp	r0, #0
 800e51a:	d06a      	beq.n	800e5f2 <main+0x29e>
 800e51c:	485d      	ldr	r0, [pc, #372]	; (800e694 <main+0x340>)
 800e51e:	f007 fe6d 	bl	80161fc <puts>
 800e522:	f000 ff19 	bl	800f358 <Add_HW_ServW2ST_Service>
 800e526:	2800      	cmp	r0, #0
 800e528:	f040 8115 	bne.w	800e756 <main+0x402>
 800e52c:	485a      	ldr	r0, [pc, #360]	; (800e698 <main+0x344>)
 800e52e:	f007 fe65 	bl	80161fc <puts>
 800e532:	f000 ffab 	bl	800f48c <Add_SW_ServW2ST_Service>
 800e536:	2800      	cmp	r0, #0
 800e538:	f040 810f 	bne.w	800e75a <main+0x406>
 800e53c:	4857      	ldr	r0, [pc, #348]	; (800e69c <main+0x348>)
 800e53e:	f007 fe5d 	bl	80161fc <puts>
 800e542:	f000 fdc5 	bl	800f0d0 <Add_ConsoleW2ST_Service>
 800e546:	2800      	cmp	r0, #0
 800e548:	f040 8109 	bne.w	800e75e <main+0x40a>
 800e54c:	4854      	ldr	r0, [pc, #336]	; (800e6a0 <main+0x34c>)
 800e54e:	f007 fe55 	bl	80161fc <puts>
 800e552:	f000 fd85 	bl	800f060 <Add_ConfigW2ST_Service>
 800e556:	2800      	cmp	r0, #0
 800e558:	f040 8103 	bne.w	800e762 <main+0x40e>
 800e55c:	4851      	ldr	r0, [pc, #324]	; (800e6a4 <main+0x350>)
 800e55e:	f007 fe4d 	bl	80161fc <puts>
 800e562:	4851      	ldr	r0, [pc, #324]	; (800e6a8 <main+0x354>)
 800e564:	f007 fe4a 	bl	80161fc <puts>
 800e568:	f7ff fa5a 	bl	800da20 <CheckBootLoaderCompliance>
 800e56c:	2800      	cmp	r0, #0
 800e56e:	f000 80fa 	beq.w	800e766 <main+0x412>
 800e572:	484e      	ldr	r0, [pc, #312]	; (800e6ac <main+0x358>)
 800e574:	4c4e      	ldr	r4, [pc, #312]	; (800e6b0 <main+0x35c>)
 800e576:	4d4f      	ldr	r5, [pc, #316]	; (800e6b4 <main+0x360>)
 800e578:	f007 fe40 	bl	80161fc <puts>
 800e57c:	2202      	movs	r2, #2
 800e57e:	4611      	mov	r1, r2
 800e580:	4610      	mov	r0, r2
 800e582:	f003 f99d 	bl	80118c0 <IKS01A2_MOTION_SENSOR_SetFullScale>
 800e586:	2102      	movs	r1, #2
 800e588:	4622      	mov	r2, r4
 800e58a:	4608      	mov	r0, r1
 800e58c:	f003 f94a 	bl	8011824 <IKS01A2_MOTION_SENSOR_GetSensitivity>
 800e590:	edd4 7a00 	vldr	s15, [r4]
 800e594:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800e6b8 <main+0x364>
 800e598:	4b48      	ldr	r3, [pc, #288]	; (800e6bc <main+0x368>)
 800e59a:	4c49      	ldr	r4, [pc, #292]	; (800e6c0 <main+0x36c>)
 800e59c:	4849      	ldr	r0, [pc, #292]	; (800e6c4 <main+0x370>)
 800e59e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e5a2:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800e5a6:	edc3 7a00 	vstr	s15, [r3]
 800e5aa:	6823      	ldr	r3, [r4, #0]
 800e5ac:	fbb3 f3f2 	udiv	r3, r3, r2
 800e5b0:	4a45      	ldr	r2, [pc, #276]	; (800e6c8 <main+0x374>)
 800e5b2:	6002      	str	r2, [r0, #0]
 800e5b4:	2700      	movs	r7, #0
 800e5b6:	3b01      	subs	r3, #1
 800e5b8:	f240 32e7 	movw	r2, #999	; 0x3e7
 800e5bc:	60c2      	str	r2, [r0, #12]
 800e5be:	6043      	str	r3, [r0, #4]
 800e5c0:	6107      	str	r7, [r0, #16]
 800e5c2:	6087      	str	r7, [r0, #8]
 800e5c4:	f7fc f99c 	bl	800a900 <HAL_TIM_Base_Init>
 800e5c8:	f242 7210 	movw	r2, #10000	; 0x2710
 800e5cc:	6823      	ldr	r3, [r4, #0]
 800e5ce:	fbb3 f3f2 	udiv	r3, r3, r2
 800e5d2:	4a3e      	ldr	r2, [pc, #248]	; (800e6cc <main+0x378>)
 800e5d4:	602a      	str	r2, [r5, #0]
 800e5d6:	3b01      	subs	r3, #1
 800e5d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e5dc:	4628      	mov	r0, r5
 800e5de:	60ea      	str	r2, [r5, #12]
 800e5e0:	606b      	str	r3, [r5, #4]
 800e5e2:	612f      	str	r7, [r5, #16]
 800e5e4:	60af      	str	r7, [r5, #8]
 800e5e6:	f7fc f9a5 	bl	800a934 <HAL_TIM_OC_Init>
 800e5ea:	2800      	cmp	r0, #0
 800e5ec:	f000 80bd 	beq.w	800e76a <main+0x416>
 800e5f0:	e7fe      	b.n	800e5f0 <main+0x29c>
 800e5f2:	f898 0011 	ldrb.w	r0, [r8, #17]
 800e5f6:	2801      	cmp	r0, #1
 800e5f8:	ab11      	add	r3, sp, #68	; 0x44
 800e5fa:	f10d 023a 	add.w	r2, sp, #58	; 0x3a
 800e5fe:	d109      	bne.n	800e614 <main+0x2c0>
 800e600:	e9cd 2300 	strd	r2, r3, [sp]
 800e604:	ab0e      	add	r3, sp, #56	; 0x38
 800e606:	2207      	movs	r2, #7
 800e608:	f7fc fe2e 	bl	800b268 <aci_gap_init_IDB05A1>
 800e60c:	4605      	mov	r5, r0
 800e60e:	b130      	cbz	r0, 800e61e <main+0x2ca>
 800e610:	482f      	ldr	r0, [pc, #188]	; (800e6d0 <main+0x37c>)
 800e612:	e784      	b.n	800e51e <main+0x1ca>
 800e614:	a90e      	add	r1, sp, #56	; 0x38
 800e616:	2001      	movs	r0, #1
 800e618:	f7fc fe5e 	bl	800b2d8 <aci_gap_init_IDB04A1>
 800e61c:	e7f6      	b.n	800e60c <main+0x2b8>
 800e61e:	481a      	ldr	r0, [pc, #104]	; (800e688 <main+0x334>)
 800e620:	f7fd f92c 	bl	800b87c <hci_le_set_random_address>
 800e624:	b108      	cbz	r0, 800e62a <main+0x2d6>
 800e626:	482b      	ldr	r0, [pc, #172]	; (800e6d4 <main+0x380>)
 800e628:	e779      	b.n	800e51e <main+0x1ca>
 800e62a:	f8bd 103a 	ldrh.w	r1, [sp, #58]	; 0x3a
 800e62e:	f8bd 0038 	ldrh.w	r0, [sp, #56]	; 0x38
 800e632:	f8cd 9000 	str.w	r9, [sp]
 800e636:	2307      	movs	r3, #7
 800e638:	462a      	mov	r2, r5
 800e63a:	f7fc ffe7 	bl	800b60c <aci_gatt_update_char_value>
 800e63e:	2800      	cmp	r0, #0
 800e640:	d04e      	beq.n	800e6e0 <main+0x38c>
 800e642:	4825      	ldr	r0, [pc, #148]	; (800e6d8 <main+0x384>)
 800e644:	f007 fdda 	bl	80161fc <puts>
 800e648:	e7fe      	b.n	800e648 <main+0x2f4>
 800e64a:	bf00      	nop
 800e64c:	40023800 	.word	0x40023800
 800e650:	2000831c 	.word	0x2000831c
 800e654:	40007000 	.word	0x40007000
 800e658:	40023000 	.word	0x40023000
 800e65c:	20000464 	.word	0x20000464
 800e660:	0801adfa 	.word	0x0801adfa
 800e664:	0801ae03 	.word	0x0801ae03
 800e668:	0801ad51 	.word	0x0801ad51
 800e66c:	200124e4 	.word	0x200124e4
 800e670:	0801ae0f 	.word	0x0801ae0f
 800e674:	0801ae31 	.word	0x0801ae31
 800e678:	56314d50 	.word	0x56314d50
 800e67c:	20002118 	.word	0x20002118
 800e680:	08010f95 	.word	0x08010f95
 800e684:	1fff7a14 	.word	0x1fff7a14
 800e688:	200124da 	.word	0x200124da
 800e68c:	1fff7a10 	.word	0x1fff7a10
 800e690:	1fff7a18 	.word	0x1fff7a18
 800e694:	0801ae54 	.word	0x0801ae54
 800e698:	0801af6e 	.word	0x0801af6e
 800e69c:	0801afc2 	.word	0x0801afc2
 800e6a0:	0801b011 	.word	0x0801b011
 800e6a4:	0801b065 	.word	0x0801b065
 800e6a8:	0801b282 	.word	0x0801b282
 800e6ac:	0801b0b8 	.word	0x0801b0b8
 800e6b0:	20012668 	.word	0x20012668
 800e6b4:	200124ec 	.word	0x200124ec
 800e6b8:	3a83126f 	.word	0x3a83126f
 800e6bc:	200124e0 	.word	0x200124e0
 800e6c0:	20000184 	.word	0x20000184
 800e6c4:	20012488 	.word	0x20012488
 800e6c8:	40000800 	.word	0x40000800
 800e6cc:	40010000 	.word	0x40010000
 800e6d0:	0801ae68 	.word	0x0801ae68
 800e6d4:	0801ae7b 	.word	0x0801ae7b
 800e6d8:	0801aea7 	.word	0x0801aea7
 800e6dc:	20012220 	.word	0x20012220
 800e6e0:	4b34      	ldr	r3, [pc, #208]	; (800e7b4 <main+0x460>)
 800e6e2:	9501      	str	r5, [sp, #4]
 800e6e4:	2001      	movs	r0, #1
 800e6e6:	e9cd 3002 	strd	r3, r0, [sp, #8]
 800e6ea:	2310      	movs	r3, #16
 800e6ec:	9300      	str	r3, [sp, #0]
 800e6ee:	462a      	mov	r2, r5
 800e6f0:	2307      	movs	r3, #7
 800e6f2:	4629      	mov	r1, r5
 800e6f4:	f7fc fe7c 	bl	800b3f0 <aci_gap_set_auth_requirement>
 800e6f8:	b108      	cbz	r0, 800e6fe <main+0x3aa>
 800e6fa:	482f      	ldr	r0, [pc, #188]	; (800e7b8 <main+0x464>)
 800e6fc:	e70f      	b.n	800e51e <main+0x1ca>
 800e6fe:	7827      	ldrb	r7, [r4, #0]
 800e700:	f898 2011 	ldrb.w	r2, [r8, #17]
 800e704:	9708      	str	r7, [sp, #32]
 800e706:	7867      	ldrb	r7, [r4, #1]
 800e708:	9707      	str	r7, [sp, #28]
 800e70a:	78a7      	ldrb	r7, [r4, #2]
 800e70c:	9706      	str	r7, [sp, #24]
 800e70e:	4b2b      	ldr	r3, [pc, #172]	; (800e7bc <main+0x468>)
 800e710:	492b      	ldr	r1, [pc, #172]	; (800e7c0 <main+0x46c>)
 800e712:	78e7      	ldrb	r7, [r4, #3]
 800e714:	9705      	str	r7, [sp, #20]
 800e716:	2a01      	cmp	r2, #1
 800e718:	bf08      	it	eq
 800e71a:	4619      	moveq	r1, r3
 800e71c:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
 800e720:	f8bd 0058 	ldrh.w	r0, [sp, #88]	; 0x58
 800e724:	7927      	ldrb	r7, [r4, #4]
 800e726:	9704      	str	r7, [sp, #16]
 800e728:	2a30      	cmp	r2, #48	; 0x30
 800e72a:	ea4f 2310 	mov.w	r3, r0, lsr #8
 800e72e:	f3c0 1503 	ubfx	r5, r0, #4, #4
 800e732:	7964      	ldrb	r4, [r4, #5]
 800e734:	bf86      	itte	hi
 800e736:	f000 000f 	andhi.w	r0, r0, #15
 800e73a:	3060      	addhi	r0, #96	; 0x60
 800e73c:	2061      	movls	r0, #97	; 0x61
 800e73e:	e9cd 5000 	strd	r5, r0, [sp]
 800e742:	e9cd 9402 	strd	r9, r4, [sp, #8]
 800e746:	481f      	ldr	r0, [pc, #124]	; (800e7c4 <main+0x470>)
 800e748:	f007 fce4 	bl	8016114 <iprintf>
 800e74c:	2104      	movs	r1, #4
 800e74e:	2001      	movs	r0, #1
 800e750:	f7fc ffaa 	bl	800b6a8 <aci_hal_set_tx_power_level>
 800e754:	e6e5      	b.n	800e522 <main+0x1ce>
 800e756:	481c      	ldr	r0, [pc, #112]	; (800e7c8 <main+0x474>)
 800e758:	e6e9      	b.n	800e52e <main+0x1da>
 800e75a:	481c      	ldr	r0, [pc, #112]	; (800e7cc <main+0x478>)
 800e75c:	e6ef      	b.n	800e53e <main+0x1ea>
 800e75e:	481c      	ldr	r0, [pc, #112]	; (800e7d0 <main+0x47c>)
 800e760:	e6f5      	b.n	800e54e <main+0x1fa>
 800e762:	481c      	ldr	r0, [pc, #112]	; (800e7d4 <main+0x480>)
 800e764:	e6fb      	b.n	800e55e <main+0x20a>
 800e766:	481c      	ldr	r0, [pc, #112]	; (800e7d8 <main+0x484>)
 800e768:	e704      	b.n	800e574 <main+0x220>
 800e76a:	2330      	movs	r3, #48	; 0x30
 800e76c:	9323      	str	r3, [sp, #140]	; 0x8c
 800e76e:	f04f 0c02 	mov.w	ip, #2
 800e772:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800e776:	220c      	movs	r2, #12
 800e778:	4649      	mov	r1, r9
 800e77a:	4628      	mov	r0, r5
 800e77c:	e9cd 3c24 	strd	r3, ip, [sp, #144]	; 0x90
 800e780:	f7fc f9fc 	bl	800ab7c <HAL_TIM_OC_ConfigChannel>
 800e784:	b100      	cbz	r0, 800e788 <main+0x434>
 800e786:	e7fe      	b.n	800e786 <main+0x432>
 800e788:	6822      	ldr	r2, [r4, #0]
 800e78a:	4914      	ldr	r1, [pc, #80]	; (800e7dc <main+0x488>)
 800e78c:	f644 6320 	movw	r3, #20000	; 0x4e20
 800e790:	fbb2 f2f3 	udiv	r2, r2, r3
 800e794:	4b12      	ldr	r3, [pc, #72]	; (800e7e0 <main+0x48c>)
 800e796:	3a01      	subs	r2, #1
 800e798:	6019      	str	r1, [r3, #0]
 800e79a:	6118      	str	r0, [r3, #16]
 800e79c:	f240 11f3 	movw	r1, #499	; 0x1f3
 800e7a0:	6098      	str	r0, [r3, #8]
 800e7a2:	4618      	mov	r0, r3
 800e7a4:	60d9      	str	r1, [r3, #12]
 800e7a6:	605a      	str	r2, [r3, #4]
 800e7a8:	f7fc f8aa 	bl	800a900 <HAL_TIM_Base_Init>
 800e7ac:	4607      	mov	r7, r0
 800e7ae:	b1c8      	cbz	r0, 800e7e4 <main+0x490>
 800e7b0:	e7fe      	b.n	800e7b0 <main+0x45c>
 800e7b2:	bf00      	nop
 800e7b4:	0001e240 	.word	0x0001e240
 800e7b8:	0801aecc 	.word	0x0801aecc
 800e7bc:	0801ad41 	.word	0x0801ad41
 800e7c0:	0801ad49 	.word	0x0801ad49
 800e7c4:	0801aef1 	.word	0x0801aef1
 800e7c8:	0801af97 	.word	0x0801af97
 800e7cc:	0801afeb 	.word	0x0801afeb
 800e7d0:	0801b03a 	.word	0x0801b03a
 800e7d4:	0801b08e 	.word	0x0801b08e
 800e7d8:	0801b0e3 	.word	0x0801b0e3
 800e7dc:	40000c00 	.word	0x40000c00
 800e7e0:	20012528 	.word	0x20012528
 800e7e4:	4cb5      	ldr	r4, [pc, #724]	; (800eabc <main+0x768>)
 800e7e6:	4db6      	ldr	r5, [pc, #728]	; (800eac0 <main+0x76c>)
 800e7e8:	f8df a36c 	ldr.w	sl, [pc, #876]	; 800eb58 <main+0x804>
 800e7ec:	f7fe fa86 	bl	800ccfc <MotionSP_SetDefaultVibrationParam>
 800e7f0:	48b4      	ldr	r0, [pc, #720]	; (800eac4 <main+0x770>)
 800e7f2:	f007 fd03 	bl	80161fc <puts>
 800e7f6:	4621      	mov	r1, r4
 800e7f8:	200b      	movs	r0, #11
 800e7fa:	f7fd fcc9 	bl	800c190 <MDM_ReCallGMD>
 800e7fe:	8822      	ldrh	r2, [r4, #0]
 800e800:	f241 2334 	movw	r3, #4660	; 0x1234
 800e804:	429a      	cmp	r2, r3
 800e806:	f040 8265 	bne.w	800ecd4 <main+0x980>
 800e80a:	8863      	ldrh	r3, [r4, #2]
 800e80c:	806b      	strh	r3, [r5, #2]
 800e80e:	88a3      	ldrh	r3, [r4, #4]
 800e810:	80ab      	strh	r3, [r5, #4]
 800e812:	88e3      	ldrh	r3, [r4, #6]
 800e814:	80eb      	strh	r3, [r5, #6]
 800e816:	8923      	ldrh	r3, [r4, #8]
 800e818:	f8aa 3000 	strh.w	r3, [sl]
 800e81c:	8963      	ldrh	r3, [r4, #10]
 800e81e:	f8aa 3002 	strh.w	r3, [sl, #2]
 800e822:	89a3      	ldrh	r3, [r4, #12]
 800e824:	f8aa 3004 	strh.w	r3, [sl, #4]
 800e828:	89e3      	ldrh	r3, [r4, #14]
 800e82a:	f8aa 3006 	strh.w	r3, [sl, #6]
 800e82e:	8a23      	ldrh	r3, [r4, #16]
 800e830:	f8aa 3008 	strh.w	r3, [sl, #8]
 800e834:	8a63      	ldrh	r3, [r4, #18]
 800e836:	f88a 300a 	strb.w	r3, [sl, #10]
 800e83a:	48a3      	ldr	r0, [pc, #652]	; (800eac8 <main+0x774>)
 800e83c:	8aa3      	ldrh	r3, [r4, #20]
 800e83e:	f8aa 300c 	strh.w	r3, [sl, #12]
 800e842:	f007 fcdb 	bl	80161fc <puts>
 800e846:	4ba1      	ldr	r3, [pc, #644]	; (800eacc <main+0x778>)
 800e848:	601f      	str	r7, [r3, #0]
 800e84a:	48a1      	ldr	r0, [pc, #644]	; (800ead0 <main+0x77c>)
 800e84c:	f007 fcd6 	bl	80161fc <puts>
 800e850:	8869      	ldrh	r1, [r5, #2]
 800e852:	48a0      	ldr	r0, [pc, #640]	; (800ead4 <main+0x780>)
 800e854:	f007 fc5e 	bl	8016114 <iprintf>
 800e858:	88a9      	ldrh	r1, [r5, #4]
 800e85a:	489f      	ldr	r0, [pc, #636]	; (800ead8 <main+0x784>)
 800e85c:	f007 fc5a 	bl	8016114 <iprintf>
 800e860:	88e9      	ldrh	r1, [r5, #6]
 800e862:	489e      	ldr	r0, [pc, #632]	; (800eadc <main+0x788>)
 800e864:	f007 fc56 	bl	8016114 <iprintf>
 800e868:	489d      	ldr	r0, [pc, #628]	; (800eae0 <main+0x78c>)
 800e86a:	f007 fcc7 	bl	80161fc <puts>
 800e86e:	489d      	ldr	r0, [pc, #628]	; (800eae4 <main+0x790>)
 800e870:	f007 fcc4 	bl	80161fc <puts>
 800e874:	f8ba 1000 	ldrh.w	r1, [sl]
 800e878:	489b      	ldr	r0, [pc, #620]	; (800eae8 <main+0x794>)
 800e87a:	f007 fc4b 	bl	8016114 <iprintf>
 800e87e:	f8ba 1004 	ldrh.w	r1, [sl, #4]
 800e882:	489a      	ldr	r0, [pc, #616]	; (800eaec <main+0x798>)
 800e884:	f007 fc46 	bl	8016114 <iprintf>
 800e888:	f8ba 1008 	ldrh.w	r1, [sl, #8]
 800e88c:	4898      	ldr	r0, [pc, #608]	; (800eaf0 <main+0x79c>)
 800e88e:	f007 fc41 	bl	8016114 <iprintf>
 800e892:	f89a 100a 	ldrb.w	r1, [sl, #10]
 800e896:	4897      	ldr	r0, [pc, #604]	; (800eaf4 <main+0x7a0>)
 800e898:	f007 fc3c 	bl	8016114 <iprintf>
 800e89c:	f8ba 100c 	ldrh.w	r1, [sl, #12]
 800e8a0:	4895      	ldr	r0, [pc, #596]	; (800eaf8 <main+0x7a4>)
 800e8a2:	f007 fc37 	bl	8016114 <iprintf>
 800e8a6:	4895      	ldr	r0, [pc, #596]	; (800eafc <main+0x7a8>)
 800e8a8:	f007 fca8 	bl	80161fc <puts>
 800e8ac:	4894      	ldr	r0, [pc, #592]	; (800eb00 <main+0x7ac>)
 800e8ae:	f007 fca5 	bl	80161fc <puts>
 800e8b2:	f7fe fb2d 	bl	800cf10 <SetAccelerometerParameters>
 800e8b6:	2800      	cmp	r0, #0
 800e8b8:	f000 8212 	beq.w	800ece0 <main+0x98c>
 800e8bc:	4891      	ldr	r0, [pc, #580]	; (800eb04 <main+0x7b0>)
 800e8be:	f007 fc9d 	bl	80161fc <puts>
 800e8c2:	2301      	movs	r3, #1
 800e8c4:	f886 3024 	strb.w	r3, [r6, #36]	; 0x24
 800e8c8:	4b8f      	ldr	r3, [pc, #572]	; (800eb08 <main+0x7b4>)
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	b95b      	cbnz	r3, 800e8e6 <main+0x592>
 800e8ce:	f898 3010 	ldrb.w	r3, [r8, #16]
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	f040 8206 	bne.w	800ece4 <main+0x990>
 800e8d8:	f7f9 f852 	bl	8007980 <HAL_GetTick>
 800e8dc:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800e8e0:	b908      	cbnz	r0, 800e8e6 <main+0x592>
 800e8e2:	f7ff fabb 	bl	800de5c <LedOnTargetPlatform>
 800e8e6:	4b89      	ldr	r3, [pc, #548]	; (800eb0c <main+0x7b8>)
 800e8e8:	781b      	ldrb	r3, [r3, #0]
 800e8ea:	b163      	cbz	r3, 800e906 <main+0x5b2>
 800e8ec:	4b77      	ldr	r3, [pc, #476]	; (800eacc <main+0x778>)
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	b123      	cbz	r3, 800e8fc <main+0x5a8>
 800e8f2:	f7fd f9d3 	bl	800bc9c <EraseMetaDataManager>
 800e8f6:	b108      	cbz	r0, 800e8fc <main+0x5a8>
 800e8f8:	f7fd f9dc 	bl	800bcb4 <SaveMetaDataManager>
 800e8fc:	f001 fa44 	bl	800fd88 <setConnectable>
 800e900:	4a82      	ldr	r2, [pc, #520]	; (800eb0c <main+0x7b8>)
 800e902:	2300      	movs	r3, #0
 800e904:	7013      	strb	r3, [r2, #0]
 800e906:	69b3      	ldr	r3, [r6, #24]
 800e908:	b123      	cbz	r3, 800e914 <main+0x5c0>
 800e90a:	4881      	ldr	r0, [pc, #516]	; (800eb10 <main+0x7bc>)
 800e90c:	f007 fc76 	bl	80161fc <puts>
 800e910:	2300      	movs	r3, #0
 800e912:	61b3      	str	r3, [r6, #24]
 800e914:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 800e916:	b30b      	cbz	r3, 800e95c <main+0x608>
 800e918:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
 800e91c:	b1e3      	cbz	r3, 800e958 <main+0x604>
 800e91e:	2300      	movs	r3, #0
 800e920:	f886 3024 	strb.w	r3, [r6, #36]	; 0x24
 800e924:	f7fe fa1a 	bl	800cd5c <MotionSP_VibrationInit>
 800e928:	4b7a      	ldr	r3, [pc, #488]	; (800eb14 <main+0x7c0>)
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	b163      	cbz	r3, 800e948 <main+0x5f4>
 800e92e:	4b7a      	ldr	r3, [pc, #488]	; (800eb18 <main+0x7c4>)
 800e930:	4a7a      	ldr	r2, [pc, #488]	; (800eb1c <main+0x7c8>)
 800e932:	497b      	ldr	r1, [pc, #492]	; (800eb20 <main+0x7cc>)
 800e934:	487b      	ldr	r0, [pc, #492]	; (800eb24 <main+0x7d0>)
 800e936:	f7fe fa85 	bl	800ce44 <MotionSP_TimeDomainAlarmInit>
 800e93a:	f89a 300c 	ldrb.w	r3, [sl, #12]
 800e93e:	4a7a      	ldr	r2, [pc, #488]	; (800eb28 <main+0x7d4>)
 800e940:	497a      	ldr	r1, [pc, #488]	; (800eb2c <main+0x7d8>)
 800e942:	487b      	ldr	r0, [pc, #492]	; (800eb30 <main+0x7dc>)
 800e944:	f7fe fab0 	bl	800cea8 <MotionSP_FreqDomainAlarmInit>
 800e948:	f7fe fc1a 	bl	800d180 <MotionSP_ConfigFifo>
 800e94c:	f7fe fcd0 	bl	800d2f0 <enable_FIFO>
 800e950:	f7f9 f816 	bl	8007980 <HAL_GetTick>
 800e954:	4b77      	ldr	r3, [pc, #476]	; (800eb34 <main+0x7e0>)
 800e956:	6018      	str	r0, [r3, #0]
 800e958:	f7fe fcfe 	bl	800d358 <MotionSP_VibrationAnalysis>
 800e95c:	6933      	ldr	r3, [r6, #16]
 800e95e:	b11b      	cbz	r3, 800e968 <main+0x614>
 800e960:	2300      	movs	r3, #0
 800e962:	6133      	str	r3, [r6, #16]
 800e964:	f7fd f8bc 	bl	800bae0 <hci_user_evt_proc>
 800e968:	68b3      	ldr	r3, [r6, #8]
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	f000 813c 	beq.w	800ebe8 <main+0x894>
 800e970:	2300      	movs	r3, #0
 800e972:	60b3      	str	r3, [r6, #8]
 800e974:	6833      	ldr	r3, [r6, #0]
 800e976:	059f      	lsls	r7, r3, #22
 800e978:	f140 81bc 	bpl.w	800ecf4 <main+0x9a0>
 800e97c:	496e      	ldr	r1, [pc, #440]	; (800eb38 <main+0x7e4>)
 800e97e:	486f      	ldr	r0, [pc, #444]	; (800eb3c <main+0x7e8>)
 800e980:	f007 fcb7 	bl	80162f2 <strcpy>
 800e984:	4b6e      	ldr	r3, [pc, #440]	; (800eb40 <main+0x7ec>)
 800e986:	486d      	ldr	r0, [pc, #436]	; (800eb3c <main+0x7e8>)
 800e988:	2109      	movs	r1, #9
 800e98a:	6019      	str	r1, [r3, #0]
 800e98c:	f000 fc26 	bl	800f1dc <Term_Update>
 800e990:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800e992:	b10b      	cbz	r3, 800e998 <main+0x644>
 800e994:	2300      	movs	r3, #0
 800e996:	62f3      	str	r3, [r6, #44]	; 0x2c
 800e998:	6833      	ldr	r3, [r6, #0]
 800e99a:	07dd      	lsls	r5, r3, #31
 800e99c:	f140 8116 	bpl.w	800ebcc <main+0x878>
 800e9a0:	f898 3003 	ldrb.w	r3, [r8, #3]
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	f000 81a9 	beq.w	800ecfc <main+0x9a8>
 800e9aa:	464a      	mov	r2, r9
 800e9ac:	2102      	movs	r1, #2
 800e9ae:	2001      	movs	r0, #1
 800e9b0:	f7f8 ff4e 	bl	8007850 <IKS01A2_ENV_SENSOR_GetValue>
 800e9b4:	eddd 7a23 	vldr	s15, [sp, #140]	; 0x8c
 800e9b8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800e9bc:	2364      	movs	r3, #100	; 0x64
 800e9be:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800e9c2:	ee17 2a10 	vmov	r2, s14
 800e9c6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e9ca:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800eb44 <main+0x7f0>
 800e9ce:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e9d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e9d6:	ee17 1a90 	vmov	r1, s15
 800e9da:	fb03 1b02 	mla	fp, r3, r2, r1
 800e9de:	6833      	ldr	r3, [r6, #0]
 800e9e0:	059c      	lsls	r4, r3, #22
 800e9e2:	f140 818d 	bpl.w	800ed00 <main+0x9ac>
 800e9e6:	4958      	ldr	r1, [pc, #352]	; (800eb48 <main+0x7f4>)
 800e9e8:	4854      	ldr	r0, [pc, #336]	; (800eb3c <main+0x7e8>)
 800e9ea:	465a      	mov	r2, fp
 800e9ec:	f007 fc1e 	bl	801622c <siprintf>
 800e9f0:	4b53      	ldr	r3, [pc, #332]	; (800eb40 <main+0x7ec>)
 800e9f2:	b2c1      	uxtb	r1, r0
 800e9f4:	6018      	str	r0, [r3, #0]
 800e9f6:	4851      	ldr	r0, [pc, #324]	; (800eb3c <main+0x7e8>)
 800e9f8:	f000 fbf0 	bl	800f1dc <Term_Update>
 800e9fc:	f898 7004 	ldrb.w	r7, [r8, #4]
 800ea00:	b1df      	cbz	r7, 800ea3a <main+0x6e6>
 800ea02:	464a      	mov	r2, r9
 800ea04:	2104      	movs	r1, #4
 800ea06:	2000      	movs	r0, #0
 800ea08:	f7f8 ff22 	bl	8007850 <IKS01A2_ENV_SENSOR_GetValue>
 800ea0c:	eddd 7a23 	vldr	s15, [sp, #140]	; 0x8c
 800ea10:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800ea14:	ee17 7a10 	vmov	r7, s14
 800ea18:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ea1c:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 800ea20:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ea24:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800ea28:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ea2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ea30:	ee17 3a90 	vmov	r3, s15
 800ea34:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 800ea38:	b2bf      	uxth	r7, r7
 800ea3a:	6833      	ldr	r3, [r6, #0]
 800ea3c:	0598      	lsls	r0, r3, #22
 800ea3e:	f140 8164 	bpl.w	800ed0a <main+0x9b6>
 800ea42:	4942      	ldr	r1, [pc, #264]	; (800eb4c <main+0x7f8>)
 800ea44:	483d      	ldr	r0, [pc, #244]	; (800eb3c <main+0x7e8>)
 800ea46:	463a      	mov	r2, r7
 800ea48:	f007 fbf0 	bl	801622c <siprintf>
 800ea4c:	4b3c      	ldr	r3, [pc, #240]	; (800eb40 <main+0x7ec>)
 800ea4e:	b2c1      	uxtb	r1, r0
 800ea50:	6018      	str	r0, [r3, #0]
 800ea52:	483a      	ldr	r0, [pc, #232]	; (800eb3c <main+0x7e8>)
 800ea54:	f000 fbc2 	bl	800f1dc <Term_Update>
 800ea58:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800ea5c:	2902      	cmp	r1, #2
 800ea5e:	f040 8163 	bne.w	800ed28 <main+0x9d4>
 800ea62:	f898 4001 	ldrb.w	r4, [r8, #1]
 800ea66:	b1dc      	cbz	r4, 800eaa0 <main+0x74c>
 800ea68:	aa23      	add	r2, sp, #140	; 0x8c
 800ea6a:	2101      	movs	r1, #1
 800ea6c:	2000      	movs	r0, #0
 800ea6e:	f7f8 feef 	bl	8007850 <IKS01A2_ENV_SENSOR_GetValue>
 800ea72:	eddd 7a23 	vldr	s15, [sp, #140]	; 0x8c
 800ea76:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800ea7a:	ee17 4a10 	vmov	r4, s14
 800ea7e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ea82:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800ea86:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ea8a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800ea8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ea92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ea96:	ee17 3a90 	vmov	r3, s15
 800ea9a:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 800ea9e:	b224      	sxth	r4, r4
 800eaa0:	4b2b      	ldr	r3, [pc, #172]	; (800eb50 <main+0x7fc>)
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	0599      	lsls	r1, r3, #22
 800eaa6:	f140 8135 	bpl.w	800ed14 <main+0x9c0>
 800eaaa:	492a      	ldr	r1, [pc, #168]	; (800eb54 <main+0x800>)
 800eaac:	4823      	ldr	r0, [pc, #140]	; (800eb3c <main+0x7e8>)
 800eaae:	4622      	mov	r2, r4
 800eab0:	f007 fbbc 	bl	801622c <siprintf>
 800eab4:	4b22      	ldr	r3, [pc, #136]	; (800eb40 <main+0x7ec>)
 800eab6:	b2c1      	uxtb	r1, r0
 800eab8:	6018      	str	r0, [r3, #0]
 800eaba:	e04f      	b.n	800eb5c <main+0x808>
 800eabc:	200124c4 	.word	0x200124c4
 800eac0:	20011ee0 	.word	0x20011ee0
 800eac4:	0801b119 	.word	0x0801b119
 800eac8:	0801b14b 	.word	0x0801b14b
 800eacc:	20002118 	.word	0x20002118
 800ead0:	0801b1a9 	.word	0x0801b1a9
 800ead4:	0801b1c6 	.word	0x0801b1c6
 800ead8:	0801b1d2 	.word	0x0801b1d2
 800eadc:	0801b1df 	.word	0x0801b1df
 800eae0:	0801b282 	.word	0x0801b282
 800eae4:	0801b1e7 	.word	0x0801b1e7
 800eae8:	0801b1ff 	.word	0x0801b1ff
 800eaec:	0801b209 	.word	0x0801b209
 800eaf0:	0801b213 	.word	0x0801b213
 800eaf4:	0801b21d 	.word	0x0801b21d
 800eaf8:	0801b226 	.word	0x0801b226
 800eafc:	0801b862 	.word	0x0801b862
 800eb00:	0801b238 	.word	0x0801b238
 800eb04:	0801b284 	.word	0x0801b284
 800eb08:	200083f4 	.word	0x200083f4
 800eb0c:	2000047d 	.word	0x2000047d
 800eb10:	0801b2ce 	.word	0x0801b2ce
 800eb14:	20008204 	.word	0x20008204
 800eb18:	20011e00 	.word	0x20011e00
 800eb1c:	200121f4 	.word	0x200121f4
 800eb20:	20011ddc 	.word	0x20011ddc
 800eb24:	20011e18 	.word	0x20011e18
 800eb28:	20011e1f 	.word	0x20011e1f
 800eb2c:	20012564 	.word	0x20012564
 800eb30:	20012484 	.word	0x20012484
 800eb34:	200081f4 	.word	0x200081f4
 800eb38:	0801b2e7 	.word	0x0801b2e7
 800eb3c:	20012568 	.word	0x20012568
 800eb40:	2001266c 	.word	0x2001266c
 800eb44:	42c80000 	.word	0x42c80000
 800eb48:	0801b2f1 	.word	0x0801b2f1
 800eb4c:	0801b2fc 	.word	0x0801b2fc
 800eb50:	2000831c 	.word	0x2000831c
 800eb54:	0801b304 	.word	0x0801b304
 800eb58:	2000b0f8 	.word	0x2000b0f8
 800eb5c:	4897      	ldr	r0, [pc, #604]	; (800edbc <main+0xa68>)
 800eb5e:	f000 fb3d 	bl	800f1dc <Term_Update>
 800eb62:	f898 5002 	ldrb.w	r5, [r8, #2]
 800eb66:	b1dd      	cbz	r5, 800eba0 <main+0x84c>
 800eb68:	2101      	movs	r1, #1
 800eb6a:	aa23      	add	r2, sp, #140	; 0x8c
 800eb6c:	4608      	mov	r0, r1
 800eb6e:	f7f8 fe6f 	bl	8007850 <IKS01A2_ENV_SENSOR_GetValue>
 800eb72:	eddd 7a23 	vldr	s15, [sp, #140]	; 0x8c
 800eb76:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800eb7a:	ee17 5a10 	vmov	r5, s14
 800eb7e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800eb82:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800eb86:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800eb8a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800eb8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800eb92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800eb96:	ee17 3a90 	vmov	r3, s15
 800eb9a:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 800eb9e:	b22d      	sxth	r5, r5
 800eba0:	4b87      	ldr	r3, [pc, #540]	; (800edc0 <main+0xa6c>)
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	059a      	lsls	r2, r3, #22
 800eba6:	f140 80ba 	bpl.w	800ed1e <main+0x9ca>
 800ebaa:	4986      	ldr	r1, [pc, #536]	; (800edc4 <main+0xa70>)
 800ebac:	4883      	ldr	r0, [pc, #524]	; (800edbc <main+0xa68>)
 800ebae:	462a      	mov	r2, r5
 800ebb0:	f007 fb3c 	bl	801622c <siprintf>
 800ebb4:	4b84      	ldr	r3, [pc, #528]	; (800edc8 <main+0xa74>)
 800ebb6:	b2c1      	uxtb	r1, r0
 800ebb8:	6018      	str	r0, [r3, #0]
 800ebba:	4880      	ldr	r0, [pc, #512]	; (800edbc <main+0xa68>)
 800ebbc:	f000 fb0e 	bl	800f1dc <Term_Update>
 800ebc0:	4623      	mov	r3, r4
 800ebc2:	462a      	mov	r2, r5
 800ebc4:	4639      	mov	r1, r7
 800ebc6:	4658      	mov	r0, fp
 800ebc8:	f000 fd74 	bl	800f6b4 <Environmental_Update>
 800ebcc:	6833      	ldr	r3, [r6, #0]
 800ebce:	059b      	lsls	r3, r3, #22
 800ebd0:	f140 80e2 	bpl.w	800ed98 <main+0xa44>
 800ebd4:	497d      	ldr	r1, [pc, #500]	; (800edcc <main+0xa78>)
 800ebd6:	4879      	ldr	r0, [pc, #484]	; (800edbc <main+0xa68>)
 800ebd8:	f007 fb8b 	bl	80162f2 <strcpy>
 800ebdc:	4b7a      	ldr	r3, [pc, #488]	; (800edc8 <main+0xa74>)
 800ebde:	4877      	ldr	r0, [pc, #476]	; (800edbc <main+0xa68>)
 800ebe0:	2102      	movs	r1, #2
 800ebe2:	6019      	str	r1, [r3, #0]
 800ebe4:	f000 fafa 	bl	800f1dc <Term_Update>
 800ebe8:	68f3      	ldr	r3, [r6, #12]
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d04a      	beq.n	800ec84 <main+0x930>
 800ebee:	2400      	movs	r4, #0
 800ebf0:	4f77      	ldr	r7, [pc, #476]	; (800edd0 <main+0xa7c>)
 800ebf2:	4a78      	ldr	r2, [pc, #480]	; (800edd4 <main+0xa80>)
 800ebf4:	f8df b20c 	ldr.w	fp, [pc, #524]	; 800ee04 <main+0xab0>
 800ebf8:	eddf 8a77 	vldr	s17, [pc, #476]	; 800edd8 <main+0xa84>
 800ebfc:	60f4      	str	r4, [r6, #12]
 800ebfe:	2300      	movs	r3, #0
 800ec00:	f829 3014 	strh.w	r3, [r9, r4, lsl #1]
 800ec04:	f8db 3000 	ldr.w	r3, [fp]
 800ec08:	920b      	str	r2, [sp, #44]	; 0x2c
 800ec0a:	085b      	lsrs	r3, r3, #1
 800ec0c:	ee07 3a90 	vmov	s15, r3
 800ec10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ec14:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800ec18:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ec1c:	eb02 0584 	add.w	r5, r2, r4, lsl #2
 800ec20:	eeb2 8a04 	vmov.f32	s16, #36	; 0x41200000  10.0
 800ec24:	edd5 6a00 	vldr	s13, [r5]
 800ec28:	ee67 7a88 	vmul.f32	s15, s15, s16
 800ec2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ec30:	ed85 7a00 	vstr	s14, [r5]
 800ec34:	ed95 0a00 	vldr	s0, [r5]
 800ec38:	f008 fc2e 	bl	8017498 <log10f>
 800ec3c:	eef0 6a68 	vmov.f32	s13, s17
 800ec40:	edd7 7a00 	vldr	s15, [r7]
 800ec44:	ed9f 7a65 	vldr	s14, [pc, #404]	; 800eddc <main+0xa88>
 800ec48:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ec4a:	eee0 6a08 	vfma.f32	s13, s0, s16
 800ec4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ec52:	ed9f 7a63 	vldr	s14, [pc, #396]	; 800ede0 <main+0xa8c>
 800ec56:	eee6 7a87 	vfma.f32	s15, s13, s14
 800ec5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ec5e:	ee17 3a90 	vmov	r3, s15
 800ec62:	b29b      	uxth	r3, r3
 800ec64:	ee07 3a90 	vmov	s15, r3
 800ec68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ec6c:	f829 3014 	strh.w	r3, [r9, r4, lsl #1]
 800ec70:	2300      	movs	r3, #0
 800ec72:	ece7 7a01 	vstmia	r7!, {s15}
 800ec76:	602b      	str	r3, [r5, #0]
 800ec78:	2c00      	cmp	r4, #0
 800ec7a:	f000 8091 	beq.w	800eda0 <main+0xa4c>
 800ec7e:	4648      	mov	r0, r9
 800ec80:	f000 fd8e 	bl	800f7a0 <AudioLevel_Update>
 800ec84:	6873      	ldr	r3, [r6, #4]
 800ec86:	b31b      	cbz	r3, 800ecd0 <main+0x97c>
 800ec88:	2300      	movs	r3, #0
 800ec8a:	6073      	str	r3, [r6, #4]
 800ec8c:	f898 3005 	ldrb.w	r3, [r8, #5]
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	f000 8087 	beq.w	800eda4 <main+0xa50>
 800ec96:	2102      	movs	r1, #2
 800ec98:	aa11      	add	r2, sp, #68	; 0x44
 800ec9a:	4608      	mov	r0, r1
 800ec9c:	f002 fd9a 	bl	80117d4 <IKS01A2_MOTION_SENSOR_GetAxes>
 800eca0:	f898 3007 	ldrb.w	r3, [r8, #7]
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	f000 8081 	beq.w	800edac <main+0xa58>
 800ecaa:	464a      	mov	r2, r9
 800ecac:	2104      	movs	r1, #4
 800ecae:	2001      	movs	r0, #1
 800ecb0:	f002 fd90 	bl	80117d4 <IKS01A2_MOTION_SENSOR_GetAxes>
 800ecb4:	f898 3006 	ldrb.w	r3, [r8, #6]
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d07b      	beq.n	800edb4 <main+0xa60>
 800ecbc:	aa16      	add	r2, sp, #88	; 0x58
 800ecbe:	2101      	movs	r1, #1
 800ecc0:	2002      	movs	r0, #2
 800ecc2:	f002 fd87 	bl	80117d4 <IKS01A2_MOTION_SENSOR_GetAxes>
 800ecc6:	464a      	mov	r2, r9
 800ecc8:	a916      	add	r1, sp, #88	; 0x58
 800ecca:	a811      	add	r0, sp, #68	; 0x44
 800eccc:	f000 fc78 	bl	800f5c0 <AccGyroMag_Update>
 800ecd0:	bf30      	wfi
 800ecd2:	e5f9      	b.n	800e8c8 <main+0x574>
 800ecd4:	4843      	ldr	r0, [pc, #268]	; (800ede4 <main+0xa90>)
 800ecd6:	f007 fa91 	bl	80161fc <puts>
 800ecda:	f7ff fb09 	bl	800e2f0 <SaveVibrationParamToMemory>
 800ecde:	e5b4      	b.n	800e84a <main+0x4f6>
 800ece0:	4841      	ldr	r0, [pc, #260]	; (800ede8 <main+0xa94>)
 800ece2:	e5ec      	b.n	800e8be <main+0x56a>
 800ece4:	f7f8 fe4c 	bl	8007980 <HAL_GetTick>
 800ece8:	0683      	lsls	r3, r0, #26
 800ecea:	f47f adfc 	bne.w	800e8e6 <main+0x592>
 800ecee:	f7ff f8bf 	bl	800de70 <LedOffTargetPlatform>
 800ecf2:	e5f8      	b.n	800e8e6 <main+0x592>
 800ecf4:	483d      	ldr	r0, [pc, #244]	; (800edec <main+0xa98>)
 800ecf6:	f007 fa0d 	bl	8016114 <iprintf>
 800ecfa:	e649      	b.n	800e990 <main+0x63c>
 800ecfc:	469b      	mov	fp, r3
 800ecfe:	e66e      	b.n	800e9de <main+0x68a>
 800ed00:	4659      	mov	r1, fp
 800ed02:	483b      	ldr	r0, [pc, #236]	; (800edf0 <main+0xa9c>)
 800ed04:	f007 fa06 	bl	8016114 <iprintf>
 800ed08:	e678      	b.n	800e9fc <main+0x6a8>
 800ed0a:	4639      	mov	r1, r7
 800ed0c:	4839      	ldr	r0, [pc, #228]	; (800edf4 <main+0xaa0>)
 800ed0e:	f007 fa01 	bl	8016114 <iprintf>
 800ed12:	e6a1      	b.n	800ea58 <main+0x704>
 800ed14:	4621      	mov	r1, r4
 800ed16:	4838      	ldr	r0, [pc, #224]	; (800edf8 <main+0xaa4>)
 800ed18:	f007 f9fc 	bl	8016114 <iprintf>
 800ed1c:	e721      	b.n	800eb62 <main+0x80e>
 800ed1e:	4829      	ldr	r0, [pc, #164]	; (800edc4 <main+0xa70>)
 800ed20:	4629      	mov	r1, r5
 800ed22:	f007 f9f7 	bl	8016114 <iprintf>
 800ed26:	e74b      	b.n	800ebc0 <main+0x86c>
 800ed28:	2901      	cmp	r1, #1
 800ed2a:	d132      	bne.n	800ed92 <main+0xa3e>
 800ed2c:	f898 4001 	ldrb.w	r4, [r8, #1]
 800ed30:	b1d4      	cbz	r4, 800ed68 <main+0xa14>
 800ed32:	aa23      	add	r2, sp, #140	; 0x8c
 800ed34:	2000      	movs	r0, #0
 800ed36:	f7f8 fd8b 	bl	8007850 <IKS01A2_ENV_SENSOR_GetValue>
 800ed3a:	eddd 7a23 	vldr	s15, [sp, #140]	; 0x8c
 800ed3e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800ed42:	ee17 4a10 	vmov	r4, s14
 800ed46:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ed4a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800ed4e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ed52:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800ed56:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ed5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ed5e:	ee17 3a90 	vmov	r3, s15
 800ed62:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 800ed66:	b224      	sxth	r4, r4
 800ed68:	4b15      	ldr	r3, [pc, #84]	; (800edc0 <main+0xa6c>)
 800ed6a:	681d      	ldr	r5, [r3, #0]
 800ed6c:	f3c5 2540 	ubfx	r5, r5, #9, #1
 800ed70:	b165      	cbz	r5, 800ed8c <main+0xa38>
 800ed72:	4622      	mov	r2, r4
 800ed74:	4921      	ldr	r1, [pc, #132]	; (800edfc <main+0xaa8>)
 800ed76:	4811      	ldr	r0, [pc, #68]	; (800edbc <main+0xa68>)
 800ed78:	f007 fa58 	bl	801622c <siprintf>
 800ed7c:	4b12      	ldr	r3, [pc, #72]	; (800edc8 <main+0xa74>)
 800ed7e:	b2c1      	uxtb	r1, r0
 800ed80:	6018      	str	r0, [r3, #0]
 800ed82:	480e      	ldr	r0, [pc, #56]	; (800edbc <main+0xa68>)
 800ed84:	f000 fa2a 	bl	800f1dc <Term_Update>
 800ed88:	2500      	movs	r5, #0
 800ed8a:	e719      	b.n	800ebc0 <main+0x86c>
 800ed8c:	4621      	mov	r1, r4
 800ed8e:	481b      	ldr	r0, [pc, #108]	; (800edfc <main+0xaa8>)
 800ed90:	e7c7      	b.n	800ed22 <main+0x9ce>
 800ed92:	2400      	movs	r4, #0
 800ed94:	4625      	mov	r5, r4
 800ed96:	e713      	b.n	800ebc0 <main+0x86c>
 800ed98:	4819      	ldr	r0, [pc, #100]	; (800ee00 <main+0xaac>)
 800ed9a:	f007 fa2f 	bl	80161fc <puts>
 800ed9e:	e723      	b.n	800ebe8 <main+0x894>
 800eda0:	2401      	movs	r4, #1
 800eda2:	e72c      	b.n	800ebfe <main+0x8aa>
 800eda4:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
 800eda8:	9311      	str	r3, [sp, #68]	; 0x44
 800edaa:	e779      	b.n	800eca0 <main+0x94c>
 800edac:	e9cd 3324 	strd	r3, r3, [sp, #144]	; 0x90
 800edb0:	9323      	str	r3, [sp, #140]	; 0x8c
 800edb2:	e77f      	b.n	800ecb4 <main+0x960>
 800edb4:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
 800edb8:	9316      	str	r3, [sp, #88]	; 0x58
 800edba:	e784      	b.n	800ecc6 <main+0x972>
 800edbc:	20012568 	.word	0x20012568
 800edc0:	2000831c 	.word	0x2000831c
 800edc4:	0801b30d 	.word	0x0801b30d
 800edc8:	2001266c 	.word	0x2001266c
 800edcc:	0801b862 	.word	0x0801b862
 800edd0:	20012474 	.word	0x20012474
 800edd4:	2001247c 	.word	0x2001247c
 800edd8:	40b379b0 	.word	0x40b379b0
 800eddc:	3f333333 	.word	0x3f333333
 800ede0:	3e99999a 	.word	0x3e99999a
 800ede4:	0801b177 	.word	0x0801b177
 800ede8:	0801b2a7 	.word	0x0801b2a7
 800edec:	0801b2e7 	.word	0x0801b2e7
 800edf0:	0801b2f1 	.word	0x0801b2f1
 800edf4:	0801b2fc 	.word	0x0801b2fc
 800edf8:	0801b304 	.word	0x0801b304
 800edfc:	0801b317 	.word	0x0801b317
 800ee00:	0801b282 	.word	0x0801b282
 800ee04:	2000045c 	.word	0x2000045c

0800ee08 <BSP_I2C1_DeInit>:
 800ee08:	4a09      	ldr	r2, [pc, #36]	; (800ee30 <BSP_I2C1_DeInit+0x28>)
 800ee0a:	480a      	ldr	r0, [pc, #40]	; (800ee34 <BSP_I2C1_DeInit+0x2c>)
 800ee0c:	b508      	push	{r3, lr}
 800ee0e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800ee10:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ee14:	6413      	str	r3, [r2, #64]	; 0x40
 800ee16:	f44f 7140 	mov.w	r1, #768	; 0x300
 800ee1a:	f7f9 fb03 	bl	8008424 <HAL_GPIO_DeInit>
 800ee1e:	4806      	ldr	r0, [pc, #24]	; (800ee38 <BSP_I2C1_DeInit+0x30>)
 800ee20:	f7f9 fdd7 	bl	80089d2 <HAL_I2C_DeInit>
 800ee24:	2800      	cmp	r0, #0
 800ee26:	bf14      	ite	ne
 800ee28:	f06f 0007 	mvnne.w	r0, #7
 800ee2c:	2000      	moveq	r0, #0
 800ee2e:	bd08      	pop	{r3, pc}
 800ee30:	40023800 	.word	0x40023800
 800ee34:	40020400 	.word	0x40020400
 800ee38:	20012670 	.word	0x20012670

0800ee3c <BSP_I2C1_WriteReg>:
 800ee3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ee3e:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800ee42:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ee46:	9200      	str	r2, [sp, #0]
 800ee48:	2301      	movs	r3, #1
 800ee4a:	460a      	mov	r2, r1
 800ee4c:	b2c1      	uxtb	r1, r0
 800ee4e:	4805      	ldr	r0, [pc, #20]	; (800ee64 <BSP_I2C1_WriteReg+0x28>)
 800ee50:	f7f9 fdd8 	bl	8008a04 <HAL_I2C_Mem_Write>
 800ee54:	2800      	cmp	r0, #0
 800ee56:	bf14      	ite	ne
 800ee58:	f06f 0007 	mvnne.w	r0, #7
 800ee5c:	2000      	moveq	r0, #0
 800ee5e:	b004      	add	sp, #16
 800ee60:	bd10      	pop	{r4, pc}
 800ee62:	bf00      	nop
 800ee64:	20012670 	.word	0x20012670

0800ee68 <BSP_I2C1_ReadReg>:
 800ee68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ee6a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800ee6e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ee72:	9200      	str	r2, [sp, #0]
 800ee74:	2301      	movs	r3, #1
 800ee76:	460a      	mov	r2, r1
 800ee78:	4601      	mov	r1, r0
 800ee7a:	4805      	ldr	r0, [pc, #20]	; (800ee90 <BSP_I2C1_ReadReg+0x28>)
 800ee7c:	f7f9 fe58 	bl	8008b30 <HAL_I2C_Mem_Read>
 800ee80:	2800      	cmp	r0, #0
 800ee82:	bf14      	ite	ne
 800ee84:	f06f 0007 	mvnne.w	r0, #7
 800ee88:	2000      	moveq	r0, #0
 800ee8a:	b004      	add	sp, #16
 800ee8c:	bd10      	pop	{r4, pc}
 800ee8e:	bf00      	nop
 800ee90:	20012670 	.word	0x20012670

0800ee94 <BSP_SPI1_SendRecv>:
 800ee94:	b513      	push	{r0, r1, r4, lr}
 800ee96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ee9a:	4614      	mov	r4, r2
 800ee9c:	9300      	str	r3, [sp, #0]
 800ee9e:	4613      	mov	r3, r2
 800eea0:	460a      	mov	r2, r1
 800eea2:	4601      	mov	r1, r0
 800eea4:	4804      	ldr	r0, [pc, #16]	; (800eeb8 <BSP_SPI1_SendRecv+0x24>)
 800eea6:	f7fa ffc1 	bl	8009e2c <HAL_SPI_TransmitReceive>
 800eeaa:	2800      	cmp	r0, #0
 800eeac:	bf0c      	ite	eq
 800eeae:	4620      	moveq	r0, r4
 800eeb0:	f06f 0005 	mvnne.w	r0, #5
 800eeb4:	b002      	add	sp, #8
 800eeb6:	bd10      	pop	{r4, pc}
 800eeb8:	200126c4 	.word	0x200126c4

0800eebc <BSP_GetTick>:
 800eebc:	f7f8 bd60 	b.w	8007980 <HAL_GetTick>

0800eec0 <MX_I2C1_Init>:
 800eec0:	490a      	ldr	r1, [pc, #40]	; (800eeec <MX_I2C1_Init+0x2c>)
 800eec2:	4a0b      	ldr	r2, [pc, #44]	; (800eef0 <MX_I2C1_Init+0x30>)
 800eec4:	b508      	push	{r3, lr}
 800eec6:	e9c0 1200 	strd	r1, r2, [r0]
 800eeca:	2200      	movs	r2, #0
 800eecc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800eed0:	e9c0 2202 	strd	r2, r2, [r0, #8]
 800eed4:	e9c0 1204 	strd	r1, r2, [r0, #16]
 800eed8:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800eedc:	6202      	str	r2, [r0, #32]
 800eede:	f7f9 fd09 	bl	80088f4 <HAL_I2C_Init>
 800eee2:	3000      	adds	r0, #0
 800eee4:	bf18      	it	ne
 800eee6:	2001      	movne	r0, #1
 800eee8:	bd08      	pop	{r3, pc}
 800eeea:	bf00      	nop
 800eeec:	40005400 	.word	0x40005400
 800eef0:	00061a80 	.word	0x00061a80

0800eef4 <BSP_I2C1_Init>:
 800eef4:	b530      	push	{r4, r5, lr}
 800eef6:	4c1a      	ldr	r4, [pc, #104]	; (800ef60 <BSP_I2C1_Init+0x6c>)
 800eef8:	4b1a      	ldr	r3, [pc, #104]	; (800ef64 <BSP_I2C1_Init+0x70>)
 800eefa:	6023      	str	r3, [r4, #0]
 800eefc:	b087      	sub	sp, #28
 800eefe:	4620      	mov	r0, r4
 800ef00:	f7f9 ff24 	bl	8008d4c <HAL_I2C_GetState>
 800ef04:	4605      	mov	r5, r0
 800ef06:	bb40      	cbnz	r0, 800ef5a <BSP_I2C1_Init+0x66>
 800ef08:	f44f 7240 	mov.w	r2, #768	; 0x300
 800ef0c:	2312      	movs	r3, #18
 800ef0e:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800ef12:	2101      	movs	r1, #1
 800ef14:	2303      	movs	r3, #3
 800ef16:	e9cd 1303 	strd	r1, r3, [sp, #12]
 800ef1a:	2304      	movs	r3, #4
 800ef1c:	eb0d 0103 	add.w	r1, sp, r3
 800ef20:	4811      	ldr	r0, [pc, #68]	; (800ef68 <BSP_I2C1_Init+0x74>)
 800ef22:	9305      	str	r3, [sp, #20]
 800ef24:	f7f9 f9a4 	bl	8008270 <HAL_GPIO_Init>
 800ef28:	4b10      	ldr	r3, [pc, #64]	; (800ef6c <BSP_I2C1_Init+0x78>)
 800ef2a:	9500      	str	r5, [sp, #0]
 800ef2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ef2e:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800ef32:	641a      	str	r2, [r3, #64]	; 0x40
 800ef34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ef3a:	9300      	str	r3, [sp, #0]
 800ef3c:	4620      	mov	r0, r4
 800ef3e:	9b00      	ldr	r3, [sp, #0]
 800ef40:	f7ff ffbe 	bl	800eec0 <MX_I2C1_Init>
 800ef44:	4601      	mov	r1, r0
 800ef46:	b118      	cbz	r0, 800ef50 <BSP_I2C1_Init+0x5c>
 800ef48:	f06f 0007 	mvn.w	r0, #7
 800ef4c:	b007      	add	sp, #28
 800ef4e:	bd30      	pop	{r4, r5, pc}
 800ef50:	4620      	mov	r0, r4
 800ef52:	f7f9 fefe 	bl	8008d52 <HAL_I2CEx_ConfigAnalogFilter>
 800ef56:	2800      	cmp	r0, #0
 800ef58:	d1f6      	bne.n	800ef48 <BSP_I2C1_Init+0x54>
 800ef5a:	2000      	movs	r0, #0
 800ef5c:	e7f6      	b.n	800ef4c <BSP_I2C1_Init+0x58>
 800ef5e:	bf00      	nop
 800ef60:	20012670 	.word	0x20012670
 800ef64:	40005400 	.word	0x40005400
 800ef68:	40020400 	.word	0x40020400
 800ef6c:	40023800 	.word	0x40023800

0800ef70 <MX_SPI1_Init>:
 800ef70:	490d      	ldr	r1, [pc, #52]	; (800efa8 <MX_SPI1_Init+0x38>)
 800ef72:	f44f 7282 	mov.w	r2, #260	; 0x104
 800ef76:	b508      	push	{r3, lr}
 800ef78:	e9c0 1200 	strd	r1, r2, [r0]
 800ef7c:	2200      	movs	r2, #0
 800ef7e:	f44f 7c00 	mov.w	ip, #512	; 0x200
 800ef82:	2118      	movs	r1, #24
 800ef84:	e9c0 2202 	strd	r2, r2, [r0, #8]
 800ef88:	e9c0 2204 	strd	r2, r2, [r0, #16]
 800ef8c:	e9c0 2208 	strd	r2, r2, [r0, #32]
 800ef90:	6282      	str	r2, [r0, #40]	; 0x28
 800ef92:	220a      	movs	r2, #10
 800ef94:	e9c0 c106 	strd	ip, r1, [r0, #24]
 800ef98:	62c2      	str	r2, [r0, #44]	; 0x2c
 800ef9a:	f7fa ff05 	bl	8009da8 <HAL_SPI_Init>
 800ef9e:	3000      	adds	r0, #0
 800efa0:	bf18      	it	ne
 800efa2:	2001      	movne	r0, #1
 800efa4:	bd08      	pop	{r3, pc}
 800efa6:	bf00      	nop
 800efa8:	40013000 	.word	0x40013000

0800efac <BSP_SPI1_Init>:
 800efac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efb0:	4d1b      	ldr	r5, [pc, #108]	; (800f020 <BSP_SPI1_Init+0x74>)
 800efb2:	4b1c      	ldr	r3, [pc, #112]	; (800f024 <BSP_SPI1_Init+0x78>)
 800efb4:	602b      	str	r3, [r5, #0]
 800efb6:	b086      	sub	sp, #24
 800efb8:	4628      	mov	r0, r5
 800efba:	f7fb fa5d 	bl	800a478 <HAL_SPI_GetState>
 800efbe:	4604      	mov	r4, r0
 800efc0:	b118      	cbz	r0, 800efca <BSP_SPI1_Init+0x1e>
 800efc2:	2000      	movs	r0, #0
 800efc4:	b006      	add	sp, #24
 800efc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efca:	4b17      	ldr	r3, [pc, #92]	; (800f028 <BSP_SPI1_Init+0x7c>)
 800efcc:	9000      	str	r0, [sp, #0]
 800efce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800efd0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800efd4:	645a      	str	r2, [r3, #68]	; 0x44
 800efd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800efd8:	9003      	str	r0, [sp, #12]
 800efda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800efde:	9300      	str	r3, [sp, #0]
 800efe0:	9b00      	ldr	r3, [sp, #0]
 800efe2:	4812      	ldr	r0, [pc, #72]	; (800f02c <BSP_SPI1_Init+0x80>)
 800efe4:	23c0      	movs	r3, #192	; 0xc0
 800efe6:	f04f 0802 	mov.w	r8, #2
 800efea:	2703      	movs	r7, #3
 800efec:	2605      	movs	r6, #5
 800efee:	a901      	add	r1, sp, #4
 800eff0:	e9cd 3801 	strd	r3, r8, [sp, #4]
 800eff4:	e9cd 7604 	strd	r7, r6, [sp, #16]
 800eff8:	f7f9 f93a 	bl	8008270 <HAL_GPIO_Init>
 800effc:	2308      	movs	r3, #8
 800effe:	480c      	ldr	r0, [pc, #48]	; (800f030 <BSP_SPI1_Init+0x84>)
 800f000:	9605      	str	r6, [sp, #20]
 800f002:	a901      	add	r1, sp, #4
 800f004:	e9cd 3801 	strd	r3, r8, [sp, #4]
 800f008:	e9cd 4703 	strd	r4, r7, [sp, #12]
 800f00c:	f7f9 f930 	bl	8008270 <HAL_GPIO_Init>
 800f010:	4628      	mov	r0, r5
 800f012:	f7ff ffad 	bl	800ef70 <MX_SPI1_Init>
 800f016:	2800      	cmp	r0, #0
 800f018:	d0d3      	beq.n	800efc2 <BSP_SPI1_Init+0x16>
 800f01a:	f06f 0007 	mvn.w	r0, #7
 800f01e:	e7d1      	b.n	800efc4 <BSP_SPI1_Init+0x18>
 800f020:	200126c4 	.word	0x200126c4
 800f024:	40013000 	.word	0x40013000
 800f028:	40023800 	.word	0x40023800
 800f02c:	40020000 	.word	0x40020000
 800f030:	40020400 	.word	0x40020400

0800f034 <safe_aci_gatt_update_char_value>:
 800f034:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f036:	4d09      	ldr	r5, [pc, #36]	; (800f05c <safe_aci_gatt_update_char_value+0x28>)
 800f038:	682c      	ldr	r4, [r5, #0]
 800f03a:	2c00      	cmp	r4, #0
 800f03c:	dd04      	ble.n	800f048 <safe_aci_gatt_update_char_value+0x14>
 800f03e:	3c01      	subs	r4, #1
 800f040:	602c      	str	r4, [r5, #0]
 800f042:	2064      	movs	r0, #100	; 0x64
 800f044:	b003      	add	sp, #12
 800f046:	bd30      	pop	{r4, r5, pc}
 800f048:	9c06      	ldr	r4, [sp, #24]
 800f04a:	9400      	str	r4, [sp, #0]
 800f04c:	f7fc fade 	bl	800b60c <aci_gatt_update_char_value>
 800f050:	2800      	cmp	r0, #0
 800f052:	d0f7      	beq.n	800f044 <safe_aci_gatt_update_char_value+0x10>
 800f054:	231e      	movs	r3, #30
 800f056:	602b      	str	r3, [r5, #0]
 800f058:	e7f4      	b.n	800f044 <safe_aci_gatt_update_char_value+0x10>
 800f05a:	bf00      	nop
 800f05c:	2000834c 	.word	0x2000834c

0800f060 <Add_ConfigW2ST_Service>:
 800f060:	b570      	push	{r4, r5, r6, lr}
 800f062:	4b16      	ldr	r3, [pc, #88]	; (800f0bc <Add_ConfigW2ST_Service+0x5c>)
 800f064:	4e16      	ldr	r6, [pc, #88]	; (800f0c0 <Add_ConfigW2ST_Service+0x60>)
 800f066:	4d17      	ldr	r5, [pc, #92]	; (800f0c4 <Add_ConfigW2ST_Service+0x64>)
 800f068:	4c17      	ldr	r4, [pc, #92]	; (800f0c8 <Add_ConfigW2ST_Service+0x68>)
 800f06a:	b08a      	sub	sp, #40	; 0x28
 800f06c:	e9cd 6306 	strd	r6, r3, [sp, #24]
 800f070:	2300      	movs	r3, #0
 800f072:	e9cd 5308 	strd	r5, r3, [sp, #32]
 800f076:	1d23      	adds	r3, r4, #4
 800f078:	9300      	str	r3, [sp, #0]
 800f07a:	2201      	movs	r2, #1
 800f07c:	2304      	movs	r3, #4
 800f07e:	a906      	add	r1, sp, #24
 800f080:	2002      	movs	r0, #2
 800f082:	f7fc fa33 	bl	800b4ec <aci_gatt_add_serv>
 800f086:	4603      	mov	r3, r0
 800f088:	b9a8      	cbnz	r0, 800f0b6 <Add_ConfigW2ST_Service+0x56>
 800f08a:	4a10      	ldr	r2, [pc, #64]	; (800f0cc <Add_ConfigW2ST_Service+0x6c>)
 800f08c:	88a0      	ldrh	r0, [r4, #4]
 800f08e:	9606      	str	r6, [sp, #24]
 800f090:	3406      	adds	r4, #6
 800f092:	e9cd 2507 	strd	r2, r5, [sp, #28]
 800f096:	9405      	str	r4, [sp, #20]
 800f098:	2210      	movs	r2, #16
 800f09a:	2401      	movs	r4, #1
 800f09c:	e9cd 2403 	strd	r2, r4, [sp, #12]
 800f0a0:	2205      	movs	r2, #5
 800f0a2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800f0a6:	2314      	movs	r3, #20
 800f0a8:	2102      	movs	r1, #2
 800f0aa:	9300      	str	r3, [sp, #0]
 800f0ac:	aa06      	add	r2, sp, #24
 800f0ae:	9109      	str	r1, [sp, #36]	; 0x24
 800f0b0:	f7fc fa56 	bl	800b560 <aci_gatt_add_char>
 800f0b4:	b100      	cbz	r0, 800f0b8 <Add_ConfigW2ST_Service+0x58>
 800f0b6:	2047      	movs	r0, #71	; 0x47
 800f0b8:	b00a      	add	sp, #40	; 0x28
 800f0ba:	bd70      	pop	{r4, r5, r6, pc}
 800f0bc:	9ab40002 	.word	0x9ab40002
 800f0c0:	a5d5c51b 	.word	0xa5d5c51b
 800f0c4:	000f11e1 	.word	0x000f11e1
 800f0c8:	2000834c 	.word	0x2000834c
 800f0cc:	ac360002 	.word	0xac360002

0800f0d0 <Add_ConsoleW2ST_Service>:
 800f0d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f0d4:	4b24      	ldr	r3, [pc, #144]	; (800f168 <Add_ConsoleW2ST_Service+0x98>)
 800f0d6:	4f25      	ldr	r7, [pc, #148]	; (800f16c <Add_ConsoleW2ST_Service+0x9c>)
 800f0d8:	4e25      	ldr	r6, [pc, #148]	; (800f170 <Add_ConsoleW2ST_Service+0xa0>)
 800f0da:	4c26      	ldr	r4, [pc, #152]	; (800f174 <Add_ConsoleW2ST_Service+0xa4>)
 800f0dc:	b08b      	sub	sp, #44	; 0x2c
 800f0de:	e9cd 7306 	strd	r7, r3, [sp, #24]
 800f0e2:	2300      	movs	r3, #0
 800f0e4:	e9cd 6308 	strd	r6, r3, [sp, #32]
 800f0e8:	f104 0308 	add.w	r3, r4, #8
 800f0ec:	9300      	str	r3, [sp, #0]
 800f0ee:	2201      	movs	r2, #1
 800f0f0:	2307      	movs	r3, #7
 800f0f2:	a906      	add	r1, sp, #24
 800f0f4:	2002      	movs	r0, #2
 800f0f6:	f7fc f9f9 	bl	800b4ec <aci_gatt_add_serv>
 800f0fa:	4603      	mov	r3, r0
 800f0fc:	bb78      	cbnz	r0, 800f15e <Add_ConsoleW2ST_Service+0x8e>
 800f0fe:	2501      	movs	r5, #1
 800f100:	f104 020a 	add.w	r2, r4, #10
 800f104:	8920      	ldrh	r0, [r4, #8]
 800f106:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800f178 <Add_ConsoleW2ST_Service+0xa8>
 800f10a:	9301      	str	r3, [sp, #4]
 800f10c:	e9cd 5204 	strd	r5, r2, [sp, #16]
 800f110:	231e      	movs	r3, #30
 800f112:	2205      	movs	r2, #5
 800f114:	f04f 0810 	mov.w	r8, #16
 800f118:	e9cd 2802 	strd	r2, r8, [sp, #8]
 800f11c:	9300      	str	r3, [sp, #0]
 800f11e:	aa06      	add	r2, sp, #24
 800f120:	2314      	movs	r3, #20
 800f122:	2102      	movs	r1, #2
 800f124:	9706      	str	r7, [sp, #24]
 800f126:	e9cd 9607 	strd	r9, r6, [sp, #28]
 800f12a:	9509      	str	r5, [sp, #36]	; 0x24
 800f12c:	f7fc fa18 	bl	800b560 <aci_gatt_add_char>
 800f130:	4603      	mov	r3, r0
 800f132:	b9a0      	cbnz	r0, 800f15e <Add_ConsoleW2ST_Service+0x8e>
 800f134:	2204      	movs	r2, #4
 800f136:	8920      	ldrh	r0, [r4, #8]
 800f138:	f8cd 800c 	str.w	r8, [sp, #12]
 800f13c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800f140:	340c      	adds	r4, #12
 800f142:	2312      	movs	r3, #18
 800f144:	2102      	movs	r1, #2
 800f146:	9300      	str	r3, [sp, #0]
 800f148:	e9cd 5404 	strd	r5, r4, [sp, #16]
 800f14c:	2314      	movs	r3, #20
 800f14e:	aa06      	add	r2, sp, #24
 800f150:	e9cd 7906 	strd	r7, r9, [sp, #24]
 800f154:	9608      	str	r6, [sp, #32]
 800f156:	9109      	str	r1, [sp, #36]	; 0x24
 800f158:	f7fc fa02 	bl	800b560 <aci_gatt_add_char>
 800f15c:	b100      	cbz	r0, 800f160 <Add_ConsoleW2ST_Service+0x90>
 800f15e:	2047      	movs	r0, #71	; 0x47
 800f160:	b00b      	add	sp, #44	; 0x2c
 800f162:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f166:	bf00      	nop
 800f168:	9ab40002 	.word	0x9ab40002
 800f16c:	a5d5c51b 	.word	0xa5d5c51b
 800f170:	000e11e1 	.word	0x000e11e1
 800f174:	2000834c 	.word	0x2000834c
 800f178:	ac360002 	.word	0xac360002

0800f17c <Stderr_Update>:
 800f17c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800f180:	4e15      	ldr	r6, [pc, #84]	; (800f1d8 <Stderr_Update+0x5c>)
 800f182:	4681      	mov	r9, r0
 800f184:	4688      	mov	r8, r1
 800f186:	2400      	movs	r4, #0
 800f188:	f106 0a0e 	add.w	sl, r6, #14
 800f18c:	4544      	cmp	r4, r8
 800f18e:	d303      	bcc.n	800f198 <Stderr_Update+0x1c>
 800f190:	2000      	movs	r0, #0
 800f192:	b002      	add	sp, #8
 800f194:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f198:	eba8 0504 	sub.w	r5, r8, r4
 800f19c:	b2ed      	uxtb	r5, r5
 800f19e:	2d14      	cmp	r5, #20
 800f1a0:	bf28      	it	cs
 800f1a2:	2514      	movcs	r5, #20
 800f1a4:	eb09 0704 	add.w	r7, r9, r4
 800f1a8:	462a      	mov	r2, r5
 800f1aa:	4639      	mov	r1, r7
 800f1ac:	4650      	mov	r0, sl
 800f1ae:	f006 fef5 	bl	8015f9c <memcpy>
 800f1b2:	89b1      	ldrh	r1, [r6, #12]
 800f1b4:	8930      	ldrh	r0, [r6, #8]
 800f1b6:	9700      	str	r7, [sp, #0]
 800f1b8:	462b      	mov	r3, r5
 800f1ba:	2200      	movs	r2, #0
 800f1bc:	f886 5022 	strb.w	r5, [r6, #34]	; 0x22
 800f1c0:	f7fc fa24 	bl	800b60c <aci_gatt_update_char_value>
 800f1c4:	b928      	cbnz	r0, 800f1d2 <Stderr_Update+0x56>
 800f1c6:	200a      	movs	r0, #10
 800f1c8:	3414      	adds	r4, #20
 800f1ca:	f7ff f881 	bl	800e2d0 <HAL_Delay>
 800f1ce:	b2e4      	uxtb	r4, r4
 800f1d0:	e7dc      	b.n	800f18c <Stderr_Update+0x10>
 800f1d2:	2047      	movs	r0, #71	; 0x47
 800f1d4:	e7dd      	b.n	800f192 <Stderr_Update+0x16>
 800f1d6:	bf00      	nop
 800f1d8:	2000834c 	.word	0x2000834c

0800f1dc <Term_Update>:
 800f1dc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800f1e0:	4e16      	ldr	r6, [pc, #88]	; (800f23c <Term_Update+0x60>)
 800f1e2:	4681      	mov	r9, r0
 800f1e4:	4688      	mov	r8, r1
 800f1e6:	2400      	movs	r4, #0
 800f1e8:	f106 0a23 	add.w	sl, r6, #35	; 0x23
 800f1ec:	4544      	cmp	r4, r8
 800f1ee:	d301      	bcc.n	800f1f4 <Term_Update+0x18>
 800f1f0:	2000      	movs	r0, #0
 800f1f2:	e01a      	b.n	800f22a <Term_Update+0x4e>
 800f1f4:	eba8 0504 	sub.w	r5, r8, r4
 800f1f8:	b2ed      	uxtb	r5, r5
 800f1fa:	2d14      	cmp	r5, #20
 800f1fc:	bf28      	it	cs
 800f1fe:	2514      	movcs	r5, #20
 800f200:	eb09 0704 	add.w	r7, r9, r4
 800f204:	462a      	mov	r2, r5
 800f206:	4639      	mov	r1, r7
 800f208:	4650      	mov	r0, sl
 800f20a:	f006 fec7 	bl	8015f9c <memcpy>
 800f20e:	8971      	ldrh	r1, [r6, #10]
 800f210:	8930      	ldrh	r0, [r6, #8]
 800f212:	9700      	str	r7, [sp, #0]
 800f214:	462b      	mov	r3, r5
 800f216:	2200      	movs	r2, #0
 800f218:	f886 5037 	strb.w	r5, [r6, #55]	; 0x37
 800f21c:	f7fc f9f6 	bl	800b60c <aci_gatt_update_char_value>
 800f220:	b130      	cbz	r0, 800f230 <Term_Update+0x54>
 800f222:	4807      	ldr	r0, [pc, #28]	; (800f240 <Term_Update+0x64>)
 800f224:	f006 ffea 	bl	80161fc <puts>
 800f228:	2047      	movs	r0, #71	; 0x47
 800f22a:	b002      	add	sp, #8
 800f22c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f230:	2014      	movs	r0, #20
 800f232:	3414      	adds	r4, #20
 800f234:	f7ff f84c 	bl	800e2d0 <HAL_Delay>
 800f238:	b2e4      	uxtb	r4, r4
 800f23a:	e7d7      	b.n	800f1ec <Term_Update+0x10>
 800f23c:	2000834c 	.word	0x2000834c
 800f240:	0801b321 	.word	0x0801b321

0800f244 <ConfigCommandParsing.isra.1>:
 800f244:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f246:	6803      	ldr	r3, [r0, #0]
 800f248:	4a3b      	ldr	r2, [pc, #236]	; (800f338 <ConfigCommandParsing.isra.1+0xf4>)
 800f24a:	7904      	ldrb	r4, [r0, #4]
 800f24c:	ba1b      	rev	r3, r3
 800f24e:	6013      	str	r3, [r2, #0]
 800f250:	6811      	ldr	r1, [r2, #0]
 800f252:	7943      	ldrb	r3, [r0, #5]
 800f254:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800f258:	d009      	beq.n	800f26e <ConfigCommandParsing.isra.1+0x2a>
 800f25a:	d830      	bhi.n	800f2be <ConfigCommandParsing.isra.1+0x7a>
 800f25c:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 800f260:	d005      	beq.n	800f26e <ConfigCommandParsing.isra.1+0x2a>
 800f262:	f5b1 2f00 	cmp.w	r1, #524288	; 0x80000
 800f266:	d002      	beq.n	800f26e <ConfigCommandParsing.isra.1+0x2a>
 800f268:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800f26c:	d12e      	bne.n	800f2cc <ConfigCommandParsing.isra.1+0x88>
 800f26e:	2cff      	cmp	r4, #255	; 0xff
 800f270:	d12c      	bne.n	800f2cc <ConfigCommandParsing.isra.1+0x88>
 800f272:	4c32      	ldr	r4, [pc, #200]	; (800f33c <ConfigCommandParsing.isra.1+0xf8>)
 800f274:	6821      	ldr	r1, [r4, #0]
 800f276:	2b00      	cmp	r3, #0
 800f278:	d040      	beq.n	800f2fc <ConfigCommandParsing.isra.1+0xb8>
 800f27a:	20c8      	movs	r0, #200	; 0xc8
 800f27c:	f04f 35ff 	mov.w	r5, #4294967295
 800f280:	fb10 5003 	smlabb	r0, r0, r3, r5
 800f284:	62c8      	str	r0, [r1, #44]	; 0x2c
 800f286:	60e0      	str	r0, [r4, #12]
 800f288:	2000      	movs	r0, #0
 800f28a:	6248      	str	r0, [r1, #36]	; 0x24
 800f28c:	2001      	movs	r0, #1
 800f28e:	6148      	str	r0, [r1, #20]
 800f290:	492b      	ldr	r1, [pc, #172]	; (800f340 <ConfigCommandParsing.isra.1+0xfc>)
 800f292:	680c      	ldr	r4, [r1, #0]
 800f294:	f3c4 2440 	ubfx	r4, r4, #9, #1
 800f298:	2c00      	cmp	r4, #0
 800f29a:	d047      	beq.n	800f32c <ConfigCommandParsing.isra.1+0xe8>
 800f29c:	6812      	ldr	r2, [r2, #0]
 800f29e:	4929      	ldr	r1, [pc, #164]	; (800f344 <ConfigCommandParsing.isra.1+0x100>)
 800f2a0:	9300      	str	r3, [sp, #0]
 800f2a2:	4829      	ldr	r0, [pc, #164]	; (800f348 <ConfigCommandParsing.isra.1+0x104>)
 800f2a4:	23ff      	movs	r3, #255	; 0xff
 800f2a6:	f006 ffc1 	bl	801622c <siprintf>
 800f2aa:	4b28      	ldr	r3, [pc, #160]	; (800f34c <ConfigCommandParsing.isra.1+0x108>)
 800f2ac:	b2c1      	uxtb	r1, r0
 800f2ae:	6018      	str	r0, [r3, #0]
 800f2b0:	4825      	ldr	r0, [pc, #148]	; (800f348 <ConfigCommandParsing.isra.1+0x104>)
 800f2b2:	f7ff ff93 	bl	800f1dc <Term_Update>
 800f2b6:	2400      	movs	r4, #0
 800f2b8:	4620      	mov	r0, r4
 800f2ba:	b003      	add	sp, #12
 800f2bc:	bd30      	pop	{r4, r5, pc}
 800f2be:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 800f2c2:	d021      	beq.n	800f308 <ConfigCommandParsing.isra.1+0xc4>
 800f2c4:	d804      	bhi.n	800f2d0 <ConfigCommandParsing.isra.1+0x8c>
 800f2c6:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800f2ca:	d01d      	beq.n	800f308 <ConfigCommandParsing.isra.1+0xc4>
 800f2cc:	2401      	movs	r4, #1
 800f2ce:	e7f3      	b.n	800f2b8 <ConfigCommandParsing.isra.1+0x74>
 800f2d0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800f2d4:	d018      	beq.n	800f308 <ConfigCommandParsing.isra.1+0xc4>
 800f2d6:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800f2da:	d1f7      	bne.n	800f2cc <ConfigCommandParsing.isra.1+0x88>
 800f2dc:	2cff      	cmp	r4, #255	; 0xff
 800f2de:	d1f5      	bne.n	800f2cc <ConfigCommandParsing.isra.1+0x88>
 800f2e0:	4c1b      	ldr	r4, [pc, #108]	; (800f350 <ConfigCommandParsing.isra.1+0x10c>)
 800f2e2:	6820      	ldr	r0, [r4, #0]
 800f2e4:	b1e3      	cbz	r3, 800f320 <ConfigCommandParsing.isra.1+0xdc>
 800f2e6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800f2ea:	4359      	muls	r1, r3
 800f2ec:	3901      	subs	r1, #1
 800f2ee:	62c1      	str	r1, [r0, #44]	; 0x2c
 800f2f0:	60e1      	str	r1, [r4, #12]
 800f2f2:	2100      	movs	r1, #0
 800f2f4:	6241      	str	r1, [r0, #36]	; 0x24
 800f2f6:	2101      	movs	r1, #1
 800f2f8:	6141      	str	r1, [r0, #20]
 800f2fa:	e7c9      	b.n	800f290 <ConfigCommandParsing.isra.1+0x4c>
 800f2fc:	f240 30e7 	movw	r0, #999	; 0x3e7
 800f300:	62c8      	str	r0, [r1, #44]	; 0x2c
 800f302:	60e0      	str	r0, [r4, #12]
 800f304:	624b      	str	r3, [r1, #36]	; 0x24
 800f306:	e7c3      	b.n	800f290 <ConfigCommandParsing.isra.1+0x4c>
 800f308:	2cff      	cmp	r4, #255	; 0xff
 800f30a:	d1df      	bne.n	800f2cc <ConfigCommandParsing.isra.1+0x88>
 800f30c:	4811      	ldr	r0, [pc, #68]	; (800f354 <ConfigCommandParsing.isra.1+0x110>)
 800f30e:	b123      	cbz	r3, 800f31a <ConfigCommandParsing.isra.1+0xd6>
 800f310:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800f314:	4359      	muls	r1, r3
 800f316:	6001      	str	r1, [r0, #0]
 800f318:	e7ba      	b.n	800f290 <ConfigCommandParsing.isra.1+0x4c>
 800f31a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800f31e:	e7fa      	b.n	800f316 <ConfigCommandParsing.isra.1+0xd2>
 800f320:	f240 11f3 	movw	r1, #499	; 0x1f3
 800f324:	62c1      	str	r1, [r0, #44]	; 0x2c
 800f326:	60e1      	str	r1, [r4, #12]
 800f328:	6243      	str	r3, [r0, #36]	; 0x24
 800f32a:	e7b1      	b.n	800f290 <ConfigCommandParsing.isra.1+0x4c>
 800f32c:	6811      	ldr	r1, [r2, #0]
 800f32e:	4805      	ldr	r0, [pc, #20]	; (800f344 <ConfigCommandParsing.isra.1+0x100>)
 800f330:	22ff      	movs	r2, #255	; 0xff
 800f332:	f006 feef 	bl	8016114 <iprintf>
 800f336:	e7bf      	b.n	800f2b8 <ConfigCommandParsing.isra.1+0x74>
 800f338:	2001271c 	.word	0x2001271c
 800f33c:	20012488 	.word	0x20012488
 800f340:	2000831c 	.word	0x2000831c
 800f344:	0801b33d 	.word	0x0801b33d
 800f348:	20012568 	.word	0x20012568
 800f34c:	2001266c 	.word	0x2001266c
 800f350:	20012528 	.word	0x20012528
 800f354:	20000460 	.word	0x20000460

0800f358 <Add_HW_ServW2ST_Service>:
 800f358:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f35c:	4b43      	ldr	r3, [pc, #268]	; (800f46c <Add_HW_ServW2ST_Service+0x114>)
 800f35e:	4d44      	ldr	r5, [pc, #272]	; (800f470 <Add_HW_ServW2ST_Service+0x118>)
 800f360:	4c44      	ldr	r4, [pc, #272]	; (800f474 <Add_HW_ServW2ST_Service+0x11c>)
 800f362:	b08b      	sub	sp, #44	; 0x2c
 800f364:	e9cd 5306 	strd	r5, r3, [sp, #24]
 800f368:	2300      	movs	r3, #0
 800f36a:	e9cd 4308 	strd	r4, r3, [sp, #32]
 800f36e:	4b42      	ldr	r3, [pc, #264]	; (800f478 <Add_HW_ServW2ST_Service+0x120>)
 800f370:	9300      	str	r3, [sp, #0]
 800f372:	2201      	movs	r2, #1
 800f374:	230a      	movs	r3, #10
 800f376:	a906      	add	r1, sp, #24
 800f378:	2002      	movs	r0, #2
 800f37a:	f7fc f8b7 	bl	800b4ec <aci_gatt_add_serv>
 800f37e:	2800      	cmp	r0, #0
 800f380:	d168      	bne.n	800f454 <Add_HW_ServW2ST_Service+0xfc>
 800f382:	493e      	ldr	r1, [pc, #248]	; (800f47c <Add_HW_ServW2ST_Service+0x124>)
 800f384:	9009      	str	r0, [sp, #36]	; 0x24
 800f386:	6888      	ldr	r0, [r1, #8]
 800f388:	4f3d      	ldr	r7, [pc, #244]	; (800f480 <Add_HW_ServW2ST_Service+0x128>)
 800f38a:	4b3e      	ldr	r3, [pc, #248]	; (800f484 <Add_HW_ServW2ST_Service+0x12c>)
 800f38c:	9506      	str	r5, [sp, #24]
 800f38e:	2802      	cmp	r0, #2
 800f390:	e9cd 7407 	strd	r7, r4, [sp, #28]
 800f394:	781a      	ldrb	r2, [r3, #0]
 800f396:	d161      	bne.n	800f45c <Add_HW_ServW2ST_Service+0x104>
 800f398:	2005      	movs	r0, #5
 800f39a:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 800f39e:	3204      	adds	r2, #4
 800f3a0:	701a      	strb	r2, [r3, #0]
 800f3a2:	790a      	ldrb	r2, [r1, #4]
 800f3a4:	b142      	cbz	r2, 800f3b8 <Add_HW_ServW2ST_Service+0x60>
 800f3a6:	781a      	ldrb	r2, [r3, #0]
 800f3a8:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
 800f3ac:	3202      	adds	r2, #2
 800f3ae:	f040 0008 	orr.w	r0, r0, #8
 800f3b2:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 800f3b6:	701a      	strb	r2, [r3, #0]
 800f3b8:	78ca      	ldrb	r2, [r1, #3]
 800f3ba:	b142      	cbz	r2, 800f3ce <Add_HW_ServW2ST_Service+0x76>
 800f3bc:	781a      	ldrb	r2, [r3, #0]
 800f3be:	f89d 1026 	ldrb.w	r1, [sp, #38]	; 0x26
 800f3c2:	3204      	adds	r2, #4
 800f3c4:	f041 0110 	orr.w	r1, r1, #16
 800f3c8:	f88d 1026 	strb.w	r1, [sp, #38]	; 0x26
 800f3cc:	701a      	strb	r2, [r3, #0]
 800f3ce:	4c2e      	ldr	r4, [pc, #184]	; (800f488 <Add_HW_ServW2ST_Service+0x130>)
 800f3d0:	781b      	ldrb	r3, [r3, #0]
 800f3d2:	8f20      	ldrh	r0, [r4, #56]	; 0x38
 800f3d4:	f104 023a 	add.w	r2, r4, #58	; 0x3a
 800f3d8:	9205      	str	r2, [sp, #20]
 800f3da:	2610      	movs	r6, #16
 800f3dc:	2200      	movs	r2, #0
 800f3de:	f04f 0804 	mov.w	r8, #4
 800f3e2:	e9cd 6203 	strd	r6, r2, [sp, #12]
 800f3e6:	e9cd 2801 	strd	r2, r8, [sp, #4]
 800f3ea:	2212      	movs	r2, #18
 800f3ec:	9200      	str	r2, [sp, #0]
 800f3ee:	2102      	movs	r1, #2
 800f3f0:	aa06      	add	r2, sp, #24
 800f3f2:	f7fc f8b5 	bl	800b560 <aci_gatt_add_char>
 800f3f6:	4603      	mov	r3, r0
 800f3f8:	bb60      	cbnz	r0, 800f454 <Add_HW_ServW2ST_Service+0xfc>
 800f3fa:	f8df 9078 	ldr.w	r9, [pc, #120]	; 800f474 <Add_HW_ServW2ST_Service+0x11c>
 800f3fe:	8f20      	ldrh	r0, [r4, #56]	; 0x38
 800f400:	f44f 0260 	mov.w	r2, #14680064	; 0xe00000
 800f404:	e9cd 9208 	strd	r9, r2, [sp, #32]
 800f408:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 800f40c:	e9cd 3204 	strd	r3, r2, [sp, #16]
 800f410:	e9cd 6300 	strd	r6, r3, [sp]
 800f414:	e9cd 8602 	strd	r8, r6, [sp, #8]
 800f418:	2314      	movs	r3, #20
 800f41a:	aa06      	add	r2, sp, #24
 800f41c:	2102      	movs	r1, #2
 800f41e:	e9cd 5706 	strd	r5, r7, [sp, #24]
 800f422:	f7fc f89d 	bl	800b560 <aci_gatt_add_char>
 800f426:	4603      	mov	r3, r0
 800f428:	b9a0      	cbnz	r0, 800f454 <Add_HW_ServW2ST_Service+0xfc>
 800f42a:	8f20      	ldrh	r0, [r4, #56]	; 0x38
 800f42c:	f8cd 9020 	str.w	r9, [sp, #32]
 800f430:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800f434:	343e      	adds	r4, #62	; 0x3e
 800f436:	9209      	str	r2, [sp, #36]	; 0x24
 800f438:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800f43c:	e9cd 6300 	strd	r6, r3, [sp]
 800f440:	e9cd 8602 	strd	r8, r6, [sp, #8]
 800f444:	4643      	mov	r3, r8
 800f446:	aa06      	add	r2, sp, #24
 800f448:	2102      	movs	r1, #2
 800f44a:	e9cd 5706 	strd	r5, r7, [sp, #24]
 800f44e:	f7fc f887 	bl	800b560 <aci_gatt_add_char>
 800f452:	b100      	cbz	r0, 800f456 <Add_HW_ServW2ST_Service+0xfe>
 800f454:	2047      	movs	r0, #71	; 0x47
 800f456:	b00b      	add	sp, #44	; 0x2c
 800f458:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f45c:	2801      	cmp	r0, #1
 800f45e:	d1a0      	bne.n	800f3a2 <Add_HW_ServW2ST_Service+0x4a>
 800f460:	2004      	movs	r0, #4
 800f462:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 800f466:	3202      	adds	r2, #2
 800f468:	e79a      	b.n	800f3a0 <Add_HW_ServW2ST_Service+0x48>
 800f46a:	bf00      	nop
 800f46c:	9ab40002 	.word	0x9ab40002
 800f470:	a5d5c51b 	.word	0xa5d5c51b
 800f474:	000111e1 	.word	0x000111e1
 800f478:	20008384 	.word	0x20008384
 800f47c:	20012220 	.word	0x20012220
 800f480:	ac360002 	.word	0xac360002
 800f484:	2000047c 	.word	0x2000047c
 800f488:	2000834c 	.word	0x2000834c

0800f48c <Add_SW_ServW2ST_Service>:
 800f48c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f490:	4b46      	ldr	r3, [pc, #280]	; (800f5ac <Add_SW_ServW2ST_Service+0x120>)
 800f492:	4f47      	ldr	r7, [pc, #284]	; (800f5b0 <Add_SW_ServW2ST_Service+0x124>)
 800f494:	4e47      	ldr	r6, [pc, #284]	; (800f5b4 <Add_SW_ServW2ST_Service+0x128>)
 800f496:	4c48      	ldr	r4, [pc, #288]	; (800f5b8 <Add_SW_ServW2ST_Service+0x12c>)
 800f498:	b08b      	sub	sp, #44	; 0x2c
 800f49a:	e9cd 7306 	strd	r7, r3, [sp, #24]
 800f49e:	2300      	movs	r3, #0
 800f4a0:	e9cd 6308 	strd	r6, r3, [sp, #32]
 800f4a4:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800f4a8:	9300      	str	r3, [sp, #0]
 800f4aa:	2201      	movs	r2, #1
 800f4ac:	2310      	movs	r3, #16
 800f4ae:	a906      	add	r1, sp, #24
 800f4b0:	2002      	movs	r0, #2
 800f4b2:	f7fc f81b 	bl	800b4ec <aci_gatt_add_serv>
 800f4b6:	4603      	mov	r3, r0
 800f4b8:	2800      	cmp	r0, #0
 800f4ba:	d173      	bne.n	800f5a4 <Add_SW_ServW2ST_Service+0x118>
 800f4bc:	2205      	movs	r2, #5
 800f4be:	9209      	str	r2, [sp, #36]	; 0x24
 800f4c0:	f104 0242 	add.w	r2, r4, #66	; 0x42
 800f4c4:	f8b4 0040 	ldrh.w	r0, [r4, #64]	; 0x40
 800f4c8:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 800f5bc <Add_SW_ServW2ST_Service+0x130>
 800f4cc:	9205      	str	r2, [sp, #20]
 800f4ce:	2510      	movs	r5, #16
 800f4d0:	2201      	movs	r2, #1
 800f4d2:	f04f 0804 	mov.w	r8, #4
 800f4d6:	e9cd 5203 	strd	r5, r2, [sp, #12]
 800f4da:	e9cd 3801 	strd	r3, r8, [sp, #4]
 800f4de:	9500      	str	r5, [sp, #0]
 800f4e0:	2314      	movs	r3, #20
 800f4e2:	aa06      	add	r2, sp, #24
 800f4e4:	2102      	movs	r1, #2
 800f4e6:	9706      	str	r7, [sp, #24]
 800f4e8:	e9cd 9607 	strd	r9, r6, [sp, #28]
 800f4ec:	f7fc f838 	bl	800b560 <aci_gatt_add_char>
 800f4f0:	4603      	mov	r3, r0
 800f4f2:	2800      	cmp	r0, #0
 800f4f4:	d156      	bne.n	800f5a4 <Add_SW_ServW2ST_Service+0x118>
 800f4f6:	2206      	movs	r2, #6
 800f4f8:	9209      	str	r2, [sp, #36]	; 0x24
 800f4fa:	f104 0244 	add.w	r2, r4, #68	; 0x44
 800f4fe:	f8b4 0040 	ldrh.w	r0, [r4, #64]	; 0x40
 800f502:	9608      	str	r6, [sp, #32]
 800f504:	e9cd 3204 	strd	r3, r2, [sp, #16]
 800f508:	e9cd 5300 	strd	r5, r3, [sp]
 800f50c:	e9cd 8502 	strd	r8, r5, [sp, #8]
 800f510:	2314      	movs	r3, #20
 800f512:	aa06      	add	r2, sp, #24
 800f514:	2102      	movs	r1, #2
 800f516:	e9cd 7906 	strd	r7, r9, [sp, #24]
 800f51a:	f7fc f821 	bl	800b560 <aci_gatt_add_char>
 800f51e:	4603      	mov	r3, r0
 800f520:	2800      	cmp	r0, #0
 800f522:	d13f      	bne.n	800f5a4 <Add_SW_ServW2ST_Service+0x118>
 800f524:	2207      	movs	r2, #7
 800f526:	9209      	str	r2, [sp, #36]	; 0x24
 800f528:	f104 0246 	add.w	r2, r4, #70	; 0x46
 800f52c:	f8b4 0040 	ldrh.w	r0, [r4, #64]	; 0x40
 800f530:	9608      	str	r6, [sp, #32]
 800f532:	e9cd 3204 	strd	r3, r2, [sp, #16]
 800f536:	e9cd 5300 	strd	r5, r3, [sp]
 800f53a:	e9cd 8502 	strd	r8, r5, [sp, #8]
 800f53e:	230f      	movs	r3, #15
 800f540:	aa06      	add	r2, sp, #24
 800f542:	2102      	movs	r1, #2
 800f544:	e9cd 7906 	strd	r7, r9, [sp, #24]
 800f548:	f7fc f80a 	bl	800b560 <aci_gatt_add_char>
 800f54c:	4603      	mov	r3, r0
 800f54e:	bb48      	cbnz	r0, 800f5a4 <Add_SW_ServW2ST_Service+0x118>
 800f550:	2208      	movs	r2, #8
 800f552:	9209      	str	r2, [sp, #36]	; 0x24
 800f554:	f104 0248 	add.w	r2, r4, #72	; 0x48
 800f558:	f8b4 0040 	ldrh.w	r0, [r4, #64]	; 0x40
 800f55c:	9608      	str	r6, [sp, #32]
 800f55e:	e9cd 3204 	strd	r3, r2, [sp, #16]
 800f562:	e9cd 5300 	strd	r5, r3, [sp]
 800f566:	e9cd 8502 	strd	r8, r5, [sp, #8]
 800f56a:	230f      	movs	r3, #15
 800f56c:	aa06      	add	r2, sp, #24
 800f56e:	2102      	movs	r1, #2
 800f570:	e9cd 7906 	strd	r7, r9, [sp, #24]
 800f574:	f7fb fff4 	bl	800b560 <aci_gatt_add_char>
 800f578:	4603      	mov	r3, r0
 800f57a:	b998      	cbnz	r0, 800f5a4 <Add_SW_ServW2ST_Service+0x118>
 800f57c:	f8b4 0040 	ldrh.w	r0, [r4, #64]	; 0x40
 800f580:	9608      	str	r6, [sp, #32]
 800f582:	2209      	movs	r2, #9
 800f584:	344a      	adds	r4, #74	; 0x4a
 800f586:	9209      	str	r2, [sp, #36]	; 0x24
 800f588:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800f58c:	e9cd 5300 	strd	r5, r3, [sp]
 800f590:	e9cd 8502 	strd	r8, r5, [sp, #8]
 800f594:	230f      	movs	r3, #15
 800f596:	aa06      	add	r2, sp, #24
 800f598:	2102      	movs	r1, #2
 800f59a:	e9cd 7906 	strd	r7, r9, [sp, #24]
 800f59e:	f7fb ffdf 	bl	800b560 <aci_gatt_add_char>
 800f5a2:	b100      	cbz	r0, 800f5a6 <Add_SW_ServW2ST_Service+0x11a>
 800f5a4:	2047      	movs	r0, #71	; 0x47
 800f5a6:	b00b      	add	sp, #44	; 0x2c
 800f5a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f5ac:	9ab40002 	.word	0x9ab40002
 800f5b0:	a5d5c51b 	.word	0xa5d5c51b
 800f5b4:	000211e1 	.word	0x000211e1
 800f5b8:	2000834c 	.word	0x2000834c
 800f5bc:	ac360002 	.word	0xac360002

0800f5c0 <AccGyroMag_Update>:
 800f5c0:	b570      	push	{r4, r5, r6, lr}
 800f5c2:	b088      	sub	sp, #32
 800f5c4:	460d      	mov	r5, r1
 800f5c6:	4616      	mov	r6, r2
 800f5c8:	4604      	mov	r4, r0
 800f5ca:	f7f8 f9d9 	bl	8007980 <HAL_GetTick>
 800f5ce:	08c0      	lsrs	r0, r0, #3
 800f5d0:	f88d 000c 	strb.w	r0, [sp, #12]
 800f5d4:	f7f8 f9d4 	bl	8007980 <HAL_GetTick>
 800f5d8:	6823      	ldr	r3, [r4, #0]
 800f5da:	f88d 300e 	strb.w	r3, [sp, #14]
 800f5de:	121b      	asrs	r3, r3, #8
 800f5e0:	f88d 300f 	strb.w	r3, [sp, #15]
 800f5e4:	6863      	ldr	r3, [r4, #4]
 800f5e6:	f88d 3010 	strb.w	r3, [sp, #16]
 800f5ea:	121b      	asrs	r3, r3, #8
 800f5ec:	f88d 3011 	strb.w	r3, [sp, #17]
 800f5f0:	68a3      	ldr	r3, [r4, #8]
 800f5f2:	f88d 3012 	strb.w	r3, [sp, #18]
 800f5f6:	121b      	asrs	r3, r3, #8
 800f5f8:	2264      	movs	r2, #100	; 0x64
 800f5fa:	682c      	ldr	r4, [r5, #0]
 800f5fc:	f88d 3013 	strb.w	r3, [sp, #19]
 800f600:	fb94 f4f2 	sdiv	r4, r4, r2
 800f604:	68ab      	ldr	r3, [r5, #8]
 800f606:	602c      	str	r4, [r5, #0]
 800f608:	fb93 f3f2 	sdiv	r3, r3, r2
 800f60c:	60ab      	str	r3, [r5, #8]
 800f60e:	f88d 3018 	strb.w	r3, [sp, #24]
 800f612:	121b      	asrs	r3, r3, #8
 800f614:	f88d 3019 	strb.w	r3, [sp, #25]
 800f618:	6833      	ldr	r3, [r6, #0]
 800f61a:	f88d 301a 	strb.w	r3, [sp, #26]
 800f61e:	0ac0      	lsrs	r0, r0, #11
 800f620:	f88d 000d 	strb.w	r0, [sp, #13]
 800f624:	121b      	asrs	r3, r3, #8
 800f626:	6868      	ldr	r0, [r5, #4]
 800f628:	fb90 f0f2 	sdiv	r0, r0, r2
 800f62c:	6068      	str	r0, [r5, #4]
 800f62e:	f88d 301b 	strb.w	r3, [sp, #27]
 800f632:	6873      	ldr	r3, [r6, #4]
 800f634:	f88d 301c 	strb.w	r3, [sp, #28]
 800f638:	121b      	asrs	r3, r3, #8
 800f63a:	f88d 301d 	strb.w	r3, [sp, #29]
 800f63e:	68b3      	ldr	r3, [r6, #8]
 800f640:	f88d 301e 	strb.w	r3, [sp, #30]
 800f644:	121b      	asrs	r3, r3, #8
 800f646:	f88d 301f 	strb.w	r3, [sp, #31]
 800f64a:	4b14      	ldr	r3, [pc, #80]	; (800f69c <AccGyroMag_Update+0xdc>)
 800f64c:	f88d 4014 	strb.w	r4, [sp, #20]
 800f650:	f88d 0016 	strb.w	r0, [sp, #22]
 800f654:	1224      	asrs	r4, r4, #8
 800f656:	1200      	asrs	r0, r0, #8
 800f658:	8f99      	ldrh	r1, [r3, #60]	; 0x3c
 800f65a:	f88d 4015 	strb.w	r4, [sp, #21]
 800f65e:	f88d 0017 	strb.w	r0, [sp, #23]
 800f662:	8f18      	ldrh	r0, [r3, #56]	; 0x38
 800f664:	ab03      	add	r3, sp, #12
 800f666:	9300      	str	r3, [sp, #0]
 800f668:	2200      	movs	r2, #0
 800f66a:	2314      	movs	r3, #20
 800f66c:	f7ff fce2 	bl	800f034 <safe_aci_gatt_update_char_value>
 800f670:	b170      	cbz	r0, 800f690 <AccGyroMag_Update+0xd0>
 800f672:	4b0b      	ldr	r3, [pc, #44]	; (800f6a0 <AccGyroMag_Update+0xe0>)
 800f674:	681b      	ldr	r3, [r3, #0]
 800f676:	055b      	lsls	r3, r3, #21
 800f678:	d50c      	bpl.n	800f694 <AccGyroMag_Update+0xd4>
 800f67a:	490a      	ldr	r1, [pc, #40]	; (800f6a4 <AccGyroMag_Update+0xe4>)
 800f67c:	480a      	ldr	r0, [pc, #40]	; (800f6a8 <AccGyroMag_Update+0xe8>)
 800f67e:	f006 fe38 	bl	80162f2 <strcpy>
 800f682:	4b0a      	ldr	r3, [pc, #40]	; (800f6ac <AccGyroMag_Update+0xec>)
 800f684:	4808      	ldr	r0, [pc, #32]	; (800f6a8 <AccGyroMag_Update+0xe8>)
 800f686:	2122      	movs	r1, #34	; 0x22
 800f688:	6019      	str	r1, [r3, #0]
 800f68a:	f7ff fd77 	bl	800f17c <Stderr_Update>
 800f68e:	2047      	movs	r0, #71	; 0x47
 800f690:	b008      	add	sp, #32
 800f692:	bd70      	pop	{r4, r5, r6, pc}
 800f694:	4806      	ldr	r0, [pc, #24]	; (800f6b0 <AccGyroMag_Update+0xf0>)
 800f696:	f006 fdb1 	bl	80161fc <puts>
 800f69a:	e7f8      	b.n	800f68e <AccGyroMag_Update+0xce>
 800f69c:	2000834c 	.word	0x2000834c
 800f6a0:	2000831c 	.word	0x2000831c
 800f6a4:	0801b3a4 	.word	0x0801b3a4
 800f6a8:	20012568 	.word	0x20012568
 800f6ac:	2001266c 	.word	0x2001266c
 800f6b0:	0801b3c7 	.word	0x0801b3c7

0800f6b4 <Environmental_Update>:
 800f6b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f6b6:	b087      	sub	sp, #28
 800f6b8:	4616      	mov	r6, r2
 800f6ba:	461c      	mov	r4, r3
 800f6bc:	460f      	mov	r7, r1
 800f6be:	4605      	mov	r5, r0
 800f6c0:	f7f8 f95e 	bl	8007980 <HAL_GetTick>
 800f6c4:	08c0      	lsrs	r0, r0, #3
 800f6c6:	f88d 000c 	strb.w	r0, [sp, #12]
 800f6ca:	f7f8 f959 	bl	8007980 <HAL_GetTick>
 800f6ce:	4b2c      	ldr	r3, [pc, #176]	; (800f780 <Environmental_Update+0xcc>)
 800f6d0:	78da      	ldrb	r2, [r3, #3]
 800f6d2:	0ac0      	lsrs	r0, r0, #11
 800f6d4:	f88d 000d 	strb.w	r0, [sp, #13]
 800f6d8:	b372      	cbz	r2, 800f738 <Environmental_Update+0x84>
 800f6da:	122a      	asrs	r2, r5, #8
 800f6dc:	f88d 500e 	strb.w	r5, [sp, #14]
 800f6e0:	f88d 200f 	strb.w	r2, [sp, #15]
 800f6e4:	142a      	asrs	r2, r5, #16
 800f6e6:	162d      	asrs	r5, r5, #24
 800f6e8:	f88d 2010 	strb.w	r2, [sp, #16]
 800f6ec:	f88d 5011 	strb.w	r5, [sp, #17]
 800f6f0:	2006      	movs	r0, #6
 800f6f2:	791a      	ldrb	r2, [r3, #4]
 800f6f4:	b142      	cbz	r2, 800f708 <Environmental_Update+0x54>
 800f6f6:	aa06      	add	r2, sp, #24
 800f6f8:	4402      	add	r2, r0
 800f6fa:	3002      	adds	r0, #2
 800f6fc:	f802 7c0c 	strb.w	r7, [r2, #-12]
 800f700:	0a3f      	lsrs	r7, r7, #8
 800f702:	f802 7c0b 	strb.w	r7, [r2, #-11]
 800f706:	b2c0      	uxtb	r0, r0
 800f708:	689a      	ldr	r2, [r3, #8]
 800f70a:	2a02      	cmp	r2, #2
 800f70c:	d116      	bne.n	800f73c <Environmental_Update+0x88>
 800f70e:	785a      	ldrb	r2, [r3, #1]
 800f710:	b142      	cbz	r2, 800f724 <Environmental_Update+0x70>
 800f712:	aa06      	add	r2, sp, #24
 800f714:	4402      	add	r2, r0
 800f716:	3002      	adds	r0, #2
 800f718:	f802 6c0c 	strb.w	r6, [r2, #-12]
 800f71c:	1236      	asrs	r6, r6, #8
 800f71e:	f802 6c0b 	strb.w	r6, [r2, #-11]
 800f722:	b2c0      	uxtb	r0, r0
 800f724:	789b      	ldrb	r3, [r3, #2]
 800f726:	b15b      	cbz	r3, 800f740 <Environmental_Update+0x8c>
 800f728:	ab06      	add	r3, sp, #24
 800f72a:	4418      	add	r0, r3
 800f72c:	f800 4c0c 	strb.w	r4, [r0, #-12]
 800f730:	1224      	asrs	r4, r4, #8
 800f732:	f800 4c0b 	strb.w	r4, [r0, #-11]
 800f736:	e003      	b.n	800f740 <Environmental_Update+0x8c>
 800f738:	2002      	movs	r0, #2
 800f73a:	e7da      	b.n	800f6f2 <Environmental_Update+0x3e>
 800f73c:	2a01      	cmp	r2, #1
 800f73e:	d0f1      	beq.n	800f724 <Environmental_Update+0x70>
 800f740:	4a10      	ldr	r2, [pc, #64]	; (800f784 <Environmental_Update+0xd0>)
 800f742:	4b11      	ldr	r3, [pc, #68]	; (800f788 <Environmental_Update+0xd4>)
 800f744:	8f51      	ldrh	r1, [r2, #58]	; 0x3a
 800f746:	8f10      	ldrh	r0, [r2, #56]	; 0x38
 800f748:	781b      	ldrb	r3, [r3, #0]
 800f74a:	aa03      	add	r2, sp, #12
 800f74c:	9200      	str	r2, [sp, #0]
 800f74e:	2200      	movs	r2, #0
 800f750:	f7fb ff5c 	bl	800b60c <aci_gatt_update_char_value>
 800f754:	b170      	cbz	r0, 800f774 <Environmental_Update+0xc0>
 800f756:	4b0d      	ldr	r3, [pc, #52]	; (800f78c <Environmental_Update+0xd8>)
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	055b      	lsls	r3, r3, #21
 800f75c:	d50c      	bpl.n	800f778 <Environmental_Update+0xc4>
 800f75e:	490c      	ldr	r1, [pc, #48]	; (800f790 <Environmental_Update+0xdc>)
 800f760:	480c      	ldr	r0, [pc, #48]	; (800f794 <Environmental_Update+0xe0>)
 800f762:	f006 fdc6 	bl	80162f2 <strcpy>
 800f766:	4b0c      	ldr	r3, [pc, #48]	; (800f798 <Environmental_Update+0xe4>)
 800f768:	480a      	ldr	r0, [pc, #40]	; (800f794 <Environmental_Update+0xe0>)
 800f76a:	2123      	movs	r1, #35	; 0x23
 800f76c:	6019      	str	r1, [r3, #0]
 800f76e:	f7ff fd05 	bl	800f17c <Stderr_Update>
 800f772:	2047      	movs	r0, #71	; 0x47
 800f774:	b007      	add	sp, #28
 800f776:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f778:	4808      	ldr	r0, [pc, #32]	; (800f79c <Environmental_Update+0xe8>)
 800f77a:	f006 fd3f 	bl	80161fc <puts>
 800f77e:	e7f8      	b.n	800f772 <Environmental_Update+0xbe>
 800f780:	20012220 	.word	0x20012220
 800f784:	2000834c 	.word	0x2000834c
 800f788:	2000047c 	.word	0x2000047c
 800f78c:	2000831c 	.word	0x2000831c
 800f790:	0801b3e9 	.word	0x0801b3e9
 800f794:	20012568 	.word	0x20012568
 800f798:	2001266c 	.word	0x2001266c
 800f79c:	0801b40d 	.word	0x0801b40d

0800f7a0 <AudioLevel_Update>:
 800f7a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f7a2:	4604      	mov	r4, r0
 800f7a4:	f7f8 f8ec 	bl	8007980 <HAL_GetTick>
 800f7a8:	08c0      	lsrs	r0, r0, #3
 800f7aa:	f88d 000c 	strb.w	r0, [sp, #12]
 800f7ae:	f7f8 f8e7 	bl	8007980 <HAL_GetTick>
 800f7b2:	8823      	ldrh	r3, [r4, #0]
 800f7b4:	f88d 300e 	strb.w	r3, [sp, #14]
 800f7b8:	8863      	ldrh	r3, [r4, #2]
 800f7ba:	f88d 300f 	strb.w	r3, [sp, #15]
 800f7be:	4b0f      	ldr	r3, [pc, #60]	; (800f7fc <AudioLevel_Update+0x5c>)
 800f7c0:	0ac0      	lsrs	r0, r0, #11
 800f7c2:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
 800f7c4:	f88d 000d 	strb.w	r0, [sp, #13]
 800f7c8:	8f18      	ldrh	r0, [r3, #56]	; 0x38
 800f7ca:	ab03      	add	r3, sp, #12
 800f7cc:	9300      	str	r3, [sp, #0]
 800f7ce:	2200      	movs	r2, #0
 800f7d0:	2304      	movs	r3, #4
 800f7d2:	f7ff fc2f 	bl	800f034 <safe_aci_gatt_update_char_value>
 800f7d6:	b170      	cbz	r0, 800f7f6 <AudioLevel_Update+0x56>
 800f7d8:	4b09      	ldr	r3, [pc, #36]	; (800f800 <AudioLevel_Update+0x60>)
 800f7da:	681b      	ldr	r3, [r3, #0]
 800f7dc:	055b      	lsls	r3, r3, #21
 800f7de:	d509      	bpl.n	800f7f4 <AudioLevel_Update+0x54>
 800f7e0:	4908      	ldr	r1, [pc, #32]	; (800f804 <AudioLevel_Update+0x64>)
 800f7e2:	4809      	ldr	r0, [pc, #36]	; (800f808 <AudioLevel_Update+0x68>)
 800f7e4:	f006 fd85 	bl	80162f2 <strcpy>
 800f7e8:	4b08      	ldr	r3, [pc, #32]	; (800f80c <AudioLevel_Update+0x6c>)
 800f7ea:	4807      	ldr	r0, [pc, #28]	; (800f808 <AudioLevel_Update+0x68>)
 800f7ec:	2119      	movs	r1, #25
 800f7ee:	6019      	str	r1, [r3, #0]
 800f7f0:	f7ff fcc4 	bl	800f17c <Stderr_Update>
 800f7f4:	2047      	movs	r0, #71	; 0x47
 800f7f6:	b004      	add	sp, #16
 800f7f8:	bd10      	pop	{r4, pc}
 800f7fa:	bf00      	nop
 800f7fc:	2000834c 	.word	0x2000834c
 800f800:	2000831c 	.word	0x2000831c
 800f804:	0801b430 	.word	0x0801b430
 800f808:	20012568 	.word	0x20012568
 800f80c:	2001266c 	.word	0x2001266c

0800f810 <FFT_Amplitude_Update>:
 800f810:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f812:	461c      	mov	r4, r3
 800f814:	881b      	ldrh	r3, [r3, #0]
 800f816:	eb03 0583 	add.w	r5, r3, r3, lsl #2
 800f81a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800f81e:	00ad      	lsls	r5, r5, #2
 800f820:	0089      	lsls	r1, r1, #2
 800f822:	b2ad      	uxth	r5, r5
 800f824:	3107      	adds	r1, #7
 800f826:	f105 0614 	add.w	r6, r5, #20
 800f82a:	b289      	uxth	r1, r1
 800f82c:	b2b6      	uxth	r6, r6
 800f82e:	3301      	adds	r3, #1
 800f830:	42b1      	cmp	r1, r6
 800f832:	8023      	strh	r3, [r4, #0]
 800f834:	b089      	sub	sp, #36	; 0x24
 800f836:	f04f 0314 	mov.w	r3, #20
 800f83a:	d208      	bcs.n	800f84e <FFT_Amplitude_Update+0x3e>
 800f83c:	fb91 f6f3 	sdiv	r6, r1, r3
 800f840:	fb03 1316 	mls	r3, r3, r6, r1
 800f844:	2600      	movs	r6, #0
 800f846:	7016      	strb	r6, [r2, #0]
 800f848:	b2db      	uxtb	r3, r3
 800f84a:	8026      	strh	r6, [r4, #0]
 800f84c:	460e      	mov	r6, r1
 800f84e:	2200      	movs	r2, #0
 800f850:	af03      	add	r7, sp, #12
 800f852:	4428      	add	r0, r5
 800f854:	18a9      	adds	r1, r5, r2
 800f856:	b289      	uxth	r1, r1
 800f858:	428e      	cmp	r6, r1
 800f85a:	d81c      	bhi.n	800f896 <FFT_Amplitude_Update+0x86>
 800f85c:	4a14      	ldr	r2, [pc, #80]	; (800f8b0 <FFT_Amplitude_Update+0xa0>)
 800f85e:	f8b2 1042 	ldrh.w	r1, [r2, #66]	; 0x42
 800f862:	f8b2 0040 	ldrh.w	r0, [r2, #64]	; 0x40
 800f866:	9700      	str	r7, [sp, #0]
 800f868:	2200      	movs	r2, #0
 800f86a:	f7fb fecf 	bl	800b60c <aci_gatt_update_char_value>
 800f86e:	4605      	mov	r5, r0
 800f870:	b1d0      	cbz	r0, 800f8a8 <FFT_Amplitude_Update+0x98>
 800f872:	4b10      	ldr	r3, [pc, #64]	; (800f8b4 <FFT_Amplitude_Update+0xa4>)
 800f874:	681b      	ldr	r3, [r3, #0]
 800f876:	055b      	lsls	r3, r3, #21
 800f878:	d511      	bpl.n	800f89e <FFT_Amplitude_Update+0x8e>
 800f87a:	490f      	ldr	r1, [pc, #60]	; (800f8b8 <FFT_Amplitude_Update+0xa8>)
 800f87c:	480f      	ldr	r0, [pc, #60]	; (800f8bc <FFT_Amplitude_Update+0xac>)
 800f87e:	f006 fd38 	bl	80162f2 <strcpy>
 800f882:	4b0f      	ldr	r3, [pc, #60]	; (800f8c0 <FFT_Amplitude_Update+0xb0>)
 800f884:	480d      	ldr	r0, [pc, #52]	; (800f8bc <FFT_Amplitude_Update+0xac>)
 800f886:	2123      	movs	r1, #35	; 0x23
 800f888:	6019      	str	r1, [r3, #0]
 800f88a:	f7ff fc77 	bl	800f17c <Stderr_Update>
 800f88e:	2547      	movs	r5, #71	; 0x47
 800f890:	4628      	mov	r0, r5
 800f892:	b009      	add	sp, #36	; 0x24
 800f894:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f896:	5c81      	ldrb	r1, [r0, r2]
 800f898:	54b9      	strb	r1, [r7, r2]
 800f89a:	3201      	adds	r2, #1
 800f89c:	e7da      	b.n	800f854 <FFT_Amplitude_Update+0x44>
 800f89e:	8821      	ldrh	r1, [r4, #0]
 800f8a0:	4808      	ldr	r0, [pc, #32]	; (800f8c4 <FFT_Amplitude_Update+0xb4>)
 800f8a2:	f006 fc37 	bl	8016114 <iprintf>
 800f8a6:	e7f2      	b.n	800f88e <FFT_Amplitude_Update+0x7e>
 800f8a8:	2028      	movs	r0, #40	; 0x28
 800f8aa:	f7fe fd11 	bl	800e2d0 <HAL_Delay>
 800f8ae:	e7ef      	b.n	800f890 <FFT_Amplitude_Update+0x80>
 800f8b0:	2000834c 	.word	0x2000834c
 800f8b4:	2000831c 	.word	0x2000831c
 800f8b8:	0801b44a 	.word	0x0801b44a
 800f8bc:	20012568 	.word	0x20012568
 800f8c0:	2001266c 	.word	0x2001266c
 800f8c4:	0801b46e 	.word	0x0801b46e

0800f8c8 <TimeDomain_Update>:
 800f8c8:	b510      	push	{r4, lr}
 800f8ca:	b088      	sub	sp, #32
 800f8cc:	4604      	mov	r4, r0
 800f8ce:	f7f8 f857 	bl	8007980 <HAL_GetTick>
 800f8d2:	08c0      	lsrs	r0, r0, #3
 800f8d4:	f88d 000c 	strb.w	r0, [sp, #12]
 800f8d8:	f7f8 f852 	bl	8007980 <HAL_GetTick>
 800f8dc:	eddf 6a46 	vldr	s13, [pc, #280]	; 800f9f8 <TimeDomain_Update+0x130>
 800f8e0:	ed94 7a06 	vldr	s14, [r4, #24]
 800f8e4:	edd4 7a08 	vldr	s15, [r4, #32]
 800f8e8:	ee27 7a26 	vmul.f32	s14, s14, s13
 800f8ec:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800f8f0:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800f8f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f8f8:	ee17 3a10 	vmov	r3, s14
 800f8fc:	ed94 7a07 	vldr	s14, [r4, #28]
 800f900:	ee27 7a26 	vmul.f32	s14, s14, s13
 800f904:	b29b      	uxth	r3, r3
 800f906:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800f90a:	f88d 300e 	strb.w	r3, [sp, #14]
 800f90e:	0a1b      	lsrs	r3, r3, #8
 800f910:	f88d 300f 	strb.w	r3, [sp, #15]
 800f914:	ee17 3a10 	vmov	r3, s14
 800f918:	b29b      	uxth	r3, r3
 800f91a:	f88d 3010 	strb.w	r3, [sp, #16]
 800f91e:	0a1b      	lsrs	r3, r3, #8
 800f920:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800f9fc <TimeDomain_Update+0x134>
 800f924:	f88d 3011 	strb.w	r3, [sp, #17]
 800f928:	ee17 3a90 	vmov	r3, s15
 800f92c:	edd4 7a03 	vldr	s15, [r4, #12]
 800f930:	b29b      	uxth	r3, r3
 800f932:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f936:	f88d 3012 	strb.w	r3, [sp, #18]
 800f93a:	0a1b      	lsrs	r3, r3, #8
 800f93c:	f88d 3013 	strb.w	r3, [sp, #19]
 800f940:	ee17 3a90 	vmov	r3, s15
 800f944:	edd4 7a04 	vldr	s15, [r4, #16]
 800f948:	f88d 3014 	strb.w	r3, [sp, #20]
 800f94c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800f950:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f954:	f88d 2015 	strb.w	r2, [sp, #21]
 800f958:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800f95c:	f3c3 6307 	ubfx	r3, r3, #24, #8
 800f960:	f88d 3017 	strb.w	r3, [sp, #23]
 800f964:	ee17 3a90 	vmov	r3, s15
 800f968:	edd4 7a05 	vldr	s15, [r4, #20]
 800f96c:	f88d 2016 	strb.w	r2, [sp, #22]
 800f970:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f974:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800f978:	f88d 3018 	strb.w	r3, [sp, #24]
 800f97c:	f88d 2019 	strb.w	r2, [sp, #25]
 800f980:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800f984:	f3c3 6307 	ubfx	r3, r3, #24, #8
 800f988:	f88d 301b 	strb.w	r3, [sp, #27]
 800f98c:	ee17 3a90 	vmov	r3, s15
 800f990:	f88d 201a 	strb.w	r2, [sp, #26]
 800f994:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800f998:	f88d 301c 	strb.w	r3, [sp, #28]
 800f99c:	f88d 201d 	strb.w	r2, [sp, #29]
 800f9a0:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800f9a4:	f3c3 6307 	ubfx	r3, r3, #24, #8
 800f9a8:	f88d 301f 	strb.w	r3, [sp, #31]
 800f9ac:	4b14      	ldr	r3, [pc, #80]	; (800fa00 <TimeDomain_Update+0x138>)
 800f9ae:	f88d 201e 	strb.w	r2, [sp, #30]
 800f9b2:	0ac0      	lsrs	r0, r0, #11
 800f9b4:	f8b3 1044 	ldrh.w	r1, [r3, #68]	; 0x44
 800f9b8:	f88d 000d 	strb.w	r0, [sp, #13]
 800f9bc:	f8b3 0040 	ldrh.w	r0, [r3, #64]	; 0x40
 800f9c0:	ab03      	add	r3, sp, #12
 800f9c2:	9300      	str	r3, [sp, #0]
 800f9c4:	2200      	movs	r2, #0
 800f9c6:	2314      	movs	r3, #20
 800f9c8:	f7fb fe20 	bl	800b60c <aci_gatt_update_char_value>
 800f9cc:	b170      	cbz	r0, 800f9ec <TimeDomain_Update+0x124>
 800f9ce:	4b0d      	ldr	r3, [pc, #52]	; (800fa04 <TimeDomain_Update+0x13c>)
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	055b      	lsls	r3, r3, #21
 800f9d4:	d50c      	bpl.n	800f9f0 <TimeDomain_Update+0x128>
 800f9d6:	490c      	ldr	r1, [pc, #48]	; (800fa08 <TimeDomain_Update+0x140>)
 800f9d8:	480c      	ldr	r0, [pc, #48]	; (800fa0c <TimeDomain_Update+0x144>)
 800f9da:	f006 fc8a 	bl	80162f2 <strcpy>
 800f9de:	4b0c      	ldr	r3, [pc, #48]	; (800fa10 <TimeDomain_Update+0x148>)
 800f9e0:	480a      	ldr	r0, [pc, #40]	; (800fa0c <TimeDomain_Update+0x144>)
 800f9e2:	2121      	movs	r1, #33	; 0x21
 800f9e4:	6019      	str	r1, [r3, #0]
 800f9e6:	f7ff fbc9 	bl	800f17c <Stderr_Update>
 800f9ea:	2047      	movs	r0, #71	; 0x47
 800f9ec:	b008      	add	sp, #32
 800f9ee:	bd10      	pop	{r4, pc}
 800f9f0:	4808      	ldr	r0, [pc, #32]	; (800fa14 <TimeDomain_Update+0x14c>)
 800f9f2:	f006 fc03 	bl	80161fc <puts>
 800f9f6:	e7f8      	b.n	800f9ea <TimeDomain_Update+0x122>
 800f9f8:	42c80000 	.word	0x42c80000
 800f9fc:	447a0000 	.word	0x447a0000
 800fa00:	2000834c 	.word	0x2000834c
 800fa04:	2000831c 	.word	0x2000831c
 800fa08:	0801b497 	.word	0x0801b497
 800fa0c:	20012568 	.word	0x20012568
 800fa10:	2001266c 	.word	0x2001266c
 800fa14:	0801b4b9 	.word	0x0801b4b9

0800fa18 <FFT_AlarmSpeedRMS_Status_Update>:
 800fa18:	b530      	push	{r4, r5, lr}
 800fa1a:	b087      	sub	sp, #28
 800fa1c:	460c      	mov	r4, r1
 800fa1e:	4605      	mov	r5, r0
 800fa20:	f7f7 ffae 	bl	8007980 <HAL_GetTick>
 800fa24:	08c0      	lsrs	r0, r0, #3
 800fa26:	f88d 0008 	strb.w	r0, [sp, #8]
 800fa2a:	f7f7 ffa9 	bl	8007980 <HAL_GetTick>
 800fa2e:	786b      	ldrb	r3, [r5, #1]
 800fa30:	782a      	ldrb	r2, [r5, #0]
 800fa32:	009b      	lsls	r3, r3, #2
 800fa34:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800fa38:	78aa      	ldrb	r2, [r5, #2]
 800fa3a:	4313      	orrs	r3, r2
 800fa3c:	f88d 300a 	strb.w	r3, [sp, #10]
 800fa40:	68e3      	ldr	r3, [r4, #12]
 800fa42:	f88d 300b 	strb.w	r3, [sp, #11]
 800fa46:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800fa4a:	f88d 200c 	strb.w	r2, [sp, #12]
 800fa4e:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800fa52:	f3c3 6307 	ubfx	r3, r3, #24, #8
 800fa56:	f88d 300e 	strb.w	r3, [sp, #14]
 800fa5a:	6923      	ldr	r3, [r4, #16]
 800fa5c:	f88d 200d 	strb.w	r2, [sp, #13]
 800fa60:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800fa64:	f88d 300f 	strb.w	r3, [sp, #15]
 800fa68:	f88d 2010 	strb.w	r2, [sp, #16]
 800fa6c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800fa70:	f3c3 6307 	ubfx	r3, r3, #24, #8
 800fa74:	f88d 3012 	strb.w	r3, [sp, #18]
 800fa78:	6963      	ldr	r3, [r4, #20]
 800fa7a:	f88d 2011 	strb.w	r2, [sp, #17]
 800fa7e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800fa82:	f88d 3013 	strb.w	r3, [sp, #19]
 800fa86:	f88d 2014 	strb.w	r2, [sp, #20]
 800fa8a:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800fa8e:	f3c3 6307 	ubfx	r3, r3, #24, #8
 800fa92:	f88d 3016 	strb.w	r3, [sp, #22]
 800fa96:	4b13      	ldr	r3, [pc, #76]	; (800fae4 <FFT_AlarmSpeedRMS_Status_Update+0xcc>)
 800fa98:	f88d 2015 	strb.w	r2, [sp, #21]
 800fa9c:	0ac0      	lsrs	r0, r0, #11
 800fa9e:	f8b3 1046 	ldrh.w	r1, [r3, #70]	; 0x46
 800faa2:	f88d 0009 	strb.w	r0, [sp, #9]
 800faa6:	f8b3 0040 	ldrh.w	r0, [r3, #64]	; 0x40
 800faaa:	ab02      	add	r3, sp, #8
 800faac:	9300      	str	r3, [sp, #0]
 800faae:	2200      	movs	r2, #0
 800fab0:	230f      	movs	r3, #15
 800fab2:	f7fb fdab 	bl	800b60c <aci_gatt_update_char_value>
 800fab6:	b170      	cbz	r0, 800fad6 <FFT_AlarmSpeedRMS_Status_Update+0xbe>
 800fab8:	4b0b      	ldr	r3, [pc, #44]	; (800fae8 <FFT_AlarmSpeedRMS_Status_Update+0xd0>)
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	055b      	lsls	r3, r3, #21
 800fabe:	d50c      	bpl.n	800fada <FFT_AlarmSpeedRMS_Status_Update+0xc2>
 800fac0:	490a      	ldr	r1, [pc, #40]	; (800faec <FFT_AlarmSpeedRMS_Status_Update+0xd4>)
 800fac2:	480b      	ldr	r0, [pc, #44]	; (800faf0 <FFT_AlarmSpeedRMS_Status_Update+0xd8>)
 800fac4:	f006 fc15 	bl	80162f2 <strcpy>
 800fac8:	4b0a      	ldr	r3, [pc, #40]	; (800faf4 <FFT_AlarmSpeedRMS_Status_Update+0xdc>)
 800faca:	4809      	ldr	r0, [pc, #36]	; (800faf0 <FFT_AlarmSpeedRMS_Status_Update+0xd8>)
 800facc:	212c      	movs	r1, #44	; 0x2c
 800face:	6019      	str	r1, [r3, #0]
 800fad0:	f7ff fb54 	bl	800f17c <Stderr_Update>
 800fad4:	2047      	movs	r0, #71	; 0x47
 800fad6:	b007      	add	sp, #28
 800fad8:	bd30      	pop	{r4, r5, pc}
 800fada:	4807      	ldr	r0, [pc, #28]	; (800faf8 <FFT_AlarmSpeedRMS_Status_Update+0xe0>)
 800fadc:	f006 fb8e 	bl	80161fc <puts>
 800fae0:	e7f8      	b.n	800fad4 <FFT_AlarmSpeedRMS_Status_Update+0xbc>
 800fae2:	bf00      	nop
 800fae4:	2000834c 	.word	0x2000834c
 800fae8:	2000831c 	.word	0x2000831c
 800faec:	0801b4dd 	.word	0x0801b4dd
 800faf0:	20012568 	.word	0x20012568
 800faf4:	2001266c 	.word	0x2001266c
 800faf8:	0801b50a 	.word	0x0801b50a

0800fafc <FFT_AlarmAccStatus_Update>:
 800fafc:	b530      	push	{r4, r5, lr}
 800fafe:	b087      	sub	sp, #28
 800fb00:	460c      	mov	r4, r1
 800fb02:	4605      	mov	r5, r0
 800fb04:	f7f7 ff3c 	bl	8007980 <HAL_GetTick>
 800fb08:	08c0      	lsrs	r0, r0, #3
 800fb0a:	f88d 0008 	strb.w	r0, [sp, #8]
 800fb0e:	f7f7 ff37 	bl	8007980 <HAL_GetTick>
 800fb12:	792b      	ldrb	r3, [r5, #4]
 800fb14:	78ea      	ldrb	r2, [r5, #3]
 800fb16:	009b      	lsls	r3, r3, #2
 800fb18:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800fb1c:	796a      	ldrb	r2, [r5, #5]
 800fb1e:	4313      	orrs	r3, r2
 800fb20:	f88d 300a 	strb.w	r3, [sp, #10]
 800fb24:	69a3      	ldr	r3, [r4, #24]
 800fb26:	f88d 300b 	strb.w	r3, [sp, #11]
 800fb2a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800fb2e:	f88d 200c 	strb.w	r2, [sp, #12]
 800fb32:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800fb36:	f3c3 6307 	ubfx	r3, r3, #24, #8
 800fb3a:	f88d 300e 	strb.w	r3, [sp, #14]
 800fb3e:	69e3      	ldr	r3, [r4, #28]
 800fb40:	f88d 200d 	strb.w	r2, [sp, #13]
 800fb44:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800fb48:	f88d 300f 	strb.w	r3, [sp, #15]
 800fb4c:	f88d 2010 	strb.w	r2, [sp, #16]
 800fb50:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800fb54:	f3c3 6307 	ubfx	r3, r3, #24, #8
 800fb58:	f88d 3012 	strb.w	r3, [sp, #18]
 800fb5c:	6a23      	ldr	r3, [r4, #32]
 800fb5e:	f88d 2011 	strb.w	r2, [sp, #17]
 800fb62:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800fb66:	f88d 3013 	strb.w	r3, [sp, #19]
 800fb6a:	f88d 2014 	strb.w	r2, [sp, #20]
 800fb6e:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800fb72:	f3c3 6307 	ubfx	r3, r3, #24, #8
 800fb76:	f88d 3016 	strb.w	r3, [sp, #22]
 800fb7a:	4b13      	ldr	r3, [pc, #76]	; (800fbc8 <FFT_AlarmAccStatus_Update+0xcc>)
 800fb7c:	f88d 2015 	strb.w	r2, [sp, #21]
 800fb80:	0ac0      	lsrs	r0, r0, #11
 800fb82:	f8b3 1048 	ldrh.w	r1, [r3, #72]	; 0x48
 800fb86:	f88d 0009 	strb.w	r0, [sp, #9]
 800fb8a:	f8b3 0040 	ldrh.w	r0, [r3, #64]	; 0x40
 800fb8e:	ab02      	add	r3, sp, #8
 800fb90:	9300      	str	r3, [sp, #0]
 800fb92:	2200      	movs	r2, #0
 800fb94:	230f      	movs	r3, #15
 800fb96:	f7fb fd39 	bl	800b60c <aci_gatt_update_char_value>
 800fb9a:	b170      	cbz	r0, 800fbba <FFT_AlarmAccStatus_Update+0xbe>
 800fb9c:	4b0b      	ldr	r3, [pc, #44]	; (800fbcc <FFT_AlarmAccStatus_Update+0xd0>)
 800fb9e:	681b      	ldr	r3, [r3, #0]
 800fba0:	055b      	lsls	r3, r3, #21
 800fba2:	d50c      	bpl.n	800fbbe <FFT_AlarmAccStatus_Update+0xc2>
 800fba4:	490a      	ldr	r1, [pc, #40]	; (800fbd0 <FFT_AlarmAccStatus_Update+0xd4>)
 800fba6:	480b      	ldr	r0, [pc, #44]	; (800fbd4 <FFT_AlarmAccStatus_Update+0xd8>)
 800fba8:	f006 fba3 	bl	80162f2 <strcpy>
 800fbac:	4b0a      	ldr	r3, [pc, #40]	; (800fbd8 <FFT_AlarmAccStatus_Update+0xdc>)
 800fbae:	4809      	ldr	r0, [pc, #36]	; (800fbd4 <FFT_AlarmAccStatus_Update+0xd8>)
 800fbb0:	212a      	movs	r1, #42	; 0x2a
 800fbb2:	6019      	str	r1, [r3, #0]
 800fbb4:	f7ff fae2 	bl	800f17c <Stderr_Update>
 800fbb8:	2047      	movs	r0, #71	; 0x47
 800fbba:	b007      	add	sp, #28
 800fbbc:	bd30      	pop	{r4, r5, pc}
 800fbbe:	4807      	ldr	r0, [pc, #28]	; (800fbdc <FFT_AlarmAccStatus_Update+0xe0>)
 800fbc0:	f006 fb1c 	bl	80161fc <puts>
 800fbc4:	e7f8      	b.n	800fbb8 <FFT_AlarmAccStatus_Update+0xbc>
 800fbc6:	bf00      	nop
 800fbc8:	2000834c 	.word	0x2000834c
 800fbcc:	2000831c 	.word	0x2000831c
 800fbd0:	0801b539 	.word	0x0801b539
 800fbd4:	20012568 	.word	0x20012568
 800fbd8:	2001266c 	.word	0x2001266c
 800fbdc:	0801b564 	.word	0x0801b564

0800fbe0 <FFT_AlarmSubrangeStatus_Update>:
 800fbe0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fbe2:	ed2d 8b02 	vpush	{d8}
 800fbe6:	2600      	movs	r6, #0
 800fbe8:	ee08 3a10 	vmov	s16, r3
 800fbec:	b087      	sub	sp, #28
 800fbee:	4605      	mov	r5, r0
 800fbf0:	460b      	mov	r3, r1
 800fbf2:	4634      	mov	r4, r6
 800fbf4:	4637      	mov	r7, r6
 800fbf6:	1a58      	subs	r0, r3, r1
 800fbf8:	4282      	cmp	r2, r0
 800fbfa:	f300 809e 	bgt.w	800fd3a <FFT_AlarmSubrangeStatus_Update+0x15a>
 800fbfe:	f7f7 febf 	bl	8007980 <HAL_GetTick>
 800fc02:	08c0      	lsrs	r0, r0, #3
 800fc04:	f88d 0008 	strb.w	r0, [sp, #8]
 800fc08:	f7f7 feba 	bl	8007980 <HAL_GetTick>
 800fc0c:	4b56      	ldr	r3, [pc, #344]	; (800fd68 <FFT_AlarmSubrangeStatus_Update+0x188>)
 800fc0e:	eddf 6a57 	vldr	s13, [pc, #348]	; 800fd6c <FFT_AlarmSubrangeStatus_Update+0x18c>
 800fc12:	edd3 7a00 	vldr	s15, [r3]
 800fc16:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800fc1a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fc1e:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 800fc22:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 800fc26:	eec7 5a88 	vdiv.f32	s11, s15, s16
 800fc2a:	0ac0      	lsrs	r0, r0, #11
 800fc2c:	00a4      	lsls	r4, r4, #2
 800fc2e:	f88d 0009 	strb.w	r0, [sp, #9]
 800fc32:	ea44 1407 	orr.w	r4, r4, r7, lsl #4
 800fc36:	4334      	orrs	r4, r6
 800fc38:	2200      	movs	r2, #0
 800fc3a:	f88d 400a 	strb.w	r4, [sp, #10]
 800fc3e:	edd5 7a01 	vldr	s15, [r5, #4]
 800fc42:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800fc46:	edd5 7a04 	vldr	s15, [r5, #16]
 800fc4a:	ee27 7a25 	vmul.f32	s14, s14, s11
 800fc4e:	ee27 7a06 	vmul.f32	s14, s14, s12
 800fc52:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800fc56:	ee17 3a10 	vmov	r3, s14
 800fc5a:	ed95 7a00 	vldr	s14, [r5]
 800fc5e:	ee27 7a26 	vmul.f32	s14, s14, s13
 800fc62:	b29b      	uxth	r3, r3
 800fc64:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800fc68:	f88d 300b 	strb.w	r3, [sp, #11]
 800fc6c:	0a1b      	lsrs	r3, r3, #8
 800fc6e:	f88d 300c 	strb.w	r3, [sp, #12]
 800fc72:	ee17 3a10 	vmov	r3, s14
 800fc76:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800fc7a:	b29b      	uxth	r3, r3
 800fc7c:	ee27 7a25 	vmul.f32	s14, s14, s11
 800fc80:	f88d 300d 	strb.w	r3, [sp, #13]
 800fc84:	ee27 7a06 	vmul.f32	s14, s14, s12
 800fc88:	0a1b      	lsrs	r3, r3, #8
 800fc8a:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800fc8e:	f88d 300e 	strb.w	r3, [sp, #14]
 800fc92:	edd5 7a07 	vldr	s15, [r5, #28]
 800fc96:	ee17 3a10 	vmov	r3, s14
 800fc9a:	ed95 7a03 	vldr	s14, [r5, #12]
 800fc9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fca2:	ee27 7a26 	vmul.f32	s14, s14, s13
 800fca6:	b29b      	uxth	r3, r3
 800fca8:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800fcac:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800fcb0:	f88d 300f 	strb.w	r3, [sp, #15]
 800fcb4:	0a1b      	lsrs	r3, r3, #8
 800fcb6:	f88d 3010 	strb.w	r3, [sp, #16]
 800fcba:	ee67 7a86 	vmul.f32	s15, s15, s12
 800fcbe:	ee17 3a10 	vmov	r3, s14
 800fcc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fcc6:	b29b      	uxth	r3, r3
 800fcc8:	f88d 3011 	strb.w	r3, [sp, #17]
 800fccc:	0a1b      	lsrs	r3, r3, #8
 800fcce:	f88d 3012 	strb.w	r3, [sp, #18]
 800fcd2:	ee17 3a90 	vmov	r3, s15
 800fcd6:	edd5 7a06 	vldr	s15, [r5, #24]
 800fcda:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800fcde:	b29b      	uxth	r3, r3
 800fce0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fce4:	f88d 3013 	strb.w	r3, [sp, #19]
 800fce8:	0a1b      	lsrs	r3, r3, #8
 800fcea:	f88d 3014 	strb.w	r3, [sp, #20]
 800fcee:	ee17 3a90 	vmov	r3, s15
 800fcf2:	b29b      	uxth	r3, r3
 800fcf4:	f88d 3015 	strb.w	r3, [sp, #21]
 800fcf8:	0a1b      	lsrs	r3, r3, #8
 800fcfa:	f88d 3016 	strb.w	r3, [sp, #22]
 800fcfe:	4b1c      	ldr	r3, [pc, #112]	; (800fd70 <FFT_AlarmSubrangeStatus_Update+0x190>)
 800fd00:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
 800fd04:	f8b3 0040 	ldrh.w	r0, [r3, #64]	; 0x40
 800fd08:	ab02      	add	r3, sp, #8
 800fd0a:	9300      	str	r3, [sp, #0]
 800fd0c:	230f      	movs	r3, #15
 800fd0e:	f7fb fc7d 	bl	800b60c <aci_gatt_update_char_value>
 800fd12:	b170      	cbz	r0, 800fd32 <FFT_AlarmSubrangeStatus_Update+0x152>
 800fd14:	4b17      	ldr	r3, [pc, #92]	; (800fd74 <FFT_AlarmSubrangeStatus_Update+0x194>)
 800fd16:	681b      	ldr	r3, [r3, #0]
 800fd18:	055b      	lsls	r3, r3, #21
 800fd1a:	d520      	bpl.n	800fd5e <FFT_AlarmSubrangeStatus_Update+0x17e>
 800fd1c:	4916      	ldr	r1, [pc, #88]	; (800fd78 <FFT_AlarmSubrangeStatus_Update+0x198>)
 800fd1e:	4817      	ldr	r0, [pc, #92]	; (800fd7c <FFT_AlarmSubrangeStatus_Update+0x19c>)
 800fd20:	f006 fae7 	bl	80162f2 <strcpy>
 800fd24:	4b16      	ldr	r3, [pc, #88]	; (800fd80 <FFT_AlarmSubrangeStatus_Update+0x1a0>)
 800fd26:	4815      	ldr	r0, [pc, #84]	; (800fd7c <FFT_AlarmSubrangeStatus_Update+0x19c>)
 800fd28:	212f      	movs	r1, #47	; 0x2f
 800fd2a:	6019      	str	r1, [r3, #0]
 800fd2c:	f7ff fa26 	bl	800f17c <Stderr_Update>
 800fd30:	2047      	movs	r0, #71	; 0x47
 800fd32:	b007      	add	sp, #28
 800fd34:	ecbd 8b02 	vpop	{d8}
 800fd38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fd3a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800fd3e:	f893 403f 	ldrb.w	r4, [r3, #63]	; 0x3f
 800fd42:	f893 607f 	ldrb.w	r6, [r3, #127]	; 0x7f
 800fd46:	4287      	cmp	r7, r0
 800fd48:	bf38      	it	cc
 800fd4a:	4607      	movcc	r7, r0
 800fd4c:	42bc      	cmp	r4, r7
 800fd4e:	bf38      	it	cc
 800fd50:	463c      	movcc	r4, r7
 800fd52:	42be      	cmp	r6, r7
 800fd54:	bf38      	it	cc
 800fd56:	463e      	movcc	r6, r7
 800fd58:	b2e4      	uxtb	r4, r4
 800fd5a:	b2f6      	uxtb	r6, r6
 800fd5c:	e74b      	b.n	800fbf6 <FFT_AlarmSubrangeStatus_Update+0x16>
 800fd5e:	4809      	ldr	r0, [pc, #36]	; (800fd84 <FFT_AlarmSubrangeStatus_Update+0x1a4>)
 800fd60:	f006 fa4c 	bl	80161fc <puts>
 800fd64:	e7e4      	b.n	800fd30 <FFT_AlarmSubrangeStatus_Update+0x150>
 800fd66:	bf00      	nop
 800fd68:	20011dd0 	.word	0x20011dd0
 800fd6c:	42c80000 	.word	0x42c80000
 800fd70:	2000834c 	.word	0x2000834c
 800fd74:	2000831c 	.word	0x2000831c
 800fd78:	0801b591 	.word	0x0801b591
 800fd7c:	20012568 	.word	0x20012568
 800fd80:	2001266c 	.word	0x2001266c
 800fd84:	0801b5c1 	.word	0x0801b5c1

0800fd88 <setConnectable>:
 800fd88:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fd8a:	4b3e      	ldr	r3, [pc, #248]	; (800fe84 <setConnectable+0xfc>)
 800fd8c:	f8df c104 	ldr.w	ip, [pc, #260]	; 800fe94 <setConnectable+0x10c>
 800fd90:	799a      	ldrb	r2, [r3, #6]
 800fd92:	785e      	ldrb	r6, [r3, #1]
 800fd94:	789d      	ldrb	r5, [r3, #2]
 800fd96:	78dc      	ldrb	r4, [r3, #3]
 800fd98:	7918      	ldrb	r0, [r3, #4]
 800fd9a:	7959      	ldrb	r1, [r3, #5]
 800fd9c:	79db      	ldrb	r3, [r3, #7]
 800fd9e:	b093      	sub	sp, #76	; 0x4c
 800fda0:	2709      	movs	r7, #9
 800fda2:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 800fda6:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
 800fdaa:	4b37      	ldr	r3, [pc, #220]	; (800fe88 <setConnectable+0x100>)
 800fdac:	f88d 202a 	strb.w	r2, [sp, #42]	; 0x2a
 800fdb0:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
 800fdb4:	795a      	ldrb	r2, [r3, #5]
 800fdb6:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
 800fdba:	791a      	ldrb	r2, [r3, #4]
 800fdbc:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
 800fdc0:	78da      	ldrb	r2, [r3, #3]
 800fdc2:	f88d 2042 	strb.w	r2, [sp, #66]	; 0x42
 800fdc6:	789a      	ldrb	r2, [r3, #2]
 800fdc8:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 800fdcc:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
 800fdd0:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 800fdd4:	f88d 4027 	strb.w	r4, [sp, #39]	; 0x27
 800fdd8:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
 800fddc:	f88d 1029 	strb.w	r1, [sp, #41]	; 0x29
 800fde0:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 800fde4:	f88d 7030 	strb.w	r7, [sp, #48]	; 0x30
 800fde8:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
 800fdec:	f88d 5032 	strb.w	r5, [sp, #50]	; 0x32
 800fdf0:	f88d 4033 	strb.w	r4, [sp, #51]	; 0x33
 800fdf4:	f88d 0034 	strb.w	r0, [sp, #52]	; 0x34
 800fdf8:	f88d 1035 	strb.w	r1, [sp, #53]	; 0x35
 800fdfc:	f88d 2043 	strb.w	r2, [sp, #67]	; 0x43
 800fe00:	785a      	ldrb	r2, [r3, #1]
 800fe02:	f88d 2044 	strb.w	r2, [sp, #68]	; 0x44
 800fe06:	781b      	ldrb	r3, [r3, #0]
 800fe08:	4a20      	ldr	r2, [pc, #128]	; (800fe8c <setConnectable+0x104>)
 800fe0a:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
 800fe0e:	f24e 0304 	movw	r3, #57348	; 0xe004
 800fe12:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800fe16:	4b1e      	ldr	r3, [pc, #120]	; (800fe90 <setConnectable+0x108>)
 800fe18:	689a      	ldr	r2, [r3, #8]
 800fe1a:	2a02      	cmp	r2, #2
 800fe1c:	d12e      	bne.n	800fe7c <setConnectable+0xf4>
 800fe1e:	22e5      	movs	r2, #229	; 0xe5
 800fe20:	f88d 203d 	strb.w	r2, [sp, #61]	; 0x3d
 800fe24:	791a      	ldrb	r2, [r3, #4]
 800fe26:	b12a      	cbz	r2, 800fe34 <setConnectable+0xac>
 800fe28:	f89d 203d 	ldrb.w	r2, [sp, #61]	; 0x3d
 800fe2c:	f042 0208 	orr.w	r2, r2, #8
 800fe30:	f88d 203d 	strb.w	r2, [sp, #61]	; 0x3d
 800fe34:	78db      	ldrb	r3, [r3, #3]
 800fe36:	b12b      	cbz	r3, 800fe44 <setConnectable+0xbc>
 800fe38:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
 800fe3c:	f043 0310 	orr.w	r3, r3, #16
 800fe40:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
 800fe44:	2100      	movs	r1, #0
 800fe46:	2307      	movs	r3, #7
 800fe48:	4608      	mov	r0, r1
 800fe4a:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 800fe4e:	f7fb fce7 	bl	800b820 <hci_le_set_scan_resp_data>
 800fe52:	ab09      	add	r3, sp, #36	; 0x24
 800fe54:	2200      	movs	r2, #0
 800fe56:	9302      	str	r3, [sp, #8]
 800fe58:	2308      	movs	r3, #8
 800fe5a:	e9cd 2300 	strd	r2, r3, [sp]
 800fe5e:	4611      	mov	r1, r2
 800fe60:	e9cd 2205 	strd	r2, r2, [sp, #20]
 800fe64:	e9cd 2203 	strd	r2, r2, [sp, #12]
 800fe68:	2301      	movs	r3, #1
 800fe6a:	4610      	mov	r0, r2
 800fe6c:	f7fb fa68 	bl	800b340 <aci_gap_set_discoverable>
 800fe70:	a90b      	add	r1, sp, #44	; 0x2c
 800fe72:	201a      	movs	r0, #26
 800fe74:	f7fb faf6 	bl	800b464 <aci_gap_update_adv_data>
 800fe78:	b013      	add	sp, #76	; 0x4c
 800fe7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fe7c:	2a01      	cmp	r2, #1
 800fe7e:	d1d1      	bne.n	800fe24 <setConnectable+0x9c>
 800fe80:	22e4      	movs	r2, #228	; 0xe4
 800fe82:	e7cd      	b.n	800fe20 <setConnectable+0x98>
 800fe84:	200124e4 	.word	0x200124e4
 800fe88:	200124da 	.word	0x200124da
 800fe8c:	8001ff0d 	.word	0x8001ff0d
 800fe90:	20012220 	.word	0x20012220
 800fe94:	08000a02 	.word	0x08000a02

0800fe98 <Read_Request_CB>:
 800fe98:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fe9a:	4d6a      	ldr	r5, [pc, #424]	; (8010044 <Read_Request_CB+0x1ac>)
 800fe9c:	8f6b      	ldrh	r3, [r5, #58]	; 0x3a
 800fe9e:	ed2d 8b02 	vpush	{d8}
 800fea2:	3301      	adds	r3, #1
 800fea4:	4298      	cmp	r0, r3
 800fea6:	b085      	sub	sp, #20
 800fea8:	f040 809c 	bne.w	800ffe4 <Read_Request_CB+0x14c>
 800feac:	aa03      	add	r2, sp, #12
 800feae:	2102      	movs	r1, #2
 800feb0:	2001      	movs	r0, #1
 800feb2:	f7f7 fccd 	bl	8007850 <IKS01A2_ENV_SENSOR_GetValue>
 800feb6:	eddd 7a03 	vldr	s15, [sp, #12]
 800feba:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800febe:	2764      	movs	r7, #100	; 0x64
 800fec0:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800fec4:	ee17 3a10 	vmov	r3, s14
 800fec8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800fecc:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8010048 <Read_Request_CB+0x1b0>
 800fed0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800fed4:	2104      	movs	r1, #4
 800fed6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800feda:	2000      	movs	r0, #0
 800fedc:	ee17 2a90 	vmov	r2, s15
 800fee0:	fb07 2703 	mla	r7, r7, r3, r2
 800fee4:	aa03      	add	r2, sp, #12
 800fee6:	f7f7 fcb3 	bl	8007850 <IKS01A2_ENV_SENSOR_GetValue>
 800feea:	eddd 7a03 	vldr	s15, [sp, #12]
 800feee:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800fef2:	eeb2 8a04 	vmov.f32	s16, #36	; 0x41200000  10.0
 800fef6:	ee17 6a10 	vmov	r6, s14
 800fefa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800fefe:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 800ff02:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ff06:	ee67 7a88 	vmul.f32	s15, s15, s16
 800ff0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ff0e:	ee17 3a90 	vmov	r3, s15
 800ff12:	eb03 0646 	add.w	r6, r3, r6, lsl #1
 800ff16:	4b4d      	ldr	r3, [pc, #308]	; (801004c <Read_Request_CB+0x1b4>)
 800ff18:	6899      	ldr	r1, [r3, #8]
 800ff1a:	2902      	cmp	r1, #2
 800ff1c:	b2b6      	uxth	r6, r6
 800ff1e:	d141      	bne.n	800ffa4 <Read_Request_CB+0x10c>
 800ff20:	aa03      	add	r2, sp, #12
 800ff22:	2101      	movs	r1, #1
 800ff24:	2000      	movs	r0, #0
 800ff26:	f7f7 fc93 	bl	8007850 <IKS01A2_ENV_SENSOR_GetValue>
 800ff2a:	eddd 7a03 	vldr	s15, [sp, #12]
 800ff2e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800ff32:	2101      	movs	r1, #1
 800ff34:	ee17 4a10 	vmov	r4, s14
 800ff38:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ff3c:	aa03      	add	r2, sp, #12
 800ff3e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ff42:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800ff46:	ee67 7a88 	vmul.f32	s15, s15, s16
 800ff4a:	4608      	mov	r0, r1
 800ff4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ff50:	ee17 3a90 	vmov	r3, s15
 800ff54:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 800ff58:	f7f7 fc7a 	bl	8007850 <IKS01A2_ENV_SENSOR_GetValue>
 800ff5c:	eddd 7a03 	vldr	s15, [sp, #12]
 800ff60:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800ff64:	b224      	sxth	r4, r4
 800ff66:	ee17 2a10 	vmov	r2, s14
 800ff6a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ff6e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800ff72:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ff76:	ee67 7a88 	vmul.f32	s15, s15, s16
 800ff7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ff7e:	ee17 3a90 	vmov	r3, s15
 800ff82:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800ff86:	b212      	sxth	r2, r2
 800ff88:	4623      	mov	r3, r4
 800ff8a:	4631      	mov	r1, r6
 800ff8c:	4638      	mov	r0, r7
 800ff8e:	f7ff fb91 	bl	800f6b4 <Environmental_Update>
 800ff92:	f8b5 004c 	ldrh.w	r0, [r5, #76]	; 0x4c
 800ff96:	b108      	cbz	r0, 800ff9c <Read_Request_CB+0x104>
 800ff98:	f7fb fb68 	bl	800b66c <aci_gatt_allow_read>
 800ff9c:	b005      	add	sp, #20
 800ff9e:	ecbd 8b02 	vpop	{d8}
 800ffa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ffa4:	2901      	cmp	r1, #1
 800ffa6:	d11a      	bne.n	800ffde <Read_Request_CB+0x146>
 800ffa8:	aa03      	add	r2, sp, #12
 800ffaa:	2000      	movs	r0, #0
 800ffac:	f7f7 fc50 	bl	8007850 <IKS01A2_ENV_SENSOR_GetValue>
 800ffb0:	eddd 7a03 	vldr	s15, [sp, #12]
 800ffb4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800ffb8:	2200      	movs	r2, #0
 800ffba:	ee17 4a10 	vmov	r4, s14
 800ffbe:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ffc2:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800ffc6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ffca:	ee67 7a88 	vmul.f32	s15, s15, s16
 800ffce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ffd2:	ee17 3a90 	vmov	r3, s15
 800ffd6:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 800ffda:	b224      	sxth	r4, r4
 800ffdc:	e7d4      	b.n	800ff88 <Read_Request_CB+0xf0>
 800ffde:	2400      	movs	r4, #0
 800ffe0:	4622      	mov	r2, r4
 800ffe2:	e7d1      	b.n	800ff88 <Read_Request_CB+0xf0>
 800ffe4:	89a9      	ldrh	r1, [r5, #12]
 800ffe6:	1c4b      	adds	r3, r1, #1
 800ffe8:	4298      	cmp	r0, r3
 800ffea:	d109      	bne.n	8010000 <Read_Request_CB+0x168>
 800ffec:	f105 020e 	add.w	r2, r5, #14
 800fff0:	9200      	str	r2, [sp, #0]
 800fff2:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 800fff6:	8928      	ldrh	r0, [r5, #8]
 800fff8:	2200      	movs	r2, #0
 800fffa:	f7fb fb07 	bl	800b60c <aci_gatt_update_char_value>
 800fffe:	e7c8      	b.n	800ff92 <Read_Request_CB+0xfa>
 8010000:	8969      	ldrh	r1, [r5, #10]
 8010002:	1c4b      	adds	r3, r1, #1
 8010004:	4298      	cmp	r0, r3
 8010006:	d1c4      	bne.n	800ff92 <Read_Request_CB+0xfa>
 8010008:	f105 0223 	add.w	r2, r5, #35	; 0x23
 801000c:	9200      	str	r2, [sp, #0]
 801000e:	f895 3037 	ldrb.w	r3, [r5, #55]	; 0x37
 8010012:	8928      	ldrh	r0, [r5, #8]
 8010014:	2200      	movs	r2, #0
 8010016:	f7fb faf9 	bl	800b60c <aci_gatt_update_char_value>
 801001a:	2800      	cmp	r0, #0
 801001c:	d0b9      	beq.n	800ff92 <Read_Request_CB+0xfa>
 801001e:	4b0c      	ldr	r3, [pc, #48]	; (8010050 <Read_Request_CB+0x1b8>)
 8010020:	681b      	ldr	r3, [r3, #0]
 8010022:	055b      	lsls	r3, r3, #21
 8010024:	d50a      	bpl.n	801003c <Read_Request_CB+0x1a4>
 8010026:	490b      	ldr	r1, [pc, #44]	; (8010054 <Read_Request_CB+0x1bc>)
 8010028:	480b      	ldr	r0, [pc, #44]	; (8010058 <Read_Request_CB+0x1c0>)
 801002a:	f006 f962 	bl	80162f2 <strcpy>
 801002e:	4b0b      	ldr	r3, [pc, #44]	; (801005c <Read_Request_CB+0x1c4>)
 8010030:	4809      	ldr	r0, [pc, #36]	; (8010058 <Read_Request_CB+0x1c0>)
 8010032:	211c      	movs	r1, #28
 8010034:	6019      	str	r1, [r3, #0]
 8010036:	f7ff f8a1 	bl	800f17c <Stderr_Update>
 801003a:	e7aa      	b.n	800ff92 <Read_Request_CB+0xfa>
 801003c:	4808      	ldr	r0, [pc, #32]	; (8010060 <Read_Request_CB+0x1c8>)
 801003e:	f006 f8dd 	bl	80161fc <puts>
 8010042:	e7a6      	b.n	800ff92 <Read_Request_CB+0xfa>
 8010044:	2000834c 	.word	0x2000834c
 8010048:	42c80000 	.word	0x42c80000
 801004c:	20012220 	.word	0x20012220
 8010050:	2000831c 	.word	0x2000831c
 8010054:	0801b5f3 	.word	0x0801b5f3
 8010058:	20012568 	.word	0x20012568
 801005c:	2001266c 	.word	0x2001266c
 8010060:	0801b321 	.word	0x0801b321
 8010064:	00000000 	.word	0x00000000

08010068 <Attribute_Modified_CB>:
 8010068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801006c:	4f73      	ldr	r7, [pc, #460]	; (801023c <Attribute_Modified_CB+0x1d4>)
 801006e:	4603      	mov	r3, r0
 8010070:	88f8      	ldrh	r0, [r7, #6]
 8010072:	ed2d 8b02 	vpush	{d8}
 8010076:	1c85      	adds	r5, r0, #2
 8010078:	42ab      	cmp	r3, r5
 801007a:	b09b      	sub	sp, #108	; 0x6c
 801007c:	460c      	mov	r4, r1
 801007e:	4616      	mov	r6, r2
 8010080:	46bb      	mov	fp, r7
 8010082:	d10c      	bne.n	801009e <Attribute_Modified_CB+0x36>
 8010084:	780b      	ldrb	r3, [r1, #0]
 8010086:	2b01      	cmp	r3, #1
 8010088:	d102      	bne.n	8010090 <Attribute_Modified_CB+0x28>
 801008a:	4a6d      	ldr	r2, [pc, #436]	; (8010240 <Attribute_Modified_CB+0x1d8>)
 801008c:	6013      	str	r3, [r2, #0]
 801008e:	e001      	b.n	8010094 <Attribute_Modified_CB+0x2c>
 8010090:	2b00      	cmp	r3, #0
 8010092:	d0fa      	beq.n	801008a <Attribute_Modified_CB+0x22>
 8010094:	b01b      	add	sp, #108	; 0x6c
 8010096:	ecbd 8b02 	vpop	{d8}
 801009a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801009e:	8fbd      	ldrh	r5, [r7, #60]	; 0x3c
 80100a0:	3502      	adds	r5, #2
 80100a2:	42ab      	cmp	r3, r5
 80100a4:	d140      	bne.n	8010128 <Attribute_Modified_CB+0xc0>
 80100a6:	780a      	ldrb	r2, [r1, #0]
 80100a8:	4c66      	ldr	r4, [pc, #408]	; (8010244 <Attribute_Modified_CB+0x1dc>)
 80100aa:	2a01      	cmp	r2, #1
 80100ac:	6823      	ldr	r3, [r4, #0]
 80100ae:	d126      	bne.n	80100fe <Attribute_Modified_CB+0x96>
 80100b0:	f043 0304 	orr.w	r3, r3, #4
 80100b4:	210c      	movs	r1, #12
 80100b6:	4864      	ldr	r0, [pc, #400]	; (8010248 <Attribute_Modified_CB+0x1e0>)
 80100b8:	6023      	str	r3, [r4, #0]
 80100ba:	f7fa fe15 	bl	800ace8 <HAL_TIM_OC_Start_IT>
 80100be:	b108      	cbz	r0, 80100c4 <Attribute_Modified_CB+0x5c>
 80100c0:	f7fe f915 	bl	800e2ee <Error_Handler>
 80100c4:	4b60      	ldr	r3, [pc, #384]	; (8010248 <Attribute_Modified_CB+0x1e0>)
 80100c6:	4961      	ldr	r1, [pc, #388]	; (801024c <Attribute_Modified_CB+0x1e4>)
 80100c8:	681a      	ldr	r2, [r3, #0]
 80100ca:	6809      	ldr	r1, [r1, #0]
 80100cc:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80100ce:	440b      	add	r3, r1
 80100d0:	6413      	str	r3, [r2, #64]	; 0x40
 80100d2:	6822      	ldr	r2, [r4, #0]
 80100d4:	495e      	ldr	r1, [pc, #376]	; (8010250 <Attribute_Modified_CB+0x1e8>)
 80100d6:	f412 7f00 	tst.w	r2, #512	; 0x200
 80100da:	f3c2 0380 	ubfx	r3, r2, #2, #1
 80100de:	4a5d      	ldr	r2, [pc, #372]	; (8010254 <Attribute_Modified_CB+0x1ec>)
 80100e0:	d01b      	beq.n	801011a <Attribute_Modified_CB+0xb2>
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	bf08      	it	eq
 80100e6:	460a      	moveq	r2, r1
 80100e8:	495b      	ldr	r1, [pc, #364]	; (8010258 <Attribute_Modified_CB+0x1f0>)
 80100ea:	485c      	ldr	r0, [pc, #368]	; (801025c <Attribute_Modified_CB+0x1f4>)
 80100ec:	f006 f89e 	bl	801622c <siprintf>
 80100f0:	4b5b      	ldr	r3, [pc, #364]	; (8010260 <Attribute_Modified_CB+0x1f8>)
 80100f2:	b2c1      	uxtb	r1, r0
 80100f4:	6018      	str	r0, [r3, #0]
 80100f6:	4859      	ldr	r0, [pc, #356]	; (801025c <Attribute_Modified_CB+0x1f4>)
 80100f8:	f7ff f870 	bl	800f1dc <Term_Update>
 80100fc:	e7ca      	b.n	8010094 <Attribute_Modified_CB+0x2c>
 80100fe:	2a00      	cmp	r2, #0
 8010100:	d1e7      	bne.n	80100d2 <Attribute_Modified_CB+0x6a>
 8010102:	f023 0304 	bic.w	r3, r3, #4
 8010106:	210c      	movs	r1, #12
 8010108:	484f      	ldr	r0, [pc, #316]	; (8010248 <Attribute_Modified_CB+0x1e0>)
 801010a:	6023      	str	r3, [r4, #0]
 801010c:	f7fa fe22 	bl	800ad54 <HAL_TIM_OC_Stop_IT>
 8010110:	2800      	cmp	r0, #0
 8010112:	d0de      	beq.n	80100d2 <Attribute_Modified_CB+0x6a>
 8010114:	f7fe f8eb 	bl	800e2ee <Error_Handler>
 8010118:	e7db      	b.n	80100d2 <Attribute_Modified_CB+0x6a>
 801011a:	484f      	ldr	r0, [pc, #316]	; (8010258 <Attribute_Modified_CB+0x1f0>)
 801011c:	2b00      	cmp	r3, #0
 801011e:	bf18      	it	ne
 8010120:	4611      	movne	r1, r2
 8010122:	f005 fff7 	bl	8016114 <iprintf>
 8010126:	e7b5      	b.n	8010094 <Attribute_Modified_CB+0x2c>
 8010128:	8f7d      	ldrh	r5, [r7, #58]	; 0x3a
 801012a:	3502      	adds	r5, #2
 801012c:	42ab      	cmp	r3, r5
 801012e:	d128      	bne.n	8010182 <Attribute_Modified_CB+0x11a>
 8010130:	780a      	ldrb	r2, [r1, #0]
 8010132:	4c44      	ldr	r4, [pc, #272]	; (8010244 <Attribute_Modified_CB+0x1dc>)
 8010134:	2a01      	cmp	r2, #1
 8010136:	6823      	ldr	r3, [r4, #0]
 8010138:	d115      	bne.n	8010166 <Attribute_Modified_CB+0xfe>
 801013a:	f043 0301 	orr.w	r3, r3, #1
 801013e:	4849      	ldr	r0, [pc, #292]	; (8010264 <Attribute_Modified_CB+0x1fc>)
 8010140:	6023      	str	r3, [r4, #0]
 8010142:	f7fa fa72 	bl	800a62a <HAL_TIM_Base_Start_IT>
 8010146:	b108      	cbz	r0, 801014c <Attribute_Modified_CB+0xe4>
 8010148:	f7fe f8d1 	bl	800e2ee <Error_Handler>
 801014c:	6822      	ldr	r2, [r4, #0]
 801014e:	4940      	ldr	r1, [pc, #256]	; (8010250 <Attribute_Modified_CB+0x1e8>)
 8010150:	f412 7f00 	tst.w	r2, #512	; 0x200
 8010154:	f002 0301 	and.w	r3, r2, #1
 8010158:	4a3e      	ldr	r2, [pc, #248]	; (8010254 <Attribute_Modified_CB+0x1ec>)
 801015a:	d00d      	beq.n	8010178 <Attribute_Modified_CB+0x110>
 801015c:	2b00      	cmp	r3, #0
 801015e:	bf08      	it	eq
 8010160:	460a      	moveq	r2, r1
 8010162:	4941      	ldr	r1, [pc, #260]	; (8010268 <Attribute_Modified_CB+0x200>)
 8010164:	e7c1      	b.n	80100ea <Attribute_Modified_CB+0x82>
 8010166:	2a00      	cmp	r2, #0
 8010168:	d1f0      	bne.n	801014c <Attribute_Modified_CB+0xe4>
 801016a:	f023 0301 	bic.w	r3, r3, #1
 801016e:	483d      	ldr	r0, [pc, #244]	; (8010264 <Attribute_Modified_CB+0x1fc>)
 8010170:	6023      	str	r3, [r4, #0]
 8010172:	f7fa fa65 	bl	800a640 <HAL_TIM_Base_Stop_IT>
 8010176:	e7e6      	b.n	8010146 <Attribute_Modified_CB+0xde>
 8010178:	2b00      	cmp	r3, #0
 801017a:	bf18      	it	ne
 801017c:	4611      	movne	r1, r2
 801017e:	483a      	ldr	r0, [pc, #232]	; (8010268 <Attribute_Modified_CB+0x200>)
 8010180:	e7cf      	b.n	8010122 <Attribute_Modified_CB+0xba>
 8010182:	89bd      	ldrh	r5, [r7, #12]
 8010184:	3502      	adds	r5, #2
 8010186:	42ab      	cmp	r3, r5
 8010188:	d10f      	bne.n	80101aa <Attribute_Modified_CB+0x142>
 801018a:	780b      	ldrb	r3, [r1, #0]
 801018c:	2b01      	cmp	r3, #1
 801018e:	d104      	bne.n	801019a <Attribute_Modified_CB+0x132>
 8010190:	4a2c      	ldr	r2, [pc, #176]	; (8010244 <Attribute_Modified_CB+0x1dc>)
 8010192:	6813      	ldr	r3, [r2, #0]
 8010194:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8010198:	e778      	b.n	801008c <Attribute_Modified_CB+0x24>
 801019a:	2b00      	cmp	r3, #0
 801019c:	f47f af7a 	bne.w	8010094 <Attribute_Modified_CB+0x2c>
 80101a0:	4a28      	ldr	r2, [pc, #160]	; (8010244 <Attribute_Modified_CB+0x1dc>)
 80101a2:	6813      	ldr	r3, [r2, #0]
 80101a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80101a8:	e770      	b.n	801008c <Attribute_Modified_CB+0x24>
 80101aa:	897d      	ldrh	r5, [r7, #10]
 80101ac:	f105 0c02 	add.w	ip, r5, #2
 80101b0:	4563      	cmp	r3, ip
 80101b2:	d10f      	bne.n	80101d4 <Attribute_Modified_CB+0x16c>
 80101b4:	780b      	ldrb	r3, [r1, #0]
 80101b6:	2b01      	cmp	r3, #1
 80101b8:	d104      	bne.n	80101c4 <Attribute_Modified_CB+0x15c>
 80101ba:	4a22      	ldr	r2, [pc, #136]	; (8010244 <Attribute_Modified_CB+0x1dc>)
 80101bc:	6813      	ldr	r3, [r2, #0]
 80101be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80101c2:	e763      	b.n	801008c <Attribute_Modified_CB+0x24>
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	f47f af65 	bne.w	8010094 <Attribute_Modified_CB+0x2c>
 80101ca:	4a1e      	ldr	r2, [pc, #120]	; (8010244 <Attribute_Modified_CB+0x1dc>)
 80101cc:	6813      	ldr	r3, [r2, #0]
 80101ce:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80101d2:	e75b      	b.n	801008c <Attribute_Modified_CB+0x24>
 80101d4:	3501      	adds	r5, #1
 80101d6:	42ab      	cmp	r3, r5
 80101d8:	f040 8534 	bne.w	8010c44 <Attribute_Modified_CB+0xbdc>
 80101dc:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 80101de:	2d00      	cmp	r5, #0
 80101e0:	d04a      	beq.n	8010278 <Attribute_Modified_CB+0x210>
 80101e2:	2301      	movs	r3, #1
 80101e4:	f107 0050 	add.w	r0, r7, #80	; 0x50
 80101e8:	f7fd fc2e 	bl	800da48 <UpdateFWBlueMS>
 80101ec:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
 80101f0:	2800      	cmp	r0, #0
 80101f2:	f43f af4f 	beq.w	8010094 <Attribute_Modified_CB+0x2c>
 80101f6:	ab13      	add	r3, sp, #76	; 0x4c
 80101f8:	8979      	ldrh	r1, [r7, #10]
 80101fa:	8938      	ldrh	r0, [r7, #8]
 80101fc:	9300      	str	r3, [sp, #0]
 80101fe:	2200      	movs	r2, #0
 8010200:	2301      	movs	r3, #1
 8010202:	f7fb fa03 	bl	800b60c <aci_gatt_update_char_value>
 8010206:	f99d 304c 	ldrsb.w	r3, [sp, #76]	; 0x4c
 801020a:	2b01      	cmp	r3, #1
 801020c:	f47f af42 	bne.w	8010094 <Attribute_Modified_CB+0x2c>
 8010210:	4916      	ldr	r1, [pc, #88]	; (801026c <Attribute_Modified_CB+0x204>)
 8010212:	4812      	ldr	r0, [pc, #72]	; (801025c <Attribute_Modified_CB+0x1f4>)
 8010214:	f006 f86d 	bl	80162f2 <strcpy>
 8010218:	4b11      	ldr	r3, [pc, #68]	; (8010260 <Attribute_Modified_CB+0x1f8>)
 801021a:	4810      	ldr	r0, [pc, #64]	; (801025c <Attribute_Modified_CB+0x1f4>)
 801021c:	2125      	movs	r1, #37	; 0x25
 801021e:	6019      	str	r1, [r3, #0]
 8010220:	f7fe ffdc 	bl	800f1dc <Term_Update>
 8010224:	4912      	ldr	r1, [pc, #72]	; (8010270 <Attribute_Modified_CB+0x208>)
 8010226:	4813      	ldr	r0, [pc, #76]	; (8010274 <Attribute_Modified_CB+0x20c>)
 8010228:	f005 ff74 	bl	8016114 <iprintf>
 801022c:	f241 3088 	movw	r0, #5000	; 0x1388
 8010230:	f7fe f84e 	bl	800e2d0 <HAL_Delay>
 8010234:	f7f7 fc00 	bl	8007a38 <HAL_NVIC_SystemReset>
 8010238:	e72c      	b.n	8010094 <Attribute_Modified_CB+0x2c>
 801023a:	bf00      	nop
 801023c:	2000834c 	.word	0x2000834c
 8010240:	20008348 	.word	0x20008348
 8010244:	2000831c 	.word	0x2000831c
 8010248:	200124ec 	.word	0x200124ec
 801024c:	20000460 	.word	0x20000460
 8010250:	0801b616 	.word	0x0801b616
 8010254:	0801b610 	.word	0x0801b610
 8010258:	0801b62b 	.word	0x0801b62b
 801025c:	20012568 	.word	0x20012568
 8010260:	2001266c 	.word	0x2001266c
 8010264:	20012488 	.word	0x20012488
 8010268:	0801b63f 	.word	0x0801b63f
 801026c:	0801b64a 	.word	0x0801b64a
 8010270:	0801aa2e 	.word	0x0801aa2e
 8010274:	0801b670 	.word	0x0801b670
 8010278:	2204      	movs	r2, #4
 801027a:	488a      	ldr	r0, [pc, #552]	; (80104a4 <Attribute_Modified_CB+0x43c>)
 801027c:	f006 f841 	bl	8016302 <strncmp>
 8010280:	2800      	cmp	r0, #0
 8010282:	f040 8091 	bne.w	80103a8 <Attribute_Modified_CB+0x340>
 8010286:	4f88      	ldr	r7, [pc, #544]	; (80104a8 <Attribute_Modified_CB+0x440>)
 8010288:	4988      	ldr	r1, [pc, #544]	; (80104ac <Attribute_Modified_CB+0x444>)
 801028a:	4889      	ldr	r0, [pc, #548]	; (80104b0 <Attribute_Modified_CB+0x448>)
 801028c:	f006 f831 	bl	80162f2 <strcpy>
 8010290:	21d5      	movs	r1, #213	; 0xd5
 8010292:	4887      	ldr	r0, [pc, #540]	; (80104b0 <Attribute_Modified_CB+0x448>)
 8010294:	6039      	str	r1, [r7, #0]
 8010296:	f7fe ffa1 	bl	800f1dc <Term_Update>
 801029a:	4986      	ldr	r1, [pc, #536]	; (80104b4 <Attribute_Modified_CB+0x44c>)
 801029c:	4884      	ldr	r0, [pc, #528]	; (80104b0 <Attribute_Modified_CB+0x448>)
 801029e:	f006 f828 	bl	80162f2 <strcpy>
 80102a2:	2141      	movs	r1, #65	; 0x41
 80102a4:	4882      	ldr	r0, [pc, #520]	; (80104b0 <Attribute_Modified_CB+0x448>)
 80102a6:	6039      	str	r1, [r7, #0]
 80102a8:	f04f 0913 	mov.w	r9, #19
 80102ac:	f7fe ff96 	bl	800f1dc <Term_Update>
 80102b0:	4981      	ldr	r1, [pc, #516]	; (80104b8 <Attribute_Modified_CB+0x450>)
 80102b2:	487f      	ldr	r0, [pc, #508]	; (80104b0 <Attribute_Modified_CB+0x448>)
 80102b4:	f006 f81d 	bl	80162f2 <strcpy>
 80102b8:	4649      	mov	r1, r9
 80102ba:	487d      	ldr	r0, [pc, #500]	; (80104b0 <Attribute_Modified_CB+0x448>)
 80102bc:	f8c7 9000 	str.w	r9, [r7]
 80102c0:	f7fe ff8c 	bl	800f1dc <Term_Update>
 80102c4:	497d      	ldr	r1, [pc, #500]	; (80104bc <Attribute_Modified_CB+0x454>)
 80102c6:	487a      	ldr	r0, [pc, #488]	; (80104b0 <Attribute_Modified_CB+0x448>)
 80102c8:	f006 f813 	bl	80162f2 <strcpy>
 80102cc:	2122      	movs	r1, #34	; 0x22
 80102ce:	4878      	ldr	r0, [pc, #480]	; (80104b0 <Attribute_Modified_CB+0x448>)
 80102d0:	6039      	str	r1, [r7, #0]
 80102d2:	f04f 083d 	mov.w	r8, #61	; 0x3d
 80102d6:	f7fe ff81 	bl	800f1dc <Term_Update>
 80102da:	4979      	ldr	r1, [pc, #484]	; (80104c0 <Attribute_Modified_CB+0x458>)
 80102dc:	4874      	ldr	r0, [pc, #464]	; (80104b0 <Attribute_Modified_CB+0x448>)
 80102de:	f006 f808 	bl	80162f2 <strcpy>
 80102e2:	4641      	mov	r1, r8
 80102e4:	4872      	ldr	r0, [pc, #456]	; (80104b0 <Attribute_Modified_CB+0x448>)
 80102e6:	f8c7 8000 	str.w	r8, [r7]
 80102ea:	f7fe ff77 	bl	800f1dc <Term_Update>
 80102ee:	4975      	ldr	r1, [pc, #468]	; (80104c4 <Attribute_Modified_CB+0x45c>)
 80102f0:	486f      	ldr	r0, [pc, #444]	; (80104b0 <Attribute_Modified_CB+0x448>)
 80102f2:	f005 fffe 	bl	80162f2 <strcpy>
 80102f6:	2115      	movs	r1, #21
 80102f8:	486d      	ldr	r0, [pc, #436]	; (80104b0 <Attribute_Modified_CB+0x448>)
 80102fa:	6039      	str	r1, [r7, #0]
 80102fc:	f7fe ff6e 	bl	800f1dc <Term_Update>
 8010300:	4971      	ldr	r1, [pc, #452]	; (80104c8 <Attribute_Modified_CB+0x460>)
 8010302:	486b      	ldr	r0, [pc, #428]	; (80104b0 <Attribute_Modified_CB+0x448>)
 8010304:	f005 fff5 	bl	80162f2 <strcpy>
 8010308:	2119      	movs	r1, #25
 801030a:	4869      	ldr	r0, [pc, #420]	; (80104b0 <Attribute_Modified_CB+0x448>)
 801030c:	6039      	str	r1, [r7, #0]
 801030e:	f7fe ff65 	bl	800f1dc <Term_Update>
 8010312:	496e      	ldr	r1, [pc, #440]	; (80104cc <Attribute_Modified_CB+0x464>)
 8010314:	4866      	ldr	r0, [pc, #408]	; (80104b0 <Attribute_Modified_CB+0x448>)
 8010316:	f005 ffec 	bl	80162f2 <strcpy>
 801031a:	4649      	mov	r1, r9
 801031c:	4864      	ldr	r0, [pc, #400]	; (80104b0 <Attribute_Modified_CB+0x448>)
 801031e:	f8c7 9000 	str.w	r9, [r7]
 8010322:	f7fe ff5b 	bl	800f1dc <Term_Update>
 8010326:	496a      	ldr	r1, [pc, #424]	; (80104d0 <Attribute_Modified_CB+0x468>)
 8010328:	4861      	ldr	r0, [pc, #388]	; (80104b0 <Attribute_Modified_CB+0x448>)
 801032a:	f005 ffe2 	bl	80162f2 <strcpy>
 801032e:	f8c7 8000 	str.w	r8, [r7]
 8010332:	4641      	mov	r1, r8
 8010334:	485e      	ldr	r0, [pc, #376]	; (80104b0 <Attribute_Modified_CB+0x448>)
 8010336:	f7fe ff51 	bl	800f1dc <Term_Update>
 801033a:	f04f 0800 	mov.w	r8, #0
 801033e:	2209      	movs	r2, #9
 8010340:	4621      	mov	r1, r4
 8010342:	4864      	ldr	r0, [pc, #400]	; (80104d4 <Attribute_Modified_CB+0x46c>)
 8010344:	f005 ffdd 	bl	8016302 <strncmp>
 8010348:	4607      	mov	r7, r0
 801034a:	2800      	cmp	r0, #0
 801034c:	f040 8143 	bne.w	80105d6 <Attribute_Modified_CB+0x56e>
 8010350:	f104 0009 	add.w	r0, r4, #9
 8010354:	f005 fc6a 	bl	8015c2c <atoi>
 8010358:	7a63      	ldrb	r3, [r4, #9]
 801035a:	f88b 3050 	strb.w	r3, [fp, #80]	; 0x50
 801035e:	7aa3      	ldrb	r3, [r4, #10]
 8010360:	f88b 3051 	strb.w	r3, [fp, #81]	; 0x51
 8010364:	7ae3      	ldrb	r3, [r4, #11]
 8010366:	f88b 3052 	strb.w	r3, [fp, #82]	; 0x52
 801036a:	7b23      	ldrb	r3, [r4, #12]
 801036c:	f88b 3053 	strb.w	r3, [fp, #83]	; 0x53
 8010370:	f8db 2050 	ldr.w	r2, [fp, #80]	; 0x50
 8010374:	4b58      	ldr	r3, [pc, #352]	; (80104d8 <Attribute_Modified_CB+0x470>)
 8010376:	429a      	cmp	r2, r3
 8010378:	d965      	bls.n	8010446 <Attribute_Modified_CB+0x3de>
 801037a:	4958      	ldr	r1, [pc, #352]	; (80104dc <Attribute_Modified_CB+0x474>)
 801037c:	4858      	ldr	r0, [pc, #352]	; (80104e0 <Attribute_Modified_CB+0x478>)
 801037e:	f005 fec9 	bl	8016114 <iprintf>
 8010382:	7b63      	ldrb	r3, [r4, #13]
 8010384:	f88b 3050 	strb.w	r3, [fp, #80]	; 0x50
 8010388:	7ba3      	ldrb	r3, [r4, #14]
 801038a:	fab3 f383 	clz	r3, r3
 801038e:	095b      	lsrs	r3, r3, #5
 8010390:	f88b 3051 	strb.w	r3, [fp, #81]	; 0x51
 8010394:	7be3      	ldrb	r3, [r4, #15]
 8010396:	f88b 3052 	strb.w	r3, [fp, #82]	; 0x52
 801039a:	7c23      	ldrb	r3, [r4, #16]
 801039c:	f88b 3053 	strb.w	r3, [fp, #83]	; 0x53
 80103a0:	2104      	movs	r1, #4
 80103a2:	4b41      	ldr	r3, [pc, #260]	; (80104a8 <Attribute_Modified_CB+0x440>)
 80103a4:	6019      	str	r1, [r3, #0]
 80103a6:	e13d      	b.n	8010624 <Attribute_Modified_CB+0x5bc>
 80103a8:	2209      	movs	r2, #9
 80103aa:	4621      	mov	r1, r4
 80103ac:	484d      	ldr	r0, [pc, #308]	; (80104e4 <Attribute_Modified_CB+0x47c>)
 80103ae:	f005 ffa8 	bl	8016302 <strncmp>
 80103b2:	b970      	cbnz	r0, 80103d2 <Attribute_Modified_CB+0x36a>
 80103b4:	2330      	movs	r3, #48	; 0x30
 80103b6:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80103ba:	2331      	movs	r3, #49	; 0x31
 80103bc:	9300      	str	r3, [sp, #0]
 80103be:	494a      	ldr	r1, [pc, #296]	; (80104e8 <Attribute_Modified_CB+0x480>)
 80103c0:	4b46      	ldr	r3, [pc, #280]	; (80104dc <Attribute_Modified_CB+0x474>)
 80103c2:	4a4a      	ldr	r2, [pc, #296]	; (80104ec <Attribute_Modified_CB+0x484>)
 80103c4:	483a      	ldr	r0, [pc, #232]	; (80104b0 <Attribute_Modified_CB+0x448>)
 80103c6:	f005 ff31 	bl	801622c <siprintf>
 80103ca:	4b37      	ldr	r3, [pc, #220]	; (80104a8 <Attribute_Modified_CB+0x440>)
 80103cc:	211c      	movs	r1, #28
 80103ce:	6019      	str	r1, [r3, #0]
 80103d0:	e7b0      	b.n	8010334 <Attribute_Modified_CB+0x2cc>
 80103d2:	2204      	movs	r2, #4
 80103d4:	4621      	mov	r1, r4
 80103d6:	4846      	ldr	r0, [pc, #280]	; (80104f0 <Attribute_Modified_CB+0x488>)
 80103d8:	f005 ff93 	bl	8016302 <strncmp>
 80103dc:	bb80      	cbnz	r0, 8010440 <Attribute_Modified_CB+0x3d8>
 80103de:	2330      	movs	r3, #48	; 0x30
 80103e0:	4a3e      	ldr	r2, [pc, #248]	; (80104dc <Attribute_Modified_CB+0x474>)
 80103e2:	4944      	ldr	r1, [pc, #272]	; (80104f4 <Attribute_Modified_CB+0x48c>)
 80103e4:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 80104a8 <Attribute_Modified_CB+0x440>
 80103e8:	4831      	ldr	r0, [pc, #196]	; (80104b0 <Attribute_Modified_CB+0x448>)
 80103ea:	e9cd 3300 	strd	r3, r3, [sp]
 80103ee:	2331      	movs	r3, #49	; 0x31
 80103f0:	f005 ff1c 	bl	801622c <siprintf>
 80103f4:	2152      	movs	r1, #82	; 0x52
 80103f6:	482e      	ldr	r0, [pc, #184]	; (80104b0 <Attribute_Modified_CB+0x448>)
 80103f8:	f8c8 1000 	str.w	r1, [r8]
 80103fc:	f7fe feee 	bl	800f1dc <Term_Update>
 8010400:	f7f7 fac4 	bl	800798c <HAL_GetHalVersion>
 8010404:	4681      	mov	r9, r0
 8010406:	f7f7 fac1 	bl	800798c <HAL_GetHalVersion>
 801040a:	4682      	mov	sl, r0
 801040c:	f7f7 fabe 	bl	800798c <HAL_GetHalVersion>
 8010410:	4607      	mov	r7, r0
 8010412:	f7f7 fabb 	bl	800798c <HAL_GetHalVersion>
 8010416:	4b38      	ldr	r3, [pc, #224]	; (80104f8 <Attribute_Modified_CB+0x490>)
 8010418:	9303      	str	r3, [sp, #12]
 801041a:	b2c0      	uxtb	r0, r0
 801041c:	4b37      	ldr	r3, [pc, #220]	; (80104fc <Attribute_Modified_CB+0x494>)
 801041e:	9302      	str	r3, [sp, #8]
 8010420:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8010424:	9001      	str	r0, [sp, #4]
 8010426:	4936      	ldr	r1, [pc, #216]	; (8010500 <Attribute_Modified_CB+0x498>)
 8010428:	9700      	str	r7, [sp, #0]
 801042a:	f3ca 4307 	ubfx	r3, sl, #16, #8
 801042e:	ea4f 6219 	mov.w	r2, r9, lsr #24
 8010432:	481f      	ldr	r0, [pc, #124]	; (80104b0 <Attribute_Modified_CB+0x448>)
 8010434:	f005 fefa 	bl	801622c <siprintf>
 8010438:	f8c8 0000 	str.w	r0, [r8]
 801043c:	b2c1      	uxtb	r1, r0
 801043e:	e779      	b.n	8010334 <Attribute_Modified_CB+0x2cc>
 8010440:	f04f 0801 	mov.w	r8, #1
 8010444:	e77b      	b.n	801033e <Attribute_Modified_CB+0x2d6>
 8010446:	7c23      	ldrb	r3, [r4, #16]
 8010448:	f894 a00d 	ldrb.w	sl, [r4, #13]
 801044c:	f894 900e 	ldrb.w	r9, [r4, #14]
 8010450:	f894 800f 	ldrb.w	r8, [r4, #15]
 8010454:	f88d a04c 	strb.w	sl, [sp, #76]	; 0x4c
 8010458:	f88d 904d 	strb.w	r9, [sp, #77]	; 0x4d
 801045c:	f88d 804e 	strb.w	r8, [sp, #78]	; 0x4e
 8010460:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
 8010464:	930c      	str	r3, [sp, #48]	; 0x30
 8010466:	491d      	ldr	r1, [pc, #116]	; (80104dc <Attribute_Modified_CB+0x474>)
 8010468:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801046a:	4826      	ldr	r0, [pc, #152]	; (8010504 <Attribute_Modified_CB+0x49c>)
 801046c:	930d      	str	r3, [sp, #52]	; 0x34
 801046e:	f005 fe51 	bl	8016114 <iprintf>
 8010472:	990d      	ldr	r1, [sp, #52]	; 0x34
 8010474:	f8db 0050 	ldr.w	r0, [fp, #80]	; 0x50
 8010478:	f7fd fb54 	bl	800db24 <StartUpdateFWBlueMS>
 801047c:	f7fb fc1a 	bl	800bcb4 <SaveMetaDataManager>
 8010480:	4b21      	ldr	r3, [pc, #132]	; (8010508 <Attribute_Modified_CB+0x4a0>)
 8010482:	f8bb 004c 	ldrh.w	r0, [fp, #76]	; 0x4c
 8010486:	601f      	str	r7, [r3, #0]
 8010488:	220a      	movs	r2, #10
 801048a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801048e:	9300      	str	r3, [sp, #0]
 8010490:	4611      	mov	r1, r2
 8010492:	463b      	mov	r3, r7
 8010494:	f7fb f928 	bl	800b6e8 <aci_l2cap_connection_parameter_update_request>
 8010498:	b3d0      	cbz	r0, 8010510 <Attribute_Modified_CB+0x4a8>
 801049a:	4c1c      	ldr	r4, [pc, #112]	; (801050c <Attribute_Modified_CB+0x4a4>)
 801049c:	4620      	mov	r0, r4
 801049e:	f005 fead 	bl	80161fc <puts>
 80104a2:	e7fb      	b.n	801049c <Attribute_Modified_CB+0x434>
 80104a4:	0801b68f 	.word	0x0801b68f
 80104a8:	2001266c 	.word	0x2001266c
 80104ac:	0801b694 	.word	0x0801b694
 80104b0:	20012568 	.word	0x20012568
 80104b4:	0801b76a 	.word	0x0801b76a
 80104b8:	0801b7ac 	.word	0x0801b7ac
 80104bc:	0801b7c0 	.word	0x0801b7c0
 80104c0:	0801b7e3 	.word	0x0801b7e3
 80104c4:	0801b821 	.word	0x0801b821
 80104c8:	0801b837 	.word	0x0801b837
 80104cc:	0801b851 	.word	0x0801b851
 80104d0:	0801b865 	.word	0x0801b865
 80104d4:	0801b950 	.word	0x0801b950
 80104d8:	0003bff8 	.word	0x0003bff8
 80104dc:	0801aa2e 	.word	0x0801aa2e
 80104e0:	0801b95a 	.word	0x0801b95a
 80104e4:	0801b8a3 	.word	0x0801b8a3
 80104e8:	0801b8b2 	.word	0x0801b8b2
 80104ec:	0801b8ad 	.word	0x0801b8ad
 80104f0:	0801b8c3 	.word	0x0801b8c3
 80104f4:	0801b8c8 	.word	0x0801b8c8
 80104f8:	0801b947 	.word	0x0801b947
 80104fc:	0801ae03 	.word	0x0801ae03
 8010500:	0801b911 	.word	0x0801b911
 8010504:	0801b97d 	.word	0x0801b97d
 8010508:	20002118 	.word	0x20002118
 801050c:	0801b99e 	.word	0x0801b99e
 8010510:	48a5      	ldr	r0, [pc, #660]	; (80107a8 <Attribute_Modified_CB+0x740>)
 8010512:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010514:	70c3      	strb	r3, [r0, #3]
 8010516:	4ba5      	ldr	r3, [pc, #660]	; (80107ac <Attribute_Modified_CB+0x744>)
 8010518:	f880 a000 	strb.w	sl, [r0]
 801051c:	2104      	movs	r1, #4
 801051e:	f880 9001 	strb.w	r9, [r0, #1]
 8010522:	f880 8002 	strb.w	r8, [r0, #2]
 8010526:	6019      	str	r1, [r3, #0]
 8010528:	f7fe fe58 	bl	800f1dc <Term_Update>
 801052c:	4fa0      	ldr	r7, [pc, #640]	; (80107b0 <Attribute_Modified_CB+0x748>)
 801052e:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8010532:	2b00      	cmp	r3, #0
 8010534:	f000 834f 	beq.w	8010bd6 <Attribute_Modified_CB+0xb6e>
 8010538:	2300      	movs	r3, #0
 801053a:	f897 0055 	ldrb.w	r0, [r7, #85]	; 0x55
 801053e:	f897 6056 	ldrb.w	r6, [r7, #86]	; 0x56
 8010542:	f04f 0c14 	mov.w	ip, #20
 8010546:	469e      	mov	lr, r3
 8010548:	b2da      	uxtb	r2, r3
 801054a:	18f5      	adds	r5, r6, r3
 801054c:	5ca1      	ldrb	r1, [r4, r2]
 801054e:	290a      	cmp	r1, #10
 8010550:	b2ed      	uxtb	r5, r5
 8010552:	f040 8185 	bne.w	8010860 <Attribute_Modified_CB+0x7f8>
 8010556:	f1be 0f00 	cmp.w	lr, #0
 801055a:	d001      	beq.n	8010560 <Attribute_Modified_CB+0x4f8>
 801055c:	f887 5056 	strb.w	r5, [r7, #86]	; 0x56
 8010560:	3001      	adds	r0, #1
 8010562:	290a      	cmp	r1, #10
 8010564:	f887 0055 	strb.w	r0, [r7, #85]	; 0x55
 8010568:	f47f ad94 	bne.w	8010094 <Attribute_Modified_CB+0x2c>
 801056c:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8010570:	930d      	str	r3, [sp, #52]	; 0x34
 8010572:	2b0d      	cmp	r3, #13
 8010574:	d809      	bhi.n	801058a <Attribute_Modified_CB+0x522>
 8010576:	498f      	ldr	r1, [pc, #572]	; (80107b4 <Attribute_Modified_CB+0x74c>)
 8010578:	488b      	ldr	r0, [pc, #556]	; (80107a8 <Attribute_Modified_CB+0x740>)
 801057a:	f005 feba 	bl	80162f2 <strcpy>
 801057e:	4b8b      	ldr	r3, [pc, #556]	; (80107ac <Attribute_Modified_CB+0x744>)
 8010580:	4889      	ldr	r0, [pc, #548]	; (80107a8 <Attribute_Modified_CB+0x740>)
 8010582:	2118      	movs	r1, #24
 8010584:	6019      	str	r1, [r3, #0]
 8010586:	f7fe fe29 	bl	800f1dc <Term_Update>
 801058a:	ed9f 8b85 	vldr	d8, [pc, #532]	; 80107a0 <Attribute_Modified_CB+0x738>
 801058e:	f04f 0800 	mov.w	r8, #0
 8010592:	4d87      	ldr	r5, [pc, #540]	; (80107b0 <Attribute_Modified_CB+0x748>)
 8010594:	220d      	movs	r2, #13
 8010596:	2407      	movs	r4, #7
 8010598:	4646      	mov	r6, r8
 801059a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801059c:	4293      	cmp	r3, r2
 801059e:	f300 816b 	bgt.w	8010878 <Attribute_Modified_CB+0x810>
 80105a2:	4985      	ldr	r1, [pc, #532]	; (80107b8 <Attribute_Modified_CB+0x750>)
 80105a4:	4880      	ldr	r0, [pc, #512]	; (80107a8 <Attribute_Modified_CB+0x740>)
 80105a6:	f005 fea4 	bl	80162f2 <strcpy>
 80105aa:	4b80      	ldr	r3, [pc, #512]	; (80107ac <Attribute_Modified_CB+0x744>)
 80105ac:	487e      	ldr	r0, [pc, #504]	; (80107a8 <Attribute_Modified_CB+0x740>)
 80105ae:	2106      	movs	r1, #6
 80105b0:	6019      	str	r1, [r3, #0]
 80105b2:	f7fe fe13 	bl	800f1dc <Term_Update>
 80105b6:	f1b8 0f00 	cmp.w	r8, #0
 80105ba:	d001      	beq.n	80105c0 <Attribute_Modified_CB+0x558>
 80105bc:	f7fc fca8 	bl	800cf10 <SetAccelerometerParameters>
 80105c0:	b10e      	cbz	r6, 80105c6 <Attribute_Modified_CB+0x55e>
 80105c2:	f7fd fe95 	bl	800e2f0 <SaveVibrationParamToMemory>
 80105c6:	2300      	movs	r3, #0
 80105c8:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 80105cc:	f885 3054 	strb.w	r3, [r5, #84]	; 0x54
 80105d0:	f885 3056 	strb.w	r3, [r5, #86]	; 0x56
 80105d4:	e55e      	b.n	8010094 <Attribute_Modified_CB+0x2c>
 80105d6:	220a      	movs	r2, #10
 80105d8:	4621      	mov	r1, r4
 80105da:	4878      	ldr	r0, [pc, #480]	; (80107bc <Attribute_Modified_CB+0x754>)
 80105dc:	f005 fe91 	bl	8016302 <strncmp>
 80105e0:	bb10      	cbnz	r0, 8010628 <Attribute_Modified_CB+0x5c0>
 80105e2:	a913      	add	r1, sp, #76	; 0x4c
 80105e4:	f10d 004b 	add.w	r0, sp, #75	; 0x4b
 80105e8:	f7fb f8a8 	bl	800b73c <getBlueNRGVersion>
 80105ec:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
 80105f0:	4b73      	ldr	r3, [pc, #460]	; (80107c0 <Attribute_Modified_CB+0x758>)
 80105f2:	4a74      	ldr	r2, [pc, #464]	; (80107c4 <Attribute_Modified_CB+0x75c>)
 80105f4:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 80105f8:	2830      	cmp	r0, #48	; 0x30
 80105fa:	bf88      	it	hi
 80105fc:	461a      	movhi	r2, r3
 80105fe:	2830      	cmp	r0, #48	; 0x30
 8010600:	ea4f 2311 	mov.w	r3, r1, lsr #8
 8010604:	f3c1 1703 	ubfx	r7, r1, #4, #4
 8010608:	bf86      	itte	hi
 801060a:	f001 010f 	andhi.w	r1, r1, #15
 801060e:	3160      	addhi	r1, #96	; 0x60
 8010610:	2161      	movls	r1, #97	; 0x61
 8010612:	e9cd 7100 	strd	r7, r1, [sp]
 8010616:	4864      	ldr	r0, [pc, #400]	; (80107a8 <Attribute_Modified_CB+0x740>)
 8010618:	496b      	ldr	r1, [pc, #428]	; (80107c8 <Attribute_Modified_CB+0x760>)
 801061a:	f005 fe07 	bl	801622c <siprintf>
 801061e:	4b63      	ldr	r3, [pc, #396]	; (80107ac <Attribute_Modified_CB+0x744>)
 8010620:	6018      	str	r0, [r3, #0]
 8010622:	b2c1      	uxtb	r1, r0
 8010624:	4860      	ldr	r0, [pc, #384]	; (80107a8 <Attribute_Modified_CB+0x740>)
 8010626:	e77f      	b.n	8010528 <Attribute_Modified_CB+0x4c0>
 8010628:	220c      	movs	r2, #12
 801062a:	4621      	mov	r1, r4
 801062c:	4867      	ldr	r0, [pc, #412]	; (80107cc <Attribute_Modified_CB+0x764>)
 801062e:	f005 fe68 	bl	8016302 <strncmp>
 8010632:	2800      	cmp	r0, #0
 8010634:	d12d      	bne.n	8010692 <Attribute_Modified_CB+0x62a>
 8010636:	4f5d      	ldr	r7, [pc, #372]	; (80107ac <Attribute_Modified_CB+0x744>)
 8010638:	4965      	ldr	r1, [pc, #404]	; (80107d0 <Attribute_Modified_CB+0x768>)
 801063a:	485b      	ldr	r0, [pc, #364]	; (80107a8 <Attribute_Modified_CB+0x740>)
 801063c:	f005 fe59 	bl	80162f2 <strcpy>
 8010640:	211d      	movs	r1, #29
 8010642:	4859      	ldr	r0, [pc, #356]	; (80107a8 <Attribute_Modified_CB+0x740>)
 8010644:	6039      	str	r1, [r7, #0]
 8010646:	f7fe fdc9 	bl	800f1dc <Term_Update>
 801064a:	4a62      	ldr	r2, [pc, #392]	; (80107d4 <Attribute_Modified_CB+0x76c>)
 801064c:	4962      	ldr	r1, [pc, #392]	; (80107d8 <Attribute_Modified_CB+0x770>)
 801064e:	88d3      	ldrh	r3, [r2, #6]
 8010650:	4855      	ldr	r0, [pc, #340]	; (80107a8 <Attribute_Modified_CB+0x740>)
 8010652:	8892      	ldrh	r2, [r2, #4]
 8010654:	f005 fdea 	bl	801622c <siprintf>
 8010658:	b2c1      	uxtb	r1, r0
 801065a:	6038      	str	r0, [r7, #0]
 801065c:	4852      	ldr	r0, [pc, #328]	; (80107a8 <Attribute_Modified_CB+0x740>)
 801065e:	f7fe fdbd 	bl	800f1dc <Term_Update>
 8010662:	495e      	ldr	r1, [pc, #376]	; (80107dc <Attribute_Modified_CB+0x774>)
 8010664:	4850      	ldr	r0, [pc, #320]	; (80107a8 <Attribute_Modified_CB+0x740>)
 8010666:	f005 fe44 	bl	80162f2 <strcpy>
 801066a:	2116      	movs	r1, #22
 801066c:	484e      	ldr	r0, [pc, #312]	; (80107a8 <Attribute_Modified_CB+0x740>)
 801066e:	6039      	str	r1, [r7, #0]
 8010670:	f7fe fdb4 	bl	800f1dc <Term_Update>
 8010674:	495a      	ldr	r1, [pc, #360]	; (80107e0 <Attribute_Modified_CB+0x778>)
 8010676:	7a88      	ldrb	r0, [r1, #10]
 8010678:	888b      	ldrh	r3, [r1, #4]
 801067a:	880a      	ldrh	r2, [r1, #0]
 801067c:	9002      	str	r0, [sp, #8]
 801067e:	8988      	ldrh	r0, [r1, #12]
 8010680:	9001      	str	r0, [sp, #4]
 8010682:	8909      	ldrh	r1, [r1, #8]
 8010684:	9100      	str	r1, [sp, #0]
 8010686:	4848      	ldr	r0, [pc, #288]	; (80107a8 <Attribute_Modified_CB+0x740>)
 8010688:	4956      	ldr	r1, [pc, #344]	; (80107e4 <Attribute_Modified_CB+0x77c>)
 801068a:	f005 fdcf 	bl	801622c <siprintf>
 801068e:	6038      	str	r0, [r7, #0]
 8010690:	e7c7      	b.n	8010622 <Attribute_Modified_CB+0x5ba>
 8010692:	220c      	movs	r2, #12
 8010694:	4621      	mov	r1, r4
 8010696:	4854      	ldr	r0, [pc, #336]	; (80107e8 <Attribute_Modified_CB+0x780>)
 8010698:	f005 fe33 	bl	8016302 <strncmp>
 801069c:	b918      	cbnz	r0, 80106a6 <Attribute_Modified_CB+0x63e>
 801069e:	2301      	movs	r3, #1
 80106a0:	f88b 3054 	strb.w	r3, [fp, #84]	; 0x54
 80106a4:	e742      	b.n	801052c <Attribute_Modified_CB+0x4c4>
 80106a6:	7822      	ldrb	r2, [r4, #0]
 80106a8:	7863      	ldrb	r3, [r4, #1]
 80106aa:	2a75      	cmp	r2, #117	; 0x75
 80106ac:	bf08      	it	eq
 80106ae:	2b69      	cmpeq	r3, #105	; 0x69
 80106b0:	d12f      	bne.n	8010712 <Attribute_Modified_CB+0x6aa>
 80106b2:	78a3      	ldrb	r3, [r4, #2]
 80106b4:	2b64      	cmp	r3, #100	; 0x64
 80106b6:	d12c      	bne.n	8010712 <Attribute_Modified_CB+0x6aa>
 80106b8:	494c      	ldr	r1, [pc, #304]	; (80107ec <Attribute_Modified_CB+0x784>)
 80106ba:	4b4d      	ldr	r3, [pc, #308]	; (80107f0 <Attribute_Modified_CB+0x788>)
 80106bc:	6809      	ldr	r1, [r1, #0]
 80106be:	4a4d      	ldr	r2, [pc, #308]	; (80107f4 <Attribute_Modified_CB+0x78c>)
 80106c0:	781b      	ldrb	r3, [r3, #0]
 80106c2:	7812      	ldrb	r2, [r2, #0]
 80106c4:	4838      	ldr	r0, [pc, #224]	; (80107a8 <Attribute_Modified_CB+0x740>)
 80106c6:	f3c1 010b 	ubfx	r1, r1, #0, #12
 80106ca:	910a      	str	r1, [sp, #40]	; 0x28
 80106cc:	494a      	ldr	r1, [pc, #296]	; (80107f8 <Attribute_Modified_CB+0x790>)
 80106ce:	7809      	ldrb	r1, [r1, #0]
 80106d0:	9109      	str	r1, [sp, #36]	; 0x24
 80106d2:	494a      	ldr	r1, [pc, #296]	; (80107fc <Attribute_Modified_CB+0x794>)
 80106d4:	7809      	ldrb	r1, [r1, #0]
 80106d6:	9108      	str	r1, [sp, #32]
 80106d8:	4949      	ldr	r1, [pc, #292]	; (8010800 <Attribute_Modified_CB+0x798>)
 80106da:	7809      	ldrb	r1, [r1, #0]
 80106dc:	9107      	str	r1, [sp, #28]
 80106de:	4949      	ldr	r1, [pc, #292]	; (8010804 <Attribute_Modified_CB+0x79c>)
 80106e0:	7809      	ldrb	r1, [r1, #0]
 80106e2:	9106      	str	r1, [sp, #24]
 80106e4:	4948      	ldr	r1, [pc, #288]	; (8010808 <Attribute_Modified_CB+0x7a0>)
 80106e6:	7809      	ldrb	r1, [r1, #0]
 80106e8:	9105      	str	r1, [sp, #20]
 80106ea:	4948      	ldr	r1, [pc, #288]	; (801080c <Attribute_Modified_CB+0x7a4>)
 80106ec:	7809      	ldrb	r1, [r1, #0]
 80106ee:	9104      	str	r1, [sp, #16]
 80106f0:	4947      	ldr	r1, [pc, #284]	; (8010810 <Attribute_Modified_CB+0x7a8>)
 80106f2:	7809      	ldrb	r1, [r1, #0]
 80106f4:	9103      	str	r1, [sp, #12]
 80106f6:	4947      	ldr	r1, [pc, #284]	; (8010814 <Attribute_Modified_CB+0x7ac>)
 80106f8:	7809      	ldrb	r1, [r1, #0]
 80106fa:	9102      	str	r1, [sp, #8]
 80106fc:	4946      	ldr	r1, [pc, #280]	; (8010818 <Attribute_Modified_CB+0x7b0>)
 80106fe:	7809      	ldrb	r1, [r1, #0]
 8010700:	9101      	str	r1, [sp, #4]
 8010702:	4946      	ldr	r1, [pc, #280]	; (801081c <Attribute_Modified_CB+0x7b4>)
 8010704:	7809      	ldrb	r1, [r1, #0]
 8010706:	9100      	str	r1, [sp, #0]
 8010708:	4945      	ldr	r1, [pc, #276]	; (8010820 <Attribute_Modified_CB+0x7b8>)
 801070a:	f005 fd8f 	bl	801622c <siprintf>
 801070e:	211e      	movs	r1, #30
 8010710:	e647      	b.n	80103a2 <Attribute_Modified_CB+0x33a>
 8010712:	2208      	movs	r2, #8
 8010714:	4621      	mov	r1, r4
 8010716:	4843      	ldr	r0, [pc, #268]	; (8010824 <Attribute_Modified_CB+0x7bc>)
 8010718:	f005 fdf3 	bl	8016302 <strncmp>
 801071c:	2800      	cmp	r0, #0
 801071e:	f040 809d 	bne.w	801085c <Attribute_Modified_CB+0x7f4>
 8010722:	f106 38ff 	add.w	r8, r6, #4294967295
 8010726:	f1b8 0f08 	cmp.w	r8, #8
 801072a:	f340 8087 	ble.w	801083c <Attribute_Modified_CB+0x7d4>
 801072e:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 801082c <Attribute_Modified_CB+0x7c4>
 8010732:	4b3d      	ldr	r3, [pc, #244]	; (8010828 <Attribute_Modified_CB+0x7c0>)
 8010734:	2701      	movs	r7, #1
 8010736:	46ca      	mov	sl, r9
 8010738:	4618      	mov	r0, r3
 801073a:	930c      	str	r3, [sp, #48]	; 0x30
 801073c:	f005 fa76 	bl	8015c2c <atoi>
 8010740:	f809 0007 	strb.w	r0, [r9, r7]
 8010744:	3701      	adds	r7, #1
 8010746:	2f08      	cmp	r7, #8
 8010748:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801074a:	d1f5      	bne.n	8010738 <Attribute_Modified_CB+0x6d0>
 801074c:	f1b8 0f0f 	cmp.w	r8, #15
 8010750:	bfd4      	ite	le
 8010752:	f1a6 0209 	suble.w	r2, r6, #9
 8010756:	2207      	movgt	r2, #7
 8010758:	1de1      	adds	r1, r4, #7
 801075a:	2301      	movs	r3, #1
 801075c:	4293      	cmp	r3, r2
 801075e:	dd17      	ble.n	8010790 <Attribute_Modified_CB+0x728>
 8010760:	4932      	ldr	r1, [pc, #200]	; (801082c <Attribute_Modified_CB+0x7c4>)
 8010762:	4f12      	ldr	r7, [pc, #72]	; (80107ac <Attribute_Modified_CB+0x744>)
 8010764:	2007      	movs	r0, #7
 8010766:	f7fb fcef 	bl	800c148 <MDM_SaveGMD>
 801076a:	4b31      	ldr	r3, [pc, #196]	; (8010830 <Attribute_Modified_CB+0x7c8>)
 801076c:	4931      	ldr	r1, [pc, #196]	; (8010834 <Attribute_Modified_CB+0x7cc>)
 801076e:	480e      	ldr	r0, [pc, #56]	; (80107a8 <Attribute_Modified_CB+0x740>)
 8010770:	2201      	movs	r2, #1
 8010772:	601a      	str	r2, [r3, #0]
 8010774:	f005 fdbd 	bl	80162f2 <strcpy>
 8010778:	2121      	movs	r1, #33	; 0x21
 801077a:	480b      	ldr	r0, [pc, #44]	; (80107a8 <Attribute_Modified_CB+0x740>)
 801077c:	6039      	str	r1, [r7, #0]
 801077e:	f7fe fd2d 	bl	800f1dc <Term_Update>
 8010782:	492d      	ldr	r1, [pc, #180]	; (8010838 <Attribute_Modified_CB+0x7d0>)
 8010784:	4808      	ldr	r0, [pc, #32]	; (80107a8 <Attribute_Modified_CB+0x740>)
 8010786:	f005 fdb4 	bl	80162f2 <strcpy>
 801078a:	2139      	movs	r1, #57	; 0x39
 801078c:	6039      	str	r1, [r7, #0]
 801078e:	e749      	b.n	8010624 <Attribute_Modified_CB+0x5bc>
 8010790:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010794:	f80a 0003 	strb.w	r0, [sl, r3]
 8010798:	3301      	adds	r3, #1
 801079a:	e7df      	b.n	801075c <Attribute_Modified_CB+0x6f4>
 801079c:	f3af 8000 	nop.w
 80107a0:	00000000 	.word	0x00000000
 80107a4:	40240000 	.word	0x40240000
 80107a8:	20012568 	.word	0x20012568
 80107ac:	2001266c 	.word	0x2001266c
 80107b0:	2000834c 	.word	0x2000834c
 80107b4:	0801bb4c 	.word	0x0801bb4c
 80107b8:	0801bc58 	.word	0x0801bc58
 80107bc:	0801b9c8 	.word	0x0801b9c8
 80107c0:	0801b61e 	.word	0x0801b61e
 80107c4:	0801b9cf 	.word	0x0801b9cf
 80107c8:	0801b9d3 	.word	0x0801b9d3
 80107cc:	0801b9e1 	.word	0x0801b9e1
 80107d0:	0801b9ee 	.word	0x0801b9ee
 80107d4:	20011ee0 	.word	0x20011ee0
 80107d8:	0801ba0c 	.word	0x0801ba0c
 80107dc:	0801ba21 	.word	0x0801ba21
 80107e0:	2000b0f8 	.word	0x2000b0f8
 80107e4:	0801ba38 	.word	0x0801ba38
 80107e8:	0801ba68 	.word	0x0801ba68
 80107ec:	e0042000 	.word	0xe0042000
 80107f0:	1fff7a12 	.word	0x1fff7a12
 80107f4:	1fff7a13 	.word	0x1fff7a13
 80107f8:	1fff7a18 	.word	0x1fff7a18
 80107fc:	1fff7a19 	.word	0x1fff7a19
 8010800:	1fff7a1a 	.word	0x1fff7a1a
 8010804:	1fff7a1b 	.word	0x1fff7a1b
 8010808:	1fff7a14 	.word	0x1fff7a14
 801080c:	1fff7a15 	.word	0x1fff7a15
 8010810:	1fff7a16 	.word	0x1fff7a16
 8010814:	1fff7a17 	.word	0x1fff7a17
 8010818:	1fff7a10 	.word	0x1fff7a10
 801081c:	1fff7a11 	.word	0x1fff7a11
 8010820:	0801ba75 	.word	0x0801ba75
 8010824:	0801baae 	.word	0x0801baae
 8010828:	0802fa82 	.word	0x0802fa82
 801082c:	200124e4 	.word	0x200124e4
 8010830:	20002118 	.word	0x20002118
 8010834:	0801bab7 	.word	0x0801bab7
 8010838:	0801bad9 	.word	0x0801bad9
 801083c:	49b5      	ldr	r1, [pc, #724]	; (8010b14 <Attribute_Modified_CB+0xaac>)
 801083e:	48b6      	ldr	r0, [pc, #728]	; (8010b18 <Attribute_Modified_CB+0xab0>)
 8010840:	4fb6      	ldr	r7, [pc, #728]	; (8010b1c <Attribute_Modified_CB+0xab4>)
 8010842:	f005 fd56 	bl	80162f2 <strcpy>
 8010846:	2117      	movs	r1, #23
 8010848:	48b3      	ldr	r0, [pc, #716]	; (8010b18 <Attribute_Modified_CB+0xab0>)
 801084a:	6039      	str	r1, [r7, #0]
 801084c:	f7fe fcc6 	bl	800f1dc <Term_Update>
 8010850:	49b3      	ldr	r1, [pc, #716]	; (8010b20 <Attribute_Modified_CB+0xab8>)
 8010852:	48b1      	ldr	r0, [pc, #708]	; (8010b18 <Attribute_Modified_CB+0xab0>)
 8010854:	f005 fd4d 	bl	80162f2 <strcpy>
 8010858:	2120      	movs	r1, #32
 801085a:	e797      	b.n	801078c <Attribute_Modified_CB+0x724>
 801085c:	4645      	mov	r5, r8
 801085e:	e665      	b.n	801052c <Attribute_Modified_CB+0x4c4>
 8010860:	3301      	adds	r3, #1
 8010862:	2900      	cmp	r1, #0
 8010864:	f43f ae77 	beq.w	8010556 <Attribute_Modified_CB+0x4ee>
 8010868:	fb1c 2200 	smlabb	r2, ip, r0, r2
 801086c:	443a      	add	r2, r7
 801086e:	f04f 0e01 	mov.w	lr, #1
 8010872:	f882 1057 	strb.w	r1, [r2, #87]	; 0x57
 8010876:	e667      	b.n	8010548 <Attribute_Modified_CB+0x4e0>
 8010878:	f102 0901 	add.w	r9, r2, #1
 801087c:	18ab      	adds	r3, r5, r2
 801087e:	eb05 0109 	add.w	r1, r5, r9
 8010882:	f893 0059 	ldrb.w	r0, [r3, #89]	; 0x59
 8010886:	f891 1057 	ldrb.w	r1, [r1, #87]	; 0x57
 801088a:	2864      	cmp	r0, #100	; 0x64
 801088c:	bf08      	it	eq
 801088e:	296f      	cmpeq	r1, #111	; 0x6f
 8010890:	f040 80d8 	bne.w	8010a44 <Attribute_Modified_CB+0x9dc>
 8010894:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 8010898:	2b72      	cmp	r3, #114	; 0x72
 801089a:	f040 80d3 	bne.w	8010a44 <Attribute_Modified_CB+0x9dc>
 801089e:	f102 0905 	add.w	r9, r2, #5
 80108a2:	2400      	movs	r4, #0
 80108a4:	2201      	movs	r2, #1
 80108a6:	eb05 0309 	add.w	r3, r5, r9
 80108aa:	f893 1058 	ldrb.w	r1, [r3, #88]	; 0x58
 80108ae:	2973      	cmp	r1, #115	; 0x73
 80108b0:	d107      	bne.n	80108c2 <Attribute_Modified_CB+0x85a>
 80108b2:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 80108b6:	2b66      	cmp	r3, #102	; 0x66
 80108b8:	bf02      	ittt	eq
 80108ba:	2201      	moveq	r2, #1
 80108bc:	f109 0903 	addeq.w	r9, r9, #3
 80108c0:	4614      	moveq	r4, r2
 80108c2:	eb07 0109 	add.w	r1, r7, r9
 80108c6:	f891 3058 	ldrb.w	r3, [r1, #88]	; 0x58
 80108ca:	f891 0059 	ldrb.w	r0, [r1, #89]	; 0x59
 80108ce:	2b69      	cmp	r3, #105	; 0x69
 80108d0:	bf08      	it	eq
 80108d2:	287a      	cmpeq	r0, #122	; 0x7a
 80108d4:	f891 0057 	ldrb.w	r0, [r1, #87]	; 0x57
 80108d8:	bf0c      	ite	eq
 80108da:	2301      	moveq	r3, #1
 80108dc:	2300      	movne	r3, #0
 80108de:	2873      	cmp	r0, #115	; 0x73
 80108e0:	bf14      	ite	ne
 80108e2:	2300      	movne	r3, #0
 80108e4:	f003 0301 	andeq.w	r3, r3, #1
 80108e8:	b13b      	cbz	r3, 80108fa <Attribute_Modified_CB+0x892>
 80108ea:	f891 305a 	ldrb.w	r3, [r1, #90]	; 0x5a
 80108ee:	2b65      	cmp	r3, #101	; 0x65
 80108f0:	bf02      	ittt	eq
 80108f2:	f109 0905 	addeq.w	r9, r9, #5
 80108f6:	2201      	moveq	r2, #1
 80108f8:	2402      	moveq	r4, #2
 80108fa:	eb07 0109 	add.w	r1, r7, r9
 80108fe:	f891 3058 	ldrb.w	r3, [r1, #88]	; 0x58
 8010902:	f891 0059 	ldrb.w	r0, [r1, #89]	; 0x59
 8010906:	2b69      	cmp	r3, #105	; 0x69
 8010908:	bf08      	it	eq
 801090a:	286e      	cmpeq	r0, #110	; 0x6e
 801090c:	f891 0057 	ldrb.w	r0, [r1, #87]	; 0x57
 8010910:	bf0c      	ite	eq
 8010912:	2301      	moveq	r3, #1
 8010914:	2300      	movne	r3, #0
 8010916:	2877      	cmp	r0, #119	; 0x77
 8010918:	bf14      	ite	ne
 801091a:	2300      	movne	r3, #0
 801091c:	f003 0301 	andeq.w	r3, r3, #1
 8010920:	b13b      	cbz	r3, 8010932 <Attribute_Modified_CB+0x8ca>
 8010922:	f891 305a 	ldrb.w	r3, [r1, #90]	; 0x5a
 8010926:	2b64      	cmp	r3, #100	; 0x64
 8010928:	bf02      	ittt	eq
 801092a:	f109 0905 	addeq.w	r9, r9, #5
 801092e:	2201      	moveq	r2, #1
 8010930:	2403      	moveq	r4, #3
 8010932:	eb07 0109 	add.w	r1, r7, r9
 8010936:	f891 3058 	ldrb.w	r3, [r1, #88]	; 0x58
 801093a:	f891 0059 	ldrb.w	r0, [r1, #89]	; 0x59
 801093e:	2b61      	cmp	r3, #97	; 0x61
 8010940:	bf08      	it	eq
 8010942:	2863      	cmpeq	r0, #99	; 0x63
 8010944:	f891 0057 	ldrb.w	r0, [r1, #87]	; 0x57
 8010948:	bf0c      	ite	eq
 801094a:	2301      	moveq	r3, #1
 801094c:	2300      	movne	r3, #0
 801094e:	2874      	cmp	r0, #116	; 0x74
 8010950:	bf14      	ite	ne
 8010952:	2300      	movne	r3, #0
 8010954:	f003 0301 	andeq.w	r3, r3, #1
 8010958:	b13b      	cbz	r3, 801096a <Attribute_Modified_CB+0x902>
 801095a:	f891 305a 	ldrb.w	r3, [r1, #90]	; 0x5a
 801095e:	2b71      	cmp	r3, #113	; 0x71
 8010960:	bf02      	ittt	eq
 8010962:	f109 0905 	addeq.w	r9, r9, #5
 8010966:	2201      	moveq	r2, #1
 8010968:	2404      	moveq	r4, #4
 801096a:	eb05 0309 	add.w	r3, r5, r9
 801096e:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
 8010972:	f893 1059 	ldrb.w	r1, [r3, #89]	; 0x59
 8010976:	2876      	cmp	r0, #118	; 0x76
 8010978:	bf08      	it	eq
 801097a:	296c      	cmpeq	r1, #108	; 0x6c
 801097c:	d107      	bne.n	801098e <Attribute_Modified_CB+0x926>
 801097e:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8010982:	2b6f      	cmp	r3, #111	; 0x6f
 8010984:	bf02      	ittt	eq
 8010986:	f109 0904 	addeq.w	r9, r9, #4
 801098a:	2201      	moveq	r2, #1
 801098c:	2405      	moveq	r4, #5
 801098e:	eb0b 0109 	add.w	r1, fp, r9
 8010992:	f891 3058 	ldrb.w	r3, [r1, #88]	; 0x58
 8010996:	f891 c059 	ldrb.w	ip, [r1, #89]	; 0x59
 801099a:	f891 0057 	ldrb.w	r0, [r1, #87]	; 0x57
 801099e:	2b75      	cmp	r3, #117	; 0x75
 80109a0:	bf08      	it	eq
 80109a2:	f1bc 0f62 	cmpeq.w	ip, #98	; 0x62
 80109a6:	bf0c      	ite	eq
 80109a8:	2301      	moveq	r3, #1
 80109aa:	2300      	movne	r3, #0
 80109ac:	f891 c05a 	ldrb.w	ip, [r1, #90]	; 0x5a
 80109b0:	2873      	cmp	r0, #115	; 0x73
 80109b2:	bf14      	ite	ne
 80109b4:	2300      	movne	r3, #0
 80109b6:	f003 0301 	andeq.w	r3, r3, #1
 80109ba:	f1bc 0f72 	cmp.w	ip, #114	; 0x72
 80109be:	bf14      	ite	ne
 80109c0:	2300      	movne	r3, #0
 80109c2:	f003 0301 	andeq.w	r3, r3, #1
 80109c6:	f891 c05b 	ldrb.w	ip, [r1, #91]	; 0x5b
 80109ca:	f1bc 0f6e 	cmp.w	ip, #110	; 0x6e
 80109ce:	bf14      	ite	ne
 80109d0:	2300      	movne	r3, #0
 80109d2:	f003 0301 	andeq.w	r3, r3, #1
 80109d6:	2b00      	cmp	r3, #0
 80109d8:	d036      	beq.n	8010a48 <Attribute_Modified_CB+0x9e0>
 80109da:	f891 305c 	ldrb.w	r3, [r1, #92]	; 0x5c
 80109de:	2b67      	cmp	r3, #103	; 0x67
 80109e0:	d132      	bne.n	8010a48 <Attribute_Modified_CB+0x9e0>
 80109e2:	f109 0907 	add.w	r9, r9, #7
 80109e6:	2406      	movs	r4, #6
 80109e8:	2200      	movs	r2, #0
 80109ea:	b2d3      	uxtb	r3, r2
 80109ec:	eb03 0a09 	add.w	sl, r3, r9
 80109f0:	eb05 010a 	add.w	r1, r5, sl
 80109f4:	930c      	str	r3, [sp, #48]	; 0x30
 80109f6:	f891 1057 	ldrb.w	r1, [r1, #87]	; 0x57
 80109fa:	290d      	cmp	r1, #13
 80109fc:	d004      	beq.n	8010a08 <Attribute_Modified_CB+0x9a0>
 80109fe:	f011 0fdf 	tst.w	r1, #223	; 0xdf
 8010a02:	f102 0201 	add.w	r2, r2, #1
 8010a06:	d1f0      	bne.n	80109ea <Attribute_Modified_CB+0x982>
 8010a08:	eb05 010a 	add.w	r1, r5, sl
 8010a0c:	ab1a      	add	r3, sp, #104	; 0x68
 8010a0e:	eb03 0284 	add.w	r2, r3, r4, lsl #2
 8010a12:	f891 1056 	ldrb.w	r1, [r1, #86]	; 0x56
 8010a16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010a18:	f001 010f 	and.w	r1, r1, #15
 8010a1c:	2b01      	cmp	r3, #1
 8010a1e:	f842 1c1c 	str.w	r1, [r2, #-28]
 8010a22:	d907      	bls.n	8010a34 <Attribute_Modified_CB+0x9cc>
 8010a24:	493f      	ldr	r1, [pc, #252]	; (8010b24 <Attribute_Modified_CB+0xabc>)
 8010a26:	eb0a 0301 	add.w	r3, sl, r1
 8010a2a:	930e      	str	r3, [sp, #56]	; 0x38
 8010a2c:	2301      	movs	r3, #1
 8010a2e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010a30:	4299      	cmp	r1, r3
 8010a32:	dc18      	bgt.n	8010a66 <Attribute_Modified_CB+0x9fe>
 8010a34:	2c06      	cmp	r4, #6
 8010a36:	d868      	bhi.n	8010b0a <Attribute_Modified_CB+0xaa2>
 8010a38:	e8df f004 	tbb	[pc, r4]
 8010a3c:	9c895c38 	.word	0x9c895c38
 8010a40:	b0a4      	.short	0xb0a4
 8010a42:	b9          	.byte	0xb9
 8010a43:	00          	.byte	0x00
 8010a44:	2200      	movs	r2, #0
 8010a46:	e72e      	b.n	80108a6 <Attribute_Modified_CB+0x83e>
 8010a48:	2a00      	cmp	r2, #0
 8010a4a:	d1cd      	bne.n	80109e8 <Attribute_Modified_CB+0x980>
 8010a4c:	282d      	cmp	r0, #45	; 0x2d
 8010a4e:	d05e      	beq.n	8010b0e <Attribute_Modified_CB+0xaa6>
 8010a50:	4935      	ldr	r1, [pc, #212]	; (8010b28 <Attribute_Modified_CB+0xac0>)
 8010a52:	4831      	ldr	r0, [pc, #196]	; (8010b18 <Attribute_Modified_CB+0xab0>)
 8010a54:	f005 fc4d 	bl	80162f2 <strcpy>
 8010a58:	4b30      	ldr	r3, [pc, #192]	; (8010b1c <Attribute_Modified_CB+0xab4>)
 8010a5a:	482f      	ldr	r0, [pc, #188]	; (8010b18 <Attribute_Modified_CB+0xab0>)
 8010a5c:	2113      	movs	r1, #19
 8010a5e:	6019      	str	r1, [r3, #0]
 8010a60:	f7fe fbbc 	bl	800f1dc <Term_Update>
 8010a64:	e053      	b.n	8010b0e <Attribute_Modified_CB+0xaa6>
 8010a66:	f852 1c1c 	ldr.w	r1, [r2, #-28]
 8010a6a:	9211      	str	r2, [sp, #68]	; 0x44
 8010a6c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010a6e:	9310      	str	r3, [sp, #64]	; 0x40
 8010a70:	f812 9d01 	ldrb.w	r9, [r2, #-1]!
 8010a74:	920e      	str	r2, [sp, #56]	; 0x38
 8010a76:	4618      	mov	r0, r3
 8010a78:	910f      	str	r1, [sp, #60]	; 0x3c
 8010a7a:	f7f3 fdcb 	bl	8004614 <__aeabi_i2d>
 8010a7e:	eeb0 0a48 	vmov.f32	s0, s16
 8010a82:	eef0 0a68 	vmov.f32	s1, s17
 8010a86:	ec41 0b11 	vmov	d1, r0, r1
 8010a8a:	f006 fb95 	bl	80171b8 <pow>
 8010a8e:	ec51 0b10 	vmov	r0, r1, d0
 8010a92:	f7f4 f901 	bl	8004c98 <__aeabi_d2uiz>
 8010a96:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010a98:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8010a9a:	f009 090f 	and.w	r9, r9, #15
 8010a9e:	fb09 3000 	mla	r0, r9, r0, r3
 8010aa2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010aa4:	f842 0c1c 	str.w	r0, [r2, #-28]
 8010aa8:	3301      	adds	r3, #1
 8010aaa:	e7c0      	b.n	8010a2e <Attribute_Modified_CB+0x9c6>
 8010aac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010aae:	2b0d      	cmp	r3, #13
 8010ab0:	d012      	beq.n	8010ad8 <Attribute_Modified_CB+0xa70>
 8010ab2:	2b1a      	cmp	r3, #26
 8010ab4:	d010      	beq.n	8010ad8 <Attribute_Modified_CB+0xa70>
 8010ab6:	2b34      	cmp	r3, #52	; 0x34
 8010ab8:	d00e      	beq.n	8010ad8 <Attribute_Modified_CB+0xa70>
 8010aba:	2b68      	cmp	r3, #104	; 0x68
 8010abc:	d00c      	beq.n	8010ad8 <Attribute_Modified_CB+0xa70>
 8010abe:	2bd0      	cmp	r3, #208	; 0xd0
 8010ac0:	d00a      	beq.n	8010ad8 <Attribute_Modified_CB+0xa70>
 8010ac2:	f5b3 7fd0 	cmp.w	r3, #416	; 0x1a0
 8010ac6:	d007      	beq.n	8010ad8 <Attribute_Modified_CB+0xa70>
 8010ac8:	f240 3241 	movw	r2, #833	; 0x341
 8010acc:	4293      	cmp	r3, r2
 8010ace:	d003      	beq.n	8010ad8 <Attribute_Modified_CB+0xa70>
 8010ad0:	f240 627c 	movw	r2, #1660	; 0x67c
 8010ad4:	4293      	cmp	r3, r2
 8010ad6:	d107      	bne.n	8010ae8 <Attribute_Modified_CB+0xa80>
 8010ad8:	4a14      	ldr	r2, [pc, #80]	; (8010b2c <Attribute_Modified_CB+0xac4>)
 8010ada:	b29b      	uxth	r3, r3
 8010adc:	8093      	strh	r3, [r2, #4]
 8010ade:	8053      	strh	r3, [r2, #2]
 8010ae0:	f04f 0801 	mov.w	r8, #1
 8010ae4:	2601      	movs	r6, #1
 8010ae6:	e010      	b.n	8010b0a <Attribute_Modified_CB+0xaa2>
 8010ae8:	4911      	ldr	r1, [pc, #68]	; (8010b30 <Attribute_Modified_CB+0xac8>)
 8010aea:	480b      	ldr	r0, [pc, #44]	; (8010b18 <Attribute_Modified_CB+0xab0>)
 8010aec:	f005 fc01 	bl	80162f2 <strcpy>
 8010af0:	211e      	movs	r1, #30
 8010af2:	e026      	b.n	8010b42 <Attribute_Modified_CB+0xada>
 8010af4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010af6:	2b10      	cmp	r3, #16
 8010af8:	d81e      	bhi.n	8010b38 <Attribute_Modified_CB+0xad0>
 8010afa:	4a0e      	ldr	r2, [pc, #56]	; (8010b34 <Attribute_Modified_CB+0xacc>)
 8010afc:	40da      	lsrs	r2, r3
 8010afe:	07d1      	lsls	r1, r2, #31
 8010b00:	d51a      	bpl.n	8010b38 <Attribute_Modified_CB+0xad0>
 8010b02:	4a0a      	ldr	r2, [pc, #40]	; (8010b2c <Attribute_Modified_CB+0xac4>)
 8010b04:	46a0      	mov	r8, r4
 8010b06:	80d3      	strh	r3, [r2, #6]
 8010b08:	4626      	mov	r6, r4
 8010b0a:	f10a 0901 	add.w	r9, sl, #1
 8010b0e:	464a      	mov	r2, r9
 8010b10:	e543      	b.n	801059a <Attribute_Modified_CB+0x532>
 8010b12:	bf00      	nop
 8010b14:	0801bb13 	.word	0x0801bb13
 8010b18:	20012568 	.word	0x20012568
 8010b1c:	2001266c 	.word	0x2001266c
 8010b20:	0801bb2b 	.word	0x0801bb2b
 8010b24:	200083a2 	.word	0x200083a2
 8010b28:	0801bc44 	.word	0x0801bc44
 8010b2c:	20011ee0 	.word	0x20011ee0
 8010b30:	0801bb65 	.word	0x0801bb65
 8010b34:	00010114 	.word	0x00010114
 8010b38:	49a1      	ldr	r1, [pc, #644]	; (8010dc0 <Attribute_Modified_CB+0xd58>)
 8010b3a:	48a2      	ldr	r0, [pc, #648]	; (8010dc4 <Attribute_Modified_CB+0xd5c>)
 8010b3c:	f005 fbd9 	bl	80162f2 <strcpy>
 8010b40:	211d      	movs	r1, #29
 8010b42:	4ba1      	ldr	r3, [pc, #644]	; (8010dc8 <Attribute_Modified_CB+0xd60>)
 8010b44:	489f      	ldr	r0, [pc, #636]	; (8010dc4 <Attribute_Modified_CB+0xd5c>)
 8010b46:	6019      	str	r1, [r3, #0]
 8010b48:	f7fe fb48 	bl	800f1dc <Term_Update>
 8010b4c:	e7dd      	b.n	8010b0a <Attribute_Modified_CB+0xaa2>
 8010b4e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010b50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010b54:	d005      	beq.n	8010b62 <Attribute_Modified_CB+0xafa>
 8010b56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010b5a:	d002      	beq.n	8010b62 <Attribute_Modified_CB+0xafa>
 8010b5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010b60:	d102      	bne.n	8010b68 <Attribute_Modified_CB+0xb00>
 8010b62:	4a9a      	ldr	r2, [pc, #616]	; (8010dcc <Attribute_Modified_CB+0xd64>)
 8010b64:	8013      	strh	r3, [r2, #0]
 8010b66:	e7bd      	b.n	8010ae4 <Attribute_Modified_CB+0xa7c>
 8010b68:	4999      	ldr	r1, [pc, #612]	; (8010dd0 <Attribute_Modified_CB+0xd68>)
 8010b6a:	4896      	ldr	r0, [pc, #600]	; (8010dc4 <Attribute_Modified_CB+0xd5c>)
 8010b6c:	f005 fbc1 	bl	80162f2 <strcpy>
 8010b70:	211f      	movs	r1, #31
 8010b72:	e7e6      	b.n	8010b42 <Attribute_Modified_CB+0xada>
 8010b74:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8010b76:	2b03      	cmp	r3, #3
 8010b78:	d802      	bhi.n	8010b80 <Attribute_Modified_CB+0xb18>
 8010b7a:	4a94      	ldr	r2, [pc, #592]	; (8010dcc <Attribute_Modified_CB+0xd64>)
 8010b7c:	8093      	strh	r3, [r2, #4]
 8010b7e:	e7b1      	b.n	8010ae4 <Attribute_Modified_CB+0xa7c>
 8010b80:	4994      	ldr	r1, [pc, #592]	; (8010dd4 <Attribute_Modified_CB+0xd6c>)
 8010b82:	e7f2      	b.n	8010b6a <Attribute_Modified_CB+0xb02>
 8010b84:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010b86:	f64e 026c 	movw	r2, #59500	; 0xe86c
 8010b8a:	f5a3 71fa 	sub.w	r1, r3, #500	; 0x1f4
 8010b8e:	4291      	cmp	r1, r2
 8010b90:	d802      	bhi.n	8010b98 <Attribute_Modified_CB+0xb30>
 8010b92:	4a8e      	ldr	r2, [pc, #568]	; (8010dcc <Attribute_Modified_CB+0xd64>)
 8010b94:	8113      	strh	r3, [r2, #8]
 8010b96:	e7a5      	b.n	8010ae4 <Attribute_Modified_CB+0xa7c>
 8010b98:	498f      	ldr	r1, [pc, #572]	; (8010dd8 <Attribute_Modified_CB+0xd70>)
 8010b9a:	e7e6      	b.n	8010b6a <Attribute_Modified_CB+0xb02>
 8010b9c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8010b9e:	1f5a      	subs	r2, r3, #5
 8010ba0:	2a5a      	cmp	r2, #90	; 0x5a
 8010ba2:	d802      	bhi.n	8010baa <Attribute_Modified_CB+0xb42>
 8010ba4:	4a89      	ldr	r2, [pc, #548]	; (8010dcc <Attribute_Modified_CB+0xd64>)
 8010ba6:	7293      	strb	r3, [r2, #10]
 8010ba8:	e79c      	b.n	8010ae4 <Attribute_Modified_CB+0xa7c>
 8010baa:	498c      	ldr	r1, [pc, #560]	; (8010ddc <Attribute_Modified_CB+0xd74>)
 8010bac:	e79d      	b.n	8010aea <Attribute_Modified_CB+0xa82>
 8010bae:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010bb0:	f1a3 0108 	sub.w	r1, r3, #8
 8010bb4:	2918      	cmp	r1, #24
 8010bb6:	d806      	bhi.n	8010bc6 <Attribute_Modified_CB+0xb5e>
 8010bb8:	4a89      	ldr	r2, [pc, #548]	; (8010de0 <Attribute_Modified_CB+0xd78>)
 8010bba:	40ca      	lsrs	r2, r1
 8010bbc:	07d2      	lsls	r2, r2, #31
 8010bbe:	d504      	bpl.n	8010bca <Attribute_Modified_CB+0xb62>
 8010bc0:	4a82      	ldr	r2, [pc, #520]	; (8010dcc <Attribute_Modified_CB+0xd64>)
 8010bc2:	8193      	strh	r3, [r2, #12]
 8010bc4:	e78e      	b.n	8010ae4 <Attribute_Modified_CB+0xa7c>
 8010bc6:	2b40      	cmp	r3, #64	; 0x40
 8010bc8:	d0fa      	beq.n	8010bc0 <Attribute_Modified_CB+0xb58>
 8010bca:	4986      	ldr	r1, [pc, #536]	; (8010de4 <Attribute_Modified_CB+0xd7c>)
 8010bcc:	487d      	ldr	r0, [pc, #500]	; (8010dc4 <Attribute_Modified_CB+0xd5c>)
 8010bce:	f005 fb90 	bl	80162f2 <strcpy>
 8010bd2:	2122      	movs	r1, #34	; 0x22
 8010bd4:	e7b5      	b.n	8010b42 <Attribute_Modified_CB+0xada>
 8010bd6:	2d00      	cmp	r5, #0
 8010bd8:	f43f aa5c 	beq.w	8010094 <Attribute_Modified_CB+0x2c>
 8010bdc:	7823      	ldrb	r3, [r4, #0]
 8010bde:	2b40      	cmp	r3, #64	; 0x40
 8010be0:	d003      	beq.n	8010bea <Attribute_Modified_CB+0xb82>
 8010be2:	4631      	mov	r1, r6
 8010be4:	4620      	mov	r0, r4
 8010be6:	f7ff ba87 	b.w	80100f8 <Attribute_Modified_CB+0x90>
 8010bea:	7863      	ldrb	r3, [r4, #1]
 8010bec:	2b54      	cmp	r3, #84	; 0x54
 8010bee:	d110      	bne.n	8010c12 <Attribute_Modified_CB+0xbaa>
 8010bf0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010bf4:	9313      	str	r3, [sp, #76]	; 0x4c
 8010bf6:	23ff      	movs	r3, #255	; 0xff
 8010bf8:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
 8010bfc:	78a3      	ldrb	r3, [r4, #2]
 8010bfe:	3b44      	subs	r3, #68	; 0x44
 8010c00:	2b09      	cmp	r3, #9
 8010c02:	d812      	bhi.n	8010c2a <Attribute_Modified_CB+0xbc2>
 8010c04:	e8df f003 	tbb	[pc, r3]
 8010c08:	1111111c 	.word	0x1111111c
 8010c0c:	1111111a 	.word	0x1111111a
 8010c10:	180e      	.short	0x180e
 8010c12:	2b41      	cmp	r3, #65	; 0x41
 8010c14:	d102      	bne.n	8010c1c <Attribute_Modified_CB+0xbb4>
 8010c16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010c1a:	e7eb      	b.n	8010bf4 <Attribute_Modified_CB+0xb8c>
 8010c1c:	2b4d      	cmp	r3, #77	; 0x4d
 8010c1e:	d1e0      	bne.n	8010be2 <Attribute_Modified_CB+0xb7a>
 8010c20:	2304      	movs	r3, #4
 8010c22:	e7e7      	b.n	8010bf4 <Attribute_Modified_CB+0xb8c>
 8010c24:	2332      	movs	r3, #50	; 0x32
 8010c26:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
 8010c2a:	a813      	add	r0, sp, #76	; 0x4c
 8010c2c:	f7fe fb0a 	bl	800f244 <ConfigCommandParsing.isra.1>
 8010c30:	2800      	cmp	r0, #0
 8010c32:	d1d6      	bne.n	8010be2 <Attribute_Modified_CB+0xb7a>
 8010c34:	f7ff ba2e 	b.w	8010094 <Attribute_Modified_CB+0x2c>
 8010c38:	230a      	movs	r3, #10
 8010c3a:	e7f4      	b.n	8010c26 <Attribute_Modified_CB+0xbbe>
 8010c3c:	2301      	movs	r3, #1
 8010c3e:	e7f2      	b.n	8010c26 <Attribute_Modified_CB+0xbbe>
 8010c40:	2300      	movs	r3, #0
 8010c42:	e7f0      	b.n	8010c26 <Attribute_Modified_CB+0xbbe>
 8010c44:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8010c46:	3202      	adds	r2, #2
 8010c48:	4293      	cmp	r3, r2
 8010c4a:	d140      	bne.n	8010cce <Attribute_Modified_CB+0xc66>
 8010c4c:	780a      	ldrb	r2, [r1, #0]
 8010c4e:	4c66      	ldr	r4, [pc, #408]	; (8010de8 <Attribute_Modified_CB+0xd80>)
 8010c50:	2a01      	cmp	r2, #1
 8010c52:	6823      	ldr	r3, [r4, #0]
 8010c54:	d12a      	bne.n	8010cac <Attribute_Modified_CB+0xc44>
 8010c56:	f043 0308 	orr.w	r3, r3, #8
 8010c5a:	2140      	movs	r1, #64	; 0x40
 8010c5c:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 8010c60:	6023      	str	r3, [r4, #0]
 8010c62:	f7fd f8cd 	bl	800de00 <InitMics>
 8010c66:	4b61      	ldr	r3, [pc, #388]	; (8010dec <Attribute_Modified_CB+0xd84>)
 8010c68:	4a61      	ldr	r2, [pc, #388]	; (8010df0 <Attribute_Modified_CB+0xd88>)
 8010c6a:	4d62      	ldr	r5, [pc, #392]	; (8010df4 <Attribute_Modified_CB+0xd8c>)
 8010c6c:	68d8      	ldr	r0, [r3, #12]
 8010c6e:	2100      	movs	r1, #0
 8010c70:	2300      	movs	r3, #0
 8010c72:	4298      	cmp	r0, r3
 8010c74:	dc13      	bgt.n	8010c9e <Attribute_Modified_CB+0xc36>
 8010c76:	4860      	ldr	r0, [pc, #384]	; (8010df8 <Attribute_Modified_CB+0xd90>)
 8010c78:	f7f9 fcd7 	bl	800a62a <HAL_TIM_Base_Start_IT>
 8010c7c:	b108      	cbz	r0, 8010c82 <Attribute_Modified_CB+0xc1a>
 8010c7e:	f7fd fb36 	bl	800e2ee <Error_Handler>
 8010c82:	6822      	ldr	r2, [r4, #0]
 8010c84:	495d      	ldr	r1, [pc, #372]	; (8010dfc <Attribute_Modified_CB+0xd94>)
 8010c86:	f412 7f00 	tst.w	r2, #512	; 0x200
 8010c8a:	f3c2 03c0 	ubfx	r3, r2, #3, #1
 8010c8e:	4a5c      	ldr	r2, [pc, #368]	; (8010e00 <Attribute_Modified_CB+0xd98>)
 8010c90:	d017      	beq.n	8010cc2 <Attribute_Modified_CB+0xc5a>
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	bf08      	it	eq
 8010c96:	460a      	moveq	r2, r1
 8010c98:	495a      	ldr	r1, [pc, #360]	; (8010e04 <Attribute_Modified_CB+0xd9c>)
 8010c9a:	f7ff ba26 	b.w	80100ea <Attribute_Modified_CB+0x82>
 8010c9e:	eb05 0683 	add.w	r6, r5, r3, lsl #2
 8010ca2:	f842 1b04 	str.w	r1, [r2], #4
 8010ca6:	6031      	str	r1, [r6, #0]
 8010ca8:	3301      	adds	r3, #1
 8010caa:	e7e2      	b.n	8010c72 <Attribute_Modified_CB+0xc0a>
 8010cac:	2a00      	cmp	r2, #0
 8010cae:	d1e8      	bne.n	8010c82 <Attribute_Modified_CB+0xc1a>
 8010cb0:	f023 0308 	bic.w	r3, r3, #8
 8010cb4:	6023      	str	r3, [r4, #0]
 8010cb6:	f7fd f8af 	bl	800de18 <DeInitMics>
 8010cba:	484f      	ldr	r0, [pc, #316]	; (8010df8 <Attribute_Modified_CB+0xd90>)
 8010cbc:	f7f9 fcc0 	bl	800a640 <HAL_TIM_Base_Stop_IT>
 8010cc0:	e7dc      	b.n	8010c7c <Attribute_Modified_CB+0xc14>
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	bf18      	it	ne
 8010cc6:	4611      	movne	r1, r2
 8010cc8:	484e      	ldr	r0, [pc, #312]	; (8010e04 <Attribute_Modified_CB+0xd9c>)
 8010cca:	f7ff ba2a 	b.w	8010122 <Attribute_Modified_CB+0xba>
 8010cce:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010cd2:	3202      	adds	r2, #2
 8010cd4:	4293      	cmp	r3, r2
 8010cd6:	d131      	bne.n	8010d3c <Attribute_Modified_CB+0xcd4>
 8010cd8:	780a      	ldrb	r2, [r1, #0]
 8010cda:	4c43      	ldr	r4, [pc, #268]	; (8010de8 <Attribute_Modified_CB+0xd80>)
 8010cdc:	2a01      	cmp	r2, #1
 8010cde:	6823      	ldr	r3, [r4, #0]
 8010ce0:	d119      	bne.n	8010d16 <Attribute_Modified_CB+0xcae>
 8010ce2:	f043 0310 	orr.w	r3, r3, #16
 8010ce6:	6023      	str	r3, [r4, #0]
 8010ce8:	4b47      	ldr	r3, [pc, #284]	; (8010e08 <Attribute_Modified_CB+0xda0>)
 8010cea:	681a      	ldr	r2, [r3, #0]
 8010cec:	b92a      	cbnz	r2, 8010cfa <Attribute_Modified_CB+0xc92>
 8010cee:	2201      	movs	r2, #1
 8010cf0:	601a      	str	r2, [r3, #0]
 8010cf2:	4b46      	ldr	r3, [pc, #280]	; (8010e0c <Attribute_Modified_CB+0xda4>)
 8010cf4:	601a      	str	r2, [r3, #0]
 8010cf6:	4b46      	ldr	r3, [pc, #280]	; (8010e10 <Attribute_Modified_CB+0xda8>)
 8010cf8:	701a      	strb	r2, [r3, #0]
 8010cfa:	6822      	ldr	r2, [r4, #0]
 8010cfc:	4945      	ldr	r1, [pc, #276]	; (8010e14 <Attribute_Modified_CB+0xdac>)
 8010cfe:	f412 7f00 	tst.w	r2, #512	; 0x200
 8010d02:	f3c2 1300 	ubfx	r3, r2, #4, #1
 8010d06:	4a3e      	ldr	r2, [pc, #248]	; (8010e00 <Attribute_Modified_CB+0xd98>)
 8010d08:	d012      	beq.n	8010d30 <Attribute_Modified_CB+0xcc8>
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	bf08      	it	eq
 8010d0e:	460a      	moveq	r2, r1
 8010d10:	4941      	ldr	r1, [pc, #260]	; (8010e18 <Attribute_Modified_CB+0xdb0>)
 8010d12:	f7ff b9ea 	b.w	80100ea <Attribute_Modified_CB+0x82>
 8010d16:	2a00      	cmp	r2, #0
 8010d18:	d1ef      	bne.n	8010cfa <Attribute_Modified_CB+0xc92>
 8010d1a:	f023 0310 	bic.w	r3, r3, #16
 8010d1e:	6023      	str	r3, [r4, #0]
 8010d20:	f7fc fb00 	bl	800d324 <disable_FIFO>
 8010d24:	4a38      	ldr	r2, [pc, #224]	; (8010e08 <Attribute_Modified_CB+0xda0>)
 8010d26:	2300      	movs	r3, #0
 8010d28:	6013      	str	r3, [r2, #0]
 8010d2a:	4a38      	ldr	r2, [pc, #224]	; (8010e0c <Attribute_Modified_CB+0xda4>)
 8010d2c:	6013      	str	r3, [r2, #0]
 8010d2e:	e7e4      	b.n	8010cfa <Attribute_Modified_CB+0xc92>
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	bf18      	it	ne
 8010d34:	4611      	movne	r1, r2
 8010d36:	4838      	ldr	r0, [pc, #224]	; (8010e18 <Attribute_Modified_CB+0xdb0>)
 8010d38:	f7ff b9f3 	b.w	8010122 <Attribute_Modified_CB+0xba>
 8010d3c:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8010d40:	3202      	adds	r2, #2
 8010d42:	4293      	cmp	r3, r2
 8010d44:	d120      	bne.n	8010d88 <Attribute_Modified_CB+0xd20>
 8010d46:	7809      	ldrb	r1, [r1, #0]
 8010d48:	4b27      	ldr	r3, [pc, #156]	; (8010de8 <Attribute_Modified_CB+0xd80>)
 8010d4a:	2901      	cmp	r1, #1
 8010d4c:	681a      	ldr	r2, [r3, #0]
 8010d4e:	d110      	bne.n	8010d72 <Attribute_Modified_CB+0xd0a>
 8010d50:	f042 0220 	orr.w	r2, r2, #32
 8010d54:	601a      	str	r2, [r3, #0]
 8010d56:	681a      	ldr	r2, [r3, #0]
 8010d58:	4928      	ldr	r1, [pc, #160]	; (8010dfc <Attribute_Modified_CB+0xd94>)
 8010d5a:	f412 7f00 	tst.w	r2, #512	; 0x200
 8010d5e:	f3c2 1340 	ubfx	r3, r2, #5, #1
 8010d62:	4a27      	ldr	r2, [pc, #156]	; (8010e00 <Attribute_Modified_CB+0xd98>)
 8010d64:	d00a      	beq.n	8010d7c <Attribute_Modified_CB+0xd14>
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	bf08      	it	eq
 8010d6a:	460a      	moveq	r2, r1
 8010d6c:	492b      	ldr	r1, [pc, #172]	; (8010e1c <Attribute_Modified_CB+0xdb4>)
 8010d6e:	f7ff b9bc 	b.w	80100ea <Attribute_Modified_CB+0x82>
 8010d72:	2900      	cmp	r1, #0
 8010d74:	d1ef      	bne.n	8010d56 <Attribute_Modified_CB+0xcee>
 8010d76:	f022 0220 	bic.w	r2, r2, #32
 8010d7a:	e7eb      	b.n	8010d54 <Attribute_Modified_CB+0xcec>
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	bf18      	it	ne
 8010d80:	4611      	movne	r1, r2
 8010d82:	4826      	ldr	r0, [pc, #152]	; (8010e1c <Attribute_Modified_CB+0xdb4>)
 8010d84:	f7ff b9cd 	b.w	8010122 <Attribute_Modified_CB+0xba>
 8010d88:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8010d8c:	3202      	adds	r2, #2
 8010d8e:	4293      	cmp	r3, r2
 8010d90:	d15a      	bne.n	8010e48 <Attribute_Modified_CB+0xde0>
 8010d92:	780d      	ldrb	r5, [r1, #0]
 8010d94:	4c14      	ldr	r4, [pc, #80]	; (8010de8 <Attribute_Modified_CB+0xd80>)
 8010d96:	2d01      	cmp	r5, #1
 8010d98:	6823      	ldr	r3, [r4, #0]
 8010d9a:	d143      	bne.n	8010e24 <Attribute_Modified_CB+0xdbc>
 8010d9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010da0:	6023      	str	r3, [r4, #0]
 8010da2:	6822      	ldr	r2, [r4, #0]
 8010da4:	491b      	ldr	r1, [pc, #108]	; (8010e14 <Attribute_Modified_CB+0xdac>)
 8010da6:	f412 7f00 	tst.w	r2, #512	; 0x200
 8010daa:	f3c2 1380 	ubfx	r3, r2, #6, #1
 8010dae:	4a14      	ldr	r2, [pc, #80]	; (8010e00 <Attribute_Modified_CB+0xd98>)
 8010db0:	d044      	beq.n	8010e3c <Attribute_Modified_CB+0xdd4>
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	bf08      	it	eq
 8010db6:	460a      	moveq	r2, r1
 8010db8:	4919      	ldr	r1, [pc, #100]	; (8010e20 <Attribute_Modified_CB+0xdb8>)
 8010dba:	f7ff b996 	b.w	80100ea <Attribute_Modified_CB+0x82>
 8010dbe:	bf00      	nop
 8010dc0:	0801bb84 	.word	0x0801bb84
 8010dc4:	20012568 	.word	0x20012568
 8010dc8:	2001266c 	.word	0x2001266c
 8010dcc:	2000b0f8 	.word	0x2000b0f8
 8010dd0:	0801bba2 	.word	0x0801bba2
 8010dd4:	0801bbc2 	.word	0x0801bbc2
 8010dd8:	0801bbe2 	.word	0x0801bbe2
 8010ddc:	0801bc02 	.word	0x0801bc02
 8010de0:	01000101 	.word	0x01000101
 8010de4:	0801bc21 	.word	0x0801bc21
 8010de8:	2000831c 	.word	0x2000831c
 8010dec:	20012220 	.word	0x20012220
 8010df0:	20012474 	.word	0x20012474
 8010df4:	2001247c 	.word	0x2001247c
 8010df8:	20012528 	.word	0x20012528
 8010dfc:	0801b616 	.word	0x0801b616
 8010e00:	0801b610 	.word	0x0801b610
 8010e04:	0801bc5f 	.word	0x0801bc5f
 8010e08:	20008344 	.word	0x20008344
 8010e0c:	200081fc 	.word	0x200081fc
 8010e10:	20008340 	.word	0x20008340
 8010e14:	0801b624 	.word	0x0801b624
 8010e18:	0801bc7a 	.word	0x0801bc7a
 8010e1c:	0801bc92 	.word	0x0801bc92
 8010e20:	0801bca6 	.word	0x0801bca6
 8010e24:	2d00      	cmp	r5, #0
 8010e26:	d1bc      	bne.n	8010da2 <Attribute_Modified_CB+0xd3a>
 8010e28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010e2c:	6023      	str	r3, [r4, #0]
 8010e2e:	f7fc fa79 	bl	800d324 <disable_FIFO>
 8010e32:	4b47      	ldr	r3, [pc, #284]	; (8010f50 <Attribute_Modified_CB+0xee8>)
 8010e34:	601d      	str	r5, [r3, #0]
 8010e36:	4b47      	ldr	r3, [pc, #284]	; (8010f54 <Attribute_Modified_CB+0xeec>)
 8010e38:	601d      	str	r5, [r3, #0]
 8010e3a:	e7b2      	b.n	8010da2 <Attribute_Modified_CB+0xd3a>
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	bf18      	it	ne
 8010e40:	4611      	movne	r1, r2
 8010e42:	4845      	ldr	r0, [pc, #276]	; (8010f58 <Attribute_Modified_CB+0xef0>)
 8010e44:	f7ff b96d 	b.w	8010122 <Attribute_Modified_CB+0xba>
 8010e48:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8010e4c:	3202      	adds	r2, #2
 8010e4e:	4293      	cmp	r3, r2
 8010e50:	d129      	bne.n	8010ea6 <Attribute_Modified_CB+0xe3e>
 8010e52:	7809      	ldrb	r1, [r1, #0]
 8010e54:	4b41      	ldr	r3, [pc, #260]	; (8010f5c <Attribute_Modified_CB+0xef4>)
 8010e56:	2901      	cmp	r1, #1
 8010e58:	681a      	ldr	r2, [r3, #0]
 8010e5a:	d118      	bne.n	8010e8e <Attribute_Modified_CB+0xe26>
 8010e5c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8010e60:	601a      	str	r2, [r3, #0]
 8010e62:	4a3b      	ldr	r2, [pc, #236]	; (8010f50 <Attribute_Modified_CB+0xee8>)
 8010e64:	6810      	ldr	r0, [r2, #0]
 8010e66:	b920      	cbnz	r0, 8010e72 <Attribute_Modified_CB+0xe0a>
 8010e68:	6011      	str	r1, [r2, #0]
 8010e6a:	4a3a      	ldr	r2, [pc, #232]	; (8010f54 <Attribute_Modified_CB+0xeec>)
 8010e6c:	6011      	str	r1, [r2, #0]
 8010e6e:	4a3c      	ldr	r2, [pc, #240]	; (8010f60 <Attribute_Modified_CB+0xef8>)
 8010e70:	7011      	strb	r1, [r2, #0]
 8010e72:	681a      	ldr	r2, [r3, #0]
 8010e74:	493b      	ldr	r1, [pc, #236]	; (8010f64 <Attribute_Modified_CB+0xefc>)
 8010e76:	f412 7f00 	tst.w	r2, #512	; 0x200
 8010e7a:	f3c2 13c0 	ubfx	r3, r2, #7, #1
 8010e7e:	4a3a      	ldr	r2, [pc, #232]	; (8010f68 <Attribute_Modified_CB+0xf00>)
 8010e80:	d00b      	beq.n	8010e9a <Attribute_Modified_CB+0xe32>
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	bf08      	it	eq
 8010e86:	460a      	moveq	r2, r1
 8010e88:	4938      	ldr	r1, [pc, #224]	; (8010f6c <Attribute_Modified_CB+0xf04>)
 8010e8a:	f7ff b92e 	b.w	80100ea <Attribute_Modified_CB+0x82>
 8010e8e:	2900      	cmp	r1, #0
 8010e90:	d1ef      	bne.n	8010e72 <Attribute_Modified_CB+0xe0a>
 8010e92:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010e96:	601a      	str	r2, [r3, #0]
 8010e98:	e7eb      	b.n	8010e72 <Attribute_Modified_CB+0xe0a>
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	bf18      	it	ne
 8010e9e:	4611      	movne	r1, r2
 8010ea0:	4832      	ldr	r0, [pc, #200]	; (8010f6c <Attribute_Modified_CB+0xf04>)
 8010ea2:	f7ff b93e 	b.w	8010122 <Attribute_Modified_CB+0xba>
 8010ea6:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8010eaa:	3202      	adds	r2, #2
 8010eac:	4293      	cmp	r3, r2
 8010eae:	d120      	bne.n	8010ef2 <Attribute_Modified_CB+0xe8a>
 8010eb0:	7809      	ldrb	r1, [r1, #0]
 8010eb2:	4b2a      	ldr	r3, [pc, #168]	; (8010f5c <Attribute_Modified_CB+0xef4>)
 8010eb4:	2901      	cmp	r1, #1
 8010eb6:	681a      	ldr	r2, [r3, #0]
 8010eb8:	d110      	bne.n	8010edc <Attribute_Modified_CB+0xe74>
 8010eba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010ebe:	601a      	str	r2, [r3, #0]
 8010ec0:	681a      	ldr	r2, [r3, #0]
 8010ec2:	492b      	ldr	r1, [pc, #172]	; (8010f70 <Attribute_Modified_CB+0xf08>)
 8010ec4:	f412 7f00 	tst.w	r2, #512	; 0x200
 8010ec8:	f3c2 2300 	ubfx	r3, r2, #8, #1
 8010ecc:	4a26      	ldr	r2, [pc, #152]	; (8010f68 <Attribute_Modified_CB+0xf00>)
 8010ece:	d00a      	beq.n	8010ee6 <Attribute_Modified_CB+0xe7e>
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	bf08      	it	eq
 8010ed4:	460a      	moveq	r2, r1
 8010ed6:	4927      	ldr	r1, [pc, #156]	; (8010f74 <Attribute_Modified_CB+0xf0c>)
 8010ed8:	f7ff b907 	b.w	80100ea <Attribute_Modified_CB+0x82>
 8010edc:	2900      	cmp	r1, #0
 8010ede:	d1ef      	bne.n	8010ec0 <Attribute_Modified_CB+0xe58>
 8010ee0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8010ee4:	e7eb      	b.n	8010ebe <Attribute_Modified_CB+0xe56>
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	bf18      	it	ne
 8010eea:	4611      	movne	r1, r2
 8010eec:	4821      	ldr	r0, [pc, #132]	; (8010f74 <Attribute_Modified_CB+0xf0c>)
 8010eee:	f7ff b918 	b.w	8010122 <Attribute_Modified_CB+0xba>
 8010ef2:	3001      	adds	r0, #1
 8010ef4:	4283      	cmp	r3, r0
 8010ef6:	d104      	bne.n	8010f02 <Attribute_Modified_CB+0xe9a>
 8010ef8:	4608      	mov	r0, r1
 8010efa:	f7fe f9a3 	bl	800f244 <ConfigCommandParsing.isra.1>
 8010efe:	f7ff b8c9 	b.w	8010094 <Attribute_Modified_CB+0x2c>
 8010f02:	2b04      	cmp	r3, #4
 8010f04:	d111      	bne.n	8010f2a <Attribute_Modified_CB+0xec2>
 8010f06:	aa1a      	add	r2, sp, #104	; 0x68
 8010f08:	491b      	ldr	r1, [pc, #108]	; (8010f78 <Attribute_Modified_CB+0xf10>)
 8010f0a:	f842 1d1c 	str.w	r1, [r2, #-28]!
 8010f0e:	2001      	movs	r0, #1
 8010f10:	9200      	str	r2, [sp, #0]
 8010f12:	2102      	movs	r1, #2
 8010f14:	2200      	movs	r2, #0
 8010f16:	f7fa fb79 	bl	800b60c <aci_gatt_update_char_value>
 8010f1a:	b920      	cbnz	r0, 8010f26 <Attribute_Modified_CB+0xebe>
 8010f1c:	4817      	ldr	r0, [pc, #92]	; (8010f7c <Attribute_Modified_CB+0xf14>)
 8010f1e:	f005 f96d 	bl	80161fc <puts>
 8010f22:	f7ff b8b7 	b.w	8010094 <Attribute_Modified_CB+0x2c>
 8010f26:	4816      	ldr	r0, [pc, #88]	; (8010f80 <Attribute_Modified_CB+0xf18>)
 8010f28:	e7f9      	b.n	8010f1e <Attribute_Modified_CB+0xeb6>
 8010f2a:	4b0c      	ldr	r3, [pc, #48]	; (8010f5c <Attribute_Modified_CB+0xef4>)
 8010f2c:	681b      	ldr	r3, [r3, #0]
 8010f2e:	055b      	lsls	r3, r3, #21
 8010f30:	d50b      	bpl.n	8010f4a <Attribute_Modified_CB+0xee2>
 8010f32:	4914      	ldr	r1, [pc, #80]	; (8010f84 <Attribute_Modified_CB+0xf1c>)
 8010f34:	4814      	ldr	r0, [pc, #80]	; (8010f88 <Attribute_Modified_CB+0xf20>)
 8010f36:	f005 f9dc 	bl	80162f2 <strcpy>
 8010f3a:	4b14      	ldr	r3, [pc, #80]	; (8010f8c <Attribute_Modified_CB+0xf24>)
 8010f3c:	4812      	ldr	r0, [pc, #72]	; (8010f88 <Attribute_Modified_CB+0xf20>)
 8010f3e:	211c      	movs	r1, #28
 8010f40:	6019      	str	r1, [r3, #0]
 8010f42:	f7fe f91b 	bl	800f17c <Stderr_Update>
 8010f46:	f7ff b8a5 	b.w	8010094 <Attribute_Modified_CB+0x2c>
 8010f4a:	4811      	ldr	r0, [pc, #68]	; (8010f90 <Attribute_Modified_CB+0xf28>)
 8010f4c:	e7e7      	b.n	8010f1e <Attribute_Modified_CB+0xeb6>
 8010f4e:	bf00      	nop
 8010f50:	20008344 	.word	0x20008344
 8010f54:	20008204 	.word	0x20008204
 8010f58:	0801bca6 	.word	0x0801bca6
 8010f5c:	2000831c 	.word	0x2000831c
 8010f60:	20008340 	.word	0x20008340
 8010f64:	0801b616 	.word	0x0801b616
 8010f68:	0801b610 	.word	0x0801b610
 8010f6c:	0801bcc9 	.word	0x0801bcc9
 8010f70:	0801b624 	.word	0x0801b624
 8010f74:	0801bce6 	.word	0x0801bce6
 8010f78:	ffff0001 	.word	0xffff0001
 8010f7c:	0801bd08 	.word	0x0801bd08
 8010f80:	0801bd1e 	.word	0x0801bd1e
 8010f84:	0801bd3d 	.word	0x0801bd3d
 8010f88:	20012568 	.word	0x20012568
 8010f8c:	2001266c 	.word	0x2001266c
 8010f90:	0801bd5a 	.word	0x0801bd5a

08010f94 <HCI_Event_CB>:
 8010f94:	b530      	push	{r4, r5, lr}
 8010f96:	7803      	ldrb	r3, [r0, #0]
 8010f98:	2b04      	cmp	r3, #4
 8010f9a:	b085      	sub	sp, #20
 8010f9c:	4604      	mov	r4, r0
 8010f9e:	d146      	bne.n	801102e <HCI_Event_CB+0x9a>
 8010fa0:	7843      	ldrb	r3, [r0, #1]
 8010fa2:	2b3e      	cmp	r3, #62	; 0x3e
 8010fa4:	d028      	beq.n	8010ff8 <HCI_Event_CB+0x64>
 8010fa6:	2bff      	cmp	r3, #255	; 0xff
 8010fa8:	d043      	beq.n	8011032 <HCI_Event_CB+0x9e>
 8010faa:	2b05      	cmp	r3, #5
 8010fac:	d13f      	bne.n	801102e <HCI_Event_CB+0x9a>
 8010fae:	4d31      	ldr	r5, [pc, #196]	; (8011074 <HCI_Event_CB+0xe0>)
 8010fb0:	4831      	ldr	r0, [pc, #196]	; (8011078 <HCI_Event_CB+0xe4>)
 8010fb2:	2400      	movs	r4, #0
 8010fb4:	f8c5 40a8 	str.w	r4, [r5, #168]	; 0xa8
 8010fb8:	f005 f920 	bl	80161fc <puts>
 8010fbc:	4b2f      	ldr	r3, [pc, #188]	; (801107c <HCI_Event_CB+0xe8>)
 8010fbe:	4830      	ldr	r0, [pc, #192]	; (8011080 <HCI_Event_CB+0xec>)
 8010fc0:	652c      	str	r4, [r5, #80]	; 0x50
 8010fc2:	2201      	movs	r2, #1
 8010fc4:	705a      	strb	r2, [r3, #1]
 8010fc6:	4b2f      	ldr	r3, [pc, #188]	; (8011084 <HCI_Event_CB+0xf0>)
 8010fc8:	601c      	str	r4, [r3, #0]
 8010fca:	4b2f      	ldr	r3, [pc, #188]	; (8011088 <HCI_Event_CB+0xf4>)
 8010fcc:	210c      	movs	r1, #12
 8010fce:	601c      	str	r4, [r3, #0]
 8010fd0:	f7f9 fec0 	bl	800ad54 <HAL_TIM_OC_Stop_IT>
 8010fd4:	b108      	cbz	r0, 8010fda <HCI_Event_CB+0x46>
 8010fd6:	f7fd f98a 	bl	800e2ee <Error_Handler>
 8010fda:	482c      	ldr	r0, [pc, #176]	; (801108c <HCI_Event_CB+0xf8>)
 8010fdc:	f7f9 fb30 	bl	800a640 <HAL_TIM_Base_Stop_IT>
 8010fe0:	b108      	cbz	r0, 8010fe6 <HCI_Event_CB+0x52>
 8010fe2:	f7fd f984 	bl	800e2ee <Error_Handler>
 8010fe6:	482a      	ldr	r0, [pc, #168]	; (8011090 <HCI_Event_CB+0xfc>)
 8010fe8:	f7f9 fb2a 	bl	800a640 <HAL_TIM_Base_Stop_IT>
 8010fec:	b1f8      	cbz	r0, 801102e <HCI_Event_CB+0x9a>
 8010fee:	b005      	add	sp, #20
 8010ff0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010ff4:	f7fd b97b 	b.w	800e2ee <Error_Handler>
 8010ff8:	78c2      	ldrb	r2, [r0, #3]
 8010ffa:	2a01      	cmp	r2, #1
 8010ffc:	d117      	bne.n	801102e <HCI_Event_CB+0x9a>
 8010ffe:	4b1d      	ldr	r3, [pc, #116]	; (8011074 <HCI_Event_CB+0xe0>)
 8011000:	f8b0 1005 	ldrh.w	r1, [r0, #5]
 8011004:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8011008:	f8a3 104c 	strh.w	r1, [r3, #76]	; 0x4c
 801100c:	7b42      	ldrb	r2, [r0, #13]
 801100e:	7b03      	ldrb	r3, [r0, #12]
 8011010:	7b81      	ldrb	r1, [r0, #14]
 8011012:	7a40      	ldrb	r0, [r0, #9]
 8011014:	9002      	str	r0, [sp, #8]
 8011016:	7aa0      	ldrb	r0, [r4, #10]
 8011018:	9001      	str	r0, [sp, #4]
 801101a:	7ae0      	ldrb	r0, [r4, #11]
 801101c:	9000      	str	r0, [sp, #0]
 801101e:	481d      	ldr	r0, [pc, #116]	; (8011094 <HCI_Event_CB+0x100>)
 8011020:	f005 f878 	bl	8016114 <iprintf>
 8011024:	4a17      	ldr	r2, [pc, #92]	; (8011084 <HCI_Event_CB+0xf0>)
 8011026:	2300      	movs	r3, #0
 8011028:	6013      	str	r3, [r2, #0]
 801102a:	4a17      	ldr	r2, [pc, #92]	; (8011088 <HCI_Event_CB+0xf4>)
 801102c:	6013      	str	r3, [r2, #0]
 801102e:	b005      	add	sp, #20
 8011030:	bd30      	pop	{r4, r5, pc}
 8011032:	f8b0 3003 	ldrh.w	r3, [r0, #3]
 8011036:	f640 4201 	movw	r2, #3073	; 0xc01
 801103a:	4293      	cmp	r3, r2
 801103c:	d00a      	beq.n	8011054 <HCI_Event_CB+0xc0>
 801103e:	f640 4214 	movw	r2, #3092	; 0xc14
 8011042:	4293      	cmp	r3, r2
 8011044:	d1f3      	bne.n	801102e <HCI_Event_CB+0x9a>
 8011046:	f8b0 0007 	ldrh.w	r0, [r0, #7]
 801104a:	b005      	add	sp, #20
 801104c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011050:	f7fe bf22 	b.w	800fe98 <Read_Request_CB>
 8011054:	4b10      	ldr	r3, [pc, #64]	; (8011098 <HCI_Event_CB+0x104>)
 8011056:	f8b0 0007 	ldrh.w	r0, [r0, #7]
 801105a:	7c5b      	ldrb	r3, [r3, #17]
 801105c:	7a62      	ldrb	r2, [r4, #9]
 801105e:	2b01      	cmp	r3, #1
 8011060:	bf0c      	ite	eq
 8011062:	f104 010c 	addeq.w	r1, r4, #12
 8011066:	f104 010a 	addne.w	r1, r4, #10
 801106a:	b005      	add	sp, #20
 801106c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011070:	f7fe bffa 	b.w	8010068 <Attribute_Modified_CB>
 8011074:	2000834c 	.word	0x2000834c
 8011078:	0801bd76 	.word	0x0801bd76
 801107c:	2000047c 	.word	0x2000047c
 8011080:	200124ec 	.word	0x200124ec
 8011084:	2000831c 	.word	0x2000831c
 8011088:	20008348 	.word	0x20008348
 801108c:	20012488 	.word	0x20012488
 8011090:	20012528 	.word	0x20012528
 8011094:	0801bd8c 	.word	0x0801bd8c
 8011098:	20012220 	.word	0x20012220

0801109c <UART_Global_Init>:
 801109c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801109e:	4c1b      	ldr	r4, [pc, #108]	; (801110c <UART_Global_Init+0x70>)
 80110a0:	4620      	mov	r0, r4
 80110a2:	f7fa f8db 	bl	800b25c <HAL_UART_GetState>
 80110a6:	4605      	mov	r5, r0
 80110a8:	bb60      	cbnz	r0, 8011104 <UART_Global_Init+0x68>
 80110aa:	4b19      	ldr	r3, [pc, #100]	; (8011110 <UART_Global_Init+0x74>)
 80110ac:	9001      	str	r0, [sp, #4]
 80110ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80110b0:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80110b4:	631a      	str	r2, [r3, #48]	; 0x30
 80110b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80110b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80110bc:	4602      	mov	r2, r0
 80110be:	9301      	str	r3, [sp, #4]
 80110c0:	2102      	movs	r1, #2
 80110c2:	200b      	movs	r0, #11
 80110c4:	9b01      	ldr	r3, [sp, #4]
 80110c6:	f7f6 fc77 	bl	80079b8 <HAL_NVIC_SetPriority>
 80110ca:	200b      	movs	r0, #11
 80110cc:	f7f6 fca8 	bl	8007a20 <HAL_NVIC_EnableIRQ>
 80110d0:	462a      	mov	r2, r5
 80110d2:	2102      	movs	r1, #2
 80110d4:	202f      	movs	r0, #47	; 0x2f
 80110d6:	f7f6 fc6f 	bl	80079b8 <HAL_NVIC_SetPriority>
 80110da:	202f      	movs	r0, #47	; 0x2f
 80110dc:	f7f6 fca0 	bl	8007a20 <HAL_NVIC_EnableIRQ>
 80110e0:	4a0c      	ldr	r2, [pc, #48]	; (8011114 <UART_Global_Init+0x78>)
 80110e2:	6125      	str	r5, [r4, #16]
 80110e4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80110e8:	e9c4 2300 	strd	r2, r3, [r4]
 80110ec:	4620      	mov	r0, r4
 80110ee:	230c      	movs	r3, #12
 80110f0:	e9c4 5502 	strd	r5, r5, [r4, #8]
 80110f4:	61a5      	str	r5, [r4, #24]
 80110f6:	6163      	str	r3, [r4, #20]
 80110f8:	61e5      	str	r5, [r4, #28]
 80110fa:	b003      	add	sp, #12
 80110fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011100:	f7f9 bfc4 	b.w	800b08c <HAL_UART_Init>
 8011104:	2000      	movs	r0, #0
 8011106:	b003      	add	sp, #12
 8011108:	bd30      	pop	{r4, r5, pc}
 801110a:	bf00      	nop
 801110c:	20012720 	.word	0x20012720
 8011110:	40023800 	.word	0x40023800
 8011114:	40004400 	.word	0x40004400

08011118 <HAL_UART_MspInit>:
 8011118:	b530      	push	{r4, r5, lr}
 801111a:	b089      	sub	sp, #36	; 0x24
 801111c:	4b1b      	ldr	r3, [pc, #108]	; (801118c <HAL_UART_MspInit+0x74>)
 801111e:	4c1c      	ldr	r4, [pc, #112]	; (8011190 <HAL_UART_MspInit+0x78>)
 8011120:	2200      	movs	r2, #0
 8011122:	9200      	str	r2, [sp, #0]
 8011124:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8011126:	f041 0101 	orr.w	r1, r1, #1
 801112a:	6319      	str	r1, [r3, #48]	; 0x30
 801112c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 801112e:	f001 0101 	and.w	r1, r1, #1
 8011132:	9100      	str	r1, [sp, #0]
 8011134:	9900      	ldr	r1, [sp, #0]
 8011136:	9201      	str	r2, [sp, #4]
 8011138:	6b19      	ldr	r1, [r3, #48]	; 0x30
 801113a:	f041 0101 	orr.w	r1, r1, #1
 801113e:	6319      	str	r1, [r3, #48]	; 0x30
 8011140:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8011142:	f001 0101 	and.w	r1, r1, #1
 8011146:	9101      	str	r1, [sp, #4]
 8011148:	9901      	ldr	r1, [sp, #4]
 801114a:	9202      	str	r2, [sp, #8]
 801114c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801114e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8011152:	641a      	str	r2, [r3, #64]	; 0x40
 8011154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801115a:	9302      	str	r3, [sp, #8]
 801115c:	9b02      	ldr	r3, [sp, #8]
 801115e:	2204      	movs	r2, #4
 8011160:	2302      	movs	r3, #2
 8011162:	e9cd 2303 	strd	r2, r3, [sp, #12]
 8011166:	2507      	movs	r5, #7
 8011168:	2201      	movs	r2, #1
 801116a:	a903      	add	r1, sp, #12
 801116c:	4620      	mov	r0, r4
 801116e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011172:	9507      	str	r5, [sp, #28]
 8011174:	f7f7 f87c 	bl	8008270 <HAL_GPIO_Init>
 8011178:	2308      	movs	r3, #8
 801117a:	a903      	add	r1, sp, #12
 801117c:	4620      	mov	r0, r4
 801117e:	9303      	str	r3, [sp, #12]
 8011180:	9507      	str	r5, [sp, #28]
 8011182:	f7f7 f875 	bl	8008270 <HAL_GPIO_Init>
 8011186:	b009      	add	sp, #36	; 0x24
 8011188:	bd30      	pop	{r4, r5, pc}
 801118a:	bf00      	nop
 801118c:	40023800 	.word	0x40023800
 8011190:	40020000 	.word	0x40020000

08011194 <HAL_I2C_MspInit>:
 8011194:	b530      	push	{r4, r5, lr}
 8011196:	b089      	sub	sp, #36	; 0x24
 8011198:	4c1e      	ldr	r4, [pc, #120]	; (8011214 <HAL_I2C_MspInit+0x80>)
 801119a:	481f      	ldr	r0, [pc, #124]	; (8011218 <HAL_I2C_MspInit+0x84>)
 801119c:	2500      	movs	r5, #0
 801119e:	9501      	str	r5, [sp, #4]
 80111a0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80111a2:	f043 0302 	orr.w	r3, r3, #2
 80111a6:	6323      	str	r3, [r4, #48]	; 0x30
 80111a8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80111aa:	f003 0302 	and.w	r3, r3, #2
 80111ae:	9301      	str	r3, [sp, #4]
 80111b0:	9b01      	ldr	r3, [sp, #4]
 80111b2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80111b6:	2312      	movs	r3, #18
 80111b8:	e9cd 2303 	strd	r2, r3, [sp, #12]
 80111bc:	2302      	movs	r3, #2
 80111be:	e9cd 5305 	strd	r5, r3, [sp, #20]
 80111c2:	a903      	add	r1, sp, #12
 80111c4:	2304      	movs	r3, #4
 80111c6:	9307      	str	r3, [sp, #28]
 80111c8:	f7f7 f852 	bl	8008270 <HAL_GPIO_Init>
 80111cc:	9502      	str	r5, [sp, #8]
 80111ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80111d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80111d4:	6423      	str	r3, [r4, #64]	; 0x40
 80111d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80111d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80111dc:	9302      	str	r3, [sp, #8]
 80111de:	9b02      	ldr	r3, [sp, #8]
 80111e0:	6a23      	ldr	r3, [r4, #32]
 80111e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80111e6:	6223      	str	r3, [r4, #32]
 80111e8:	6a23      	ldr	r3, [r4, #32]
 80111ea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80111ee:	6223      	str	r3, [r4, #32]
 80111f0:	462a      	mov	r2, r5
 80111f2:	4629      	mov	r1, r5
 80111f4:	201f      	movs	r0, #31
 80111f6:	f7f6 fbdf 	bl	80079b8 <HAL_NVIC_SetPriority>
 80111fa:	201f      	movs	r0, #31
 80111fc:	f7f6 fc10 	bl	8007a20 <HAL_NVIC_EnableIRQ>
 8011200:	462a      	mov	r2, r5
 8011202:	4629      	mov	r1, r5
 8011204:	2020      	movs	r0, #32
 8011206:	f7f6 fbd7 	bl	80079b8 <HAL_NVIC_SetPriority>
 801120a:	2020      	movs	r0, #32
 801120c:	f7f6 fc08 	bl	8007a20 <HAL_NVIC_EnableIRQ>
 8011210:	b009      	add	sp, #36	; 0x24
 8011212:	bd30      	pop	{r4, r5, pc}
 8011214:	40023800 	.word	0x40023800
 8011218:	40020400 	.word	0x40020400

0801121c <HAL_SPI_MspInit>:
 801121c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011220:	b08d      	sub	sp, #52	; 0x34
 8011222:	4b51      	ldr	r3, [pc, #324]	; (8011368 <HAL_SPI_MspInit+0x14c>)
 8011224:	4d51      	ldr	r5, [pc, #324]	; (801136c <HAL_SPI_MspInit+0x150>)
 8011226:	2400      	movs	r4, #0
 8011228:	9400      	str	r4, [sp, #0]
 801122a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801122c:	f042 0201 	orr.w	r2, r2, #1
 8011230:	631a      	str	r2, [r3, #48]	; 0x30
 8011232:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011234:	f002 0201 	and.w	r2, r2, #1
 8011238:	9200      	str	r2, [sp, #0]
 801123a:	9a00      	ldr	r2, [sp, #0]
 801123c:	9401      	str	r4, [sp, #4]
 801123e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011240:	f042 0202 	orr.w	r2, r2, #2
 8011244:	631a      	str	r2, [r3, #48]	; 0x30
 8011246:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011248:	f002 0202 	and.w	r2, r2, #2
 801124c:	9201      	str	r2, [sp, #4]
 801124e:	9a01      	ldr	r2, [sp, #4]
 8011250:	9402      	str	r4, [sp, #8]
 8011252:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011254:	f042 0201 	orr.w	r2, r2, #1
 8011258:	631a      	str	r2, [r3, #48]	; 0x30
 801125a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801125c:	f002 0201 	and.w	r2, r2, #1
 8011260:	9202      	str	r2, [sp, #8]
 8011262:	9a02      	ldr	r2, [sp, #8]
 8011264:	9403      	str	r4, [sp, #12]
 8011266:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011268:	f042 0201 	orr.w	r2, r2, #1
 801126c:	631a      	str	r2, [r3, #48]	; 0x30
 801126e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011270:	f002 0201 	and.w	r2, r2, #1
 8011274:	9203      	str	r2, [sp, #12]
 8011276:	9a03      	ldr	r2, [sp, #12]
 8011278:	9404      	str	r4, [sp, #16]
 801127a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801127c:	f042 0201 	orr.w	r2, r2, #1
 8011280:	631a      	str	r2, [r3, #48]	; 0x30
 8011282:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011284:	f002 0201 	and.w	r2, r2, #1
 8011288:	9204      	str	r2, [sp, #16]
 801128a:	9a04      	ldr	r2, [sp, #16]
 801128c:	9405      	str	r4, [sp, #20]
 801128e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011290:	f042 0201 	orr.w	r2, r2, #1
 8011294:	631a      	str	r2, [r3, #48]	; 0x30
 8011296:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011298:	f002 0201 	and.w	r2, r2, #1
 801129c:	9205      	str	r2, [sp, #20]
 801129e:	9a05      	ldr	r2, [sp, #20]
 80112a0:	9406      	str	r4, [sp, #24]
 80112a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80112a4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80112a8:	645a      	str	r2, [r3, #68]	; 0x44
 80112aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80112ac:	940b      	str	r4, [sp, #44]	; 0x2c
 80112ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80112b2:	2701      	movs	r7, #1
 80112b4:	9306      	str	r3, [sp, #24]
 80112b6:	f44f 7680 	mov.w	r6, #256	; 0x100
 80112ba:	a907      	add	r1, sp, #28
 80112bc:	4628      	mov	r0, r5
 80112be:	9b06      	ldr	r3, [sp, #24]
 80112c0:	e9cd 6707 	strd	r6, r7, [sp, #28]
 80112c4:	e9cd 7409 	strd	r7, r4, [sp, #36]	; 0x24
 80112c8:	f7f6 ffd2 	bl	8008270 <HAL_GPIO_Init>
 80112cc:	4622      	mov	r2, r4
 80112ce:	4631      	mov	r1, r6
 80112d0:	4628      	mov	r0, r5
 80112d2:	f7f7 f941 	bl	8008558 <HAL_GPIO_WritePin>
 80112d6:	f04f 0802 	mov.w	r8, #2
 80112da:	2603      	movs	r6, #3
 80112dc:	f04f 0905 	mov.w	r9, #5
 80112e0:	2308      	movs	r3, #8
 80112e2:	a907      	add	r1, sp, #28
 80112e4:	4822      	ldr	r0, [pc, #136]	; (8011370 <HAL_SPI_MspInit+0x154>)
 80112e6:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 80112ea:	e9cd 3807 	strd	r3, r8, [sp, #28]
 80112ee:	e9cd 690a 	strd	r6, r9, [sp, #40]	; 0x28
 80112f2:	f7f6 ffbd 	bl	8008270 <HAL_GPIO_Init>
 80112f6:	2340      	movs	r3, #64	; 0x40
 80112f8:	a907      	add	r1, sp, #28
 80112fa:	4628      	mov	r0, r5
 80112fc:	e9cd 3807 	strd	r3, r8, [sp, #28]
 8011300:	e9cd 4609 	strd	r4, r6, [sp, #36]	; 0x24
 8011304:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
 8011308:	f7f6 ffb2 	bl	8008270 <HAL_GPIO_Init>
 801130c:	2380      	movs	r3, #128	; 0x80
 801130e:	a907      	add	r1, sp, #28
 8011310:	4628      	mov	r0, r5
 8011312:	e9cd 3807 	strd	r3, r8, [sp, #28]
 8011316:	e9cd 4609 	strd	r4, r6, [sp, #36]	; 0x24
 801131a:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
 801131e:	f7f6 ffa7 	bl	8008270 <HAL_GPIO_Init>
 8011322:	a907      	add	r1, sp, #28
 8011324:	4628      	mov	r0, r5
 8011326:	e9cd 8707 	strd	r8, r7, [sp, #28]
 801132a:	e9cd 7609 	strd	r7, r6, [sp, #36]	; 0x24
 801132e:	940b      	str	r4, [sp, #44]	; 0x2c
 8011330:	f7f6 ff9e 	bl	8008270 <HAL_GPIO_Init>
 8011334:	463a      	mov	r2, r7
 8011336:	4641      	mov	r1, r8
 8011338:	4628      	mov	r0, r5
 801133a:	f7f7 f90d 	bl	8008558 <HAL_GPIO_WritePin>
 801133e:	4b0d      	ldr	r3, [pc, #52]	; (8011374 <HAL_SPI_MspInit+0x158>)
 8011340:	9707      	str	r7, [sp, #28]
 8011342:	a907      	add	r1, sp, #28
 8011344:	4628      	mov	r0, r5
 8011346:	e9cd 3408 	strd	r3, r4, [sp, #32]
 801134a:	e9cd 640a 	strd	r6, r4, [sp, #40]	; 0x28
 801134e:	f7f6 ff8f 	bl	8008270 <HAL_GPIO_Init>
 8011352:	4622      	mov	r2, r4
 8011354:	4631      	mov	r1, r6
 8011356:	2006      	movs	r0, #6
 8011358:	f7f6 fb2e 	bl	80079b8 <HAL_NVIC_SetPriority>
 801135c:	2006      	movs	r0, #6
 801135e:	f7f6 fb5f 	bl	8007a20 <HAL_NVIC_EnableIRQ>
 8011362:	b00d      	add	sp, #52	; 0x34
 8011364:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011368:	40023800 	.word	0x40023800
 801136c:	40020000 	.word	0x40020000
 8011370:	40020400 	.word	0x40020400
 8011374:	10110000 	.word	0x10110000

08011378 <HAL_TIM_Base_MspInit>:
 8011378:	b507      	push	{r0, r1, r2, lr}
 801137a:	6803      	ldr	r3, [r0, #0]
 801137c:	4a18      	ldr	r2, [pc, #96]	; (80113e0 <HAL_TIM_Base_MspInit+0x68>)
 801137e:	4293      	cmp	r3, r2
 8011380:	d115      	bne.n	80113ae <HAL_TIM_Base_MspInit+0x36>
 8011382:	4b18      	ldr	r3, [pc, #96]	; (80113e4 <HAL_TIM_Base_MspInit+0x6c>)
 8011384:	2200      	movs	r2, #0
 8011386:	9200      	str	r2, [sp, #0]
 8011388:	6c19      	ldr	r1, [r3, #64]	; 0x40
 801138a:	f041 0104 	orr.w	r1, r1, #4
 801138e:	6419      	str	r1, [r3, #64]	; 0x40
 8011390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011392:	f003 0304 	and.w	r3, r3, #4
 8011396:	9300      	str	r3, [sp, #0]
 8011398:	201e      	movs	r0, #30
 801139a:	2109      	movs	r1, #9
 801139c:	9b00      	ldr	r3, [sp, #0]
 801139e:	f7f6 fb0b 	bl	80079b8 <HAL_NVIC_SetPriority>
 80113a2:	201e      	movs	r0, #30
 80113a4:	b003      	add	sp, #12
 80113a6:	f85d eb04 	ldr.w	lr, [sp], #4
 80113aa:	f7f6 bb39 	b.w	8007a20 <HAL_NVIC_EnableIRQ>
 80113ae:	4a0e      	ldr	r2, [pc, #56]	; (80113e8 <HAL_TIM_Base_MspInit+0x70>)
 80113b0:	4293      	cmp	r3, r2
 80113b2:	d111      	bne.n	80113d8 <HAL_TIM_Base_MspInit+0x60>
 80113b4:	4b0b      	ldr	r3, [pc, #44]	; (80113e4 <HAL_TIM_Base_MspInit+0x6c>)
 80113b6:	2200      	movs	r2, #0
 80113b8:	9201      	str	r2, [sp, #4]
 80113ba:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80113bc:	f041 0108 	orr.w	r1, r1, #8
 80113c0:	6419      	str	r1, [r3, #64]	; 0x40
 80113c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80113c4:	f003 0308 	and.w	r3, r3, #8
 80113c8:	9301      	str	r3, [sp, #4]
 80113ca:	2032      	movs	r0, #50	; 0x32
 80113cc:	2109      	movs	r1, #9
 80113ce:	9b01      	ldr	r3, [sp, #4]
 80113d0:	f7f6 faf2 	bl	80079b8 <HAL_NVIC_SetPriority>
 80113d4:	2032      	movs	r0, #50	; 0x32
 80113d6:	e7e5      	b.n	80113a4 <HAL_TIM_Base_MspInit+0x2c>
 80113d8:	b003      	add	sp, #12
 80113da:	f85d fb04 	ldr.w	pc, [sp], #4
 80113de:	bf00      	nop
 80113e0:	40000800 	.word	0x40000800
 80113e4:	40023800 	.word	0x40023800
 80113e8:	40000c00 	.word	0x40000c00

080113ec <HAL_TIM_OC_MspInit>:
 80113ec:	b507      	push	{r0, r1, r2, lr}
 80113ee:	4b0b      	ldr	r3, [pc, #44]	; (801141c <HAL_TIM_OC_MspInit+0x30>)
 80113f0:	2200      	movs	r2, #0
 80113f2:	9201      	str	r2, [sp, #4]
 80113f4:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80113f6:	f041 0101 	orr.w	r1, r1, #1
 80113fa:	6459      	str	r1, [r3, #68]	; 0x44
 80113fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80113fe:	f003 0301 	and.w	r3, r3, #1
 8011402:	9301      	str	r3, [sp, #4]
 8011404:	2109      	movs	r1, #9
 8011406:	201b      	movs	r0, #27
 8011408:	9b01      	ldr	r3, [sp, #4]
 801140a:	f7f6 fad5 	bl	80079b8 <HAL_NVIC_SetPriority>
 801140e:	201b      	movs	r0, #27
 8011410:	b003      	add	sp, #12
 8011412:	f85d eb04 	ldr.w	lr, [sp], #4
 8011416:	f7f6 bb03 	b.w	8007a20 <HAL_NVIC_EnableIRQ>
 801141a:	bf00      	nop
 801141c:	40023800 	.word	0x40023800

08011420 <HAL_CRC_MspInit>:
 8011420:	b082      	sub	sp, #8
 8011422:	2300      	movs	r3, #0
 8011424:	9301      	str	r3, [sp, #4]
 8011426:	4b06      	ldr	r3, [pc, #24]	; (8011440 <HAL_CRC_MspInit+0x20>)
 8011428:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801142a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801142e:	631a      	str	r2, [r3, #48]	; 0x30
 8011430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011432:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8011436:	9301      	str	r3, [sp, #4]
 8011438:	9b01      	ldr	r3, [sp, #4]
 801143a:	b002      	add	sp, #8
 801143c:	4770      	bx	lr
 801143e:	bf00      	nop
 8011440:	40023800 	.word	0x40023800

08011444 <HAL_CRC_MspDeInit>:
 8011444:	4b04      	ldr	r3, [pc, #16]	; (8011458 <HAL_CRC_MspDeInit+0x14>)
 8011446:	691a      	ldr	r2, [r3, #16]
 8011448:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801144c:	611a      	str	r2, [r3, #16]
 801144e:	691a      	ldr	r2, [r3, #16]
 8011450:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8011454:	611a      	str	r2, [r3, #16]
 8011456:	4770      	bx	lr
 8011458:	40023800 	.word	0x40023800

0801145c <NMI_Handler>:
 801145c:	4770      	bx	lr

0801145e <HardFault_Handler>:
 801145e:	e7fe      	b.n	801145e <HardFault_Handler>

08011460 <MemManage_Handler>:
 8011460:	e7fe      	b.n	8011460 <MemManage_Handler>

08011462 <BusFault_Handler>:
 8011462:	e7fe      	b.n	8011462 <BusFault_Handler>

08011464 <UsageFault_Handler>:
 8011464:	e7fe      	b.n	8011464 <UsageFault_Handler>

08011466 <SVC_Handler>:
 8011466:	4770      	bx	lr

08011468 <DebugMon_Handler>:
 8011468:	4770      	bx	lr

0801146a <PendSV_Handler>:
 801146a:	4770      	bx	lr

0801146c <SysTick_Handler>:
 801146c:	f7f6 ba7c 	b.w	8007968 <HAL_IncTick>

08011470 <TIM4_IRQHandler>:
 8011470:	4801      	ldr	r0, [pc, #4]	; (8011478 <TIM4_IRQHandler+0x8>)
 8011472:	f7f9 b941 	b.w	800a6f8 <HAL_TIM_IRQHandler>
 8011476:	bf00      	nop
 8011478:	20012488 	.word	0x20012488

0801147c <TIM5_IRQHandler>:
 801147c:	4801      	ldr	r0, [pc, #4]	; (8011484 <TIM5_IRQHandler+0x8>)
 801147e:	f7f9 b93b 	b.w	800a6f8 <HAL_TIM_IRQHandler>
 8011482:	bf00      	nop
 8011484:	20012528 	.word	0x20012528

08011488 <TIM1_CC_IRQHandler>:
 8011488:	4801      	ldr	r0, [pc, #4]	; (8011490 <TIM1_CC_IRQHandler+0x8>)
 801148a:	f7f9 b935 	b.w	800a6f8 <HAL_TIM_IRQHandler>
 801148e:	bf00      	nop
 8011490:	200124ec 	.word	0x200124ec

08011494 <DMA1_Stream3_IRQHandler>:
 8011494:	4b01      	ldr	r3, [pc, #4]	; (801149c <DMA1_Stream3_IRQHandler+0x8>)
 8011496:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8011498:	f7f6 bc70 	b.w	8007d7c <HAL_DMA_IRQHandler>
 801149c:	2000852c 	.word	0x2000852c

080114a0 <EXTI0_IRQHandler>:
 80114a0:	2001      	movs	r0, #1
 80114a2:	f7f7 b85f 	b.w	8008564 <HAL_GPIO_EXTI_IRQHandler>

080114a6 <EXTI1_IRQHandler>:
 80114a6:	2002      	movs	r0, #2
 80114a8:	f7f7 b85c 	b.w	8008564 <HAL_GPIO_EXTI_IRQHandler>

080114ac <EXTI15_10_IRQHandler>:
 80114ac:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80114b0:	f7f7 b858 	b.w	8008564 <HAL_GPIO_EXTI_IRQHandler>

080114b4 <IKS01A2_MOTION_SENSOR_Init>:
 80114b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114b8:	2801      	cmp	r0, #1
 80114ba:	b091      	sub	sp, #68	; 0x44
 80114bc:	4606      	mov	r6, r0
 80114be:	460f      	mov	r7, r1
 80114c0:	d078      	beq.n	80115b4 <IKS01A2_MOTION_SENSOR_Init+0x100>
 80114c2:	d305      	bcc.n	80114d0 <IKS01A2_MOTION_SENSOR_Init+0x1c>
 80114c4:	2802      	cmp	r0, #2
 80114c6:	f000 80c8 	beq.w	801165a <IKS01A2_MOTION_SENSOR_Init+0x1a6>
 80114ca:	f06f 0001 	mvn.w	r0, #1
 80114ce:	e048      	b.n	8011562 <IKS01A2_MOTION_SENSOR_Init+0xae>
 80114d0:	2300      	movs	r3, #0
 80114d2:	9304      	str	r3, [sp, #16]
 80114d4:	2333      	movs	r3, #51	; 0x33
 80114d6:	f88d 3014 	strb.w	r3, [sp, #20]
 80114da:	4b9c      	ldr	r3, [pc, #624]	; (801174c <IKS01A2_MOTION_SENSOR_Init+0x298>)
 80114dc:	9302      	str	r3, [sp, #8]
 80114de:	4b9c      	ldr	r3, [pc, #624]	; (8011750 <IKS01A2_MOTION_SENSOR_Init+0x29c>)
 80114e0:	9303      	str	r3, [sp, #12]
 80114e2:	4c9c      	ldr	r4, [pc, #624]	; (8011754 <IKS01A2_MOTION_SENSOR_Init+0x2a0>)
 80114e4:	4b9c      	ldr	r3, [pc, #624]	; (8011758 <IKS01A2_MOTION_SENSOR_Init+0x2a4>)
 80114e6:	9307      	str	r3, [sp, #28]
 80114e8:	4b9c      	ldr	r3, [pc, #624]	; (801175c <IKS01A2_MOTION_SENSOR_Init+0x2a8>)
 80114ea:	9306      	str	r3, [sp, #24]
 80114ec:	a902      	add	r1, sp, #8
 80114ee:	4b9c      	ldr	r3, [pc, #624]	; (8011760 <IKS01A2_MOTION_SENSOR_Init+0x2ac>)
 80114f0:	9308      	str	r3, [sp, #32]
 80114f2:	4620      	mov	r0, r4
 80114f4:	f7f5 f8f4 	bl	80066e0 <LSM303AGR_ACC_RegisterBusIO>
 80114f8:	b110      	cbz	r0, 8011500 <IKS01A2_MOTION_SENSOR_Init+0x4c>
 80114fa:	f04f 30ff 	mov.w	r0, #4294967295
 80114fe:	e030      	b.n	8011562 <IKS01A2_MOTION_SENSOR_Init+0xae>
 8011500:	f10d 0107 	add.w	r1, sp, #7
 8011504:	4620      	mov	r0, r4
 8011506:	f7f4 fd94 	bl	8006032 <LSM303AGR_ACC_ReadID>
 801150a:	2800      	cmp	r0, #0
 801150c:	d1f5      	bne.n	80114fa <IKS01A2_MOTION_SENSOR_Init+0x46>
 801150e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011512:	2b33      	cmp	r3, #51	; 0x33
 8011514:	d1f1      	bne.n	80114fa <IKS01A2_MOTION_SENSOR_Init+0x46>
 8011516:	a909      	add	r1, sp, #36	; 0x24
 8011518:	4620      	mov	r0, r4
 801151a:	f7f4 fd27 	bl	8005f6c <LSM303AGR_ACC_GetCapabilities>
 801151e:	f89d 1024 	ldrb.w	r1, [sp, #36]	; 0x24
 8011522:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 8011526:	4d8f      	ldr	r5, [pc, #572]	; (8011764 <IKS01A2_MOTION_SENSOR_Init+0x2b0>)
 8011528:	004b      	lsls	r3, r1, #1
 801152a:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 801152e:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
 8011532:	602c      	str	r4, [r5, #0]
 8011534:	4313      	orrs	r3, r2
 8011536:	07b8      	lsls	r0, r7, #30
 8011538:	4a8b      	ldr	r2, [pc, #556]	; (8011768 <IKS01A2_MOTION_SENSOR_Init+0x2b4>)
 801153a:	62e3      	str	r3, [r4, #44]	; 0x2c
 801153c:	63a2      	str	r2, [r4, #56]	; 0x38
 801153e:	d508      	bpl.n	8011552 <IKS01A2_MOTION_SENSOR_Init+0x9e>
 8011540:	2901      	cmp	r1, #1
 8011542:	d106      	bne.n	8011552 <IKS01A2_MOTION_SENSOR_Init+0x9e>
 8011544:	4b89      	ldr	r3, [pc, #548]	; (801176c <IKS01A2_MOTION_SENSOR_Init+0x2b8>)
 8011546:	64a3      	str	r3, [r4, #72]	; 0x48
 8011548:	4620      	mov	r0, r4
 801154a:	6813      	ldr	r3, [r2, #0]
 801154c:	4798      	blx	r3
 801154e:	2800      	cmp	r0, #0
 8011550:	d1d3      	bne.n	80114fa <IKS01A2_MOTION_SENSOR_Init+0x46>
 8011552:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011554:	6828      	ldr	r0, [r5, #0]
 8011556:	68db      	ldr	r3, [r3, #12]
 8011558:	a909      	add	r1, sp, #36	; 0x24
 801155a:	4798      	blx	r3
 801155c:	b120      	cbz	r0, 8011568 <IKS01A2_MOTION_SENSOR_Init+0xb4>
 801155e:	f06f 0006 	mvn.w	r0, #6
 8011562:	b011      	add	sp, #68	; 0x44
 8011564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011568:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 801156c:	2b01      	cmp	r3, #1
 801156e:	bf18      	it	ne
 8011570:	4634      	movne	r4, r6
 8011572:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 8011576:	bf08      	it	eq
 8011578:	2402      	moveq	r4, #2
 801157a:	2b01      	cmp	r3, #1
 801157c:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
 8011580:	bf08      	it	eq
 8011582:	f044 0401 	orreq.w	r4, r4, #1
 8011586:	2b01      	cmp	r3, #1
 8011588:	d101      	bne.n	801158e <IKS01A2_MOTION_SENSOR_Init+0xda>
 801158a:	f044 0404 	orr.w	r4, r4, #4
 801158e:	f8df b1d4 	ldr.w	fp, [pc, #468]	; 8011764 <IKS01A2_MOTION_SENSOR_Init+0x2b0>
 8011592:	f8df a1c0 	ldr.w	sl, [pc, #448]	; 8011754 <IKS01A2_MOTION_SENSOR_Init+0x2a0>
 8011596:	f8df 91ec 	ldr.w	r9, [pc, #492]	; 8011784 <IKS01A2_MOTION_SENSOR_Init+0x2d0>
 801159a:	2503      	movs	r5, #3
 801159c:	f04f 0801 	mov.w	r8, #1
 80115a0:	ea38 0307 	bics.w	r3, r8, r7
 80115a4:	f000 80bc 	beq.w	8011720 <IKS01A2_MOTION_SENSOR_Init+0x26c>
 80115a8:	3d01      	subs	r5, #1
 80115aa:	ea4f 0848 	mov.w	r8, r8, lsl #1
 80115ae:	d1f7      	bne.n	80115a0 <IKS01A2_MOTION_SENSOR_Init+0xec>
 80115b0:	4628      	mov	r0, r5
 80115b2:	e7d6      	b.n	8011562 <IKS01A2_MOTION_SENSOR_Init+0xae>
 80115b4:	2300      	movs	r3, #0
 80115b6:	9304      	str	r3, [sp, #16]
 80115b8:	233d      	movs	r3, #61	; 0x3d
 80115ba:	f88d 3014 	strb.w	r3, [sp, #20]
 80115be:	4b63      	ldr	r3, [pc, #396]	; (801174c <IKS01A2_MOTION_SENSOR_Init+0x298>)
 80115c0:	9302      	str	r3, [sp, #8]
 80115c2:	4c64      	ldr	r4, [pc, #400]	; (8011754 <IKS01A2_MOTION_SENSOR_Init+0x2a0>)
 80115c4:	4b62      	ldr	r3, [pc, #392]	; (8011750 <IKS01A2_MOTION_SENSOR_Init+0x29c>)
 80115c6:	9303      	str	r3, [sp, #12]
 80115c8:	4b63      	ldr	r3, [pc, #396]	; (8011758 <IKS01A2_MOTION_SENSOR_Init+0x2a4>)
 80115ca:	9307      	str	r3, [sp, #28]
 80115cc:	f104 0568 	add.w	r5, r4, #104	; 0x68
 80115d0:	4b62      	ldr	r3, [pc, #392]	; (801175c <IKS01A2_MOTION_SENSOR_Init+0x2a8>)
 80115d2:	9306      	str	r3, [sp, #24]
 80115d4:	a902      	add	r1, sp, #8
 80115d6:	4b62      	ldr	r3, [pc, #392]	; (8011760 <IKS01A2_MOTION_SENSOR_Init+0x2ac>)
 80115d8:	9308      	str	r3, [sp, #32]
 80115da:	4628      	mov	r0, r5
 80115dc:	f7f5 f8b2 	bl	8006744 <LSM303AGR_MAG_RegisterBusIO>
 80115e0:	2800      	cmp	r0, #0
 80115e2:	d18a      	bne.n	80114fa <IKS01A2_MOTION_SENSOR_Init+0x46>
 80115e4:	f10d 0107 	add.w	r1, sp, #7
 80115e8:	4628      	mov	r0, r5
 80115ea:	f7f4 fe29 	bl	8006240 <LSM303AGR_MAG_ReadID>
 80115ee:	2800      	cmp	r0, #0
 80115f0:	d183      	bne.n	80114fa <IKS01A2_MOTION_SENSOR_Init+0x46>
 80115f2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80115f6:	2b40      	cmp	r3, #64	; 0x40
 80115f8:	f47f af7f 	bne.w	80114fa <IKS01A2_MOTION_SENSOR_Init+0x46>
 80115fc:	a909      	add	r1, sp, #36	; 0x24
 80115fe:	4628      	mov	r0, r5
 8011600:	f7f4 fcc2 	bl	8005f88 <LSM303AGR_MAG_GetCapabilities>
 8011604:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 8011608:	f89d 1024 	ldrb.w	r1, [sp, #36]	; 0x24
 801160c:	0093      	lsls	r3, r2, #2
 801160e:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8011612:	f89d 1025 	ldrb.w	r1, [sp, #37]	; 0x25
 8011616:	430b      	orrs	r3, r1
 8011618:	4952      	ldr	r1, [pc, #328]	; (8011764 <IKS01A2_MOTION_SENSOR_Init+0x2b0>)
 801161a:	6323      	str	r3, [r4, #48]	; 0x30
 801161c:	f017 0f04 	tst.w	r7, #4
 8011620:	4b53      	ldr	r3, [pc, #332]	; (8011770 <IKS01A2_MOTION_SENSOR_Init+0x2bc>)
 8011622:	604d      	str	r5, [r1, #4]
 8011624:	63e3      	str	r3, [r4, #60]	; 0x3c
 8011626:	4688      	mov	r8, r1
 8011628:	d009      	beq.n	801163e <IKS01A2_MOTION_SENSOR_Init+0x18a>
 801162a:	2a01      	cmp	r2, #1
 801162c:	d107      	bne.n	801163e <IKS01A2_MOTION_SENSOR_Init+0x18a>
 801162e:	4a51      	ldr	r2, [pc, #324]	; (8011774 <IKS01A2_MOTION_SENSOR_Init+0x2c0>)
 8011630:	681b      	ldr	r3, [r3, #0]
 8011632:	65a2      	str	r2, [r4, #88]	; 0x58
 8011634:	4628      	mov	r0, r5
 8011636:	4798      	blx	r3
 8011638:	2800      	cmp	r0, #0
 801163a:	f47f af5e 	bne.w	80114fa <IKS01A2_MOTION_SENSOR_Init+0x46>
 801163e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8011640:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8011644:	68db      	ldr	r3, [r3, #12]
 8011646:	a909      	add	r1, sp, #36	; 0x24
 8011648:	4798      	blx	r3
 801164a:	2800      	cmp	r0, #0
 801164c:	d187      	bne.n	801155e <IKS01A2_MOTION_SENSOR_Init+0xaa>
 801164e:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8011652:	2b01      	cmp	r3, #1
 8011654:	bf18      	it	ne
 8011656:	2400      	movne	r4, #0
 8011658:	e78b      	b.n	8011572 <IKS01A2_MOTION_SENSOR_Init+0xbe>
 801165a:	2300      	movs	r3, #0
 801165c:	9304      	str	r3, [sp, #16]
 801165e:	23d5      	movs	r3, #213	; 0xd5
 8011660:	f88d 3014 	strb.w	r3, [sp, #20]
 8011664:	4b39      	ldr	r3, [pc, #228]	; (801174c <IKS01A2_MOTION_SENSOR_Init+0x298>)
 8011666:	9302      	str	r3, [sp, #8]
 8011668:	4c3a      	ldr	r4, [pc, #232]	; (8011754 <IKS01A2_MOTION_SENSOR_Init+0x2a0>)
 801166a:	4b39      	ldr	r3, [pc, #228]	; (8011750 <IKS01A2_MOTION_SENSOR_Init+0x29c>)
 801166c:	9303      	str	r3, [sp, #12]
 801166e:	4b3a      	ldr	r3, [pc, #232]	; (8011758 <IKS01A2_MOTION_SENSOR_Init+0x2a4>)
 8011670:	9307      	str	r3, [sp, #28]
 8011672:	f104 0594 	add.w	r5, r4, #148	; 0x94
 8011676:	4b39      	ldr	r3, [pc, #228]	; (801175c <IKS01A2_MOTION_SENSOR_Init+0x2a8>)
 8011678:	9306      	str	r3, [sp, #24]
 801167a:	a902      	add	r1, sp, #8
 801167c:	4b38      	ldr	r3, [pc, #224]	; (8011760 <IKS01A2_MOTION_SENSOR_Init+0x2ac>)
 801167e:	9308      	str	r3, [sp, #32]
 8011680:	4628      	mov	r0, r5
 8011682:	f000 fe81 	bl	8012388 <ISM330DLC_RegisterBusIO>
 8011686:	2800      	cmp	r0, #0
 8011688:	f47f af37 	bne.w	80114fa <IKS01A2_MOTION_SENSOR_Init+0x46>
 801168c:	f10d 0107 	add.w	r1, sp, #7
 8011690:	4628      	mov	r0, r5
 8011692:	f000 fab8 	bl	8011c06 <ISM330DLC_ReadID>
 8011696:	4680      	mov	r8, r0
 8011698:	2800      	cmp	r0, #0
 801169a:	f47f af2e 	bne.w	80114fa <IKS01A2_MOTION_SENSOR_Init+0x46>
 801169e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80116a2:	2b6a      	cmp	r3, #106	; 0x6a
 80116a4:	f47f af29 	bne.w	80114fa <IKS01A2_MOTION_SENSOR_Init+0x46>
 80116a8:	a909      	add	r1, sp, #36	; 0x24
 80116aa:	4628      	mov	r0, r5
 80116ac:	f000 fa1c 	bl	8011ae8 <ISM330DLC_GetCapabilities>
 80116b0:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
 80116b4:	f89d 1024 	ldrb.w	r1, [sp, #36]	; 0x24
 80116b8:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
 80116bc:	009b      	lsls	r3, r3, #2
 80116be:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 80116c2:	4313      	orrs	r3, r2
 80116c4:	4927      	ldr	r1, [pc, #156]	; (8011764 <IKS01A2_MOTION_SENSOR_Init+0x2b0>)
 80116c6:	6363      	str	r3, [r4, #52]	; 0x34
 80116c8:	f017 0f01 	tst.w	r7, #1
 80116cc:	4b2a      	ldr	r3, [pc, #168]	; (8011778 <IKS01A2_MOTION_SENSOR_Init+0x2c4>)
 80116ce:	608d      	str	r5, [r1, #8]
 80116d0:	6423      	str	r3, [r4, #64]	; 0x40
 80116d2:	4689      	mov	r9, r1
 80116d4:	d00a      	beq.n	80116ec <IKS01A2_MOTION_SENSOR_Init+0x238>
 80116d6:	2a01      	cmp	r2, #1
 80116d8:	d108      	bne.n	80116ec <IKS01A2_MOTION_SENSOR_Init+0x238>
 80116da:	4a28      	ldr	r2, [pc, #160]	; (801177c <IKS01A2_MOTION_SENSOR_Init+0x2c8>)
 80116dc:	681b      	ldr	r3, [r3, #0]
 80116de:	65e2      	str	r2, [r4, #92]	; 0x5c
 80116e0:	4628      	mov	r0, r5
 80116e2:	4798      	blx	r3
 80116e4:	2800      	cmp	r0, #0
 80116e6:	bf18      	it	ne
 80116e8:	f06f 0804 	mvnne.w	r8, #4
 80116ec:	07bb      	lsls	r3, r7, #30
 80116ee:	d513      	bpl.n	8011718 <IKS01A2_MOTION_SENSOR_Init+0x264>
 80116f0:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 80116f4:	2b01      	cmp	r3, #1
 80116f6:	d10f      	bne.n	8011718 <IKS01A2_MOTION_SENSOR_Init+0x264>
 80116f8:	4b21      	ldr	r3, [pc, #132]	; (8011780 <IKS01A2_MOTION_SENSOR_Init+0x2cc>)
 80116fa:	6623      	str	r3, [r4, #96]	; 0x60
 80116fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80116fe:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8011702:	681b      	ldr	r3, [r3, #0]
 8011704:	4798      	blx	r3
 8011706:	2800      	cmp	r0, #0
 8011708:	f47f aef7 	bne.w	80114fa <IKS01A2_MOTION_SENSOR_Init+0x46>
 801170c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801170e:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8011712:	68db      	ldr	r3, [r3, #12]
 8011714:	a909      	add	r1, sp, #36	; 0x24
 8011716:	e797      	b.n	8011648 <IKS01A2_MOTION_SENSOR_Init+0x194>
 8011718:	f1b8 0f00 	cmp.w	r8, #0
 801171c:	d0f6      	beq.n	801170c <IKS01A2_MOTION_SENSOR_Init+0x258>
 801171e:	e6ec      	b.n	80114fa <IKS01A2_MOTION_SENSOR_Init+0x46>
 8011720:	ea38 0304 	bics.w	r3, r8, r4
 8011724:	f47f af40 	bne.w	80115a8 <IKS01A2_MOTION_SENSOR_Init+0xf4>
 8011728:	f859 2028 	ldr.w	r2, [r9, r8, lsl #2]
 801172c:	f85b 0026 	ldr.w	r0, [fp, r6, lsl #2]
 8011730:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8011734:	4413      	add	r3, r2
 8011736:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 801173a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801173c:	681b      	ldr	r3, [r3, #0]
 801173e:	4798      	blx	r3
 8011740:	2800      	cmp	r0, #0
 8011742:	f43f af31 	beq.w	80115a8 <IKS01A2_MOTION_SENSOR_Init+0xf4>
 8011746:	f06f 0004 	mvn.w	r0, #4
 801174a:	e70a      	b.n	8011562 <IKS01A2_MOTION_SENSOR_Init+0xae>
 801174c:	0800eef5 	.word	0x0800eef5
 8011750:	0800ee09 	.word	0x0800ee09
 8011754:	20008404 	.word	0x20008404
 8011758:	0800ee69 	.word	0x0800ee69
 801175c:	0800ee3d 	.word	0x0800ee3d
 8011760:	0800eebd 	.word	0x0800eebd
 8011764:	20012760 	.word	0x20012760
 8011768:	200000c8 	.word	0x200000c8
 801176c:	200000a4 	.word	0x200000a4
 8011770:	20000094 	.word	0x20000094
 8011774:	20000070 	.word	0x20000070
 8011778:	200004c8 	.word	0x200004c8
 801177c:	20000480 	.word	0x20000480
 8011780:	200004a4 	.word	0x200004a4
 8011784:	08019ff8 	.word	0x08019ff8

08011788 <IKS01A2_MOTION_SENSOR_Enable>:
 8011788:	2802      	cmp	r0, #2
 801178a:	b510      	push	{r4, lr}
 801178c:	d819      	bhi.n	80117c2 <IKS01A2_MOTION_SENSOR_Enable+0x3a>
 801178e:	4b0e      	ldr	r3, [pc, #56]	; (80117c8 <IKS01A2_MOTION_SENSOR_Enable+0x40>)
 8011790:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8011794:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8011796:	400a      	ands	r2, r1
 8011798:	428a      	cmp	r2, r1
 801179a:	d112      	bne.n	80117c2 <IKS01A2_MOTION_SENSOR_Enable+0x3a>
 801179c:	4c0b      	ldr	r4, [pc, #44]	; (80117cc <IKS01A2_MOTION_SENSOR_Enable+0x44>)
 801179e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80117a2:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 80117a6:	440a      	add	r2, r1
 80117a8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80117ac:	4a08      	ldr	r2, [pc, #32]	; (80117d0 <IKS01A2_MOTION_SENSOR_Enable+0x48>)
 80117ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80117b0:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 80117b4:	681b      	ldr	r3, [r3, #0]
 80117b6:	4798      	blx	r3
 80117b8:	2800      	cmp	r0, #0
 80117ba:	bf18      	it	ne
 80117bc:	f06f 0004 	mvnne.w	r0, #4
 80117c0:	bd10      	pop	{r4, pc}
 80117c2:	f06f 0001 	mvn.w	r0, #1
 80117c6:	e7fb      	b.n	80117c0 <IKS01A2_MOTION_SENSOR_Enable+0x38>
 80117c8:	20008404 	.word	0x20008404
 80117cc:	08019ff8 	.word	0x08019ff8
 80117d0:	20012760 	.word	0x20012760

080117d4 <IKS01A2_MOTION_SENSOR_GetAxes>:
 80117d4:	2802      	cmp	r0, #2
 80117d6:	b538      	push	{r3, r4, r5, lr}
 80117d8:	d81a      	bhi.n	8011810 <IKS01A2_MOTION_SENSOR_GetAxes+0x3c>
 80117da:	4b0f      	ldr	r3, [pc, #60]	; (8011818 <IKS01A2_MOTION_SENSOR_GetAxes+0x44>)
 80117dc:	eb03 0480 	add.w	r4, r3, r0, lsl #2
 80117e0:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 80117e2:	400c      	ands	r4, r1
 80117e4:	428c      	cmp	r4, r1
 80117e6:	d113      	bne.n	8011810 <IKS01A2_MOTION_SENSOR_GetAxes+0x3c>
 80117e8:	490c      	ldr	r1, [pc, #48]	; (801181c <IKS01A2_MOTION_SENSOR_GetAxes+0x48>)
 80117ea:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 80117ee:	eb00 0540 	add.w	r5, r0, r0, lsl #1
 80117f2:	442c      	add	r4, r5
 80117f4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80117f8:	4611      	mov	r1, r2
 80117fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80117fc:	4a08      	ldr	r2, [pc, #32]	; (8011820 <IKS01A2_MOTION_SENSOR_GetAxes+0x4c>)
 80117fe:	69db      	ldr	r3, [r3, #28]
 8011800:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8011804:	4798      	blx	r3
 8011806:	2800      	cmp	r0, #0
 8011808:	bf18      	it	ne
 801180a:	f06f 0004 	mvnne.w	r0, #4
 801180e:	bd38      	pop	{r3, r4, r5, pc}
 8011810:	f06f 0001 	mvn.w	r0, #1
 8011814:	e7fb      	b.n	801180e <IKS01A2_MOTION_SENSOR_GetAxes+0x3a>
 8011816:	bf00      	nop
 8011818:	20008404 	.word	0x20008404
 801181c:	08019ff8 	.word	0x08019ff8
 8011820:	20012760 	.word	0x20012760

08011824 <IKS01A2_MOTION_SENSOR_GetSensitivity>:
 8011824:	2802      	cmp	r0, #2
 8011826:	b538      	push	{r3, r4, r5, lr}
 8011828:	d81a      	bhi.n	8011860 <IKS01A2_MOTION_SENSOR_GetSensitivity+0x3c>
 801182a:	4b0f      	ldr	r3, [pc, #60]	; (8011868 <IKS01A2_MOTION_SENSOR_GetSensitivity+0x44>)
 801182c:	eb03 0480 	add.w	r4, r3, r0, lsl #2
 8011830:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 8011832:	400c      	ands	r4, r1
 8011834:	428c      	cmp	r4, r1
 8011836:	d113      	bne.n	8011860 <IKS01A2_MOTION_SENSOR_GetSensitivity+0x3c>
 8011838:	490c      	ldr	r1, [pc, #48]	; (801186c <IKS01A2_MOTION_SENSOR_GetSensitivity+0x48>)
 801183a:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 801183e:	eb00 0540 	add.w	r5, r0, r0, lsl #1
 8011842:	442c      	add	r4, r5
 8011844:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8011848:	4611      	mov	r1, r2
 801184a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801184c:	4a08      	ldr	r2, [pc, #32]	; (8011870 <IKS01A2_MOTION_SENSOR_GetSensitivity+0x4c>)
 801184e:	689b      	ldr	r3, [r3, #8]
 8011850:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8011854:	4798      	blx	r3
 8011856:	2800      	cmp	r0, #0
 8011858:	bf18      	it	ne
 801185a:	f06f 0004 	mvnne.w	r0, #4
 801185e:	bd38      	pop	{r3, r4, r5, pc}
 8011860:	f06f 0001 	mvn.w	r0, #1
 8011864:	e7fb      	b.n	801185e <IKS01A2_MOTION_SENSOR_GetSensitivity+0x3a>
 8011866:	bf00      	nop
 8011868:	20008404 	.word	0x20008404
 801186c:	08019ff8 	.word	0x08019ff8
 8011870:	20012760 	.word	0x20012760

08011874 <IKS01A2_MOTION_SENSOR_SetOutputDataRate>:
 8011874:	2802      	cmp	r0, #2
 8011876:	b510      	push	{r4, lr}
 8011878:	d819      	bhi.n	80118ae <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x3a>
 801187a:	4b0e      	ldr	r3, [pc, #56]	; (80118b4 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x40>)
 801187c:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8011880:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8011882:	400a      	ands	r2, r1
 8011884:	428a      	cmp	r2, r1
 8011886:	d112      	bne.n	80118ae <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x3a>
 8011888:	4c0b      	ldr	r4, [pc, #44]	; (80118b8 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x44>)
 801188a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801188e:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 8011892:	440a      	add	r2, r1
 8011894:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8011898:	4a08      	ldr	r2, [pc, #32]	; (80118bc <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x48>)
 801189a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801189c:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 80118a0:	691b      	ldr	r3, [r3, #16]
 80118a2:	4798      	blx	r3
 80118a4:	2800      	cmp	r0, #0
 80118a6:	bf18      	it	ne
 80118a8:	f06f 0004 	mvnne.w	r0, #4
 80118ac:	bd10      	pop	{r4, pc}
 80118ae:	f06f 0001 	mvn.w	r0, #1
 80118b2:	e7fb      	b.n	80118ac <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x38>
 80118b4:	20008404 	.word	0x20008404
 80118b8:	08019ff8 	.word	0x08019ff8
 80118bc:	20012760 	.word	0x20012760

080118c0 <IKS01A2_MOTION_SENSOR_SetFullScale>:
 80118c0:	2802      	cmp	r0, #2
 80118c2:	b538      	push	{r3, r4, r5, lr}
 80118c4:	d81a      	bhi.n	80118fc <IKS01A2_MOTION_SENSOR_SetFullScale+0x3c>
 80118c6:	4b0f      	ldr	r3, [pc, #60]	; (8011904 <IKS01A2_MOTION_SENSOR_SetFullScale+0x44>)
 80118c8:	eb03 0480 	add.w	r4, r3, r0, lsl #2
 80118cc:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 80118ce:	400c      	ands	r4, r1
 80118d0:	428c      	cmp	r4, r1
 80118d2:	d113      	bne.n	80118fc <IKS01A2_MOTION_SENSOR_SetFullScale+0x3c>
 80118d4:	490c      	ldr	r1, [pc, #48]	; (8011908 <IKS01A2_MOTION_SENSOR_SetFullScale+0x48>)
 80118d6:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 80118da:	eb00 0540 	add.w	r5, r0, r0, lsl #1
 80118de:	442c      	add	r4, r5
 80118e0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80118e4:	4611      	mov	r1, r2
 80118e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80118e8:	4a08      	ldr	r2, [pc, #32]	; (801190c <IKS01A2_MOTION_SENSOR_SetFullScale+0x4c>)
 80118ea:	699b      	ldr	r3, [r3, #24]
 80118ec:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 80118f0:	4798      	blx	r3
 80118f2:	2800      	cmp	r0, #0
 80118f4:	bf18      	it	ne
 80118f6:	f06f 0004 	mvnne.w	r0, #4
 80118fa:	bd38      	pop	{r3, r4, r5, pc}
 80118fc:	f06f 0001 	mvn.w	r0, #1
 8011900:	e7fb      	b.n	80118fa <IKS01A2_MOTION_SENSOR_SetFullScale+0x3a>
 8011902:	bf00      	nop
 8011904:	20008404 	.word	0x20008404
 8011908:	08019ff8 	.word	0x08019ff8
 801190c:	20012760 	.word	0x20012760

08011910 <IKS01A2_MOTION_SENSOR_Enable_HP_Filter>:
 8011910:	2801      	cmp	r0, #1
 8011912:	b508      	push	{r3, lr}
 8011914:	d90d      	bls.n	8011932 <IKS01A2_MOTION_SENSOR_Enable_HP_Filter+0x22>
 8011916:	2802      	cmp	r0, #2
 8011918:	d002      	beq.n	8011920 <IKS01A2_MOTION_SENSOR_Enable_HP_Filter+0x10>
 801191a:	f06f 0001 	mvn.w	r0, #1
 801191e:	bd08      	pop	{r3, pc}
 8011920:	4b05      	ldr	r3, [pc, #20]	; (8011938 <IKS01A2_MOTION_SENSOR_Enable_HP_Filter+0x28>)
 8011922:	6898      	ldr	r0, [r3, #8]
 8011924:	f000 fd6d 	bl	8012402 <ISM330DLC_ACC_Enable_HP_Filter>
 8011928:	2800      	cmp	r0, #0
 801192a:	bf18      	it	ne
 801192c:	f06f 0004 	mvnne.w	r0, #4
 8011930:	e7f5      	b.n	801191e <IKS01A2_MOTION_SENSOR_Enable_HP_Filter+0xe>
 8011932:	f06f 0004 	mvn.w	r0, #4
 8011936:	e7f2      	b.n	801191e <IKS01A2_MOTION_SENSOR_Enable_HP_Filter+0xe>
 8011938:	20012760 	.word	0x20012760

0801193c <IKS01A2_MOTION_SENSOR_Set_INT2_DRDY>:
 801193c:	2801      	cmp	r0, #1
 801193e:	b508      	push	{r3, lr}
 8011940:	d90d      	bls.n	801195e <IKS01A2_MOTION_SENSOR_Set_INT2_DRDY+0x22>
 8011942:	2802      	cmp	r0, #2
 8011944:	d002      	beq.n	801194c <IKS01A2_MOTION_SENSOR_Set_INT2_DRDY+0x10>
 8011946:	f06f 0001 	mvn.w	r0, #1
 801194a:	bd08      	pop	{r3, pc}
 801194c:	4b05      	ldr	r3, [pc, #20]	; (8011964 <IKS01A2_MOTION_SENSOR_Set_INT2_DRDY+0x28>)
 801194e:	6898      	ldr	r0, [r3, #8]
 8011950:	f000 fe47 	bl	80125e2 <ISM330DLC_Set_INT2_Drdy>
 8011954:	2800      	cmp	r0, #0
 8011956:	bf18      	it	ne
 8011958:	f06f 0004 	mvnne.w	r0, #4
 801195c:	e7f5      	b.n	801194a <IKS01A2_MOTION_SENSOR_Set_INT2_DRDY+0xe>
 801195e:	f06f 0004 	mvn.w	r0, #4
 8011962:	e7f2      	b.n	801194a <IKS01A2_MOTION_SENSOR_Set_INT2_DRDY+0xe>
 8011964:	20012760 	.word	0x20012760

08011968 <IKS01A2_MOTION_SENSOR_DRDY_Set_Mode>:
 8011968:	2801      	cmp	r0, #1
 801196a:	b508      	push	{r3, lr}
 801196c:	d90d      	bls.n	801198a <IKS01A2_MOTION_SENSOR_DRDY_Set_Mode+0x22>
 801196e:	2802      	cmp	r0, #2
 8011970:	d002      	beq.n	8011978 <IKS01A2_MOTION_SENSOR_DRDY_Set_Mode+0x10>
 8011972:	f06f 0001 	mvn.w	r0, #1
 8011976:	bd08      	pop	{r3, pc}
 8011978:	4b05      	ldr	r3, [pc, #20]	; (8011990 <IKS01A2_MOTION_SENSOR_DRDY_Set_Mode+0x28>)
 801197a:	6898      	ldr	r0, [r3, #8]
 801197c:	f000 fd38 	bl	80123f0 <ISM330DLC_Set_Drdy_Mode>
 8011980:	2800      	cmp	r0, #0
 8011982:	bf18      	it	ne
 8011984:	f06f 0004 	mvnne.w	r0, #4
 8011988:	e7f5      	b.n	8011976 <IKS01A2_MOTION_SENSOR_DRDY_Set_Mode+0xe>
 801198a:	f06f 0004 	mvn.w	r0, #4
 801198e:	e7f2      	b.n	8011976 <IKS01A2_MOTION_SENSOR_DRDY_Set_Mode+0xe>
 8011990:	20012760 	.word	0x20012760

08011994 <IKS01A2_MOTION_SENSOR_FIFO_Set_Decimation>:
 8011994:	2801      	cmp	r0, #1
 8011996:	b508      	push	{r3, lr}
 8011998:	d909      	bls.n	80119ae <IKS01A2_MOTION_SENSOR_FIFO_Set_Decimation+0x1a>
 801199a:	2802      	cmp	r0, #2
 801199c:	d114      	bne.n	80119c8 <IKS01A2_MOTION_SENSOR_FIFO_Set_Decimation+0x34>
 801199e:	0788      	lsls	r0, r1, #30
 80119a0:	d50a      	bpl.n	80119b8 <IKS01A2_MOTION_SENSOR_FIFO_Set_Decimation+0x24>
 80119a2:	4b0b      	ldr	r3, [pc, #44]	; (80119d0 <IKS01A2_MOTION_SENSOR_FIFO_Set_Decimation+0x3c>)
 80119a4:	4611      	mov	r1, r2
 80119a6:	6898      	ldr	r0, [r3, #8]
 80119a8:	f000 fded 	bl	8012586 <ISM330DLC_FIFO_ACC_Set_Decimation>
 80119ac:	b110      	cbz	r0, 80119b4 <IKS01A2_MOTION_SENSOR_FIFO_Set_Decimation+0x20>
 80119ae:	f06f 0004 	mvn.w	r0, #4
 80119b2:	e000      	b.n	80119b6 <IKS01A2_MOTION_SENSOR_FIFO_Set_Decimation+0x22>
 80119b4:	2000      	movs	r0, #0
 80119b6:	bd08      	pop	{r3, pc}
 80119b8:	07cb      	lsls	r3, r1, #31
 80119ba:	d505      	bpl.n	80119c8 <IKS01A2_MOTION_SENSOR_FIFO_Set_Decimation+0x34>
 80119bc:	4b04      	ldr	r3, [pc, #16]	; (80119d0 <IKS01A2_MOTION_SENSOR_FIFO_Set_Decimation+0x3c>)
 80119be:	4611      	mov	r1, r2
 80119c0:	6898      	ldr	r0, [r3, #8]
 80119c2:	f000 fe00 	bl	80125c6 <ISM330DLC_FIFO_GYRO_Set_Decimation>
 80119c6:	e7f1      	b.n	80119ac <IKS01A2_MOTION_SENSOR_FIFO_Set_Decimation+0x18>
 80119c8:	f06f 0001 	mvn.w	r0, #1
 80119cc:	e7f3      	b.n	80119b6 <IKS01A2_MOTION_SENSOR_FIFO_Set_Decimation+0x22>
 80119ce:	bf00      	nop
 80119d0:	20012760 	.word	0x20012760

080119d4 <IKS01A2_MOTION_SENSOR_FIFO_Set_ODR_Value>:
 80119d4:	2801      	cmp	r0, #1
 80119d6:	b508      	push	{r3, lr}
 80119d8:	d90d      	bls.n	80119f6 <IKS01A2_MOTION_SENSOR_FIFO_Set_ODR_Value+0x22>
 80119da:	2802      	cmp	r0, #2
 80119dc:	d002      	beq.n	80119e4 <IKS01A2_MOTION_SENSOR_FIFO_Set_ODR_Value+0x10>
 80119de:	f06f 0001 	mvn.w	r0, #1
 80119e2:	bd08      	pop	{r3, pc}
 80119e4:	4b05      	ldr	r3, [pc, #20]	; (80119fc <IKS01A2_MOTION_SENSOR_FIFO_Set_ODR_Value+0x28>)
 80119e6:	6898      	ldr	r0, [r3, #8]
 80119e8:	f000 fd14 	bl	8012414 <ISM330DLC_FIFO_Set_ODR_Value>
 80119ec:	2800      	cmp	r0, #0
 80119ee:	bf18      	it	ne
 80119f0:	f06f 0004 	mvnne.w	r0, #4
 80119f4:	e7f5      	b.n	80119e2 <IKS01A2_MOTION_SENSOR_FIFO_Set_ODR_Value+0xe>
 80119f6:	f06f 0004 	mvn.w	r0, #4
 80119fa:	e7f2      	b.n	80119e2 <IKS01A2_MOTION_SENSOR_FIFO_Set_ODR_Value+0xe>
 80119fc:	20012760 	.word	0x20012760

08011a00 <IKS01A2_MOTION_SENSOR_FIFO_Set_INT2_FIFO_Full>:
 8011a00:	2801      	cmp	r0, #1
 8011a02:	b508      	push	{r3, lr}
 8011a04:	d90d      	bls.n	8011a22 <IKS01A2_MOTION_SENSOR_FIFO_Set_INT2_FIFO_Full+0x22>
 8011a06:	2802      	cmp	r0, #2
 8011a08:	d002      	beq.n	8011a10 <IKS01A2_MOTION_SENSOR_FIFO_Set_INT2_FIFO_Full+0x10>
 8011a0a:	f06f 0001 	mvn.w	r0, #1
 8011a0e:	bd08      	pop	{r3, pc}
 8011a10:	4b05      	ldr	r3, [pc, #20]	; (8011a28 <IKS01A2_MOTION_SENSOR_FIFO_Set_INT2_FIFO_Full+0x28>)
 8011a12:	6898      	ldr	r0, [r3, #8]
 8011a14:	f000 fd66 	bl	80124e4 <ISM330DLC_FIFO_Set_INT2_FIFO_Full>
 8011a18:	2800      	cmp	r0, #0
 8011a1a:	bf18      	it	ne
 8011a1c:	f06f 0004 	mvnne.w	r0, #4
 8011a20:	e7f5      	b.n	8011a0e <IKS01A2_MOTION_SENSOR_FIFO_Set_INT2_FIFO_Full+0xe>
 8011a22:	f06f 0004 	mvn.w	r0, #4
 8011a26:	e7f2      	b.n	8011a0e <IKS01A2_MOTION_SENSOR_FIFO_Set_INT2_FIFO_Full+0xe>
 8011a28:	20012760 	.word	0x20012760

08011a2c <IKS01A2_MOTION_SENSOR_FIFO_Set_Watermark_Level>:
 8011a2c:	2801      	cmp	r0, #1
 8011a2e:	b508      	push	{r3, lr}
 8011a30:	d90d      	bls.n	8011a4e <IKS01A2_MOTION_SENSOR_FIFO_Set_Watermark_Level+0x22>
 8011a32:	2802      	cmp	r0, #2
 8011a34:	d002      	beq.n	8011a3c <IKS01A2_MOTION_SENSOR_FIFO_Set_Watermark_Level+0x10>
 8011a36:	f06f 0001 	mvn.w	r0, #1
 8011a3a:	bd08      	pop	{r3, pc}
 8011a3c:	4b05      	ldr	r3, [pc, #20]	; (8011a54 <IKS01A2_MOTION_SENSOR_FIFO_Set_Watermark_Level+0x28>)
 8011a3e:	6898      	ldr	r0, [r3, #8]
 8011a40:	f000 fd70 	bl	8012524 <ISM330DLC_FIFO_Set_Watermark_Level>
 8011a44:	2800      	cmp	r0, #0
 8011a46:	bf18      	it	ne
 8011a48:	f06f 0004 	mvnne.w	r0, #4
 8011a4c:	e7f5      	b.n	8011a3a <IKS01A2_MOTION_SENSOR_FIFO_Set_Watermark_Level+0xe>
 8011a4e:	f06f 0004 	mvn.w	r0, #4
 8011a52:	e7f2      	b.n	8011a3a <IKS01A2_MOTION_SENSOR_FIFO_Set_Watermark_Level+0xe>
 8011a54:	20012760 	.word	0x20012760

08011a58 <IKS01A2_MOTION_SENSOR_FIFO_Set_Stop_On_Fth>:
 8011a58:	2801      	cmp	r0, #1
 8011a5a:	b508      	push	{r3, lr}
 8011a5c:	d90d      	bls.n	8011a7a <IKS01A2_MOTION_SENSOR_FIFO_Set_Stop_On_Fth+0x22>
 8011a5e:	2802      	cmp	r0, #2
 8011a60:	d002      	beq.n	8011a68 <IKS01A2_MOTION_SENSOR_FIFO_Set_Stop_On_Fth+0x10>
 8011a62:	f06f 0001 	mvn.w	r0, #1
 8011a66:	bd08      	pop	{r3, pc}
 8011a68:	4b05      	ldr	r3, [pc, #20]	; (8011a80 <IKS01A2_MOTION_SENSOR_FIFO_Set_Stop_On_Fth+0x28>)
 8011a6a:	6898      	ldr	r0, [r3, #8]
 8011a6c:	f000 fd63 	bl	8012536 <ISM330DLC_FIFO_Set_Stop_On_Fth>
 8011a70:	2800      	cmp	r0, #0
 8011a72:	bf18      	it	ne
 8011a74:	f06f 0004 	mvnne.w	r0, #4
 8011a78:	e7f5      	b.n	8011a66 <IKS01A2_MOTION_SENSOR_FIFO_Set_Stop_On_Fth+0xe>
 8011a7a:	f06f 0004 	mvn.w	r0, #4
 8011a7e:	e7f2      	b.n	8011a66 <IKS01A2_MOTION_SENSOR_FIFO_Set_Stop_On_Fth+0xe>
 8011a80:	20012760 	.word	0x20012760

08011a84 <IKS01A2_MOTION_SENSOR_FIFO_Set_Mode>:
 8011a84:	2801      	cmp	r0, #1
 8011a86:	b508      	push	{r3, lr}
 8011a88:	d90d      	bls.n	8011aa6 <IKS01A2_MOTION_SENSOR_FIFO_Set_Mode+0x22>
 8011a8a:	2802      	cmp	r0, #2
 8011a8c:	d002      	beq.n	8011a94 <IKS01A2_MOTION_SENSOR_FIFO_Set_Mode+0x10>
 8011a8e:	f06f 0001 	mvn.w	r0, #1
 8011a92:	bd08      	pop	{r3, pc}
 8011a94:	4b05      	ldr	r3, [pc, #20]	; (8011aac <IKS01A2_MOTION_SENSOR_FIFO_Set_Mode+0x28>)
 8011a96:	6898      	ldr	r0, [r3, #8]
 8011a98:	f000 fd56 	bl	8012548 <ISM330DLC_FIFO_Set_Mode>
 8011a9c:	2800      	cmp	r0, #0
 8011a9e:	bf18      	it	ne
 8011aa0:	f06f 0004 	mvnne.w	r0, #4
 8011aa4:	e7f5      	b.n	8011a92 <IKS01A2_MOTION_SENSOR_FIFO_Set_Mode+0xe>
 8011aa6:	f06f 0004 	mvn.w	r0, #4
 8011aaa:	e7f2      	b.n	8011a92 <IKS01A2_MOTION_SENSOR_FIFO_Set_Mode+0xe>
 8011aac:	20012760 	.word	0x20012760

08011ab0 <IKS01A2_MOTION_SENSOR_FIFO_Get_Data_Word>:
 8011ab0:	2801      	cmp	r0, #1
 8011ab2:	b508      	push	{r3, lr}
 8011ab4:	d013      	beq.n	8011ade <IKS01A2_MOTION_SENSOR_FIFO_Get_Data_Word+0x2e>
 8011ab6:	2802      	cmp	r0, #2
 8011ab8:	d002      	beq.n	8011ac0 <IKS01A2_MOTION_SENSOR_FIFO_Get_Data_Word+0x10>
 8011aba:	f06f 0001 	mvn.w	r0, #1
 8011abe:	e00a      	b.n	8011ad6 <IKS01A2_MOTION_SENSOR_FIFO_Get_Data_Word+0x26>
 8011ac0:	0788      	lsls	r0, r1, #30
 8011ac2:	d509      	bpl.n	8011ad8 <IKS01A2_MOTION_SENSOR_FIFO_Get_Data_Word+0x28>
 8011ac4:	4b07      	ldr	r3, [pc, #28]	; (8011ae4 <IKS01A2_MOTION_SENSOR_FIFO_Get_Data_Word+0x34>)
 8011ac6:	4611      	mov	r1, r2
 8011ac8:	6898      	ldr	r0, [r3, #8]
 8011aca:	f000 fd6a 	bl	80125a2 <ISM330DLC_FIFO_Get_Data_Word>
 8011ace:	2800      	cmp	r0, #0
 8011ad0:	bf18      	it	ne
 8011ad2:	f06f 0004 	mvnne.w	r0, #4
 8011ad6:	bd08      	pop	{r3, pc}
 8011ad8:	07cb      	lsls	r3, r1, #31
 8011ada:	d4f3      	bmi.n	8011ac4 <IKS01A2_MOTION_SENSOR_FIFO_Get_Data_Word+0x14>
 8011adc:	e7ed      	b.n	8011aba <IKS01A2_MOTION_SENSOR_FIFO_Get_Data_Word+0xa>
 8011ade:	f06f 0004 	mvn.w	r0, #4
 8011ae2:	e7f8      	b.n	8011ad6 <IKS01A2_MOTION_SENSOR_FIFO_Get_Data_Word+0x26>
 8011ae4:	20012760 	.word	0x20012760

08011ae8 <ISM330DLC_GetCapabilities>:
 8011ae8:	f240 1201 	movw	r2, #257	; 0x101
 8011aec:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8011af0:	2000      	movs	r0, #0
 8011af2:	e9c1 2300 	strd	r2, r3, [r1]
 8011af6:	2310      	movs	r3, #16
 8011af8:	e9c1 3002 	strd	r3, r0, [r1, #8]
 8011afc:	4b02      	ldr	r3, [pc, #8]	; (8011b08 <ISM330DLC_GetCapabilities+0x20>)
 8011afe:	6188      	str	r0, [r1, #24]
 8011b00:	e9c1 3304 	strd	r3, r3, [r1, #16]
 8011b04:	4770      	bx	lr
 8011b06:	bf00      	nop
 8011b08:	45d02000 	.word	0x45d02000

08011b0c <ReadRegWrap>:
 8011b0c:	b410      	push	{r4}
 8011b0e:	6944      	ldr	r4, [r0, #20]
 8011b10:	7b00      	ldrb	r0, [r0, #12]
 8011b12:	46a4      	mov	ip, r4
 8011b14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011b18:	4760      	bx	ip

08011b1a <WriteRegWrap>:
 8011b1a:	b410      	push	{r4}
 8011b1c:	6904      	ldr	r4, [r0, #16]
 8011b1e:	7b00      	ldrb	r0, [r0, #12]
 8011b20:	46a4      	mov	ip, r4
 8011b22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011b26:	4760      	bx	ip

08011b28 <ISM330DLC_ACC_SetFullScale>:
 8011b28:	2902      	cmp	r1, #2
 8011b2a:	b508      	push	{r3, lr}
 8011b2c:	dd0d      	ble.n	8011b4a <ISM330DLC_ACC_SetFullScale+0x22>
 8011b2e:	2904      	cmp	r1, #4
 8011b30:	dd0d      	ble.n	8011b4e <ISM330DLC_ACC_SetFullScale+0x26>
 8011b32:	2909      	cmp	r1, #9
 8011b34:	bfb4      	ite	lt
 8011b36:	2103      	movlt	r1, #3
 8011b38:	2101      	movge	r1, #1
 8011b3a:	301c      	adds	r0, #28
 8011b3c:	f7f3 fd7d 	bl	800563a <ism330dlc_xl_full_scale_set>
 8011b40:	3000      	adds	r0, #0
 8011b42:	bf18      	it	ne
 8011b44:	2001      	movne	r0, #1
 8011b46:	4240      	negs	r0, r0
 8011b48:	bd08      	pop	{r3, pc}
 8011b4a:	2100      	movs	r1, #0
 8011b4c:	e7f5      	b.n	8011b3a <ISM330DLC_ACC_SetFullScale+0x12>
 8011b4e:	2102      	movs	r1, #2
 8011b50:	e7f3      	b.n	8011b3a <ISM330DLC_ACC_SetFullScale+0x12>

08011b52 <ISM330DLC_Init>:
 8011b52:	b570      	push	{r4, r5, r6, lr}
 8011b54:	f100 041c 	add.w	r4, r0, #28
 8011b58:	4605      	mov	r5, r0
 8011b5a:	2101      	movs	r1, #1
 8011b5c:	4620      	mov	r0, r4
 8011b5e:	f7f3 fe37 	bl	80057d0 <ism330dlc_reset_set>
 8011b62:	b110      	cbz	r0, 8011b6a <ISM330DLC_Init+0x18>
 8011b64:	f04f 30ff 	mov.w	r0, #4294967295
 8011b68:	bd70      	pop	{r4, r5, r6, pc}
 8011b6a:	2101      	movs	r1, #1
 8011b6c:	4620      	mov	r0, r4
 8011b6e:	f7f3 fe45 	bl	80057fc <ism330dlc_auto_increment_set>
 8011b72:	2800      	cmp	r0, #0
 8011b74:	d1f6      	bne.n	8011b64 <ISM330DLC_Init+0x12>
 8011b76:	2101      	movs	r1, #1
 8011b78:	4620      	mov	r0, r4
 8011b7a:	f7f3 fdee 	bl	800575a <ism330dlc_block_data_update_set>
 8011b7e:	4601      	mov	r1, r0
 8011b80:	2800      	cmp	r0, #0
 8011b82:	d1ef      	bne.n	8011b64 <ISM330DLC_Init+0x12>
 8011b84:	4620      	mov	r0, r4
 8011b86:	f7f3 fec6 	bl	8005916 <ism330dlc_fifo_mode_set>
 8011b8a:	4601      	mov	r1, r0
 8011b8c:	2800      	cmp	r0, #0
 8011b8e:	d1e9      	bne.n	8011b64 <ISM330DLC_Init+0x12>
 8011b90:	2604      	movs	r6, #4
 8011b92:	f885 602b 	strb.w	r6, [r5, #43]	; 0x2b
 8011b96:	4620      	mov	r0, r4
 8011b98:	f7f3 fd73 	bl	8005682 <ism330dlc_xl_data_rate_set>
 8011b9c:	4601      	mov	r1, r0
 8011b9e:	2800      	cmp	r0, #0
 8011ba0:	d1e0      	bne.n	8011b64 <ISM330DLC_Init+0x12>
 8011ba2:	4620      	mov	r0, r4
 8011ba4:	f7f3 fd49 	bl	800563a <ism330dlc_xl_full_scale_set>
 8011ba8:	4601      	mov	r1, r0
 8011baa:	2800      	cmp	r0, #0
 8011bac:	d1da      	bne.n	8011b64 <ISM330DLC_Init+0x12>
 8011bae:	f885 602c 	strb.w	r6, [r5, #44]	; 0x2c
 8011bb2:	4620      	mov	r0, r4
 8011bb4:	f7f3 fdad 	bl	8005712 <ism330dlc_gy_data_rate_set>
 8011bb8:	2800      	cmp	r0, #0
 8011bba:	d1d3      	bne.n	8011b64 <ISM330DLC_Init+0x12>
 8011bbc:	2106      	movs	r1, #6
 8011bbe:	4620      	mov	r0, r4
 8011bc0:	f7f3 fd83 	bl	80056ca <ism330dlc_gy_full_scale_set>
 8011bc4:	2800      	cmp	r0, #0
 8011bc6:	d1cd      	bne.n	8011b64 <ISM330DLC_Init+0x12>
 8011bc8:	2301      	movs	r3, #1
 8011bca:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
 8011bce:	e7cb      	b.n	8011b68 <ISM330DLC_Init+0x16>

08011bd0 <ISM330DLC_GYRO_SetFullScale>:
 8011bd0:	297d      	cmp	r1, #125	; 0x7d
 8011bd2:	b508      	push	{r3, lr}
 8011bd4:	dd11      	ble.n	8011bfa <ISM330DLC_GYRO_SetFullScale+0x2a>
 8011bd6:	29fa      	cmp	r1, #250	; 0xfa
 8011bd8:	dd11      	ble.n	8011bfe <ISM330DLC_GYRO_SetFullScale+0x2e>
 8011bda:	f5b1 7ffa 	cmp.w	r1, #500	; 0x1f4
 8011bde:	dd10      	ble.n	8011c02 <ISM330DLC_GYRO_SetFullScale+0x32>
 8011be0:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 8011be4:	bfd4      	ite	le
 8011be6:	2104      	movle	r1, #4
 8011be8:	2106      	movgt	r1, #6
 8011bea:	301c      	adds	r0, #28
 8011bec:	f7f3 fd6d 	bl	80056ca <ism330dlc_gy_full_scale_set>
 8011bf0:	3000      	adds	r0, #0
 8011bf2:	bf18      	it	ne
 8011bf4:	2001      	movne	r0, #1
 8011bf6:	4240      	negs	r0, r0
 8011bf8:	bd08      	pop	{r3, pc}
 8011bfa:	2101      	movs	r1, #1
 8011bfc:	e7f5      	b.n	8011bea <ISM330DLC_GYRO_SetFullScale+0x1a>
 8011bfe:	2100      	movs	r1, #0
 8011c00:	e7f3      	b.n	8011bea <ISM330DLC_GYRO_SetFullScale+0x1a>
 8011c02:	2102      	movs	r1, #2
 8011c04:	e7f1      	b.n	8011bea <ISM330DLC_GYRO_SetFullScale+0x1a>

08011c06 <ISM330DLC_ReadID>:
 8011c06:	b508      	push	{r3, lr}
 8011c08:	301c      	adds	r0, #28
 8011c0a:	f7f3 fddc 	bl	80057c6 <ism330dlc_device_id_get>
 8011c0e:	3000      	adds	r0, #0
 8011c10:	bf18      	it	ne
 8011c12:	2001      	movne	r0, #1
 8011c14:	4240      	negs	r0, r0
 8011c16:	bd08      	pop	{r3, pc}

08011c18 <ISM330DLC_ACC_GetOutputDataRate>:
 8011c18:	b513      	push	{r0, r1, r4, lr}
 8011c1a:	460c      	mov	r4, r1
 8011c1c:	301c      	adds	r0, #28
 8011c1e:	f10d 0107 	add.w	r1, sp, #7
 8011c22:	f7f3 fd44 	bl	80056ae <ism330dlc_xl_data_rate_get>
 8011c26:	bb28      	cbnz	r0, 8011c74 <ISM330DLC_ACC_GetOutputDataRate+0x5c>
 8011c28:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011c2c:	2b0b      	cmp	r3, #11
 8011c2e:	d821      	bhi.n	8011c74 <ISM330DLC_ACC_GetOutputDataRate+0x5c>
 8011c30:	e8df f003 	tbb	[pc, r3]
 8011c34:	100e0c06 	.word	0x100e0c06
 8011c38:	18161412 	.word	0x18161412
 8011c3c:	0a1e1c1a 	.word	0x0a1e1c1a
 8011c40:	2300      	movs	r3, #0
 8011c42:	6023      	str	r3, [r4, #0]
 8011c44:	b002      	add	sp, #8
 8011c46:	bd10      	pop	{r4, pc}
 8011c48:	4b0c      	ldr	r3, [pc, #48]	; (8011c7c <ISM330DLC_ACC_GetOutputDataRate+0x64>)
 8011c4a:	e7fa      	b.n	8011c42 <ISM330DLC_ACC_GetOutputDataRate+0x2a>
 8011c4c:	4b0c      	ldr	r3, [pc, #48]	; (8011c80 <ISM330DLC_ACC_GetOutputDataRate+0x68>)
 8011c4e:	e7f8      	b.n	8011c42 <ISM330DLC_ACC_GetOutputDataRate+0x2a>
 8011c50:	4b0c      	ldr	r3, [pc, #48]	; (8011c84 <ISM330DLC_ACC_GetOutputDataRate+0x6c>)
 8011c52:	e7f6      	b.n	8011c42 <ISM330DLC_ACC_GetOutputDataRate+0x2a>
 8011c54:	4b0c      	ldr	r3, [pc, #48]	; (8011c88 <ISM330DLC_ACC_GetOutputDataRate+0x70>)
 8011c56:	e7f4      	b.n	8011c42 <ISM330DLC_ACC_GetOutputDataRate+0x2a>
 8011c58:	4b0c      	ldr	r3, [pc, #48]	; (8011c8c <ISM330DLC_ACC_GetOutputDataRate+0x74>)
 8011c5a:	e7f2      	b.n	8011c42 <ISM330DLC_ACC_GetOutputDataRate+0x2a>
 8011c5c:	4b0c      	ldr	r3, [pc, #48]	; (8011c90 <ISM330DLC_ACC_GetOutputDataRate+0x78>)
 8011c5e:	e7f0      	b.n	8011c42 <ISM330DLC_ACC_GetOutputDataRate+0x2a>
 8011c60:	4b0c      	ldr	r3, [pc, #48]	; (8011c94 <ISM330DLC_ACC_GetOutputDataRate+0x7c>)
 8011c62:	e7ee      	b.n	8011c42 <ISM330DLC_ACC_GetOutputDataRate+0x2a>
 8011c64:	4b0c      	ldr	r3, [pc, #48]	; (8011c98 <ISM330DLC_ACC_GetOutputDataRate+0x80>)
 8011c66:	e7ec      	b.n	8011c42 <ISM330DLC_ACC_GetOutputDataRate+0x2a>
 8011c68:	4b0c      	ldr	r3, [pc, #48]	; (8011c9c <ISM330DLC_ACC_GetOutputDataRate+0x84>)
 8011c6a:	e7ea      	b.n	8011c42 <ISM330DLC_ACC_GetOutputDataRate+0x2a>
 8011c6c:	4b0c      	ldr	r3, [pc, #48]	; (8011ca0 <ISM330DLC_ACC_GetOutputDataRate+0x88>)
 8011c6e:	e7e8      	b.n	8011c42 <ISM330DLC_ACC_GetOutputDataRate+0x2a>
 8011c70:	4b0c      	ldr	r3, [pc, #48]	; (8011ca4 <ISM330DLC_ACC_GetOutputDataRate+0x8c>)
 8011c72:	e7e6      	b.n	8011c42 <ISM330DLC_ACC_GetOutputDataRate+0x2a>
 8011c74:	f04f 30ff 	mov.w	r0, #4294967295
 8011c78:	e7e4      	b.n	8011c44 <ISM330DLC_ACC_GetOutputDataRate+0x2c>
 8011c7a:	bf00      	nop
 8011c7c:	3fcccccd 	.word	0x3fcccccd
 8011c80:	41480000 	.word	0x41480000
 8011c84:	41d00000 	.word	0x41d00000
 8011c88:	42500000 	.word	0x42500000
 8011c8c:	42d00000 	.word	0x42d00000
 8011c90:	43500000 	.word	0x43500000
 8011c94:	43d00000 	.word	0x43d00000
 8011c98:	44504000 	.word	0x44504000
 8011c9c:	44cf8000 	.word	0x44cf8000
 8011ca0:	45502000 	.word	0x45502000
 8011ca4:	45d02000 	.word	0x45d02000

08011ca8 <ISM330DLC_ACC_GetSensitivity>:
 8011ca8:	b513      	push	{r0, r1, r4, lr}
 8011caa:	460c      	mov	r4, r1
 8011cac:	301c      	adds	r0, #28
 8011cae:	f10d 0107 	add.w	r1, sp, #7
 8011cb2:	f7f3 fcd8 	bl	8005666 <ism330dlc_xl_full_scale_get>
 8011cb6:	b988      	cbnz	r0, 8011cdc <ISM330DLC_ACC_GetSensitivity+0x34>
 8011cb8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011cbc:	2b03      	cmp	r3, #3
 8011cbe:	d80d      	bhi.n	8011cdc <ISM330DLC_ACC_GetSensitivity+0x34>
 8011cc0:	e8df f003 	tbb	[pc, r3]
 8011cc4:	08060a02 	.word	0x08060a02
 8011cc8:	4b06      	ldr	r3, [pc, #24]	; (8011ce4 <ISM330DLC_ACC_GetSensitivity+0x3c>)
 8011cca:	6023      	str	r3, [r4, #0]
 8011ccc:	b002      	add	sp, #8
 8011cce:	bd10      	pop	{r4, pc}
 8011cd0:	4b05      	ldr	r3, [pc, #20]	; (8011ce8 <ISM330DLC_ACC_GetSensitivity+0x40>)
 8011cd2:	e7fa      	b.n	8011cca <ISM330DLC_ACC_GetSensitivity+0x22>
 8011cd4:	4b05      	ldr	r3, [pc, #20]	; (8011cec <ISM330DLC_ACC_GetSensitivity+0x44>)
 8011cd6:	e7f8      	b.n	8011cca <ISM330DLC_ACC_GetSensitivity+0x22>
 8011cd8:	4b05      	ldr	r3, [pc, #20]	; (8011cf0 <ISM330DLC_ACC_GetSensitivity+0x48>)
 8011cda:	e7f6      	b.n	8011cca <ISM330DLC_ACC_GetSensitivity+0x22>
 8011cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8011ce0:	e7f4      	b.n	8011ccc <ISM330DLC_ACC_GetSensitivity+0x24>
 8011ce2:	bf00      	nop
 8011ce4:	3d79db23 	.word	0x3d79db23
 8011ce8:	3df9db23 	.word	0x3df9db23
 8011cec:	3e79db23 	.word	0x3e79db23
 8011cf0:	3ef9db23 	.word	0x3ef9db23

08011cf4 <ISM330DLC_ACC_GetFullScale>:
 8011cf4:	b513      	push	{r0, r1, r4, lr}
 8011cf6:	460c      	mov	r4, r1
 8011cf8:	301c      	adds	r0, #28
 8011cfa:	f10d 0107 	add.w	r1, sp, #7
 8011cfe:	f7f3 fcb2 	bl	8005666 <ism330dlc_xl_full_scale_get>
 8011d02:	b988      	cbnz	r0, 8011d28 <ISM330DLC_ACC_GetFullScale+0x34>
 8011d04:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011d08:	2b03      	cmp	r3, #3
 8011d0a:	d80d      	bhi.n	8011d28 <ISM330DLC_ACC_GetFullScale+0x34>
 8011d0c:	e8df f003 	tbb	[pc, r3]
 8011d10:	08060a02 	.word	0x08060a02
 8011d14:	2302      	movs	r3, #2
 8011d16:	6023      	str	r3, [r4, #0]
 8011d18:	b002      	add	sp, #8
 8011d1a:	bd10      	pop	{r4, pc}
 8011d1c:	2304      	movs	r3, #4
 8011d1e:	e7fa      	b.n	8011d16 <ISM330DLC_ACC_GetFullScale+0x22>
 8011d20:	2308      	movs	r3, #8
 8011d22:	e7f8      	b.n	8011d16 <ISM330DLC_ACC_GetFullScale+0x22>
 8011d24:	2310      	movs	r3, #16
 8011d26:	e7f6      	b.n	8011d16 <ISM330DLC_ACC_GetFullScale+0x22>
 8011d28:	f04f 30ff 	mov.w	r0, #4294967295
 8011d2c:	e7f4      	b.n	8011d18 <ISM330DLC_ACC_GetFullScale+0x24>

08011d2e <ISM330DLC_ACC_GetAxesRaw>:
 8011d2e:	b513      	push	{r0, r1, r4, lr}
 8011d30:	460c      	mov	r4, r1
 8011d32:	301c      	adds	r0, #28
 8011d34:	4669      	mov	r1, sp
 8011d36:	f7f3 fd2b 	bl	8005790 <ism330dlc_acceleration_raw_get>
 8011d3a:	b950      	cbnz	r0, 8011d52 <ISM330DLC_ACC_GetAxesRaw+0x24>
 8011d3c:	f8bd 3000 	ldrh.w	r3, [sp]
 8011d40:	8023      	strh	r3, [r4, #0]
 8011d42:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8011d46:	8063      	strh	r3, [r4, #2]
 8011d48:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8011d4c:	80a3      	strh	r3, [r4, #4]
 8011d4e:	b002      	add	sp, #8
 8011d50:	bd10      	pop	{r4, pc}
 8011d52:	f04f 30ff 	mov.w	r0, #4294967295
 8011d56:	e7fa      	b.n	8011d4e <ISM330DLC_ACC_GetAxesRaw+0x20>

08011d58 <ISM330DLC_ACC_GetAxes>:
 8011d58:	b530      	push	{r4, r5, lr}
 8011d5a:	b085      	sub	sp, #20
 8011d5c:	4605      	mov	r5, r0
 8011d5e:	460c      	mov	r4, r1
 8011d60:	2300      	movs	r3, #0
 8011d62:	a902      	add	r1, sp, #8
 8011d64:	301c      	adds	r0, #28
 8011d66:	9301      	str	r3, [sp, #4]
 8011d68:	f7f3 fd12 	bl	8005790 <ism330dlc_acceleration_raw_get>
 8011d6c:	b118      	cbz	r0, 8011d76 <ISM330DLC_ACC_GetAxes+0x1e>
 8011d6e:	f04f 30ff 	mov.w	r0, #4294967295
 8011d72:	b005      	add	sp, #20
 8011d74:	bd30      	pop	{r4, r5, pc}
 8011d76:	a901      	add	r1, sp, #4
 8011d78:	4628      	mov	r0, r5
 8011d7a:	f7ff ff95 	bl	8011ca8 <ISM330DLC_ACC_GetSensitivity>
 8011d7e:	2800      	cmp	r0, #0
 8011d80:	d1f5      	bne.n	8011d6e <ISM330DLC_ACC_GetAxes+0x16>
 8011d82:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8011d86:	eddd 6a01 	vldr	s13, [sp, #4]
 8011d8a:	ee07 3a10 	vmov	s14, r3
 8011d8e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011d92:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8011d96:	ee27 7a26 	vmul.f32	s14, s14, s13
 8011d9a:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8011d9e:	ed84 7a00 	vstr	s14, [r4]
 8011da2:	ee07 3a10 	vmov	s14, r3
 8011da6:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8011daa:	ee07 3a90 	vmov	s15, r3
 8011dae:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011db2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011db6:	ee27 7a26 	vmul.f32	s14, s14, s13
 8011dba:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011dbe:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8011dc2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011dc6:	ed84 7a01 	vstr	s14, [r4, #4]
 8011dca:	edc4 7a02 	vstr	s15, [r4, #8]
 8011dce:	e7d0      	b.n	8011d72 <ISM330DLC_ACC_GetAxes+0x1a>

08011dd0 <ISM330DLC_GYRO_GetOutputDataRate>:
 8011dd0:	b513      	push	{r0, r1, r4, lr}
 8011dd2:	460c      	mov	r4, r1
 8011dd4:	301c      	adds	r0, #28
 8011dd6:	f10d 0107 	add.w	r1, sp, #7
 8011dda:	f7f3 fcb0 	bl	800573e <ism330dlc_gy_data_rate_get>
 8011dde:	bb18      	cbnz	r0, 8011e28 <ISM330DLC_GYRO_GetOutputDataRate+0x58>
 8011de0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011de4:	2b0a      	cmp	r3, #10
 8011de6:	d81f      	bhi.n	8011e28 <ISM330DLC_GYRO_GetOutputDataRate+0x58>
 8011de8:	e8df f003 	tbb	[pc, r3]
 8011dec:	0e0c0a06 	.word	0x0e0c0a06
 8011df0:	16141210 	.word	0x16141210
 8011df4:	1a18      	.short	0x1a18
 8011df6:	1c          	.byte	0x1c
 8011df7:	00          	.byte	0x00
 8011df8:	2300      	movs	r3, #0
 8011dfa:	6023      	str	r3, [r4, #0]
 8011dfc:	b002      	add	sp, #8
 8011dfe:	bd10      	pop	{r4, pc}
 8011e00:	4b0b      	ldr	r3, [pc, #44]	; (8011e30 <ISM330DLC_GYRO_GetOutputDataRate+0x60>)
 8011e02:	e7fa      	b.n	8011dfa <ISM330DLC_GYRO_GetOutputDataRate+0x2a>
 8011e04:	4b0b      	ldr	r3, [pc, #44]	; (8011e34 <ISM330DLC_GYRO_GetOutputDataRate+0x64>)
 8011e06:	e7f8      	b.n	8011dfa <ISM330DLC_GYRO_GetOutputDataRate+0x2a>
 8011e08:	4b0b      	ldr	r3, [pc, #44]	; (8011e38 <ISM330DLC_GYRO_GetOutputDataRate+0x68>)
 8011e0a:	e7f6      	b.n	8011dfa <ISM330DLC_GYRO_GetOutputDataRate+0x2a>
 8011e0c:	4b0b      	ldr	r3, [pc, #44]	; (8011e3c <ISM330DLC_GYRO_GetOutputDataRate+0x6c>)
 8011e0e:	e7f4      	b.n	8011dfa <ISM330DLC_GYRO_GetOutputDataRate+0x2a>
 8011e10:	4b0b      	ldr	r3, [pc, #44]	; (8011e40 <ISM330DLC_GYRO_GetOutputDataRate+0x70>)
 8011e12:	e7f2      	b.n	8011dfa <ISM330DLC_GYRO_GetOutputDataRate+0x2a>
 8011e14:	4b0b      	ldr	r3, [pc, #44]	; (8011e44 <ISM330DLC_GYRO_GetOutputDataRate+0x74>)
 8011e16:	e7f0      	b.n	8011dfa <ISM330DLC_GYRO_GetOutputDataRate+0x2a>
 8011e18:	4b0b      	ldr	r3, [pc, #44]	; (8011e48 <ISM330DLC_GYRO_GetOutputDataRate+0x78>)
 8011e1a:	e7ee      	b.n	8011dfa <ISM330DLC_GYRO_GetOutputDataRate+0x2a>
 8011e1c:	4b0b      	ldr	r3, [pc, #44]	; (8011e4c <ISM330DLC_GYRO_GetOutputDataRate+0x7c>)
 8011e1e:	e7ec      	b.n	8011dfa <ISM330DLC_GYRO_GetOutputDataRate+0x2a>
 8011e20:	4b0b      	ldr	r3, [pc, #44]	; (8011e50 <ISM330DLC_GYRO_GetOutputDataRate+0x80>)
 8011e22:	e7ea      	b.n	8011dfa <ISM330DLC_GYRO_GetOutputDataRate+0x2a>
 8011e24:	4b0b      	ldr	r3, [pc, #44]	; (8011e54 <ISM330DLC_GYRO_GetOutputDataRate+0x84>)
 8011e26:	e7e8      	b.n	8011dfa <ISM330DLC_GYRO_GetOutputDataRate+0x2a>
 8011e28:	f04f 30ff 	mov.w	r0, #4294967295
 8011e2c:	e7e6      	b.n	8011dfc <ISM330DLC_GYRO_GetOutputDataRate+0x2c>
 8011e2e:	bf00      	nop
 8011e30:	41480000 	.word	0x41480000
 8011e34:	41d00000 	.word	0x41d00000
 8011e38:	42500000 	.word	0x42500000
 8011e3c:	42d00000 	.word	0x42d00000
 8011e40:	43500000 	.word	0x43500000
 8011e44:	43d00000 	.word	0x43d00000
 8011e48:	44504000 	.word	0x44504000
 8011e4c:	44cf8000 	.word	0x44cf8000
 8011e50:	45502000 	.word	0x45502000
 8011e54:	45d02000 	.word	0x45d02000

08011e58 <ISM330DLC_GYRO_GetSensitivity>:
 8011e58:	b513      	push	{r0, r1, r4, lr}
 8011e5a:	460c      	mov	r4, r1
 8011e5c:	301c      	adds	r0, #28
 8011e5e:	f10d 0107 	add.w	r1, sp, #7
 8011e62:	f7f3 fc48 	bl	80056f6 <ism330dlc_gy_full_scale_get>
 8011e66:	b9a8      	cbnz	r0, 8011e94 <ISM330DLC_GYRO_GetSensitivity+0x3c>
 8011e68:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011e6c:	2b06      	cmp	r3, #6
 8011e6e:	d811      	bhi.n	8011e94 <ISM330DLC_GYRO_GetSensitivity+0x3c>
 8011e70:	e8df f003 	tbb	[pc, r3]
 8011e74:	100a0408 	.word	0x100a0408
 8011e78:	100c      	.short	0x100c
 8011e7a:	0e          	.byte	0x0e
 8011e7b:	00          	.byte	0x00
 8011e7c:	4b07      	ldr	r3, [pc, #28]	; (8011e9c <ISM330DLC_GYRO_GetSensitivity+0x44>)
 8011e7e:	6023      	str	r3, [r4, #0]
 8011e80:	b002      	add	sp, #8
 8011e82:	bd10      	pop	{r4, pc}
 8011e84:	4b06      	ldr	r3, [pc, #24]	; (8011ea0 <ISM330DLC_GYRO_GetSensitivity+0x48>)
 8011e86:	e7fa      	b.n	8011e7e <ISM330DLC_GYRO_GetSensitivity+0x26>
 8011e88:	4b06      	ldr	r3, [pc, #24]	; (8011ea4 <ISM330DLC_GYRO_GetSensitivity+0x4c>)
 8011e8a:	e7f8      	b.n	8011e7e <ISM330DLC_GYRO_GetSensitivity+0x26>
 8011e8c:	4b06      	ldr	r3, [pc, #24]	; (8011ea8 <ISM330DLC_GYRO_GetSensitivity+0x50>)
 8011e8e:	e7f6      	b.n	8011e7e <ISM330DLC_GYRO_GetSensitivity+0x26>
 8011e90:	4b06      	ldr	r3, [pc, #24]	; (8011eac <ISM330DLC_GYRO_GetSensitivity+0x54>)
 8011e92:	e7f4      	b.n	8011e7e <ISM330DLC_GYRO_GetSensitivity+0x26>
 8011e94:	f04f 30ff 	mov.w	r0, #4294967295
 8011e98:	e7f2      	b.n	8011e80 <ISM330DLC_GYRO_GetSensitivity+0x28>
 8011e9a:	bf00      	nop
 8011e9c:	408c0000 	.word	0x408c0000
 8011ea0:	410c0000 	.word	0x410c0000
 8011ea4:	418c0000 	.word	0x418c0000
 8011ea8:	420c0000 	.word	0x420c0000
 8011eac:	428c0000 	.word	0x428c0000

08011eb0 <ISM330DLC_GYRO_GetFullScale>:
 8011eb0:	b513      	push	{r0, r1, r4, lr}
 8011eb2:	460c      	mov	r4, r1
 8011eb4:	301c      	adds	r0, #28
 8011eb6:	f10d 0107 	add.w	r1, sp, #7
 8011eba:	f7f3 fc1c 	bl	80056f6 <ism330dlc_gy_full_scale_get>
 8011ebe:	b9c0      	cbnz	r0, 8011ef2 <ISM330DLC_GYRO_GetFullScale+0x42>
 8011ec0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011ec4:	2b06      	cmp	r3, #6
 8011ec6:	d814      	bhi.n	8011ef2 <ISM330DLC_GYRO_GetFullScale+0x42>
 8011ec8:	e8df f003 	tbb	[pc, r3]
 8011ecc:	130a0408 	.word	0x130a0408
 8011ed0:	130d      	.short	0x130d
 8011ed2:	10          	.byte	0x10
 8011ed3:	00          	.byte	0x00
 8011ed4:	237d      	movs	r3, #125	; 0x7d
 8011ed6:	6023      	str	r3, [r4, #0]
 8011ed8:	b002      	add	sp, #8
 8011eda:	bd10      	pop	{r4, pc}
 8011edc:	23fa      	movs	r3, #250	; 0xfa
 8011ede:	e7fa      	b.n	8011ed6 <ISM330DLC_GYRO_GetFullScale+0x26>
 8011ee0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8011ee4:	e7f7      	b.n	8011ed6 <ISM330DLC_GYRO_GetFullScale+0x26>
 8011ee6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8011eea:	e7f4      	b.n	8011ed6 <ISM330DLC_GYRO_GetFullScale+0x26>
 8011eec:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8011ef0:	e7f1      	b.n	8011ed6 <ISM330DLC_GYRO_GetFullScale+0x26>
 8011ef2:	f04f 30ff 	mov.w	r0, #4294967295
 8011ef6:	e7ef      	b.n	8011ed8 <ISM330DLC_GYRO_GetFullScale+0x28>

08011ef8 <ISM330DLC_GYRO_GetAxesRaw>:
 8011ef8:	b513      	push	{r0, r1, r4, lr}
 8011efa:	460c      	mov	r4, r1
 8011efc:	301c      	adds	r0, #28
 8011efe:	4669      	mov	r1, sp
 8011f00:	f7f3 fc41 	bl	8005786 <ism330dlc_angular_rate_raw_get>
 8011f04:	b950      	cbnz	r0, 8011f1c <ISM330DLC_GYRO_GetAxesRaw+0x24>
 8011f06:	f8bd 3000 	ldrh.w	r3, [sp]
 8011f0a:	8023      	strh	r3, [r4, #0]
 8011f0c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8011f10:	8063      	strh	r3, [r4, #2]
 8011f12:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8011f16:	80a3      	strh	r3, [r4, #4]
 8011f18:	b002      	add	sp, #8
 8011f1a:	bd10      	pop	{r4, pc}
 8011f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8011f20:	e7fa      	b.n	8011f18 <ISM330DLC_GYRO_GetAxesRaw+0x20>

08011f22 <ISM330DLC_GYRO_GetAxes>:
 8011f22:	b530      	push	{r4, r5, lr}
 8011f24:	b085      	sub	sp, #20
 8011f26:	4605      	mov	r5, r0
 8011f28:	460c      	mov	r4, r1
 8011f2a:	301c      	adds	r0, #28
 8011f2c:	a902      	add	r1, sp, #8
 8011f2e:	f7f3 fc2a 	bl	8005786 <ism330dlc_angular_rate_raw_get>
 8011f32:	b118      	cbz	r0, 8011f3c <ISM330DLC_GYRO_GetAxes+0x1a>
 8011f34:	f04f 30ff 	mov.w	r0, #4294967295
 8011f38:	b005      	add	sp, #20
 8011f3a:	bd30      	pop	{r4, r5, pc}
 8011f3c:	a901      	add	r1, sp, #4
 8011f3e:	4628      	mov	r0, r5
 8011f40:	f7ff ff8a 	bl	8011e58 <ISM330DLC_GYRO_GetSensitivity>
 8011f44:	2800      	cmp	r0, #0
 8011f46:	d1f5      	bne.n	8011f34 <ISM330DLC_GYRO_GetAxes+0x12>
 8011f48:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8011f4c:	eddd 6a01 	vldr	s13, [sp, #4]
 8011f50:	ee07 3a10 	vmov	s14, r3
 8011f54:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011f58:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8011f5c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8011f60:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8011f64:	ed84 7a00 	vstr	s14, [r4]
 8011f68:	ee07 3a10 	vmov	s14, r3
 8011f6c:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8011f70:	ee07 3a90 	vmov	s15, r3
 8011f74:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011f78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011f7c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8011f80:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011f84:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8011f88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011f8c:	ed84 7a01 	vstr	s14, [r4, #4]
 8011f90:	edc4 7a02 	vstr	s15, [r4, #8]
 8011f94:	e7d0      	b.n	8011f38 <ISM330DLC_GYRO_GetAxes+0x16>
	...

08011f98 <ISM330DLC_ACC_SetOutputDataRate>:
 8011f98:	b508      	push	{r3, lr}
 8011f9a:	f890 1029 	ldrb.w	r1, [r0, #41]	; 0x29
 8011f9e:	eef2 7a09 	vmov.f32	s15, #41	; 0x41480000  12.5
 8011fa2:	2901      	cmp	r1, #1
 8011fa4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8011fa8:	d152      	bne.n	8012050 <ISM330DLC_ACC_SetOutputDataRate+0xb8>
 8011faa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011fae:	d939      	bls.n	8012024 <ISM330DLC_ACC_SetOutputDataRate+0x8c>
 8011fb0:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 8011fb4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8011fb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011fbc:	d93a      	bls.n	8012034 <ISM330DLC_ACC_SetOutputDataRate+0x9c>
 8011fbe:	eddf 7a4d 	vldr	s15, [pc, #308]	; 80120f4 <ISM330DLC_ACC_SetOutputDataRate+0x15c>
 8011fc2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8011fc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011fca:	d935      	bls.n	8012038 <ISM330DLC_ACC_SetOutputDataRate+0xa0>
 8011fcc:	eddf 7a4a 	vldr	s15, [pc, #296]	; 80120f8 <ISM330DLC_ACC_SetOutputDataRate+0x160>
 8011fd0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8011fd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011fd8:	d930      	bls.n	801203c <ISM330DLC_ACC_SetOutputDataRate+0xa4>
 8011fda:	eddf 7a48 	vldr	s15, [pc, #288]	; 80120fc <ISM330DLC_ACC_SetOutputDataRate+0x164>
 8011fde:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8011fe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011fe6:	d92b      	bls.n	8012040 <ISM330DLC_ACC_SetOutputDataRate+0xa8>
 8011fe8:	eddf 7a45 	vldr	s15, [pc, #276]	; 8012100 <ISM330DLC_ACC_SetOutputDataRate+0x168>
 8011fec:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8011ff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ff4:	d926      	bls.n	8012044 <ISM330DLC_ACC_SetOutputDataRate+0xac>
 8011ff6:	eddf 7a43 	vldr	s15, [pc, #268]	; 8012104 <ISM330DLC_ACC_SetOutputDataRate+0x16c>
 8011ffa:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8011ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012002:	d921      	bls.n	8012048 <ISM330DLC_ACC_SetOutputDataRate+0xb0>
 8012004:	eddf 7a40 	vldr	s15, [pc, #256]	; 8012108 <ISM330DLC_ACC_SetOutputDataRate+0x170>
 8012008:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801200c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012010:	d91c      	bls.n	801204c <ISM330DLC_ACC_SetOutputDataRate+0xb4>
 8012012:	eddf 7a3e 	vldr	s15, [pc, #248]	; 801210c <ISM330DLC_ACC_SetOutputDataRate+0x174>
 8012016:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801201a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801201e:	bf94      	ite	ls
 8012020:	2109      	movls	r1, #9
 8012022:	210a      	movhi	r1, #10
 8012024:	301c      	adds	r0, #28
 8012026:	f7f3 fb2c 	bl	8005682 <ism330dlc_xl_data_rate_set>
 801202a:	3000      	adds	r0, #0
 801202c:	bf18      	it	ne
 801202e:	2001      	movne	r0, #1
 8012030:	4240      	negs	r0, r0
 8012032:	bd08      	pop	{r3, pc}
 8012034:	2102      	movs	r1, #2
 8012036:	e7f5      	b.n	8012024 <ISM330DLC_ACC_SetOutputDataRate+0x8c>
 8012038:	2103      	movs	r1, #3
 801203a:	e7f3      	b.n	8012024 <ISM330DLC_ACC_SetOutputDataRate+0x8c>
 801203c:	2104      	movs	r1, #4
 801203e:	e7f1      	b.n	8012024 <ISM330DLC_ACC_SetOutputDataRate+0x8c>
 8012040:	2105      	movs	r1, #5
 8012042:	e7ef      	b.n	8012024 <ISM330DLC_ACC_SetOutputDataRate+0x8c>
 8012044:	2106      	movs	r1, #6
 8012046:	e7ed      	b.n	8012024 <ISM330DLC_ACC_SetOutputDataRate+0x8c>
 8012048:	2107      	movs	r1, #7
 801204a:	e7eb      	b.n	8012024 <ISM330DLC_ACC_SetOutputDataRate+0x8c>
 801204c:	2108      	movs	r1, #8
 801204e:	e7e9      	b.n	8012024 <ISM330DLC_ACC_SetOutputDataRate+0x8c>
 8012050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012054:	d93d      	bls.n	80120d2 <ISM330DLC_ACC_SetOutputDataRate+0x13a>
 8012056:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 801205a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801205e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012062:	d938      	bls.n	80120d6 <ISM330DLC_ACC_SetOutputDataRate+0x13e>
 8012064:	eddf 7a23 	vldr	s15, [pc, #140]	; 80120f4 <ISM330DLC_ACC_SetOutputDataRate+0x15c>
 8012068:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801206c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012070:	d933      	bls.n	80120da <ISM330DLC_ACC_SetOutputDataRate+0x142>
 8012072:	eddf 7a21 	vldr	s15, [pc, #132]	; 80120f8 <ISM330DLC_ACC_SetOutputDataRate+0x160>
 8012076:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801207a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801207e:	d92e      	bls.n	80120de <ISM330DLC_ACC_SetOutputDataRate+0x146>
 8012080:	eddf 7a1e 	vldr	s15, [pc, #120]	; 80120fc <ISM330DLC_ACC_SetOutputDataRate+0x164>
 8012084:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8012088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801208c:	d929      	bls.n	80120e2 <ISM330DLC_ACC_SetOutputDataRate+0x14a>
 801208e:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8012100 <ISM330DLC_ACC_SetOutputDataRate+0x168>
 8012092:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8012096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801209a:	d924      	bls.n	80120e6 <ISM330DLC_ACC_SetOutputDataRate+0x14e>
 801209c:	eddf 7a19 	vldr	s15, [pc, #100]	; 8012104 <ISM330DLC_ACC_SetOutputDataRate+0x16c>
 80120a0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80120a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120a8:	d91f      	bls.n	80120ea <ISM330DLC_ACC_SetOutputDataRate+0x152>
 80120aa:	eddf 7a17 	vldr	s15, [pc, #92]	; 8012108 <ISM330DLC_ACC_SetOutputDataRate+0x170>
 80120ae:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80120b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120b6:	d91a      	bls.n	80120ee <ISM330DLC_ACC_SetOutputDataRate+0x156>
 80120b8:	eddf 7a14 	vldr	s15, [pc, #80]	; 801210c <ISM330DLC_ACC_SetOutputDataRate+0x174>
 80120bc:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80120c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120c4:	bf94      	ite	ls
 80120c6:	2309      	movls	r3, #9
 80120c8:	230a      	movhi	r3, #10
 80120ca:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
 80120ce:	2000      	movs	r0, #0
 80120d0:	e7af      	b.n	8012032 <ISM330DLC_ACC_SetOutputDataRate+0x9a>
 80120d2:	2301      	movs	r3, #1
 80120d4:	e7f9      	b.n	80120ca <ISM330DLC_ACC_SetOutputDataRate+0x132>
 80120d6:	2302      	movs	r3, #2
 80120d8:	e7f7      	b.n	80120ca <ISM330DLC_ACC_SetOutputDataRate+0x132>
 80120da:	2303      	movs	r3, #3
 80120dc:	e7f5      	b.n	80120ca <ISM330DLC_ACC_SetOutputDataRate+0x132>
 80120de:	2304      	movs	r3, #4
 80120e0:	e7f3      	b.n	80120ca <ISM330DLC_ACC_SetOutputDataRate+0x132>
 80120e2:	2305      	movs	r3, #5
 80120e4:	e7f1      	b.n	80120ca <ISM330DLC_ACC_SetOutputDataRate+0x132>
 80120e6:	2306      	movs	r3, #6
 80120e8:	e7ef      	b.n	80120ca <ISM330DLC_ACC_SetOutputDataRate+0x132>
 80120ea:	2307      	movs	r3, #7
 80120ec:	e7ed      	b.n	80120ca <ISM330DLC_ACC_SetOutputDataRate+0x132>
 80120ee:	2308      	movs	r3, #8
 80120f0:	e7eb      	b.n	80120ca <ISM330DLC_ACC_SetOutputDataRate+0x132>
 80120f2:	bf00      	nop
 80120f4:	42500000 	.word	0x42500000
 80120f8:	42d00000 	.word	0x42d00000
 80120fc:	43500000 	.word	0x43500000
 8012100:	43d00000 	.word	0x43d00000
 8012104:	44504000 	.word	0x44504000
 8012108:	44cf8000 	.word	0x44cf8000
 801210c:	45502000 	.word	0x45502000

08012110 <ISM330DLC_GYRO_SetOutputDataRate>:
 8012110:	b508      	push	{r3, lr}
 8012112:	f890 102a 	ldrb.w	r1, [r0, #42]	; 0x2a
 8012116:	eef2 7a09 	vmov.f32	s15, #41	; 0x41480000  12.5
 801211a:	2901      	cmp	r1, #1
 801211c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8012120:	d152      	bne.n	80121c8 <ISM330DLC_GYRO_SetOutputDataRate+0xb8>
 8012122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012126:	d939      	bls.n	801219c <ISM330DLC_GYRO_SetOutputDataRate+0x8c>
 8012128:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 801212c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8012130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012134:	d93a      	bls.n	80121ac <ISM330DLC_GYRO_SetOutputDataRate+0x9c>
 8012136:	eddf 7a4d 	vldr	s15, [pc, #308]	; 801226c <ISM330DLC_GYRO_SetOutputDataRate+0x15c>
 801213a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801213e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012142:	d935      	bls.n	80121b0 <ISM330DLC_GYRO_SetOutputDataRate+0xa0>
 8012144:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8012270 <ISM330DLC_GYRO_SetOutputDataRate+0x160>
 8012148:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801214c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012150:	d930      	bls.n	80121b4 <ISM330DLC_GYRO_SetOutputDataRate+0xa4>
 8012152:	eddf 7a48 	vldr	s15, [pc, #288]	; 8012274 <ISM330DLC_GYRO_SetOutputDataRate+0x164>
 8012156:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801215a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801215e:	d92b      	bls.n	80121b8 <ISM330DLC_GYRO_SetOutputDataRate+0xa8>
 8012160:	eddf 7a45 	vldr	s15, [pc, #276]	; 8012278 <ISM330DLC_GYRO_SetOutputDataRate+0x168>
 8012164:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8012168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801216c:	d926      	bls.n	80121bc <ISM330DLC_GYRO_SetOutputDataRate+0xac>
 801216e:	eddf 7a43 	vldr	s15, [pc, #268]	; 801227c <ISM330DLC_GYRO_SetOutputDataRate+0x16c>
 8012172:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8012176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801217a:	d921      	bls.n	80121c0 <ISM330DLC_GYRO_SetOutputDataRate+0xb0>
 801217c:	eddf 7a40 	vldr	s15, [pc, #256]	; 8012280 <ISM330DLC_GYRO_SetOutputDataRate+0x170>
 8012180:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8012184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012188:	d91c      	bls.n	80121c4 <ISM330DLC_GYRO_SetOutputDataRate+0xb4>
 801218a:	eddf 7a3e 	vldr	s15, [pc, #248]	; 8012284 <ISM330DLC_GYRO_SetOutputDataRate+0x174>
 801218e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8012192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012196:	bf94      	ite	ls
 8012198:	2109      	movls	r1, #9
 801219a:	210a      	movhi	r1, #10
 801219c:	301c      	adds	r0, #28
 801219e:	f7f3 fab8 	bl	8005712 <ism330dlc_gy_data_rate_set>
 80121a2:	3000      	adds	r0, #0
 80121a4:	bf18      	it	ne
 80121a6:	2001      	movne	r0, #1
 80121a8:	4240      	negs	r0, r0
 80121aa:	bd08      	pop	{r3, pc}
 80121ac:	2102      	movs	r1, #2
 80121ae:	e7f5      	b.n	801219c <ISM330DLC_GYRO_SetOutputDataRate+0x8c>
 80121b0:	2103      	movs	r1, #3
 80121b2:	e7f3      	b.n	801219c <ISM330DLC_GYRO_SetOutputDataRate+0x8c>
 80121b4:	2104      	movs	r1, #4
 80121b6:	e7f1      	b.n	801219c <ISM330DLC_GYRO_SetOutputDataRate+0x8c>
 80121b8:	2105      	movs	r1, #5
 80121ba:	e7ef      	b.n	801219c <ISM330DLC_GYRO_SetOutputDataRate+0x8c>
 80121bc:	2106      	movs	r1, #6
 80121be:	e7ed      	b.n	801219c <ISM330DLC_GYRO_SetOutputDataRate+0x8c>
 80121c0:	2107      	movs	r1, #7
 80121c2:	e7eb      	b.n	801219c <ISM330DLC_GYRO_SetOutputDataRate+0x8c>
 80121c4:	2108      	movs	r1, #8
 80121c6:	e7e9      	b.n	801219c <ISM330DLC_GYRO_SetOutputDataRate+0x8c>
 80121c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121cc:	d93d      	bls.n	801224a <ISM330DLC_GYRO_SetOutputDataRate+0x13a>
 80121ce:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 80121d2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80121d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121da:	d938      	bls.n	801224e <ISM330DLC_GYRO_SetOutputDataRate+0x13e>
 80121dc:	eddf 7a23 	vldr	s15, [pc, #140]	; 801226c <ISM330DLC_GYRO_SetOutputDataRate+0x15c>
 80121e0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80121e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121e8:	d933      	bls.n	8012252 <ISM330DLC_GYRO_SetOutputDataRate+0x142>
 80121ea:	eddf 7a21 	vldr	s15, [pc, #132]	; 8012270 <ISM330DLC_GYRO_SetOutputDataRate+0x160>
 80121ee:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80121f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121f6:	d92e      	bls.n	8012256 <ISM330DLC_GYRO_SetOutputDataRate+0x146>
 80121f8:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8012274 <ISM330DLC_GYRO_SetOutputDataRate+0x164>
 80121fc:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8012200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012204:	d929      	bls.n	801225a <ISM330DLC_GYRO_SetOutputDataRate+0x14a>
 8012206:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8012278 <ISM330DLC_GYRO_SetOutputDataRate+0x168>
 801220a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801220e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012212:	d924      	bls.n	801225e <ISM330DLC_GYRO_SetOutputDataRate+0x14e>
 8012214:	eddf 7a19 	vldr	s15, [pc, #100]	; 801227c <ISM330DLC_GYRO_SetOutputDataRate+0x16c>
 8012218:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801221c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012220:	d91f      	bls.n	8012262 <ISM330DLC_GYRO_SetOutputDataRate+0x152>
 8012222:	eddf 7a17 	vldr	s15, [pc, #92]	; 8012280 <ISM330DLC_GYRO_SetOutputDataRate+0x170>
 8012226:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801222a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801222e:	d91a      	bls.n	8012266 <ISM330DLC_GYRO_SetOutputDataRate+0x156>
 8012230:	eddf 7a14 	vldr	s15, [pc, #80]	; 8012284 <ISM330DLC_GYRO_SetOutputDataRate+0x174>
 8012234:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8012238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801223c:	bf94      	ite	ls
 801223e:	2309      	movls	r3, #9
 8012240:	230a      	movhi	r3, #10
 8012242:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 8012246:	2000      	movs	r0, #0
 8012248:	e7af      	b.n	80121aa <ISM330DLC_GYRO_SetOutputDataRate+0x9a>
 801224a:	2301      	movs	r3, #1
 801224c:	e7f9      	b.n	8012242 <ISM330DLC_GYRO_SetOutputDataRate+0x132>
 801224e:	2302      	movs	r3, #2
 8012250:	e7f7      	b.n	8012242 <ISM330DLC_GYRO_SetOutputDataRate+0x132>
 8012252:	2303      	movs	r3, #3
 8012254:	e7f5      	b.n	8012242 <ISM330DLC_GYRO_SetOutputDataRate+0x132>
 8012256:	2304      	movs	r3, #4
 8012258:	e7f3      	b.n	8012242 <ISM330DLC_GYRO_SetOutputDataRate+0x132>
 801225a:	2305      	movs	r3, #5
 801225c:	e7f1      	b.n	8012242 <ISM330DLC_GYRO_SetOutputDataRate+0x132>
 801225e:	2306      	movs	r3, #6
 8012260:	e7ef      	b.n	8012242 <ISM330DLC_GYRO_SetOutputDataRate+0x132>
 8012262:	2307      	movs	r3, #7
 8012264:	e7ed      	b.n	8012242 <ISM330DLC_GYRO_SetOutputDataRate+0x132>
 8012266:	2308      	movs	r3, #8
 8012268:	e7eb      	b.n	8012242 <ISM330DLC_GYRO_SetOutputDataRate+0x132>
 801226a:	bf00      	nop
 801226c:	42500000 	.word	0x42500000
 8012270:	42d00000 	.word	0x42d00000
 8012274:	43500000 	.word	0x43500000
 8012278:	43d00000 	.word	0x43d00000
 801227c:	44504000 	.word	0x44504000
 8012280:	44cf8000 	.word	0x44cf8000
 8012284:	45502000 	.word	0x45502000

08012288 <ISM330DLC_ACC_Enable>:
 8012288:	b510      	push	{r4, lr}
 801228a:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 801228e:	2b01      	cmp	r3, #1
 8012290:	4604      	mov	r4, r0
 8012292:	d009      	beq.n	80122a8 <ISM330DLC_ACC_Enable+0x20>
 8012294:	f890 102b 	ldrb.w	r1, [r0, #43]	; 0x2b
 8012298:	301c      	adds	r0, #28
 801229a:	f7f3 f9f2 	bl	8005682 <ism330dlc_xl_data_rate_set>
 801229e:	b928      	cbnz	r0, 80122ac <ISM330DLC_ACC_Enable+0x24>
 80122a0:	2301      	movs	r3, #1
 80122a2:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
 80122a6:	bd10      	pop	{r4, pc}
 80122a8:	2000      	movs	r0, #0
 80122aa:	e7fc      	b.n	80122a6 <ISM330DLC_ACC_Enable+0x1e>
 80122ac:	f04f 30ff 	mov.w	r0, #4294967295
 80122b0:	e7f9      	b.n	80122a6 <ISM330DLC_ACC_Enable+0x1e>

080122b2 <ISM330DLC_GYRO_Enable>:
 80122b2:	b510      	push	{r4, lr}
 80122b4:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 80122b8:	2b01      	cmp	r3, #1
 80122ba:	4604      	mov	r4, r0
 80122bc:	d009      	beq.n	80122d2 <ISM330DLC_GYRO_Enable+0x20>
 80122be:	f890 102c 	ldrb.w	r1, [r0, #44]	; 0x2c
 80122c2:	301c      	adds	r0, #28
 80122c4:	f7f3 fa25 	bl	8005712 <ism330dlc_gy_data_rate_set>
 80122c8:	b928      	cbnz	r0, 80122d6 <ISM330DLC_GYRO_Enable+0x24>
 80122ca:	2301      	movs	r3, #1
 80122cc:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
 80122d0:	bd10      	pop	{r4, pc}
 80122d2:	2000      	movs	r0, #0
 80122d4:	e7fc      	b.n	80122d0 <ISM330DLC_GYRO_Enable+0x1e>
 80122d6:	f04f 30ff 	mov.w	r0, #4294967295
 80122da:	e7f9      	b.n	80122d0 <ISM330DLC_GYRO_Enable+0x1e>

080122dc <ISM330DLC_ACC_Disable>:
 80122dc:	b538      	push	{r3, r4, r5, lr}
 80122de:	4604      	mov	r4, r0
 80122e0:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
 80122e4:	b150      	cbz	r0, 80122fc <ISM330DLC_ACC_Disable+0x20>
 80122e6:	f104 051c 	add.w	r5, r4, #28
 80122ea:	f104 012b 	add.w	r1, r4, #43	; 0x2b
 80122ee:	4628      	mov	r0, r5
 80122f0:	f7f3 f9dd 	bl	80056ae <ism330dlc_xl_data_rate_get>
 80122f4:	4601      	mov	r1, r0
 80122f6:	b110      	cbz	r0, 80122fe <ISM330DLC_ACC_Disable+0x22>
 80122f8:	f04f 30ff 	mov.w	r0, #4294967295
 80122fc:	bd38      	pop	{r3, r4, r5, pc}
 80122fe:	4628      	mov	r0, r5
 8012300:	f7f3 f9bf 	bl	8005682 <ism330dlc_xl_data_rate_set>
 8012304:	2800      	cmp	r0, #0
 8012306:	d1f7      	bne.n	80122f8 <ISM330DLC_ACC_Disable+0x1c>
 8012308:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
 801230c:	e7f6      	b.n	80122fc <ISM330DLC_ACC_Disable+0x20>

0801230e <ISM330DLC_GYRO_Disable>:
 801230e:	b538      	push	{r3, r4, r5, lr}
 8012310:	4604      	mov	r4, r0
 8012312:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
 8012316:	b150      	cbz	r0, 801232e <ISM330DLC_GYRO_Disable+0x20>
 8012318:	f104 051c 	add.w	r5, r4, #28
 801231c:	f104 012c 	add.w	r1, r4, #44	; 0x2c
 8012320:	4628      	mov	r0, r5
 8012322:	f7f3 fa0c 	bl	800573e <ism330dlc_gy_data_rate_get>
 8012326:	4601      	mov	r1, r0
 8012328:	b110      	cbz	r0, 8012330 <ISM330DLC_GYRO_Disable+0x22>
 801232a:	f04f 30ff 	mov.w	r0, #4294967295
 801232e:	bd38      	pop	{r3, r4, r5, pc}
 8012330:	4628      	mov	r0, r5
 8012332:	f7f3 f9ee 	bl	8005712 <ism330dlc_gy_data_rate_set>
 8012336:	2800      	cmp	r0, #0
 8012338:	d1f7      	bne.n	801232a <ISM330DLC_GYRO_Disable+0x1c>
 801233a:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
 801233e:	e7f6      	b.n	801232e <ISM330DLC_GYRO_Disable+0x20>

08012340 <ISM330DLC_DeInit>:
 8012340:	b510      	push	{r4, lr}
 8012342:	4604      	mov	r4, r0
 8012344:	f7ff ffca 	bl	80122dc <ISM330DLC_ACC_Disable>
 8012348:	b110      	cbz	r0, 8012350 <ISM330DLC_DeInit+0x10>
 801234a:	f04f 30ff 	mov.w	r0, #4294967295
 801234e:	bd10      	pop	{r4, pc}
 8012350:	4620      	mov	r0, r4
 8012352:	f7ff ffdc 	bl	801230e <ISM330DLC_GYRO_Disable>
 8012356:	2800      	cmp	r0, #0
 8012358:	d1f7      	bne.n	801234a <ISM330DLC_DeInit+0xa>
 801235a:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
 801235e:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
 8012362:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
 8012366:	e7f2      	b.n	801234e <ISM330DLC_DeInit+0xe>

08012368 <ISM330DLC_Write_Reg>:
 8012368:	b513      	push	{r0, r1, r4, lr}
 801236a:	ac02      	add	r4, sp, #8
 801236c:	2301      	movs	r3, #1
 801236e:	f804 2d01 	strb.w	r2, [r4, #-1]!
 8012372:	301c      	adds	r0, #28
 8012374:	4622      	mov	r2, r4
 8012376:	f7f3 f959 	bl	800562c <ism330dlc_write_reg>
 801237a:	3000      	adds	r0, #0
 801237c:	bf18      	it	ne
 801237e:	2001      	movne	r0, #1
 8012380:	4240      	negs	r0, r0
 8012382:	b002      	add	sp, #8
 8012384:	bd10      	pop	{r4, pc}
	...

08012388 <ISM330DLC_RegisterBusIO>:
 8012388:	b510      	push	{r4, lr}
 801238a:	4604      	mov	r4, r0
 801238c:	b910      	cbnz	r0, 8012394 <ISM330DLC_RegisterBusIO+0xc>
 801238e:	f04f 30ff 	mov.w	r0, #4294967295
 8012392:	bd10      	pop	{r4, pc}
 8012394:	684a      	ldr	r2, [r1, #4]
 8012396:	680b      	ldr	r3, [r1, #0]
 8012398:	6042      	str	r2, [r0, #4]
 801239a:	688a      	ldr	r2, [r1, #8]
 801239c:	6003      	str	r3, [r0, #0]
 801239e:	6082      	str	r2, [r0, #8]
 80123a0:	7b0a      	ldrb	r2, [r1, #12]
 80123a2:	7302      	strb	r2, [r0, #12]
 80123a4:	690a      	ldr	r2, [r1, #16]
 80123a6:	6102      	str	r2, [r0, #16]
 80123a8:	694a      	ldr	r2, [r1, #20]
 80123aa:	6142      	str	r2, [r0, #20]
 80123ac:	698a      	ldr	r2, [r1, #24]
 80123ae:	6182      	str	r2, [r0, #24]
 80123b0:	4a0d      	ldr	r2, [pc, #52]	; (80123e8 <ISM330DLC_RegisterBusIO+0x60>)
 80123b2:	6202      	str	r2, [r0, #32]
 80123b4:	4a0d      	ldr	r2, [pc, #52]	; (80123ec <ISM330DLC_RegisterBusIO+0x64>)
 80123b6:	61c2      	str	r2, [r0, #28]
 80123b8:	6260      	str	r0, [r4, #36]	; 0x24
 80123ba:	2b00      	cmp	r3, #0
 80123bc:	d0e7      	beq.n	801238e <ISM330DLC_RegisterBusIO+0x6>
 80123be:	4798      	blx	r3
 80123c0:	2800      	cmp	r0, #0
 80123c2:	d1e4      	bne.n	801238e <ISM330DLC_RegisterBusIO+0x6>
 80123c4:	68a3      	ldr	r3, [r4, #8]
 80123c6:	2b02      	cmp	r3, #2
 80123c8:	d1e3      	bne.n	8012392 <ISM330DLC_RegisterBusIO+0xa>
 80123ca:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80123ce:	2b00      	cmp	r3, #0
 80123d0:	d1df      	bne.n	8012392 <ISM330DLC_RegisterBusIO+0xa>
 80123d2:	220c      	movs	r2, #12
 80123d4:	2112      	movs	r1, #18
 80123d6:	4620      	mov	r0, r4
 80123d8:	f7ff ffc6 	bl	8012368 <ISM330DLC_Write_Reg>
 80123dc:	3000      	adds	r0, #0
 80123de:	bf18      	it	ne
 80123e0:	2001      	movne	r0, #1
 80123e2:	4240      	negs	r0, r0
 80123e4:	e7d5      	b.n	8012392 <ISM330DLC_RegisterBusIO+0xa>
 80123e6:	bf00      	nop
 80123e8:	08011b0d 	.word	0x08011b0d
 80123ec:	08011b1b 	.word	0x08011b1b

080123f0 <ISM330DLC_Set_Drdy_Mode>:
 80123f0:	b508      	push	{r3, lr}
 80123f2:	301c      	adds	r0, #28
 80123f4:	f7f3 f9d1 	bl	800579a <ism330dlc_data_ready_mode_set>
 80123f8:	3000      	adds	r0, #0
 80123fa:	bf18      	it	ne
 80123fc:	2001      	movne	r0, #1
 80123fe:	4240      	negs	r0, r0
 8012400:	bd08      	pop	{r3, pc}

08012402 <ISM330DLC_ACC_Enable_HP_Filter>:
 8012402:	b508      	push	{r3, lr}
 8012404:	301c      	adds	r0, #28
 8012406:	f7f3 fa0f 	bl	8005828 <ism330dlc_xl_hp_bandwidth_set>
 801240a:	3000      	adds	r0, #0
 801240c:	bf18      	it	ne
 801240e:	2001      	movne	r0, #1
 8012410:	4240      	negs	r0, r0
 8012412:	bd08      	pop	{r3, pc}

08012414 <ISM330DLC_FIFO_Set_ODR_Value>:
 8012414:	eef2 7a09 	vmov.f32	s15, #41	; 0x41480000  12.5
 8012418:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801241c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012420:	b508      	push	{r3, lr}
 8012422:	d941      	bls.n	80124a8 <ISM330DLC_FIFO_Set_ODR_Value+0x94>
 8012424:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 8012428:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801242c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012430:	d93c      	bls.n	80124ac <ISM330DLC_FIFO_Set_ODR_Value+0x98>
 8012432:	eddf 7a25 	vldr	s15, [pc, #148]	; 80124c8 <ISM330DLC_FIFO_Set_ODR_Value+0xb4>
 8012436:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801243a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801243e:	d937      	bls.n	80124b0 <ISM330DLC_FIFO_Set_ODR_Value+0x9c>
 8012440:	eddf 7a22 	vldr	s15, [pc, #136]	; 80124cc <ISM330DLC_FIFO_Set_ODR_Value+0xb8>
 8012444:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8012448:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801244c:	d932      	bls.n	80124b4 <ISM330DLC_FIFO_Set_ODR_Value+0xa0>
 801244e:	eddf 7a20 	vldr	s15, [pc, #128]	; 80124d0 <ISM330DLC_FIFO_Set_ODR_Value+0xbc>
 8012452:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8012456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801245a:	d92d      	bls.n	80124b8 <ISM330DLC_FIFO_Set_ODR_Value+0xa4>
 801245c:	eddf 7a1d 	vldr	s15, [pc, #116]	; 80124d4 <ISM330DLC_FIFO_Set_ODR_Value+0xc0>
 8012460:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8012464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012468:	d928      	bls.n	80124bc <ISM330DLC_FIFO_Set_ODR_Value+0xa8>
 801246a:	eddf 7a1b 	vldr	s15, [pc, #108]	; 80124d8 <ISM330DLC_FIFO_Set_ODR_Value+0xc4>
 801246e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8012472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012476:	d923      	bls.n	80124c0 <ISM330DLC_FIFO_Set_ODR_Value+0xac>
 8012478:	eddf 7a18 	vldr	s15, [pc, #96]	; 80124dc <ISM330DLC_FIFO_Set_ODR_Value+0xc8>
 801247c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8012480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012484:	d91e      	bls.n	80124c4 <ISM330DLC_FIFO_Set_ODR_Value+0xb0>
 8012486:	eddf 7a16 	vldr	s15, [pc, #88]	; 80124e0 <ISM330DLC_FIFO_Set_ODR_Value+0xcc>
 801248a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801248e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012492:	bf94      	ite	ls
 8012494:	2109      	movls	r1, #9
 8012496:	210a      	movhi	r1, #10
 8012498:	301c      	adds	r0, #28
 801249a:	f7f3 fa52 	bl	8005942 <ism330dlc_fifo_data_rate_set>
 801249e:	3000      	adds	r0, #0
 80124a0:	bf18      	it	ne
 80124a2:	2001      	movne	r0, #1
 80124a4:	4240      	negs	r0, r0
 80124a6:	bd08      	pop	{r3, pc}
 80124a8:	2101      	movs	r1, #1
 80124aa:	e7f5      	b.n	8012498 <ISM330DLC_FIFO_Set_ODR_Value+0x84>
 80124ac:	2102      	movs	r1, #2
 80124ae:	e7f3      	b.n	8012498 <ISM330DLC_FIFO_Set_ODR_Value+0x84>
 80124b0:	2103      	movs	r1, #3
 80124b2:	e7f1      	b.n	8012498 <ISM330DLC_FIFO_Set_ODR_Value+0x84>
 80124b4:	2104      	movs	r1, #4
 80124b6:	e7ef      	b.n	8012498 <ISM330DLC_FIFO_Set_ODR_Value+0x84>
 80124b8:	2105      	movs	r1, #5
 80124ba:	e7ed      	b.n	8012498 <ISM330DLC_FIFO_Set_ODR_Value+0x84>
 80124bc:	2106      	movs	r1, #6
 80124be:	e7eb      	b.n	8012498 <ISM330DLC_FIFO_Set_ODR_Value+0x84>
 80124c0:	2107      	movs	r1, #7
 80124c2:	e7e9      	b.n	8012498 <ISM330DLC_FIFO_Set_ODR_Value+0x84>
 80124c4:	2108      	movs	r1, #8
 80124c6:	e7e7      	b.n	8012498 <ISM330DLC_FIFO_Set_ODR_Value+0x84>
 80124c8:	42500000 	.word	0x42500000
 80124cc:	42d00000 	.word	0x42d00000
 80124d0:	43500000 	.word	0x43500000
 80124d4:	43d00000 	.word	0x43d00000
 80124d8:	44504000 	.word	0x44504000
 80124dc:	44cf8000 	.word	0x44cf8000
 80124e0:	45502000 	.word	0x45502000

080124e4 <ISM330DLC_FIFO_Set_INT2_FIFO_Full>:
 80124e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80124e6:	f100 041c 	add.w	r4, r0, #28
 80124ea:	460d      	mov	r5, r1
 80124ec:	2301      	movs	r3, #1
 80124ee:	aa01      	add	r2, sp, #4
 80124f0:	210e      	movs	r1, #14
 80124f2:	4620      	mov	r0, r4
 80124f4:	f7f3 f893 	bl	800561e <ism330dlc_read_reg>
 80124f8:	b988      	cbnz	r0, 801251e <ISM330DLC_FIFO_Set_INT2_FIFO_Full+0x3a>
 80124fa:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80124fe:	f365 1345 	bfi	r3, r5, #5, #1
 8012502:	f88d 3004 	strb.w	r3, [sp, #4]
 8012506:	aa01      	add	r2, sp, #4
 8012508:	2301      	movs	r3, #1
 801250a:	210e      	movs	r1, #14
 801250c:	4620      	mov	r0, r4
 801250e:	f7f3 f88d 	bl	800562c <ism330dlc_write_reg>
 8012512:	3000      	adds	r0, #0
 8012514:	bf18      	it	ne
 8012516:	2001      	movne	r0, #1
 8012518:	4240      	negs	r0, r0
 801251a:	b003      	add	sp, #12
 801251c:	bd30      	pop	{r4, r5, pc}
 801251e:	f04f 30ff 	mov.w	r0, #4294967295
 8012522:	e7fa      	b.n	801251a <ISM330DLC_FIFO_Set_INT2_FIFO_Full+0x36>

08012524 <ISM330DLC_FIFO_Set_Watermark_Level>:
 8012524:	b508      	push	{r3, lr}
 8012526:	301c      	adds	r0, #28
 8012528:	f7f3 f999 	bl	800585e <ism330dlc_fifo_watermark_set>
 801252c:	3000      	adds	r0, #0
 801252e:	bf18      	it	ne
 8012530:	2001      	movne	r0, #1
 8012532:	4240      	negs	r0, r0
 8012534:	bd08      	pop	{r3, pc}

08012536 <ISM330DLC_FIFO_Set_Stop_On_Fth>:
 8012536:	b508      	push	{r3, lr}
 8012538:	301c      	adds	r0, #28
 801253a:	f7f3 f9d6 	bl	80058ea <ism330dlc_fifo_stop_on_wtm_set>
 801253e:	3000      	adds	r0, #0
 8012540:	bf18      	it	ne
 8012542:	2001      	movne	r0, #1
 8012544:	4240      	negs	r0, r0
 8012546:	bd08      	pop	{r3, pc}

08012548 <ISM330DLC_FIFO_Set_Mode>:
 8012548:	2906      	cmp	r1, #6
 801254a:	b508      	push	{r3, lr}
 801254c:	d80c      	bhi.n	8012568 <ISM330DLC_FIFO_Set_Mode+0x20>
 801254e:	2301      	movs	r3, #1
 8012550:	408b      	lsls	r3, r1
 8012552:	f013 0f5b 	tst.w	r3, #91	; 0x5b
 8012556:	d007      	beq.n	8012568 <ISM330DLC_FIFO_Set_Mode+0x20>
 8012558:	301c      	adds	r0, #28
 801255a:	f7f3 f9dc 	bl	8005916 <ism330dlc_fifo_mode_set>
 801255e:	3000      	adds	r0, #0
 8012560:	bf18      	it	ne
 8012562:	2001      	movne	r0, #1
 8012564:	4240      	negs	r0, r0
 8012566:	bd08      	pop	{r3, pc}
 8012568:	f04f 30ff 	mov.w	r0, #4294967295
 801256c:	e7fb      	b.n	8012566 <ISM330DLC_FIFO_Set_Mode+0x1e>

0801256e <ISM330DLC_FIFO_Get_Data>:
 801256e:	b508      	push	{r3, lr}
 8012570:	460a      	mov	r2, r1
 8012572:	2302      	movs	r3, #2
 8012574:	213e      	movs	r1, #62	; 0x3e
 8012576:	301c      	adds	r0, #28
 8012578:	f7f3 f851 	bl	800561e <ism330dlc_read_reg>
 801257c:	3000      	adds	r0, #0
 801257e:	bf18      	it	ne
 8012580:	2001      	movne	r0, #1
 8012582:	4240      	negs	r0, r0
 8012584:	bd08      	pop	{r3, pc}

08012586 <ISM330DLC_FIFO_ACC_Set_Decimation>:
 8012586:	2907      	cmp	r1, #7
 8012588:	b508      	push	{r3, lr}
 801258a:	d807      	bhi.n	801259c <ISM330DLC_FIFO_ACC_Set_Decimation+0x16>
 801258c:	301c      	adds	r0, #28
 801258e:	f7f3 f980 	bl	8005892 <ism330dlc_fifo_xl_batch_set>
 8012592:	3000      	adds	r0, #0
 8012594:	bf18      	it	ne
 8012596:	2001      	movne	r0, #1
 8012598:	4240      	negs	r0, r0
 801259a:	bd08      	pop	{r3, pc}
 801259c:	f04f 30ff 	mov.w	r0, #4294967295
 80125a0:	e7fb      	b.n	801259a <ISM330DLC_FIFO_ACC_Set_Decimation+0x14>

080125a2 <ISM330DLC_FIFO_Get_Data_Word>:
 80125a2:	b513      	push	{r0, r1, r4, lr}
 80125a4:	460c      	mov	r4, r1
 80125a6:	a901      	add	r1, sp, #4
 80125a8:	f7ff ffe1 	bl	801256e <ISM330DLC_FIFO_Get_Data>
 80125ac:	b940      	cbnz	r0, 80125c0 <ISM330DLC_FIFO_Get_Data_Word+0x1e>
 80125ae:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80125b2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80125b6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80125ba:	8023      	strh	r3, [r4, #0]
 80125bc:	b002      	add	sp, #8
 80125be:	bd10      	pop	{r4, pc}
 80125c0:	f04f 30ff 	mov.w	r0, #4294967295
 80125c4:	e7fa      	b.n	80125bc <ISM330DLC_FIFO_Get_Data_Word+0x1a>

080125c6 <ISM330DLC_FIFO_GYRO_Set_Decimation>:
 80125c6:	2907      	cmp	r1, #7
 80125c8:	b508      	push	{r3, lr}
 80125ca:	d807      	bhi.n	80125dc <ISM330DLC_FIFO_GYRO_Set_Decimation+0x16>
 80125cc:	301c      	adds	r0, #28
 80125ce:	f7f3 f976 	bl	80058be <ism330dlc_fifo_gy_batch_set>
 80125d2:	3000      	adds	r0, #0
 80125d4:	bf18      	it	ne
 80125d6:	2001      	movne	r0, #1
 80125d8:	4240      	negs	r0, r0
 80125da:	bd08      	pop	{r3, pc}
 80125dc:	f04f 30ff 	mov.w	r0, #4294967295
 80125e0:	e7fb      	b.n	80125da <ISM330DLC_FIFO_GYRO_Set_Decimation+0x14>

080125e2 <ISM330DLC_Set_INT2_Drdy>:
 80125e2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80125e4:	f100 041c 	add.w	r4, r0, #28
 80125e8:	460d      	mov	r5, r1
 80125ea:	2301      	movs	r3, #1
 80125ec:	aa01      	add	r2, sp, #4
 80125ee:	210e      	movs	r1, #14
 80125f0:	4620      	mov	r0, r4
 80125f2:	f7f3 f814 	bl	800561e <ism330dlc_read_reg>
 80125f6:	b988      	cbnz	r0, 801261c <ISM330DLC_Set_INT2_Drdy+0x3a>
 80125f8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80125fc:	f365 0300 	bfi	r3, r5, #0, #1
 8012600:	f88d 3004 	strb.w	r3, [sp, #4]
 8012604:	aa01      	add	r2, sp, #4
 8012606:	2301      	movs	r3, #1
 8012608:	210e      	movs	r1, #14
 801260a:	4620      	mov	r0, r4
 801260c:	f7f3 f80e 	bl	800562c <ism330dlc_write_reg>
 8012610:	3000      	adds	r0, #0
 8012612:	bf18      	it	ne
 8012614:	2001      	movne	r0, #1
 8012616:	4240      	negs	r0, r0
 8012618:	b003      	add	sp, #12
 801261a:	bd30      	pop	{r4, r5, pc}
 801261c:	f04f 30ff 	mov.w	r0, #4294967295
 8012620:	e7fa      	b.n	8012618 <ISM330DLC_Set_INT2_Drdy+0x36>
	...

08012624 <arm_max_f32>:
 8012624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012628:	1e4f      	subs	r7, r1, #1
 801262a:	ea5f 0897 	movs.w	r8, r7, lsr #2
 801262e:	f100 0e04 	add.w	lr, r0, #4
 8012632:	edd0 7a00 	vldr	s15, [r0]
 8012636:	d058      	beq.n	80126ea <arm_max_f32+0xc6>
 8012638:	3014      	adds	r0, #20
 801263a:	46c4      	mov	ip, r8
 801263c:	2604      	movs	r6, #4
 801263e:	2400      	movs	r4, #0
 8012640:	ed10 6a04 	vldr	s12, [r0, #-16]
 8012644:	ed50 6a03 	vldr	s13, [r0, #-12]
 8012648:	ed10 7a02 	vldr	s14, [r0, #-8]
 801264c:	ed50 5a01 	vldr	s11, [r0, #-4]
 8012650:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8012654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012658:	bfc8      	it	gt
 801265a:	eef0 7a46 	vmovgt.f32	s15, s12
 801265e:	f1a6 0503 	sub.w	r5, r6, #3
 8012662:	eef4 7ae6 	vcmpe.f32	s15, s13
 8012666:	bfc8      	it	gt
 8012668:	462c      	movgt	r4, r5
 801266a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801266e:	bf48      	it	mi
 8012670:	eef0 7a66 	vmovmi.f32	s15, s13
 8012674:	f1a6 0502 	sub.w	r5, r6, #2
 8012678:	eef4 7ac7 	vcmpe.f32	s15, s14
 801267c:	bf48      	it	mi
 801267e:	462c      	movmi	r4, r5
 8012680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012684:	bf48      	it	mi
 8012686:	eef0 7a47 	vmovmi.f32	s15, s14
 801268a:	f106 35ff 	add.w	r5, r6, #4294967295
 801268e:	eef4 7ae5 	vcmpe.f32	s15, s11
 8012692:	bf48      	it	mi
 8012694:	462c      	movmi	r4, r5
 8012696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801269a:	bf48      	it	mi
 801269c:	4634      	movmi	r4, r6
 801269e:	bf48      	it	mi
 80126a0:	eef0 7a65 	vmovmi.f32	s15, s11
 80126a4:	f1bc 0c01 	subs.w	ip, ip, #1
 80126a8:	f106 0604 	add.w	r6, r6, #4
 80126ac:	f100 0010 	add.w	r0, r0, #16
 80126b0:	d1c6      	bne.n	8012640 <arm_max_f32+0x1c>
 80126b2:	eb0e 1e08 	add.w	lr, lr, r8, lsl #4
 80126b6:	f017 0003 	ands.w	r0, r7, #3
 80126ba:	d018      	beq.n	80126ee <arm_max_f32+0xca>
 80126bc:	1a08      	subs	r0, r1, r0
 80126be:	ecbe 7a01 	vldmia	lr!, {s14}
 80126c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80126c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126ca:	bfc8      	it	gt
 80126cc:	4604      	movgt	r4, r0
 80126ce:	f100 0001 	add.w	r0, r0, #1
 80126d2:	bfd8      	it	le
 80126d4:	eeb0 7a67 	vmovle.f32	s14, s15
 80126d8:	4288      	cmp	r0, r1
 80126da:	eef0 7a47 	vmov.f32	s15, s14
 80126de:	d1ee      	bne.n	80126be <arm_max_f32+0x9a>
 80126e0:	ed82 7a00 	vstr	s14, [r2]
 80126e4:	601c      	str	r4, [r3, #0]
 80126e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80126ea:	4644      	mov	r4, r8
 80126ec:	e7e3      	b.n	80126b6 <arm_max_f32+0x92>
 80126ee:	eeb0 7a67 	vmov.f32	s14, s15
 80126f2:	e7f5      	b.n	80126e0 <arm_max_f32+0xbc>

080126f4 <arm_rfft_fast_init_f32>:
 80126f4:	084b      	lsrs	r3, r1, #1
 80126f6:	2b80      	cmp	r3, #128	; 0x80
 80126f8:	b410      	push	{r4}
 80126fa:	8201      	strh	r1, [r0, #16]
 80126fc:	8003      	strh	r3, [r0, #0]
 80126fe:	d047      	beq.n	8012790 <arm_rfft_fast_init_f32+0x9c>
 8012700:	d917      	bls.n	8012732 <arm_rfft_fast_init_f32+0x3e>
 8012702:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012706:	d03d      	beq.n	8012784 <arm_rfft_fast_init_f32+0x90>
 8012708:	d929      	bls.n	801275e <arm_rfft_fast_init_f32+0x6a>
 801270a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801270e:	d020      	beq.n	8012752 <arm_rfft_fast_init_f32+0x5e>
 8012710:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012714:	d113      	bne.n	801273e <arm_rfft_fast_init_f32+0x4a>
 8012716:	4921      	ldr	r1, [pc, #132]	; (801279c <arm_rfft_fast_init_f32+0xa8>)
 8012718:	4a21      	ldr	r2, [pc, #132]	; (80127a0 <arm_rfft_fast_init_f32+0xac>)
 801271a:	4b22      	ldr	r3, [pc, #136]	; (80127a4 <arm_rfft_fast_init_f32+0xb0>)
 801271c:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 8012720:	8184      	strh	r4, [r0, #12]
 8012722:	6081      	str	r1, [r0, #8]
 8012724:	6042      	str	r2, [r0, #4]
 8012726:	6143      	str	r3, [r0, #20]
 8012728:	2000      	movs	r0, #0
 801272a:	b240      	sxtb	r0, r0
 801272c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012730:	4770      	bx	lr
 8012732:	2b20      	cmp	r3, #32
 8012734:	d01c      	beq.n	8012770 <arm_rfft_fast_init_f32+0x7c>
 8012736:	2b40      	cmp	r3, #64	; 0x40
 8012738:	d006      	beq.n	8012748 <arm_rfft_fast_init_f32+0x54>
 801273a:	2b10      	cmp	r3, #16
 801273c:	d01d      	beq.n	801277a <arm_rfft_fast_init_f32+0x86>
 801273e:	20ff      	movs	r0, #255	; 0xff
 8012740:	b240      	sxtb	r0, r0
 8012742:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012746:	4770      	bx	lr
 8012748:	2438      	movs	r4, #56	; 0x38
 801274a:	4917      	ldr	r1, [pc, #92]	; (80127a8 <arm_rfft_fast_init_f32+0xb4>)
 801274c:	4a17      	ldr	r2, [pc, #92]	; (80127ac <arm_rfft_fast_init_f32+0xb8>)
 801274e:	4b18      	ldr	r3, [pc, #96]	; (80127b0 <arm_rfft_fast_init_f32+0xbc>)
 8012750:	e7e6      	b.n	8012720 <arm_rfft_fast_init_f32+0x2c>
 8012752:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 8012756:	4917      	ldr	r1, [pc, #92]	; (80127b4 <arm_rfft_fast_init_f32+0xc0>)
 8012758:	4a17      	ldr	r2, [pc, #92]	; (80127b8 <arm_rfft_fast_init_f32+0xc4>)
 801275a:	4b18      	ldr	r3, [pc, #96]	; (80127bc <arm_rfft_fast_init_f32+0xc8>)
 801275c:	e7e0      	b.n	8012720 <arm_rfft_fast_init_f32+0x2c>
 801275e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012762:	d1ec      	bne.n	801273e <arm_rfft_fast_init_f32+0x4a>
 8012764:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 8012768:	4915      	ldr	r1, [pc, #84]	; (80127c0 <arm_rfft_fast_init_f32+0xcc>)
 801276a:	4a16      	ldr	r2, [pc, #88]	; (80127c4 <arm_rfft_fast_init_f32+0xd0>)
 801276c:	4b16      	ldr	r3, [pc, #88]	; (80127c8 <arm_rfft_fast_init_f32+0xd4>)
 801276e:	e7d7      	b.n	8012720 <arm_rfft_fast_init_f32+0x2c>
 8012770:	2430      	movs	r4, #48	; 0x30
 8012772:	4916      	ldr	r1, [pc, #88]	; (80127cc <arm_rfft_fast_init_f32+0xd8>)
 8012774:	4a16      	ldr	r2, [pc, #88]	; (80127d0 <arm_rfft_fast_init_f32+0xdc>)
 8012776:	4b17      	ldr	r3, [pc, #92]	; (80127d4 <arm_rfft_fast_init_f32+0xe0>)
 8012778:	e7d2      	b.n	8012720 <arm_rfft_fast_init_f32+0x2c>
 801277a:	2414      	movs	r4, #20
 801277c:	4916      	ldr	r1, [pc, #88]	; (80127d8 <arm_rfft_fast_init_f32+0xe4>)
 801277e:	4a17      	ldr	r2, [pc, #92]	; (80127dc <arm_rfft_fast_init_f32+0xe8>)
 8012780:	4b17      	ldr	r3, [pc, #92]	; (80127e0 <arm_rfft_fast_init_f32+0xec>)
 8012782:	e7cd      	b.n	8012720 <arm_rfft_fast_init_f32+0x2c>
 8012784:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 8012788:	4916      	ldr	r1, [pc, #88]	; (80127e4 <arm_rfft_fast_init_f32+0xf0>)
 801278a:	4a17      	ldr	r2, [pc, #92]	; (80127e8 <arm_rfft_fast_init_f32+0xf4>)
 801278c:	4b17      	ldr	r3, [pc, #92]	; (80127ec <arm_rfft_fast_init_f32+0xf8>)
 801278e:	e7c7      	b.n	8012720 <arm_rfft_fast_init_f32+0x2c>
 8012790:	24d0      	movs	r4, #208	; 0xd0
 8012792:	4917      	ldr	r1, [pc, #92]	; (80127f0 <arm_rfft_fast_init_f32+0xfc>)
 8012794:	4a17      	ldr	r2, [pc, #92]	; (80127f4 <arm_rfft_fast_init_f32+0x100>)
 8012796:	4b18      	ldr	r3, [pc, #96]	; (80127f8 <arm_rfft_fast_init_f32+0x104>)
 8012798:	e7c2      	b.n	8012720 <arm_rfft_fast_init_f32+0x2c>
 801279a:	bf00      	nop
 801279c:	0802b3c0 	.word	0x0802b3c0
 80127a0:	0801bdb4 	.word	0x0801bdb4
 80127a4:	08021f24 	.word	0x08021f24
 80127a8:	0801feb4 	.word	0x0801feb4
 80127ac:	0802d180 	.word	0x0802d180
 80127b0:	0802f670 	.word	0x0802f670
 80127b4:	080288a4 	.word	0x080288a4
 80127b8:	080267a4 	.word	0x080267a4
 80127bc:	0801ff24 	.word	0x0801ff24
 80127c0:	0802f300 	.word	0x0802f300
 80127c4:	08025f24 	.word	0x08025f24
 80127c8:	0802d380 	.word	0x0802d380
 80127cc:	0802975c 	.word	0x0802975c
 80127d0:	080287a4 	.word	0x080287a4
 80127d4:	0801fdb4 	.word	0x0801fdb4
 80127d8:	080296b4 	.word	0x080296b4
 80127dc:	08026724 	.word	0x08026724
 80127e0:	080296dc 	.word	0x080296dc
 80127e4:	0802db80 	.word	0x0802db80
 80127e8:	0802a3c0 	.word	0x0802a3c0
 80127ec:	0802df00 	.word	0x0802df00
 80127f0:	0802f870 	.word	0x0802f870
 80127f4:	08029fc0 	.word	0x08029fc0
 80127f8:	0802ef00 	.word	0x0802ef00

080127fc <arm_rfft_fast_f32>:
 80127fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012800:	8a06      	ldrh	r6, [r0, #16]
 8012802:	0876      	lsrs	r6, r6, #1
 8012804:	4607      	mov	r7, r0
 8012806:	4615      	mov	r5, r2
 8012808:	8006      	strh	r6, [r0, #0]
 801280a:	460c      	mov	r4, r1
 801280c:	2b00      	cmp	r3, #0
 801280e:	d15c      	bne.n	80128ca <arm_rfft_fast_f32+0xce>
 8012810:	461a      	mov	r2, r3
 8012812:	2301      	movs	r3, #1
 8012814:	f000 fbe6 	bl	8012fe4 <arm_cfft_f32>
 8012818:	edd4 7a00 	vldr	s15, [r4]
 801281c:	ed94 7a01 	vldr	s14, [r4, #4]
 8012820:	883e      	ldrh	r6, [r7, #0]
 8012822:	6978      	ldr	r0, [r7, #20]
 8012824:	ee37 7a07 	vadd.f32	s14, s14, s14
 8012828:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801282c:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 8012830:	ee77 6a87 	vadd.f32	s13, s15, s14
 8012834:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012838:	3e01      	subs	r6, #1
 801283a:	ee26 7aa3 	vmul.f32	s14, s13, s7
 801283e:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8012842:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8012846:	ed85 7a00 	vstr	s14, [r5]
 801284a:	edc5 7a01 	vstr	s15, [r5, #4]
 801284e:	3010      	adds	r0, #16
 8012850:	f105 0210 	add.w	r2, r5, #16
 8012854:	3b08      	subs	r3, #8
 8012856:	f104 0110 	add.w	r1, r4, #16
 801285a:	ed51 4a02 	vldr	s9, [r1, #-8]
 801285e:	ed93 5a02 	vldr	s10, [r3, #8]
 8012862:	ed11 7a01 	vldr	s14, [r1, #-4]
 8012866:	ed10 6a02 	vldr	s12, [r0, #-8]
 801286a:	edd3 5a03 	vldr	s11, [r3, #12]
 801286e:	ed50 6a01 	vldr	s13, [r0, #-4]
 8012872:	ee75 7a64 	vsub.f32	s15, s10, s9
 8012876:	ee35 4a87 	vadd.f32	s8, s11, s14
 801287a:	ee35 5a24 	vadd.f32	s10, s10, s9
 801287e:	ee77 5a65 	vsub.f32	s11, s14, s11
 8012882:	ee66 4a27 	vmul.f32	s9, s12, s15
 8012886:	ee26 7aa7 	vmul.f32	s14, s13, s15
 801288a:	ee34 5a85 	vadd.f32	s10, s9, s10
 801288e:	ee26 6a04 	vmul.f32	s12, s12, s8
 8012892:	ee66 6a84 	vmul.f32	s13, s13, s8
 8012896:	ee77 7a25 	vadd.f32	s15, s14, s11
 801289a:	ee76 6a85 	vadd.f32	s13, s13, s10
 801289e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80128a2:	ee66 6aa3 	vmul.f32	s13, s13, s7
 80128a6:	ee67 7aa3 	vmul.f32	s15, s15, s7
 80128aa:	3e01      	subs	r6, #1
 80128ac:	ed42 6a02 	vstr	s13, [r2, #-8]
 80128b0:	ed42 7a01 	vstr	s15, [r2, #-4]
 80128b4:	f1a3 0308 	sub.w	r3, r3, #8
 80128b8:	f101 0108 	add.w	r1, r1, #8
 80128bc:	f100 0008 	add.w	r0, r0, #8
 80128c0:	f102 0208 	add.w	r2, r2, #8
 80128c4:	d1c9      	bne.n	801285a <arm_rfft_fast_f32+0x5e>
 80128c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80128ca:	edd1 7a00 	vldr	s15, [r1]
 80128ce:	edd1 6a01 	vldr	s13, [r1, #4]
 80128d2:	6941      	ldr	r1, [r0, #20]
 80128d4:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80128d8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80128dc:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 80128e0:	ee27 7a23 	vmul.f32	s14, s14, s7
 80128e4:	ee67 7aa3 	vmul.f32	s15, s15, s7
 80128e8:	3e01      	subs	r6, #1
 80128ea:	ed82 7a00 	vstr	s14, [r2]
 80128ee:	edc2 7a01 	vstr	s15, [r2, #4]
 80128f2:	00f0      	lsls	r0, r6, #3
 80128f4:	b3ee      	cbz	r6, 8012972 <arm_rfft_fast_f32+0x176>
 80128f6:	3808      	subs	r0, #8
 80128f8:	f101 0e10 	add.w	lr, r1, #16
 80128fc:	4420      	add	r0, r4
 80128fe:	f104 0110 	add.w	r1, r4, #16
 8012902:	f102 0c10 	add.w	ip, r2, #16
 8012906:	ed90 7a02 	vldr	s14, [r0, #8]
 801290a:	ed51 6a02 	vldr	s13, [r1, #-8]
 801290e:	ed1e 6a02 	vldr	s12, [lr, #-8]
 8012912:	ed90 4a03 	vldr	s8, [r0, #12]
 8012916:	ed11 5a01 	vldr	s10, [r1, #-4]
 801291a:	ed5e 5a01 	vldr	s11, [lr, #-4]
 801291e:	ee76 7ac7 	vsub.f32	s15, s13, s14
 8012922:	ee74 4a05 	vadd.f32	s9, s8, s10
 8012926:	ee26 3a27 	vmul.f32	s6, s12, s15
 801292a:	ee77 6a26 	vadd.f32	s13, s14, s13
 801292e:	ee35 5a44 	vsub.f32	s10, s10, s8
 8012932:	ee25 7aa7 	vmul.f32	s14, s11, s15
 8012936:	ee76 6ac3 	vsub.f32	s13, s13, s6
 801293a:	ee77 7a05 	vadd.f32	s15, s14, s10
 801293e:	ee26 6a24 	vmul.f32	s12, s12, s9
 8012942:	ee65 5aa4 	vmul.f32	s11, s11, s9
 8012946:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801294a:	ee36 7ae5 	vsub.f32	s14, s13, s11
 801294e:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8012952:	ee27 7a23 	vmul.f32	s14, s14, s7
 8012956:	3e01      	subs	r6, #1
 8012958:	ed0c 7a02 	vstr	s14, [ip, #-8]
 801295c:	ed4c 7a01 	vstr	s15, [ip, #-4]
 8012960:	f1a0 0008 	sub.w	r0, r0, #8
 8012964:	f101 0108 	add.w	r1, r1, #8
 8012968:	f10e 0e08 	add.w	lr, lr, #8
 801296c:	f10c 0c08 	add.w	ip, ip, #8
 8012970:	d1c9      	bne.n	8012906 <arm_rfft_fast_f32+0x10a>
 8012972:	4638      	mov	r0, r7
 8012974:	4629      	mov	r1, r5
 8012976:	461a      	mov	r2, r3
 8012978:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801297c:	2301      	movs	r3, #1
 801297e:	f000 bb31 	b.w	8012fe4 <arm_cfft_f32>
 8012982:	bf00      	nop

08012984 <arm_cfft_radix8by2_f32>:
 8012984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012988:	ed2d 8b08 	vpush	{d8-d11}
 801298c:	f8b0 e000 	ldrh.w	lr, [r0]
 8012990:	6842      	ldr	r2, [r0, #4]
 8012992:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8012996:	eb01 088e 	add.w	r8, r1, lr, lsl #2
 801299a:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 801299e:	4607      	mov	r7, r0
 80129a0:	ea4f 038c 	mov.w	r3, ip, lsl #2
 80129a4:	f000 80af 	beq.w	8012b06 <arm_cfft_radix8by2_f32+0x182>
 80129a8:	3310      	adds	r3, #16
 80129aa:	18ce      	adds	r6, r1, r3
 80129ac:	3210      	adds	r2, #16
 80129ae:	4443      	add	r3, r8
 80129b0:	f101 0510 	add.w	r5, r1, #16
 80129b4:	f108 0410 	add.w	r4, r8, #16
 80129b8:	ed54 1a04 	vldr	s3, [r4, #-16]
 80129bc:	ed13 4a04 	vldr	s8, [r3, #-16]
 80129c0:	ed53 3a03 	vldr	s7, [r3, #-12]
 80129c4:	ed53 5a02 	vldr	s11, [r3, #-8]
 80129c8:	ed13 5a01 	vldr	s10, [r3, #-4]
 80129cc:	ed54 6a03 	vldr	s13, [r4, #-12]
 80129d0:	ed14 0a02 	vldr	s0, [r4, #-8]
 80129d4:	ed16 2a04 	vldr	s4, [r6, #-16]
 80129d8:	ed56 2a03 	vldr	s5, [r6, #-12]
 80129dc:	ed15 6a03 	vldr	s12, [r5, #-12]
 80129e0:	ed15 7a01 	vldr	s14, [r5, #-4]
 80129e4:	ed15 3a04 	vldr	s6, [r5, #-16]
 80129e8:	ed54 7a01 	vldr	s15, [r4, #-4]
 80129ec:	ed56 0a02 	vldr	s1, [r6, #-8]
 80129f0:	ed16 1a01 	vldr	s2, [r6, #-4]
 80129f4:	ed55 4a02 	vldr	s9, [r5, #-8]
 80129f8:	ee73 ba21 	vadd.f32	s23, s6, s3
 80129fc:	ee36 ba26 	vadd.f32	s22, s12, s13
 8012a00:	ee37 aa27 	vadd.f32	s20, s14, s15
 8012a04:	ee72 9a04 	vadd.f32	s19, s4, s8
 8012a08:	ee32 9aa3 	vadd.f32	s18, s5, s7
 8012a0c:	ee31 8a05 	vadd.f32	s16, s2, s10
 8012a10:	ee74 aa80 	vadd.f32	s21, s9, s0
 8012a14:	ee70 8aa5 	vadd.f32	s17, s1, s11
 8012a18:	ed45 ba04 	vstr	s23, [r5, #-16]
 8012a1c:	ed05 ba03 	vstr	s22, [r5, #-12]
 8012a20:	ed45 aa02 	vstr	s21, [r5, #-8]
 8012a24:	ed05 aa01 	vstr	s20, [r5, #-4]
 8012a28:	ed06 8a01 	vstr	s16, [r6, #-4]
 8012a2c:	ed46 9a04 	vstr	s19, [r6, #-16]
 8012a30:	ed06 9a03 	vstr	s18, [r6, #-12]
 8012a34:	ed46 8a02 	vstr	s17, [r6, #-8]
 8012a38:	ee76 6a66 	vsub.f32	s13, s12, s13
 8012a3c:	ee73 3ae2 	vsub.f32	s7, s7, s5
 8012a40:	ed12 6a03 	vldr	s12, [r2, #-12]
 8012a44:	ed52 2a04 	vldr	s5, [r2, #-16]
 8012a48:	ee33 3a61 	vsub.f32	s6, s6, s3
 8012a4c:	ee34 4a42 	vsub.f32	s8, s8, s4
 8012a50:	ee26 8a86 	vmul.f32	s16, s13, s12
 8012a54:	ee24 2a06 	vmul.f32	s4, s8, s12
 8012a58:	ee63 1a22 	vmul.f32	s3, s6, s5
 8012a5c:	ee24 4a22 	vmul.f32	s8, s8, s5
 8012a60:	ee23 3a06 	vmul.f32	s6, s6, s12
 8012a64:	ee66 6aa2 	vmul.f32	s13, s13, s5
 8012a68:	ee23 6a86 	vmul.f32	s12, s7, s12
 8012a6c:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8012a70:	ee36 6a04 	vadd.f32	s12, s12, s8
 8012a74:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8012a78:	ee72 3a63 	vsub.f32	s7, s4, s7
 8012a7c:	ee71 2a88 	vadd.f32	s5, s3, s16
 8012a80:	ed44 6a03 	vstr	s13, [r4, #-12]
 8012a84:	ed44 2a04 	vstr	s5, [r4, #-16]
 8012a88:	ed43 3a04 	vstr	s7, [r3, #-16]
 8012a8c:	ed03 6a03 	vstr	s12, [r3, #-12]
 8012a90:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012a94:	ee75 6ae0 	vsub.f32	s13, s11, s1
 8012a98:	ed12 7a01 	vldr	s14, [r2, #-4]
 8012a9c:	ed52 5a02 	vldr	s11, [r2, #-8]
 8012aa0:	ee35 6a41 	vsub.f32	s12, s10, s2
 8012aa4:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8012aa8:	ee67 3a87 	vmul.f32	s7, s15, s14
 8012aac:	ee26 5a87 	vmul.f32	s10, s13, s14
 8012ab0:	ee24 4aa5 	vmul.f32	s8, s9, s11
 8012ab4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8012ab8:	ee64 4a87 	vmul.f32	s9, s9, s14
 8012abc:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8012ac0:	ee26 7a07 	vmul.f32	s14, s12, s14
 8012ac4:	ee26 6a25 	vmul.f32	s12, s12, s11
 8012ac8:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8012acc:	ee74 5a23 	vadd.f32	s11, s8, s7
 8012ad0:	ee35 6a46 	vsub.f32	s12, s10, s12
 8012ad4:	ee37 7a26 	vadd.f32	s14, s14, s13
 8012ad8:	f1be 0e01 	subs.w	lr, lr, #1
 8012adc:	ed44 5a02 	vstr	s11, [r4, #-8]
 8012ae0:	f105 0510 	add.w	r5, r5, #16
 8012ae4:	ed44 7a01 	vstr	s15, [r4, #-4]
 8012ae8:	f106 0610 	add.w	r6, r6, #16
 8012aec:	ed03 6a02 	vstr	s12, [r3, #-8]
 8012af0:	ed03 7a01 	vstr	s14, [r3, #-4]
 8012af4:	f102 0210 	add.w	r2, r2, #16
 8012af8:	f104 0410 	add.w	r4, r4, #16
 8012afc:	f103 0310 	add.w	r3, r3, #16
 8012b00:	f47f af5a 	bne.w	80129b8 <arm_cfft_radix8by2_f32+0x34>
 8012b04:	687a      	ldr	r2, [r7, #4]
 8012b06:	fa1f f48c 	uxth.w	r4, ip
 8012b0a:	4608      	mov	r0, r1
 8012b0c:	2302      	movs	r3, #2
 8012b0e:	4621      	mov	r1, r4
 8012b10:	f000 fe84 	bl	801381c <arm_radix8_butterfly_f32>
 8012b14:	ecbd 8b08 	vpop	{d8-d11}
 8012b18:	4640      	mov	r0, r8
 8012b1a:	4621      	mov	r1, r4
 8012b1c:	687a      	ldr	r2, [r7, #4]
 8012b1e:	2302      	movs	r3, #2
 8012b20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012b24:	f000 be7a 	b.w	801381c <arm_radix8_butterfly_f32>

08012b28 <arm_cfft_radix8by4_f32>:
 8012b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b2c:	ed2d 8b0a 	vpush	{d8-d12}
 8012b30:	8802      	ldrh	r2, [r0, #0]
 8012b32:	ed91 6a00 	vldr	s12, [r1]
 8012b36:	b08f      	sub	sp, #60	; 0x3c
 8012b38:	460f      	mov	r7, r1
 8012b3a:	0852      	lsrs	r2, r2, #1
 8012b3c:	0093      	lsls	r3, r2, #2
 8012b3e:	900c      	str	r0, [sp, #48]	; 0x30
 8012b40:	9103      	str	r1, [sp, #12]
 8012b42:	6841      	ldr	r1, [r0, #4]
 8012b44:	ed97 7a01 	vldr	s14, [r7, #4]
 8012b48:	4638      	mov	r0, r7
 8012b4a:	4418      	add	r0, r3
 8012b4c:	4606      	mov	r6, r0
 8012b4e:	9009      	str	r0, [sp, #36]	; 0x24
 8012b50:	4418      	add	r0, r3
 8012b52:	edd0 6a00 	vldr	s13, [r0]
 8012b56:	edd6 3a00 	vldr	s7, [r6]
 8012b5a:	edd6 2a01 	vldr	s5, [r6, #4]
 8012b5e:	edd0 7a01 	vldr	s15, [r0, #4]
 8012b62:	900a      	str	r0, [sp, #40]	; 0x28
 8012b64:	ee76 5a26 	vadd.f32	s11, s12, s13
 8012b68:	4604      	mov	r4, r0
 8012b6a:	4625      	mov	r5, r4
 8012b6c:	441c      	add	r4, r3
 8012b6e:	ed94 4a00 	vldr	s8, [r4]
 8012b72:	ed94 5a01 	vldr	s10, [r4, #4]
 8012b76:	9401      	str	r4, [sp, #4]
 8012b78:	ee75 4aa3 	vadd.f32	s9, s11, s7
 8012b7c:	4630      	mov	r0, r6
 8012b7e:	ee74 4a24 	vadd.f32	s9, s8, s9
 8012b82:	463e      	mov	r6, r7
 8012b84:	ee14 ea90 	vmov	lr, s9
 8012b88:	ee76 6a66 	vsub.f32	s13, s12, s13
 8012b8c:	f846 eb08 	str.w	lr, [r6], #8
 8012b90:	ee37 6a27 	vadd.f32	s12, s14, s15
 8012b94:	edd0 4a01 	vldr	s9, [r0, #4]
 8012b98:	9604      	str	r6, [sp, #16]
 8012b9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012b9e:	9e01      	ldr	r6, [sp, #4]
 8012ba0:	ee32 3aa6 	vadd.f32	s6, s5, s13
 8012ba4:	ed96 2a01 	vldr	s4, [r6, #4]
 8012ba8:	ee36 7a24 	vadd.f32	s14, s12, s9
 8012bac:	ee75 5ae3 	vsub.f32	s11, s11, s7
 8012bb0:	ee77 4ae3 	vsub.f32	s9, s15, s7
 8012bb4:	ee36 6a62 	vsub.f32	s12, s12, s5
 8012bb8:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8012bbc:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8012bc0:	ee73 3a45 	vsub.f32	s7, s6, s10
 8012bc4:	4604      	mov	r4, r0
 8012bc6:	ee36 6a45 	vsub.f32	s12, s12, s10
 8012bca:	ee75 6a26 	vadd.f32	s13, s10, s13
 8012bce:	46a3      	mov	fp, r4
 8012bd0:	ee37 7a02 	vadd.f32	s14, s14, s4
 8012bd4:	ee34 5a84 	vadd.f32	s10, s9, s8
 8012bd8:	ee13 8a90 	vmov	r8, s7
 8012bdc:	46a4      	mov	ip, r4
 8012bde:	ee75 5ac4 	vsub.f32	s11, s11, s8
 8012be2:	ed87 7a01 	vstr	s14, [r7, #4]
 8012be6:	f84b 8b08 	str.w	r8, [fp], #8
 8012bea:	f1ac 0704 	sub.w	r7, ip, #4
 8012bee:	ed8c 5a01 	vstr	s10, [ip, #4]
 8012bf2:	f101 0c08 	add.w	ip, r1, #8
 8012bf6:	462c      	mov	r4, r5
 8012bf8:	f8cd c014 	str.w	ip, [sp, #20]
 8012bfc:	ee15 ca90 	vmov	ip, s11
 8012c00:	f844 cb08 	str.w	ip, [r4], #8
 8012c04:	9407      	str	r4, [sp, #28]
 8012c06:	f101 0410 	add.w	r4, r1, #16
 8012c0a:	ed85 6a01 	vstr	s12, [r5, #4]
 8012c0e:	0852      	lsrs	r2, r2, #1
 8012c10:	9402      	str	r4, [sp, #8]
 8012c12:	462c      	mov	r4, r5
 8012c14:	f101 0518 	add.w	r5, r1, #24
 8012c18:	920b      	str	r2, [sp, #44]	; 0x2c
 8012c1a:	46b2      	mov	sl, r6
 8012c1c:	9506      	str	r5, [sp, #24]
 8012c1e:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8012c22:	3a02      	subs	r2, #2
 8012c24:	ee16 5a90 	vmov	r5, s13
 8012c28:	46b6      	mov	lr, r6
 8012c2a:	4630      	mov	r0, r6
 8012c2c:	0852      	lsrs	r2, r2, #1
 8012c2e:	f84a 5b08 	str.w	r5, [sl], #8
 8012c32:	f1a0 0604 	sub.w	r6, r0, #4
 8012c36:	edce 7a01 	vstr	s15, [lr, #4]
 8012c3a:	9208      	str	r2, [sp, #32]
 8012c3c:	f000 8130 	beq.w	8012ea0 <arm_cfft_radix8by4_f32+0x378>
 8012c40:	4691      	mov	r9, r2
 8012c42:	9a03      	ldr	r2, [sp, #12]
 8012c44:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8012c48:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8012c4c:	3b08      	subs	r3, #8
 8012c4e:	f102 0510 	add.w	r5, r2, #16
 8012c52:	f101 0c20 	add.w	ip, r1, #32
 8012c56:	f1a4 020c 	sub.w	r2, r4, #12
 8012c5a:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 8012c5e:	4433      	add	r3, r6
 8012c60:	3410      	adds	r4, #16
 8012c62:	4650      	mov	r0, sl
 8012c64:	4659      	mov	r1, fp
 8012c66:	ed55 3a02 	vldr	s7, [r5, #-8]
 8012c6a:	ed14 5a02 	vldr	s10, [r4, #-8]
 8012c6e:	ed91 7a00 	vldr	s14, [r1]
 8012c72:	edd0 7a00 	vldr	s15, [r0]
 8012c76:	ed15 4a01 	vldr	s8, [r5, #-4]
 8012c7a:	ed54 5a01 	vldr	s11, [r4, #-4]
 8012c7e:	edd0 6a01 	vldr	s13, [r0, #4]
 8012c82:	ed91 6a01 	vldr	s12, [r1, #4]
 8012c86:	ee33 8a85 	vadd.f32	s16, s7, s10
 8012c8a:	ee34 0a25 	vadd.f32	s0, s8, s11
 8012c8e:	ee78 4a07 	vadd.f32	s9, s16, s14
 8012c92:	ee74 5a65 	vsub.f32	s11, s8, s11
 8012c96:	ee77 4aa4 	vadd.f32	s9, s15, s9
 8012c9a:	ee33 5ac5 	vsub.f32	s10, s7, s10
 8012c9e:	ed45 4a02 	vstr	s9, [r5, #-8]
 8012ca2:	edd1 4a01 	vldr	s9, [r1, #4]
 8012ca6:	ed90 4a01 	vldr	s8, [r0, #4]
 8012caa:	ee70 4a24 	vadd.f32	s9, s0, s9
 8012cae:	ee76 aa05 	vadd.f32	s21, s12, s10
 8012cb2:	ee74 4a84 	vadd.f32	s9, s9, s8
 8012cb6:	ee35 aac7 	vsub.f32	s20, s11, s14
 8012cba:	ed45 4a01 	vstr	s9, [r5, #-4]
 8012cbe:	edd6 1a00 	vldr	s3, [r6]
 8012cc2:	edd7 0a00 	vldr	s1, [r7]
 8012cc6:	ed92 4a02 	vldr	s8, [r2, #8]
 8012cca:	edd3 3a02 	vldr	s7, [r3, #8]
 8012cce:	ed93 2a01 	vldr	s4, [r3, #4]
 8012cd2:	ed16 1a01 	vldr	s2, [r6, #-4]
 8012cd6:	edd2 2a01 	vldr	s5, [r2, #4]
 8012cda:	ed57 9a01 	vldr	s19, [r7, #-4]
 8012cde:	ee70 4aa1 	vadd.f32	s9, s1, s3
 8012ce2:	ee39 3a81 	vadd.f32	s6, s19, s2
 8012ce6:	ee74 8a84 	vadd.f32	s17, s9, s8
 8012cea:	ee70 1ae1 	vsub.f32	s3, s1, s3
 8012cee:	ee73 8aa8 	vadd.f32	s17, s7, s17
 8012cf2:	ee7a aae6 	vsub.f32	s21, s21, s13
 8012cf6:	ee18 aa90 	vmov	sl, s17
 8012cfa:	f847 a908 	str.w	sl, [r7], #-8
 8012cfe:	edd2 8a01 	vldr	s17, [r2, #4]
 8012d02:	ed93 9a01 	vldr	s18, [r3, #4]
 8012d06:	ee73 8a28 	vadd.f32	s17, s6, s17
 8012d0a:	ee3a aa27 	vadd.f32	s20, s20, s15
 8012d0e:	ee78 8a89 	vadd.f32	s17, s17, s18
 8012d12:	ee74 0a63 	vsub.f32	s1, s8, s7
 8012d16:	edc7 8a01 	vstr	s17, [r7, #4]
 8012d1a:	ed18 ba02 	vldr	s22, [r8, #-8]
 8012d1e:	ed58 8a01 	vldr	s17, [r8, #-4]
 8012d22:	ee39 1ac1 	vsub.f32	s2, s19, s2
 8012d26:	ee6a ba28 	vmul.f32	s23, s20, s17
 8012d2a:	ee2a ca8b 	vmul.f32	s24, s21, s22
 8012d2e:	ee71 9ae2 	vsub.f32	s19, s3, s5
 8012d32:	ee30 9a81 	vadd.f32	s18, s1, s2
 8012d36:	ee79 9a82 	vadd.f32	s19, s19, s4
 8012d3a:	ee3c ca2b 	vadd.f32	s24, s24, s23
 8012d3e:	ee6a aaa8 	vmul.f32	s21, s21, s17
 8012d42:	ee69 baa8 	vmul.f32	s23, s19, s17
 8012d46:	ee2a aa0b 	vmul.f32	s20, s20, s22
 8012d4a:	ee69 9a8b 	vmul.f32	s19, s19, s22
 8012d4e:	ee69 8a28 	vmul.f32	s17, s18, s17
 8012d52:	ee29 ba0b 	vmul.f32	s22, s18, s22
 8012d56:	ee1c aa10 	vmov	sl, s24
 8012d5a:	ee78 8aa9 	vadd.f32	s17, s17, s19
 8012d5e:	f841 ab08 	str.w	sl, [r1], #8
 8012d62:	ee3a aa6a 	vsub.f32	s20, s20, s21
 8012d66:	ee3b bacb 	vsub.f32	s22, s23, s22
 8012d6a:	ee34 4ac4 	vsub.f32	s8, s9, s8
 8012d6e:	ee33 3a62 	vsub.f32	s6, s6, s5
 8012d72:	ed01 aa01 	vstr	s20, [r1, #-4]
 8012d76:	edc2 8a01 	vstr	s17, [r2, #4]
 8012d7a:	ed82 ba02 	vstr	s22, [r2, #8]
 8012d7e:	ed5c 4a04 	vldr	s9, [ip, #-16]
 8012d82:	ee74 3a63 	vsub.f32	s7, s8, s7
 8012d86:	ee38 8a47 	vsub.f32	s16, s16, s14
 8012d8a:	ed1c 4a03 	vldr	s8, [ip, #-12]
 8012d8e:	ee30 0a46 	vsub.f32	s0, s0, s12
 8012d92:	ee33 3a42 	vsub.f32	s6, s6, s4
 8012d96:	ee38 8a67 	vsub.f32	s16, s16, s15
 8012d9a:	ee30 0a66 	vsub.f32	s0, s0, s13
 8012d9e:	ee23 9ae4 	vnmul.f32	s18, s7, s9
 8012da2:	ee63 8a04 	vmul.f32	s17, s6, s8
 8012da6:	ee28 aa24 	vmul.f32	s20, s16, s9
 8012daa:	ee60 9a04 	vmul.f32	s19, s0, s8
 8012dae:	ee28 8a04 	vmul.f32	s16, s16, s8
 8012db2:	ee20 0a24 	vmul.f32	s0, s0, s9
 8012db6:	ee63 3a84 	vmul.f32	s7, s7, s8
 8012dba:	ee39 4a68 	vsub.f32	s8, s18, s17
 8012dbe:	ee7a 9a29 	vadd.f32	s19, s20, s19
 8012dc2:	ee14 aa10 	vmov	sl, s8
 8012dc6:	ee30 0a48 	vsub.f32	s0, s0, s16
 8012dca:	ee63 4a24 	vmul.f32	s9, s6, s9
 8012dce:	ed44 9a02 	vstr	s19, [r4, #-8]
 8012dd2:	ee73 3ae4 	vsub.f32	s7, s7, s9
 8012dd6:	ed04 0a01 	vstr	s0, [r4, #-4]
 8012dda:	f846 a908 	str.w	sl, [r6], #-8
 8012dde:	ee35 6a46 	vsub.f32	s12, s10, s12
 8012de2:	ee35 7a87 	vadd.f32	s14, s11, s14
 8012de6:	edc6 3a01 	vstr	s7, [r6, #4]
 8012dea:	ee76 6a86 	vadd.f32	s13, s13, s12
 8012dee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012df2:	ed1e 6a05 	vldr	s12, [lr, #-20]	; 0xffffffec
 8012df6:	ed1e 7a06 	vldr	s14, [lr, #-24]	; 0xffffffe8
 8012dfa:	ee67 5a86 	vmul.f32	s11, s15, s12
 8012dfe:	ee26 5a87 	vmul.f32	s10, s13, s14
 8012e02:	ee72 2a62 	vsub.f32	s5, s4, s5
 8012e06:	ee30 1ac1 	vsub.f32	s2, s1, s2
 8012e0a:	ee72 2ae1 	vsub.f32	s5, s5, s3
 8012e0e:	ee75 5a25 	vadd.f32	s11, s10, s11
 8012e12:	ee62 0a86 	vmul.f32	s1, s5, s12
 8012e16:	ee66 6a86 	vmul.f32	s13, s13, s12
 8012e1a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012e1e:	ee21 6a06 	vmul.f32	s12, s2, s12
 8012e22:	ee62 2a87 	vmul.f32	s5, s5, s14
 8012e26:	ee21 1a07 	vmul.f32	s2, s2, s14
 8012e2a:	ee15 aa90 	vmov	sl, s11
 8012e2e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8012e32:	f840 ab08 	str.w	sl, [r0], #8
 8012e36:	ee30 1ac1 	vsub.f32	s2, s1, s2
 8012e3a:	ee76 2a22 	vadd.f32	s5, s12, s5
 8012e3e:	f1b9 0901 	subs.w	r9, r9, #1
 8012e42:	ed40 7a01 	vstr	s15, [r0, #-4]
 8012e46:	f105 0508 	add.w	r5, r5, #8
 8012e4a:	ed83 1a02 	vstr	s2, [r3, #8]
 8012e4e:	edc3 2a01 	vstr	s5, [r3, #4]
 8012e52:	f108 0808 	add.w	r8, r8, #8
 8012e56:	f1a2 0208 	sub.w	r2, r2, #8
 8012e5a:	f10c 0c10 	add.w	ip, ip, #16
 8012e5e:	f104 0408 	add.w	r4, r4, #8
 8012e62:	f10e 0e18 	add.w	lr, lr, #24
 8012e66:	f1a3 0308 	sub.w	r3, r3, #8
 8012e6a:	f47f aefc 	bne.w	8012c66 <arm_cfft_radix8by4_f32+0x13e>
 8012e6e:	9908      	ldr	r1, [sp, #32]
 8012e70:	9802      	ldr	r0, [sp, #8]
 8012e72:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 8012e76:	00cb      	lsls	r3, r1, #3
 8012e78:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8012e7c:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8012e80:	9102      	str	r1, [sp, #8]
 8012e82:	9904      	ldr	r1, [sp, #16]
 8012e84:	4419      	add	r1, r3
 8012e86:	9104      	str	r1, [sp, #16]
 8012e88:	9905      	ldr	r1, [sp, #20]
 8012e8a:	4419      	add	r1, r3
 8012e8c:	9105      	str	r1, [sp, #20]
 8012e8e:	9907      	ldr	r1, [sp, #28]
 8012e90:	449b      	add	fp, r3
 8012e92:	4419      	add	r1, r3
 8012e94:	449a      	add	sl, r3
 8012e96:	9b06      	ldr	r3, [sp, #24]
 8012e98:	9107      	str	r1, [sp, #28]
 8012e9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012e9e:	9306      	str	r3, [sp, #24]
 8012ea0:	9a04      	ldr	r2, [sp, #16]
 8012ea2:	9807      	ldr	r0, [sp, #28]
 8012ea4:	edd2 3a00 	vldr	s7, [r2]
 8012ea8:	ed90 4a00 	vldr	s8, [r0]
 8012eac:	eddb 7a00 	vldr	s15, [fp]
 8012eb0:	ed9a 3a00 	vldr	s6, [sl]
 8012eb4:	edd2 4a01 	vldr	s9, [r2, #4]
 8012eb8:	ed90 7a01 	vldr	s14, [r0, #4]
 8012ebc:	ed9b 2a01 	vldr	s4, [fp, #4]
 8012ec0:	edda 5a01 	vldr	s11, [sl, #4]
 8012ec4:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 8012ec8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8012eca:	ee73 6a84 	vadd.f32	s13, s7, s8
 8012ece:	ee34 6a87 	vadd.f32	s12, s9, s14
 8012ed2:	ee36 5aa7 	vadd.f32	s10, s13, s15
 8012ed6:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8012eda:	ee33 5a05 	vadd.f32	s10, s6, s10
 8012ede:	ee33 4ac4 	vsub.f32	s8, s7, s8
 8012ee2:	ed82 5a00 	vstr	s10, [r2]
 8012ee6:	ed9b 5a01 	vldr	s10, [fp, #4]
 8012eea:	edda 4a01 	vldr	s9, [sl, #4]
 8012eee:	ee36 5a05 	vadd.f32	s10, s12, s10
 8012ef2:	ee72 3a04 	vadd.f32	s7, s4, s8
 8012ef6:	ee35 5a24 	vadd.f32	s10, s10, s9
 8012efa:	ee77 4a67 	vsub.f32	s9, s14, s15
 8012efe:	ed82 5a01 	vstr	s10, [r2, #4]
 8012f02:	9a05      	ldr	r2, [sp, #20]
 8012f04:	ee34 5a83 	vadd.f32	s10, s9, s6
 8012f08:	edd2 1a00 	vldr	s3, [r2]
 8012f0c:	edd2 2a01 	vldr	s5, [r2, #4]
 8012f10:	9a02      	ldr	r2, [sp, #8]
 8012f12:	ee73 3ae5 	vsub.f32	s7, s7, s11
 8012f16:	ee36 6a42 	vsub.f32	s12, s12, s4
 8012f1a:	ee63 4aa1 	vmul.f32	s9, s7, s3
 8012f1e:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8012f22:	ee65 2a22 	vmul.f32	s5, s10, s5
 8012f26:	ee25 5a21 	vmul.f32	s10, s10, s3
 8012f2a:	ee74 2aa2 	vadd.f32	s5, s9, s5
 8012f2e:	ee35 5a63 	vsub.f32	s10, s10, s7
 8012f32:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8012f36:	edcb 2a00 	vstr	s5, [fp]
 8012f3a:	ed8b 5a01 	vstr	s10, [fp, #4]
 8012f3e:	edd2 3a01 	vldr	s7, [r2, #4]
 8012f42:	ed92 5a00 	vldr	s10, [r2]
 8012f46:	9a06      	ldr	r2, [sp, #24]
 8012f48:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8012f4c:	ee36 6a65 	vsub.f32	s12, s12, s11
 8012f50:	ee66 4a85 	vmul.f32	s9, s13, s10
 8012f54:	ee26 5a05 	vmul.f32	s10, s12, s10
 8012f58:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8012f5c:	ee26 6a23 	vmul.f32	s12, s12, s7
 8012f60:	ee75 6a66 	vsub.f32	s13, s10, s13
 8012f64:	ee34 6a86 	vadd.f32	s12, s9, s12
 8012f68:	ee34 4a42 	vsub.f32	s8, s8, s4
 8012f6c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012f70:	edc0 6a01 	vstr	s13, [r0, #4]
 8012f74:	ed80 6a00 	vstr	s12, [r0]
 8012f78:	ed92 6a01 	vldr	s12, [r2, #4]
 8012f7c:	9803      	ldr	r0, [sp, #12]
 8012f7e:	ee77 7a43 	vsub.f32	s15, s14, s6
 8012f82:	ee75 5a84 	vadd.f32	s11, s11, s8
 8012f86:	ed92 7a00 	vldr	s14, [r2]
 8012f8a:	ee65 6a87 	vmul.f32	s13, s11, s14
 8012f8e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8012f92:	ee65 5a86 	vmul.f32	s11, s11, s12
 8012f96:	ee67 7a86 	vmul.f32	s15, s15, s12
 8012f9a:	ee77 5a65 	vsub.f32	s11, s14, s11
 8012f9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012fa2:	edca 5a01 	vstr	s11, [sl, #4]
 8012fa6:	edca 7a00 	vstr	s15, [sl]
 8012faa:	6872      	ldr	r2, [r6, #4]
 8012fac:	4621      	mov	r1, r4
 8012fae:	2304      	movs	r3, #4
 8012fb0:	f000 fc34 	bl	801381c <arm_radix8_butterfly_f32>
 8012fb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012fb6:	6872      	ldr	r2, [r6, #4]
 8012fb8:	4621      	mov	r1, r4
 8012fba:	2304      	movs	r3, #4
 8012fbc:	f000 fc2e 	bl	801381c <arm_radix8_butterfly_f32>
 8012fc0:	980a      	ldr	r0, [sp, #40]	; 0x28
 8012fc2:	6872      	ldr	r2, [r6, #4]
 8012fc4:	4621      	mov	r1, r4
 8012fc6:	2304      	movs	r3, #4
 8012fc8:	f000 fc28 	bl	801381c <arm_radix8_butterfly_f32>
 8012fcc:	9801      	ldr	r0, [sp, #4]
 8012fce:	6872      	ldr	r2, [r6, #4]
 8012fd0:	4621      	mov	r1, r4
 8012fd2:	2304      	movs	r3, #4
 8012fd4:	b00f      	add	sp, #60	; 0x3c
 8012fd6:	ecbd 8b0a 	vpop	{d8-d12}
 8012fda:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012fde:	f000 bc1d 	b.w	801381c <arm_radix8_butterfly_f32>
 8012fe2:	bf00      	nop

08012fe4 <arm_cfft_f32>:
 8012fe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012fe8:	2a01      	cmp	r2, #1
 8012fea:	4606      	mov	r6, r0
 8012fec:	4617      	mov	r7, r2
 8012fee:	460c      	mov	r4, r1
 8012ff0:	4698      	mov	r8, r3
 8012ff2:	8805      	ldrh	r5, [r0, #0]
 8012ff4:	d054      	beq.n	80130a0 <arm_cfft_f32+0xbc>
 8012ff6:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8012ffa:	d04c      	beq.n	8013096 <arm_cfft_f32+0xb2>
 8012ffc:	d916      	bls.n	801302c <arm_cfft_f32+0x48>
 8012ffe:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8013002:	d01a      	beq.n	801303a <arm_cfft_f32+0x56>
 8013004:	d95c      	bls.n	80130c0 <arm_cfft_f32+0xdc>
 8013006:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 801300a:	d044      	beq.n	8013096 <arm_cfft_f32+0xb2>
 801300c:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8013010:	d105      	bne.n	801301e <arm_cfft_f32+0x3a>
 8013012:	4620      	mov	r0, r4
 8013014:	4629      	mov	r1, r5
 8013016:	6872      	ldr	r2, [r6, #4]
 8013018:	2301      	movs	r3, #1
 801301a:	f000 fbff 	bl	801381c <arm_radix8_butterfly_f32>
 801301e:	f1b8 0f00 	cmp.w	r8, #0
 8013022:	d111      	bne.n	8013048 <arm_cfft_f32+0x64>
 8013024:	2f01      	cmp	r7, #1
 8013026:	d016      	beq.n	8013056 <arm_cfft_f32+0x72>
 8013028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801302c:	2d20      	cmp	r5, #32
 801302e:	d032      	beq.n	8013096 <arm_cfft_f32+0xb2>
 8013030:	d94a      	bls.n	80130c8 <arm_cfft_f32+0xe4>
 8013032:	2d40      	cmp	r5, #64	; 0x40
 8013034:	d0ed      	beq.n	8013012 <arm_cfft_f32+0x2e>
 8013036:	2d80      	cmp	r5, #128	; 0x80
 8013038:	d1f1      	bne.n	801301e <arm_cfft_f32+0x3a>
 801303a:	4630      	mov	r0, r6
 801303c:	4621      	mov	r1, r4
 801303e:	f7ff fca1 	bl	8012984 <arm_cfft_radix8by2_f32>
 8013042:	f1b8 0f00 	cmp.w	r8, #0
 8013046:	d0ed      	beq.n	8013024 <arm_cfft_f32+0x40>
 8013048:	4620      	mov	r0, r4
 801304a:	89b1      	ldrh	r1, [r6, #12]
 801304c:	68b2      	ldr	r2, [r6, #8]
 801304e:	f7f1 f8df 	bl	8004210 <arm_bitreversal_32>
 8013052:	2f01      	cmp	r7, #1
 8013054:	d1e8      	bne.n	8013028 <arm_cfft_f32+0x44>
 8013056:	ee07 5a90 	vmov	s15, r5
 801305a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801305e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013062:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 8013066:	2d00      	cmp	r5, #0
 8013068:	d0de      	beq.n	8013028 <arm_cfft_f32+0x44>
 801306a:	f104 0108 	add.w	r1, r4, #8
 801306e:	2300      	movs	r3, #0
 8013070:	3301      	adds	r3, #1
 8013072:	429d      	cmp	r5, r3
 8013074:	f101 0108 	add.w	r1, r1, #8
 8013078:	ed11 7a04 	vldr	s14, [r1, #-16]
 801307c:	ed51 7a03 	vldr	s15, [r1, #-12]
 8013080:	ee27 7a26 	vmul.f32	s14, s14, s13
 8013084:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8013088:	ed01 7a04 	vstr	s14, [r1, #-16]
 801308c:	ed41 7a03 	vstr	s15, [r1, #-12]
 8013090:	d1ee      	bne.n	8013070 <arm_cfft_f32+0x8c>
 8013092:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013096:	4630      	mov	r0, r6
 8013098:	4621      	mov	r1, r4
 801309a:	f7ff fd45 	bl	8012b28 <arm_cfft_radix8by4_f32>
 801309e:	e7be      	b.n	801301e <arm_cfft_f32+0x3a>
 80130a0:	b1ad      	cbz	r5, 80130ce <arm_cfft_f32+0xea>
 80130a2:	f101 030c 	add.w	r3, r1, #12
 80130a6:	2200      	movs	r2, #0
 80130a8:	ed53 7a02 	vldr	s15, [r3, #-8]
 80130ac:	3201      	adds	r2, #1
 80130ae:	eef1 7a67 	vneg.f32	s15, s15
 80130b2:	4295      	cmp	r5, r2
 80130b4:	ed43 7a02 	vstr	s15, [r3, #-8]
 80130b8:	f103 0308 	add.w	r3, r3, #8
 80130bc:	d1f4      	bne.n	80130a8 <arm_cfft_f32+0xc4>
 80130be:	e79a      	b.n	8012ff6 <arm_cfft_f32+0x12>
 80130c0:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 80130c4:	d0a5      	beq.n	8013012 <arm_cfft_f32+0x2e>
 80130c6:	e7aa      	b.n	801301e <arm_cfft_f32+0x3a>
 80130c8:	2d10      	cmp	r5, #16
 80130ca:	d0b6      	beq.n	801303a <arm_cfft_f32+0x56>
 80130cc:	e7a7      	b.n	801301e <arm_cfft_f32+0x3a>
 80130ce:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80130d2:	d894      	bhi.n	8012ffe <arm_cfft_f32+0x1a>
 80130d4:	e7aa      	b.n	801302c <arm_cfft_f32+0x48>
 80130d6:	bf00      	nop

080130d8 <arm_fir_decimate_q15>:
 80130d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130dc:	b097      	sub	sp, #92	; 0x5c
 80130de:	4606      	mov	r6, r0
 80130e0:	9107      	str	r1, [sp, #28]
 80130e2:	8841      	ldrh	r1, [r0, #2]
 80130e4:	9005      	str	r0, [sp, #20]
 80130e6:	9113      	str	r1, [sp, #76]	; 0x4c
 80130e8:	4608      	mov	r0, r1
 80130ea:	68b1      	ldr	r1, [r6, #8]
 80130ec:	9212      	str	r2, [sp, #72]	; 0x48
 80130ee:	460f      	mov	r7, r1
 80130f0:	4604      	mov	r4, r0
 80130f2:	7831      	ldrb	r1, [r6, #0]
 80130f4:	fbb3 f3f1 	udiv	r3, r3, r1
 80130f8:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80130fc:	085d      	lsrs	r5, r3, #1
 80130fe:	eba3 0345 	sub.w	r3, r3, r5, lsl #1
 8013102:	3801      	subs	r0, #1
 8013104:	eb07 0040 	add.w	r0, r7, r0, lsl #1
 8013108:	9700      	str	r7, [sp, #0]
 801310a:	9315      	str	r3, [sp, #84]	; 0x54
 801310c:	462f      	mov	r7, r5
 801310e:	6873      	ldr	r3, [r6, #4]
 8013110:	9514      	str	r5, [sp, #80]	; 0x50
 8013112:	4696      	mov	lr, r2
 8013114:	9006      	str	r0, [sp, #24]
 8013116:	9309      	str	r3, [sp, #36]	; 0x24
 8013118:	2f00      	cmp	r7, #0
 801311a:	f000 80e7 	beq.w	80132ec <arm_fir_decimate_q15+0x214>
 801311e:	4620      	mov	r0, r4
 8013120:	08a4      	lsrs	r4, r4, #2
 8013122:	940e      	str	r4, [sp, #56]	; 0x38
 8013124:	00e4      	lsls	r4, r4, #3
 8013126:	4423      	add	r3, r4
 8013128:	9311      	str	r3, [sp, #68]	; 0x44
 801312a:	f000 0303 	and.w	r3, r0, #3
 801312e:	930f      	str	r3, [sp, #60]	; 0x3c
 8013130:	4673      	mov	r3, lr
 8013132:	3304      	adds	r3, #4
 8013134:	f8dd 8000 	ldr.w	r8, [sp]
 8013138:	9410      	str	r4, [sp, #64]	; 0x40
 801313a:	460a      	mov	r2, r1
 801313c:	930b      	str	r3, [sp, #44]	; 0x2c
 801313e:	970a      	str	r7, [sp, #40]	; 0x28
 8013140:	9807      	ldr	r0, [sp, #28]
 8013142:	9e06      	ldr	r6, [sp, #24]
 8013144:	4603      	mov	r3, r0
 8013146:	4631      	mov	r1, r6
 8013148:	3304      	adds	r3, #4
 801314a:	3104      	adds	r1, #4
 801314c:	4288      	cmp	r0, r1
 801314e:	bf38      	it	cc
 8013150:	429e      	cmpcc	r6, r3
 8013152:	f04f 0102 	mov.w	r1, #2
 8013156:	bf2c      	ite	cs
 8013158:	2301      	movcs	r3, #1
 801315a:	2300      	movcc	r3, #0
 801315c:	fb12 f501 	smulbb	r5, r2, r1
 8013160:	2d0c      	cmp	r5, #12
 8013162:	bf94      	ite	ls
 8013164:	2300      	movls	r3, #0
 8013166:	f003 0301 	andhi.w	r3, r3, #1
 801316a:	2b00      	cmp	r3, #0
 801316c:	f000 80ac 	beq.w	80132c8 <arm_fir_decimate_q15+0x1f0>
 8013170:	4633      	mov	r3, r6
 8013172:	4303      	orrs	r3, r0
 8013174:	079c      	lsls	r4, r3, #30
 8013176:	f040 80a7 	bne.w	80132c8 <arm_fir_decimate_q15+0x1f0>
 801317a:	2302      	movs	r3, #2
 801317c:	f06f 0401 	mvn.w	r4, #1
 8013180:	fb13 4202 	smlabb	r2, r3, r2, r4
 8013184:	0852      	lsrs	r2, r2, #1
 8013186:	3201      	adds	r2, #1
 8013188:	3804      	subs	r0, #4
 801318a:	4631      	mov	r1, r6
 801318c:	2300      	movs	r3, #0
 801318e:	3301      	adds	r3, #1
 8013190:	f850 4f04 	ldr.w	r4, [r0, #4]!
 8013194:	f841 4b04 	str.w	r4, [r1], #4
 8013198:	429a      	cmp	r2, r3
 801319a:	d8f8      	bhi.n	801318e <arm_fir_decimate_q15+0xb6>
 801319c:	9a06      	ldr	r2, [sp, #24]
 801319e:	9b05      	ldr	r3, [sp, #20]
 80131a0:	006d      	lsls	r5, r5, #1
 80131a2:	442a      	add	r2, r5
 80131a4:	9206      	str	r2, [sp, #24]
 80131a6:	9a07      	ldr	r2, [sp, #28]
 80131a8:	781b      	ldrb	r3, [r3, #0]
 80131aa:	442a      	add	r2, r5
 80131ac:	005b      	lsls	r3, r3, #1
 80131ae:	9207      	str	r2, [sp, #28]
 80131b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80131b2:	930c      	str	r3, [sp, #48]	; 0x30
 80131b4:	4443      	add	r3, r8
 80131b6:	9308      	str	r3, [sp, #32]
 80131b8:	2a00      	cmp	r2, #0
 80131ba:	f000 817f 	beq.w	80134bc <arm_fir_decimate_q15+0x3e4>
 80131be:	2000      	movs	r0, #0
 80131c0:	2100      	movs	r1, #0
 80131c2:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80131c4:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 80131c8:	e9cd 0100 	strd	r0, r1, [sp]
 80131cc:	f104 0a08 	add.w	sl, r4, #8
 80131d0:	f108 0908 	add.w	r9, r8, #8
 80131d4:	3308      	adds	r3, #8
 80131d6:	4693      	mov	fp, r2
 80131d8:	4604      	mov	r4, r0
 80131da:	460d      	mov	r5, r1
 80131dc:	f83a 1c08 	ldrh.w	r1, [sl, #-8]
 80131e0:	f839 7c08 	ldrh.w	r7, [r9, #-8]
 80131e4:	f833 0c08 	ldrh.w	r0, [r3, #-8]
 80131e8:	f83a ec06 	ldrh.w	lr, [sl, #-6]
 80131ec:	f839 2c06 	ldrh.w	r2, [r9, #-6]
 80131f0:	f833 8c06 	ldrh.w	r8, [r3, #-6]
 80131f4:	f83a 6c04 	ldrh.w	r6, [sl, #-4]
 80131f8:	f839 cc04 	ldrh.w	ip, [r9, #-4]
 80131fc:	fbc7 4581 	smlalbb	r4, r5, r7, r1
 8013200:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8013204:	e9dd 4500 	ldrd	r4, r5, [sp]
 8013208:	fbc1 4580 	smlalbb	r4, r5, r1, r0
 801320c:	4620      	mov	r0, r4
 801320e:	4629      	mov	r1, r5
 8013210:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8013214:	f833 7c04 	ldrh.w	r7, [r3, #-4]
 8013218:	fbc2 458e 	smlalbb	r4, r5, r2, lr
 801321c:	fbce 0188 	smlalbb	r0, r1, lr, r8
 8013220:	f83a 2c02 	ldrh.w	r2, [sl, #-2]
 8013224:	f833 ec02 	ldrh.w	lr, [r3, #-2]
 8013228:	f839 8c02 	ldrh.w	r8, [r9, #-2]
 801322c:	fbc6 0187 	smlalbb	r0, r1, r6, r7
 8013230:	fbcc 4586 	smlalbb	r4, r5, ip, r6
 8013234:	fbc2 018e 	smlalbb	r0, r1, r2, lr
 8013238:	f1bb 0b01 	subs.w	fp, fp, #1
 801323c:	f10a 0a08 	add.w	sl, sl, #8
 8013240:	fbc8 4582 	smlalbb	r4, r5, r8, r2
 8013244:	f109 0908 	add.w	r9, r9, #8
 8013248:	e9cd 0100 	strd	r0, r1, [sp]
 801324c:	f103 0308 	add.w	r3, r3, #8
 8013250:	d1c4      	bne.n	80131dc <arm_fir_decimate_q15+0x104>
 8013252:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013254:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 8013258:	4620      	mov	r0, r4
 801325a:	9c08      	ldr	r4, [sp, #32]
 801325c:	4629      	mov	r1, r5
 801325e:	18a5      	adds	r5, r4, r2
 8013260:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8013262:	4490      	add	r8, r2
 8013264:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013266:	b17b      	cbz	r3, 8013288 <arm_fir_decimate_q15+0x1b0>
 8013268:	e9dd 6700 	ldrd	r6, r7, [sp]
 801326c:	f834 2b02 	ldrh.w	r2, [r4], #2
 8013270:	f838 cb02 	ldrh.w	ip, [r8], #2
 8013274:	f835 eb02 	ldrh.w	lr, [r5], #2
 8013278:	3b01      	subs	r3, #1
 801327a:	fbcc 0182 	smlalbb	r0, r1, ip, r2
 801327e:	fbc2 678e 	smlalbb	r6, r7, r2, lr
 8013282:	d1f3      	bne.n	801326c <arm_fir_decimate_q15+0x194>
 8013284:	e9cd 6700 	strd	r6, r7, [sp]
 8013288:	0bc3      	lsrs	r3, r0, #15
 801328a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801328c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801328e:	9a08      	ldr	r2, [sp, #32]
 8013290:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 8013294:	f303 030f 	ssat	r3, #16, r3
 8013298:	f820 3c04 	strh.w	r3, [r0, #-4]
 801329c:	4603      	mov	r3, r0
 801329e:	4422      	add	r2, r4
 80132a0:	3304      	adds	r3, #4
 80132a2:	e9dd 4500 	ldrd	r4, r5, [sp]
 80132a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80132a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80132aa:	4690      	mov	r8, r2
 80132ac:	3b01      	subs	r3, #1
 80132ae:	ea4f 32d4 	mov.w	r2, r4, lsr #15
 80132b2:	ea42 4245 	orr.w	r2, r2, r5, lsl #17
 80132b6:	930a      	str	r3, [sp, #40]	; 0x28
 80132b8:	f302 020f 	ssat	r2, #16, r2
 80132bc:	f820 2c02 	strh.w	r2, [r0, #-2]
 80132c0:	d00d      	beq.n	80132de <arm_fir_decimate_q15+0x206>
 80132c2:	9b05      	ldr	r3, [sp, #20]
 80132c4:	781a      	ldrb	r2, [r3, #0]
 80132c6:	e73b      	b.n	8013140 <arm_fir_decimate_q15+0x68>
 80132c8:	9b06      	ldr	r3, [sp, #24]
 80132ca:	9a07      	ldr	r2, [sp, #28]
 80132cc:	1e99      	subs	r1, r3, #2
 80132ce:	462b      	mov	r3, r5
 80132d0:	f832 0b02 	ldrh.w	r0, [r2], #2
 80132d4:	f821 0f02 	strh.w	r0, [r1, #2]!
 80132d8:	3b01      	subs	r3, #1
 80132da:	d1f9      	bne.n	80132d0 <arm_fir_decimate_q15+0x1f8>
 80132dc:	e75e      	b.n	801319c <arm_fir_decimate_q15+0xc4>
 80132de:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80132e0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80132e2:	f8cd 8000 	str.w	r8, [sp]
 80132e6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80132ea:	9312      	str	r3, [sp, #72]	; 0x48
 80132ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80132ee:	2b00      	cmp	r3, #0
 80132f0:	f000 8091 	beq.w	8013416 <arm_fir_decimate_q15+0x33e>
 80132f4:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80132f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80132f8:	9e07      	ldr	r6, [sp, #28]
 80132fa:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
 80132fe:	9f00      	ldr	r7, [sp, #0]
 8013300:	9d06      	ldr	r5, [sp, #24]
 8013302:	ea4f 0c91 	mov.w	ip, r1, lsr #2
 8013306:	ea4f 09cc 	mov.w	r9, ip, lsl #3
 801330a:	eb02 0a09 	add.w	sl, r2, r9
 801330e:	f001 0803 	and.w	r8, r1, #3
 8013312:	f8cd a018 	str.w	sl, [sp, #24]
 8013316:	f8cd 9020 	str.w	r9, [sp, #32]
 801331a:	f8cd c000 	str.w	ip, [sp]
 801331e:	f8cd 8008 	str.w	r8, [sp, #8]
 8013322:	469a      	mov	sl, r3
 8013324:	9a05      	ldr	r2, [sp, #20]
 8013326:	1d29      	adds	r1, r5, #4
 8013328:	1d33      	adds	r3, r6, #4
 801332a:	428e      	cmp	r6, r1
 801332c:	bf38      	it	cc
 801332e:	429d      	cmpcc	r5, r3
 8013330:	7812      	ldrb	r2, [r2, #0]
 8013332:	bf2c      	ite	cs
 8013334:	2101      	movcs	r1, #1
 8013336:	2100      	movcc	r1, #0
 8013338:	2a0c      	cmp	r2, #12
 801333a:	bf94      	ite	ls
 801333c:	2100      	movls	r1, #0
 801333e:	f001 0101 	andhi.w	r1, r1, #1
 8013342:	4613      	mov	r3, r2
 8013344:	2900      	cmp	r1, #0
 8013346:	f000 80a5 	beq.w	8013494 <arm_fir_decimate_q15+0x3bc>
 801334a:	ea45 0106 	orr.w	r1, r5, r6
 801334e:	0789      	lsls	r1, r1, #30
 8013350:	f040 80a0 	bne.w	8013494 <arm_fir_decimate_q15+0x3bc>
 8013354:	1e91      	subs	r1, r2, #2
 8013356:	0849      	lsrs	r1, r1, #1
 8013358:	3101      	adds	r1, #1
 801335a:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 801335e:	1f34      	subs	r4, r6, #4
 8013360:	4628      	mov	r0, r5
 8013362:	2300      	movs	r3, #0
 8013364:	468e      	mov	lr, r1
 8013366:	3301      	adds	r3, #1
 8013368:	f854 1f04 	ldr.w	r1, [r4, #4]!
 801336c:	f840 1b04 	str.w	r1, [r0], #4
 8013370:	4573      	cmp	r3, lr
 8013372:	d3f8      	bcc.n	8013366 <arm_fir_decimate_q15+0x28e>
 8013374:	4562      	cmp	r2, ip
 8013376:	d003      	beq.n	8013380 <arm_fir_decimate_q15+0x2a8>
 8013378:	f836 301c 	ldrh.w	r3, [r6, ip, lsl #1]
 801337c:	f825 301c 	strh.w	r3, [r5, ip, lsl #1]
 8013380:	9b00      	ldr	r3, [sp, #0]
 8013382:	0052      	lsls	r2, r2, #1
 8013384:	4415      	add	r5, r2
 8013386:	4416      	add	r6, r2
 8013388:	2b00      	cmp	r3, #0
 801338a:	f000 8092 	beq.w	80134b2 <arm_fir_decimate_q15+0x3da>
 801338e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013390:	461c      	mov	r4, r3
 8013392:	f102 0008 	add.w	r0, r2, #8
 8013396:	f107 0108 	add.w	r1, r7, #8
 801339a:	2200      	movs	r2, #0
 801339c:	2300      	movs	r3, #0
 801339e:	46b9      	mov	r9, r7
 80133a0:	f830 cc08 	ldrh.w	ip, [r0, #-8]
 80133a4:	f831 8c08 	ldrh.w	r8, [r1, #-8]
 80133a8:	f830 7c06 	ldrh.w	r7, [r0, #-6]
 80133ac:	f831 ec06 	ldrh.w	lr, [r1, #-6]
 80133b0:	fbc8 238c 	smlalbb	r2, r3, r8, ip
 80133b4:	f830 cc04 	ldrh.w	ip, [r0, #-4]
 80133b8:	f831 8c04 	ldrh.w	r8, [r1, #-4]
 80133bc:	fbce 2387 	smlalbb	r2, r3, lr, r7
 80133c0:	f830 7c02 	ldrh.w	r7, [r0, #-2]
 80133c4:	f831 ec02 	ldrh.w	lr, [r1, #-2]
 80133c8:	fbc8 238c 	smlalbb	r2, r3, r8, ip
 80133cc:	3c01      	subs	r4, #1
 80133ce:	f100 0008 	add.w	r0, r0, #8
 80133d2:	fbce 2387 	smlalbb	r2, r3, lr, r7
 80133d6:	f101 0108 	add.w	r1, r1, #8
 80133da:	d1e1      	bne.n	80133a0 <arm_fir_decimate_q15+0x2c8>
 80133dc:	9908      	ldr	r1, [sp, #32]
 80133de:	9806      	ldr	r0, [sp, #24]
 80133e0:	464f      	mov	r7, r9
 80133e2:	187c      	adds	r4, r7, r1
 80133e4:	9902      	ldr	r1, [sp, #8]
 80133e6:	b139      	cbz	r1, 80133f8 <arm_fir_decimate_q15+0x320>
 80133e8:	f830 eb02 	ldrh.w	lr, [r0], #2
 80133ec:	f834 cb02 	ldrh.w	ip, [r4], #2
 80133f0:	3901      	subs	r1, #1
 80133f2:	fbcc 238e 	smlalbb	r2, r3, ip, lr
 80133f6:	d1f7      	bne.n	80133e8 <arm_fir_decimate_q15+0x310>
 80133f8:	9905      	ldr	r1, [sp, #20]
 80133fa:	7809      	ldrb	r1, [r1, #0]
 80133fc:	0bd2      	lsrs	r2, r2, #15
 80133fe:	f1ba 0a01 	subs.w	sl, sl, #1
 8013402:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
 8013406:	eb07 0741 	add.w	r7, r7, r1, lsl #1
 801340a:	f302 020f 	ssat	r2, #16, r2
 801340e:	f82b 2b02 	strh.w	r2, [fp], #2
 8013412:	d187      	bne.n	8013324 <arm_fir_decimate_q15+0x24c>
 8013414:	9700      	str	r7, [sp, #0]
 8013416:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013418:	1e5f      	subs	r7, r3, #1
 801341a:	9b05      	ldr	r3, [sp, #20]
 801341c:	08bd      	lsrs	r5, r7, #2
 801341e:	689e      	ldr	r6, [r3, #8]
 8013420:	d02a      	beq.n	8013478 <arm_fir_decimate_q15+0x3a0>
 8013422:	9800      	ldr	r0, [sp, #0]
 8013424:	4603      	mov	r3, r0
 8013426:	3310      	adds	r3, #16
 8013428:	f106 0210 	add.w	r2, r6, #16
 801342c:	4290      	cmp	r0, r2
 801342e:	bf38      	it	cc
 8013430:	429e      	cmpcc	r6, r3
 8013432:	bf2c      	ite	cs
 8013434:	2301      	movcs	r3, #1
 8013436:	2300      	movcc	r3, #0
 8013438:	2d06      	cmp	r5, #6
 801343a:	bf94      	ite	ls
 801343c:	2300      	movls	r3, #0
 801343e:	f003 0301 	andhi.w	r3, r3, #1
 8013442:	2b00      	cmp	r3, #0
 8013444:	d043      	beq.n	80134ce <arm_fir_decimate_q15+0x3f6>
 8013446:	4603      	mov	r3, r0
 8013448:	4333      	orrs	r3, r6
 801344a:	079b      	lsls	r3, r3, #30
 801344c:	d13f      	bne.n	80134ce <arm_fir_decimate_q15+0x3f6>
 801344e:	4603      	mov	r3, r0
 8013450:	f106 0208 	add.w	r2, r6, #8
 8013454:	3308      	adds	r3, #8
 8013456:	2100      	movs	r1, #0
 8013458:	e913 0011 	ldmdb	r3, {r0, r4}
 801345c:	3101      	adds	r1, #1
 801345e:	42a9      	cmp	r1, r5
 8013460:	e902 0011 	stmdb	r2, {r0, r4}
 8013464:	f103 0308 	add.w	r3, r3, #8
 8013468:	f102 0208 	add.w	r2, r2, #8
 801346c:	d1f4      	bne.n	8013458 <arm_fir_decimate_q15+0x380>
 801346e:	9b00      	ldr	r3, [sp, #0]
 8013470:	00ed      	lsls	r5, r5, #3
 8013472:	442b      	add	r3, r5
 8013474:	442e      	add	r6, r5
 8013476:	9300      	str	r3, [sp, #0]
 8013478:	f017 0303 	ands.w	r3, r7, #3
 801347c:	d007      	beq.n	801348e <arm_fir_decimate_q15+0x3b6>
 801347e:	9a00      	ldr	r2, [sp, #0]
 8013480:	3e02      	subs	r6, #2
 8013482:	f832 1b02 	ldrh.w	r1, [r2], #2
 8013486:	f826 1f02 	strh.w	r1, [r6, #2]!
 801348a:	3b01      	subs	r3, #1
 801348c:	d1f9      	bne.n	8013482 <arm_fir_decimate_q15+0x3aa>
 801348e:	b017      	add	sp, #92	; 0x5c
 8013490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013494:	1ea8      	subs	r0, r5, #2
 8013496:	4631      	mov	r1, r6
 8013498:	f831 4b02 	ldrh.w	r4, [r1], #2
 801349c:	f820 4f02 	strh.w	r4, [r0, #2]!
 80134a0:	3b01      	subs	r3, #1
 80134a2:	d1f9      	bne.n	8013498 <arm_fir_decimate_q15+0x3c0>
 80134a4:	9b00      	ldr	r3, [sp, #0]
 80134a6:	0052      	lsls	r2, r2, #1
 80134a8:	4415      	add	r5, r2
 80134aa:	4416      	add	r6, r2
 80134ac:	2b00      	cmp	r3, #0
 80134ae:	f47f af6e 	bne.w	801338e <arm_fir_decimate_q15+0x2b6>
 80134b2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80134b4:	463c      	mov	r4, r7
 80134b6:	2200      	movs	r2, #0
 80134b8:	2300      	movs	r3, #0
 80134ba:	e793      	b.n	80133e4 <arm_fir_decimate_q15+0x30c>
 80134bc:	2200      	movs	r2, #0
 80134be:	461d      	mov	r5, r3
 80134c0:	2300      	movs	r3, #0
 80134c2:	e9cd 2300 	strd	r2, r3, [sp]
 80134c6:	4610      	mov	r0, r2
 80134c8:	4619      	mov	r1, r3
 80134ca:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80134cc:	e6ca      	b.n	8013264 <arm_fir_decimate_q15+0x18c>
 80134ce:	9b00      	ldr	r3, [sp, #0]
 80134d0:	4629      	mov	r1, r5
 80134d2:	f103 0208 	add.w	r2, r3, #8
 80134d6:	f106 0308 	add.w	r3, r6, #8
 80134da:	f832 0c08 	ldrh.w	r0, [r2, #-8]
 80134de:	f823 0c08 	strh.w	r0, [r3, #-8]
 80134e2:	f832 0c06 	ldrh.w	r0, [r2, #-6]
 80134e6:	f823 0c06 	strh.w	r0, [r3, #-6]
 80134ea:	f832 0c04 	ldrh.w	r0, [r2, #-4]
 80134ee:	f823 0c04 	strh.w	r0, [r3, #-4]
 80134f2:	f832 0c02 	ldrh.w	r0, [r2, #-2]
 80134f6:	f823 0c02 	strh.w	r0, [r3, #-2]
 80134fa:	3901      	subs	r1, #1
 80134fc:	f102 0208 	add.w	r2, r2, #8
 8013500:	f103 0308 	add.w	r3, r3, #8
 8013504:	d1e9      	bne.n	80134da <arm_fir_decimate_q15+0x402>
 8013506:	e7b2      	b.n	801346e <arm_fir_decimate_q15+0x396>

08013508 <arm_fir_decimate_init_q15>:
 8013508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801350a:	9d07      	ldr	r5, [sp, #28]
 801350c:	fbb5 f4f2 	udiv	r4, r5, r2
 8013510:	fb02 5414 	mls	r4, r2, r4, r5
 8013514:	4617      	mov	r7, r2
 8013516:	b98c      	cbnz	r4, 801353c <arm_fir_decimate_init_q15+0x34>
 8013518:	f101 4200 	add.w	r2, r1, #2147483648	; 0x80000000
 801351c:	3a01      	subs	r2, #1
 801351e:	442a      	add	r2, r5
 8013520:	4606      	mov	r6, r0
 8013522:	8041      	strh	r1, [r0, #2]
 8013524:	6043      	str	r3, [r0, #4]
 8013526:	0052      	lsls	r2, r2, #1
 8013528:	9806      	ldr	r0, [sp, #24]
 801352a:	4621      	mov	r1, r4
 801352c:	f002 fd41 	bl	8015fb2 <memset>
 8013530:	9b06      	ldr	r3, [sp, #24]
 8013532:	60b3      	str	r3, [r6, #8]
 8013534:	7037      	strb	r7, [r6, #0]
 8013536:	4620      	mov	r0, r4
 8013538:	b240      	sxtb	r0, r0
 801353a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801353c:	20fe      	movs	r0, #254	; 0xfe
 801353e:	e7fb      	b.n	8013538 <arm_fir_decimate_init_q15+0x30>

08013540 <arm_cmplx_mag_f32>:
 8013540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013544:	ea5f 0892 	movs.w	r8, r2, lsr #2
 8013548:	b084      	sub	sp, #16
 801354a:	d07f      	beq.n	801364c <arm_cmplx_mag_f32+0x10c>
 801354c:	2700      	movs	r7, #0
 801354e:	f100 0420 	add.w	r4, r0, #32
 8013552:	f101 0510 	add.w	r5, r1, #16
 8013556:	4646      	mov	r6, r8
 8013558:	e05a      	b.n	8013610 <arm_cmplx_mag_f32+0xd0>
 801355a:	eeb1 0ae7 	vsqrt.f32	s0, s15
 801355e:	eeb4 0a40 	vcmp.f32	s0, s0
 8013562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013566:	f040 80a4 	bne.w	80136b2 <arm_cmplx_mag_f32+0x172>
 801356a:	ed05 0a04 	vstr	s0, [r5, #-16]
 801356e:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 8013572:	ed14 0a05 	vldr	s0, [r4, #-20]	; 0xffffffec
 8013576:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801357a:	ee20 0a00 	vmul.f32	s0, s0, s0
 801357e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8013582:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8013586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801358a:	f2c0 808f 	blt.w	80136ac <arm_cmplx_mag_f32+0x16c>
 801358e:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8013592:	eeb4 0a40 	vcmp.f32	s0, s0
 8013596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801359a:	f040 80af 	bne.w	80136fc <arm_cmplx_mag_f32+0x1bc>
 801359e:	ed05 0a03 	vstr	s0, [r5, #-12]
 80135a2:	ed54 7a04 	vldr	s15, [r4, #-16]
 80135a6:	ed14 0a03 	vldr	s0, [r4, #-12]
 80135aa:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80135ae:	ee20 0a00 	vmul.f32	s0, s0, s0
 80135b2:	ee77 7a80 	vadd.f32	s15, s15, s0
 80135b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80135ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135be:	db72      	blt.n	80136a6 <arm_cmplx_mag_f32+0x166>
 80135c0:	eeb1 0ae7 	vsqrt.f32	s0, s15
 80135c4:	eeb4 0a40 	vcmp.f32	s0, s0
 80135c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135cc:	f040 808c 	bne.w	80136e8 <arm_cmplx_mag_f32+0x1a8>
 80135d0:	ed05 0a02 	vstr	s0, [r5, #-8]
 80135d4:	ed54 7a02 	vldr	s15, [r4, #-8]
 80135d8:	ed14 0a01 	vldr	s0, [r4, #-4]
 80135dc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80135e0:	ee20 0a00 	vmul.f32	s0, s0, s0
 80135e4:	ee77 7a80 	vadd.f32	s15, s15, s0
 80135e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80135ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135f0:	db20      	blt.n	8013634 <arm_cmplx_mag_f32+0xf4>
 80135f2:	eeb1 0ae7 	vsqrt.f32	s0, s15
 80135f6:	eeb4 0a40 	vcmp.f32	s0, s0
 80135fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135fe:	d169      	bne.n	80136d4 <arm_cmplx_mag_f32+0x194>
 8013600:	3e01      	subs	r6, #1
 8013602:	ed05 0a01 	vstr	s0, [r5, #-4]
 8013606:	f104 0420 	add.w	r4, r4, #32
 801360a:	f105 0510 	add.w	r5, r5, #16
 801360e:	d019      	beq.n	8013644 <arm_cmplx_mag_f32+0x104>
 8013610:	ed54 7a08 	vldr	s15, [r4, #-32]	; 0xffffffe0
 8013614:	ed14 0a07 	vldr	s0, [r4, #-28]	; 0xffffffe4
 8013618:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801361c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8013620:	ee77 7a80 	vadd.f32	s15, s15, s0
 8013624:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8013628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801362c:	da95      	bge.n	801355a <arm_cmplx_mag_f32+0x1a>
 801362e:	f845 7c10 	str.w	r7, [r5, #-16]
 8013632:	e79c      	b.n	801356e <arm_cmplx_mag_f32+0x2e>
 8013634:	3e01      	subs	r6, #1
 8013636:	f845 7c04 	str.w	r7, [r5, #-4]
 801363a:	f104 0420 	add.w	r4, r4, #32
 801363e:	f105 0510 	add.w	r5, r5, #16
 8013642:	d1e5      	bne.n	8013610 <arm_cmplx_mag_f32+0xd0>
 8013644:	eb00 1048 	add.w	r0, r0, r8, lsl #5
 8013648:	eb01 1108 	add.w	r1, r1, r8, lsl #4
 801364c:	f012 0503 	ands.w	r5, r2, #3
 8013650:	d026      	beq.n	80136a0 <arm_cmplx_mag_f32+0x160>
 8013652:	2600      	movs	r6, #0
 8013654:	f100 0408 	add.w	r4, r0, #8
 8013658:	e00c      	b.n	8013674 <arm_cmplx_mag_f32+0x134>
 801365a:	eeb1 0ae7 	vsqrt.f32	s0, s15
 801365e:	eeb4 0a40 	vcmp.f32	s0, s0
 8013662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013666:	d12e      	bne.n	80136c6 <arm_cmplx_mag_f32+0x186>
 8013668:	3d01      	subs	r5, #1
 801366a:	ed01 0a01 	vstr	s0, [r1, #-4]
 801366e:	f104 0408 	add.w	r4, r4, #8
 8013672:	d015      	beq.n	80136a0 <arm_cmplx_mag_f32+0x160>
 8013674:	ed54 7a02 	vldr	s15, [r4, #-8]
 8013678:	ed14 0a01 	vldr	s0, [r4, #-4]
 801367c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8013680:	ee20 0a00 	vmul.f32	s0, s0, s0
 8013684:	3104      	adds	r1, #4
 8013686:	ee77 7a80 	vadd.f32	s15, s15, s0
 801368a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801368e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013692:	dae2      	bge.n	801365a <arm_cmplx_mag_f32+0x11a>
 8013694:	3d01      	subs	r5, #1
 8013696:	f841 6c04 	str.w	r6, [r1, #-4]
 801369a:	f104 0408 	add.w	r4, r4, #8
 801369e:	d1e9      	bne.n	8013674 <arm_cmplx_mag_f32+0x134>
 80136a0:	b004      	add	sp, #16
 80136a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80136a6:	f845 7c08 	str.w	r7, [r5, #-8]
 80136aa:	e793      	b.n	80135d4 <arm_cmplx_mag_f32+0x94>
 80136ac:	f845 7c0c 	str.w	r7, [r5, #-12]
 80136b0:	e777      	b.n	80135a2 <arm_cmplx_mag_f32+0x62>
 80136b2:	eeb0 0a67 	vmov.f32	s0, s15
 80136b6:	9203      	str	r2, [sp, #12]
 80136b8:	9102      	str	r1, [sp, #8]
 80136ba:	9001      	str	r0, [sp, #4]
 80136bc:	f004 f8c6 	bl	801784c <sqrtf>
 80136c0:	a801      	add	r0, sp, #4
 80136c2:	c807      	ldmia	r0, {r0, r1, r2}
 80136c4:	e751      	b.n	801356a <arm_cmplx_mag_f32+0x2a>
 80136c6:	eeb0 0a67 	vmov.f32	s0, s15
 80136ca:	9101      	str	r1, [sp, #4]
 80136cc:	f004 f8be 	bl	801784c <sqrtf>
 80136d0:	9901      	ldr	r1, [sp, #4]
 80136d2:	e7c9      	b.n	8013668 <arm_cmplx_mag_f32+0x128>
 80136d4:	eeb0 0a67 	vmov.f32	s0, s15
 80136d8:	9203      	str	r2, [sp, #12]
 80136da:	9102      	str	r1, [sp, #8]
 80136dc:	9001      	str	r0, [sp, #4]
 80136de:	f004 f8b5 	bl	801784c <sqrtf>
 80136e2:	a801      	add	r0, sp, #4
 80136e4:	c807      	ldmia	r0, {r0, r1, r2}
 80136e6:	e78b      	b.n	8013600 <arm_cmplx_mag_f32+0xc0>
 80136e8:	eeb0 0a67 	vmov.f32	s0, s15
 80136ec:	9203      	str	r2, [sp, #12]
 80136ee:	9102      	str	r1, [sp, #8]
 80136f0:	9001      	str	r0, [sp, #4]
 80136f2:	f004 f8ab 	bl	801784c <sqrtf>
 80136f6:	a801      	add	r0, sp, #4
 80136f8:	c807      	ldmia	r0, {r0, r1, r2}
 80136fa:	e769      	b.n	80135d0 <arm_cmplx_mag_f32+0x90>
 80136fc:	eeb0 0a67 	vmov.f32	s0, s15
 8013700:	9203      	str	r2, [sp, #12]
 8013702:	9102      	str	r1, [sp, #8]
 8013704:	9001      	str	r0, [sp, #4]
 8013706:	f004 f8a1 	bl	801784c <sqrtf>
 801370a:	a801      	add	r0, sp, #4
 801370c:	c807      	ldmia	r0, {r0, r1, r2}
 801370e:	e746      	b.n	801359e <arm_cmplx_mag_f32+0x5e>

08013710 <arm_cos_f32>:
 8013710:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8013784 <arm_cos_f32+0x74>
 8013714:	ee20 0a27 	vmul.f32	s0, s0, s15
 8013718:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 801371c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8013720:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8013724:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013728:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801372c:	d504      	bpl.n	8013738 <arm_cos_f32+0x28>
 801372e:	ee17 3a90 	vmov	r3, s15
 8013732:	3b01      	subs	r3, #1
 8013734:	ee07 3a90 	vmov	s15, r3
 8013738:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801373c:	eddf 6a12 	vldr	s13, [pc, #72]	; 8013788 <arm_cos_f32+0x78>
 8013740:	4a12      	ldr	r2, [pc, #72]	; (801378c <arm_cos_f32+0x7c>)
 8013742:	ee30 0a67 	vsub.f32	s0, s0, s15
 8013746:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801374a:	ee20 0a26 	vmul.f32	s0, s0, s13
 801374e:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8013752:	ee17 3a90 	vmov	r3, s15
 8013756:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801375a:	ee07 3a90 	vmov	s15, r3
 801375e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013762:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8013766:	ee70 7a67 	vsub.f32	s15, s0, s15
 801376a:	edd1 6a01 	vldr	s13, [r1, #4]
 801376e:	ed91 0a00 	vldr	s0, [r1]
 8013772:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013776:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801377a:	ee27 0a00 	vmul.f32	s0, s14, s0
 801377e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8013782:	4770      	bx	lr
 8013784:	3e22f983 	.word	0x3e22f983
 8013788:	44000000 	.word	0x44000000
 801378c:	080297bc 	.word	0x080297bc

08013790 <arm_mult_f32>:
 8013790:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013792:	ea5f 0e93 	movs.w	lr, r3, lsr #2
 8013796:	d033      	beq.n	8013800 <arm_mult_f32+0x70>
 8013798:	f100 0610 	add.w	r6, r0, #16
 801379c:	f101 0510 	add.w	r5, r1, #16
 80137a0:	f102 0410 	add.w	r4, r2, #16
 80137a4:	4677      	mov	r7, lr
 80137a6:	ed16 6a04 	vldr	s12, [r6, #-16]
 80137aa:	ed55 4a04 	vldr	s9, [r5, #-16]
 80137ae:	ed56 6a02 	vldr	s13, [r6, #-8]
 80137b2:	ed15 5a02 	vldr	s10, [r5, #-8]
 80137b6:	ed16 7a03 	vldr	s14, [r6, #-12]
 80137ba:	ed55 5a03 	vldr	s11, [r5, #-12]
 80137be:	ed56 7a01 	vldr	s15, [r6, #-4]
 80137c2:	ee26 6a24 	vmul.f32	s12, s12, s9
 80137c6:	ee66 6a85 	vmul.f32	s13, s13, s10
 80137ca:	ed04 6a04 	vstr	s12, [r4, #-16]
 80137ce:	ed15 6a01 	vldr	s12, [r5, #-4]
 80137d2:	ed44 6a02 	vstr	s13, [r4, #-8]
 80137d6:	ee27 7a25 	vmul.f32	s14, s14, s11
 80137da:	ee67 7a86 	vmul.f32	s15, s15, s12
 80137de:	3f01      	subs	r7, #1
 80137e0:	ed04 7a03 	vstr	s14, [r4, #-12]
 80137e4:	ed44 7a01 	vstr	s15, [r4, #-4]
 80137e8:	f106 0610 	add.w	r6, r6, #16
 80137ec:	f105 0510 	add.w	r5, r5, #16
 80137f0:	f104 0410 	add.w	r4, r4, #16
 80137f4:	d1d7      	bne.n	80137a6 <arm_mult_f32+0x16>
 80137f6:	ea4f 140e 	mov.w	r4, lr, lsl #4
 80137fa:	4420      	add	r0, r4
 80137fc:	4421      	add	r1, r4
 80137fe:	4422      	add	r2, r4
 8013800:	f013 0303 	ands.w	r3, r3, #3
 8013804:	d009      	beq.n	801381a <arm_mult_f32+0x8a>
 8013806:	ecf0 7a01 	vldmia	r0!, {s15}
 801380a:	ecb1 7a01 	vldmia	r1!, {s14}
 801380e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013812:	3b01      	subs	r3, #1
 8013814:	ece2 7a01 	vstmia	r2!, {s15}
 8013818:	d1f5      	bne.n	8013806 <arm_mult_f32+0x76>
 801381a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801381c <arm_radix8_butterfly_f32>:
 801381c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013820:	ed2d 8b10 	vpush	{d8-d15}
 8013824:	b09d      	sub	sp, #116	; 0x74
 8013826:	461c      	mov	r4, r3
 8013828:	ed9f bac8 	vldr	s22, [pc, #800]	; 8013b4c <arm_radix8_butterfly_f32+0x330>
 801382c:	921a      	str	r2, [sp, #104]	; 0x68
 801382e:	1d03      	adds	r3, r0, #4
 8013830:	4682      	mov	sl, r0
 8013832:	4689      	mov	r9, r1
 8013834:	468b      	mov	fp, r1
 8013836:	931b      	str	r3, [sp, #108]	; 0x6c
 8013838:	9400      	str	r4, [sp, #0]
 801383a:	469e      	mov	lr, r3
 801383c:	ea4f 03db 	mov.w	r3, fp, lsr #3
 8013840:	005a      	lsls	r2, r3, #1
 8013842:	18d6      	adds	r6, r2, r3
 8013844:	18f5      	adds	r5, r6, r3
 8013846:	9203      	str	r2, [sp, #12]
 8013848:	195a      	adds	r2, r3, r5
 801384a:	18d0      	adds	r0, r2, r3
 801384c:	00df      	lsls	r7, r3, #3
 801384e:	1819      	adds	r1, r3, r0
 8013850:	463c      	mov	r4, r7
 8013852:	9701      	str	r7, [sp, #4]
 8013854:	4457      	add	r7, sl
 8013856:	930c      	str	r3, [sp, #48]	; 0x30
 8013858:	eb0a 02c2 	add.w	r2, sl, r2, lsl #3
 801385c:	011b      	lsls	r3, r3, #4
 801385e:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
 8013862:	eb07 0c04 	add.w	ip, r7, r4
 8013866:	9c00      	ldr	r4, [sp, #0]
 8013868:	9302      	str	r3, [sp, #8]
 801386a:	eb0a 06c6 	add.w	r6, sl, r6, lsl #3
 801386e:	eb0a 05c5 	add.w	r5, sl, r5, lsl #3
 8013872:	3204      	adds	r2, #4
 8013874:	3104      	adds	r1, #4
 8013876:	eb0a 00c0 	add.w	r0, sl, r0, lsl #3
 801387a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 801387e:	f04f 0800 	mov.w	r8, #0
 8013882:	eddc 7a00 	vldr	s15, [ip]
 8013886:	edd7 6a00 	vldr	s13, [r7]
 801388a:	edd6 3a00 	vldr	s7, [r6]
 801388e:	ed5e aa01 	vldr	s21, [lr, #-4]
 8013892:	edd5 4a00 	vldr	s9, [r5]
 8013896:	ed90 2a00 	vldr	s4, [r0]
 801389a:	ed12 7a01 	vldr	s14, [r2, #-4]
 801389e:	ed51 0a01 	vldr	s1, [r1, #-4]
 80138a2:	ee77 8a82 	vadd.f32	s17, s15, s4
 80138a6:	ee33 4aa0 	vadd.f32	s8, s7, s1
 80138aa:	ee76 1a87 	vadd.f32	s3, s13, s14
 80138ae:	ee3a 3aa4 	vadd.f32	s6, s21, s9
 80138b2:	ee31 6a84 	vadd.f32	s12, s3, s8
 80138b6:	ee33 5a28 	vadd.f32	s10, s6, s17
 80138ba:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80138be:	ee75 6a06 	vadd.f32	s13, s10, s12
 80138c2:	ee35 5a46 	vsub.f32	s10, s10, s12
 80138c6:	ed4e 6a01 	vstr	s13, [lr, #-4]
 80138ca:	ed85 5a00 	vstr	s10, [r5]
 80138ce:	ed96 1a01 	vldr	s2, [r6, #4]
 80138d2:	edd7 5a01 	vldr	s11, [r7, #4]
 80138d6:	ed92 aa00 	vldr	s20, [r2]
 80138da:	ed91 6a00 	vldr	s12, [r1]
 80138de:	ed9e 9a00 	vldr	s18, [lr]
 80138e2:	ed95 5a01 	vldr	s10, [r5, #4]
 80138e6:	eddc 6a01 	vldr	s13, [ip, #4]
 80138ea:	edd0 9a01 	vldr	s19, [r0, #4]
 80138ee:	ee73 0ae0 	vsub.f32	s1, s7, s1
 80138f2:	ee71 2a46 	vsub.f32	s5, s2, s12
 80138f6:	ee75 3aca 	vsub.f32	s7, s11, s20
 80138fa:	ee37 0a60 	vsub.f32	s0, s14, s1
 80138fe:	ee33 8aa2 	vadd.f32	s16, s7, s5
 8013902:	ee37 7a20 	vadd.f32	s14, s14, s1
 8013906:	ee73 2ae2 	vsub.f32	s5, s7, s5
 801390a:	ee37 2ac2 	vsub.f32	s4, s15, s4
 801390e:	ee79 3a05 	vadd.f32	s7, s18, s10
 8013912:	ee60 0a0b 	vmul.f32	s1, s0, s22
 8013916:	ee39 5a45 	vsub.f32	s10, s18, s10
 801391a:	ee7a 4ae4 	vsub.f32	s9, s21, s9
 801391e:	ee36 9aa9 	vadd.f32	s18, s13, s19
 8013922:	ee75 5a8a 	vadd.f32	s11, s11, s20
 8013926:	ee31 6a06 	vadd.f32	s12, s2, s12
 801392a:	ee76 6ae9 	vsub.f32	s13, s13, s19
 801392e:	ee28 8a0b 	vmul.f32	s16, s16, s22
 8013932:	ee62 2a8b 	vmul.f32	s5, s5, s22
 8013936:	ee67 7a0b 	vmul.f32	s15, s14, s22
 801393a:	ee33 3a68 	vsub.f32	s6, s6, s17
 801393e:	ee36 0a88 	vadd.f32	s0, s13, s16
 8013942:	ee75 8a86 	vadd.f32	s17, s11, s12
 8013946:	ee36 7ac8 	vsub.f32	s14, s13, s16
 801394a:	ee71 1ac4 	vsub.f32	s3, s3, s8
 801394e:	ee75 6a62 	vsub.f32	s13, s10, s5
 8013952:	ee33 4ac9 	vsub.f32	s8, s7, s18
 8013956:	ee35 6ac6 	vsub.f32	s12, s11, s12
 801395a:	ee33 1a89 	vadd.f32	s2, s7, s18
 801395e:	ee74 5ae0 	vsub.f32	s11, s9, s1
 8013962:	ee74 3aa0 	vadd.f32	s7, s9, s1
 8013966:	ee75 4a22 	vadd.f32	s9, s10, s5
 801396a:	ee32 5a27 	vadd.f32	s10, s4, s15
 801396e:	ee72 7a67 	vsub.f32	s15, s4, s15
 8013972:	ee33 8a06 	vadd.f32	s16, s6, s12
 8013976:	ee75 2a87 	vadd.f32	s5, s11, s14
 801397a:	ee31 9a28 	vadd.f32	s18, s2, s17
 801397e:	ee33 6a46 	vsub.f32	s12, s6, s12
 8013982:	ee74 0a61 	vsub.f32	s1, s8, s3
 8013986:	ee33 2a80 	vadd.f32	s4, s7, s0
 801398a:	ee35 7ac7 	vsub.f32	s14, s11, s14
 801398e:	ee34 3ac5 	vsub.f32	s6, s9, s10
 8013992:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8013996:	ee31 1a68 	vsub.f32	s2, s2, s17
 801399a:	ee34 4a21 	vadd.f32	s8, s8, s3
 801399e:	ee73 3ac0 	vsub.f32	s7, s7, s0
 80139a2:	ee74 4a85 	vadd.f32	s9, s9, s10
 80139a6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80139aa:	44d8      	add	r8, fp
 80139ac:	45c1      	cmp	r9, r8
 80139ae:	ed8e 9a00 	vstr	s18, [lr]
 80139b2:	ed85 1a01 	vstr	s2, [r5, #4]
 80139b6:	449e      	add	lr, r3
 80139b8:	ed8c 8a00 	vstr	s16, [ip]
 80139bc:	441d      	add	r5, r3
 80139be:	ed80 6a00 	vstr	s12, [r0]
 80139c2:	edcc 0a01 	vstr	s1, [ip, #4]
 80139c6:	ed80 4a01 	vstr	s8, [r0, #4]
 80139ca:	449c      	add	ip, r3
 80139cc:	ed87 2a00 	vstr	s4, [r7]
 80139d0:	4418      	add	r0, r3
 80139d2:	ed41 3a01 	vstr	s7, [r1, #-4]
 80139d6:	ed42 2a01 	vstr	s5, [r2, #-4]
 80139da:	ed86 7a00 	vstr	s14, [r6]
 80139de:	ed87 3a01 	vstr	s6, [r7, #4]
 80139e2:	edc1 4a00 	vstr	s9, [r1]
 80139e6:	441f      	add	r7, r3
 80139e8:	edc2 5a00 	vstr	s11, [r2]
 80139ec:	4419      	add	r1, r3
 80139ee:	edc6 6a01 	vstr	s13, [r6, #4]
 80139f2:	441a      	add	r2, r3
 80139f4:	441e      	add	r6, r3
 80139f6:	f63f af44 	bhi.w	8013882 <arm_radix8_butterfly_f32+0x66>
 80139fa:	990c      	ldr	r1, [sp, #48]	; 0x30
 80139fc:	2907      	cmp	r1, #7
 80139fe:	4620      	mov	r0, r4
 8013a00:	f240 81e9 	bls.w	8013dd6 <arm_radix8_butterfly_f32+0x5ba>
 8013a04:	eb04 0744 	add.w	r7, r4, r4, lsl #1
 8013a08:	193e      	adds	r6, r7, r4
 8013a0a:	1935      	adds	r5, r6, r4
 8013a0c:	9c03      	ldr	r4, [sp, #12]
 8013a0e:	9000      	str	r0, [sp, #0]
 8013a10:	4622      	mov	r2, r4
 8013a12:	3201      	adds	r2, #1
 8013a14:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8013a18:	9900      	ldr	r1, [sp, #0]
 8013a1a:	1828      	adds	r0, r5, r0
 8013a1c:	eb00 0e01 	add.w	lr, r0, r1
 8013a20:	990c      	ldr	r1, [sp, #48]	; 0x30
 8013a22:	440a      	add	r2, r1
 8013a24:	eb04 0c01 	add.w	ip, r4, r1
 8013a28:	ea4f 04ce 	mov.w	r4, lr, lsl #3
 8013a2c:	eb0a 0ec2 	add.w	lr, sl, r2, lsl #3
 8013a30:	9a00      	ldr	r2, [sp, #0]
 8013a32:	940f      	str	r4, [sp, #60]	; 0x3c
 8013a34:	00ed      	lsls	r5, r5, #3
 8013a36:	9511      	str	r5, [sp, #68]	; 0x44
 8013a38:	00d5      	lsls	r5, r2, #3
 8013a3a:	950d      	str	r5, [sp, #52]	; 0x34
 8013a3c:	9d01      	ldr	r5, [sp, #4]
 8013a3e:	3508      	adds	r5, #8
 8013a40:	9516      	str	r5, [sp, #88]	; 0x58
 8013a42:	9d02      	ldr	r5, [sp, #8]
 8013a44:	3508      	adds	r5, #8
 8013a46:	0114      	lsls	r4, r2, #4
 8013a48:	9517      	str	r5, [sp, #92]	; 0x5c
 8013a4a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013a4c:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8013a4e:	940e      	str	r4, [sp, #56]	; 0x38
 8013a50:	00c0      	lsls	r0, r0, #3
 8013a52:	9010      	str	r0, [sp, #64]	; 0x40
 8013a54:	18aa      	adds	r2, r5, r2
 8013a56:	9207      	str	r2, [sp, #28]
 8013a58:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013a5a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8013a5c:	18aa      	adds	r2, r5, r2
 8013a5e:	9208      	str	r2, [sp, #32]
 8013a60:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8013a62:	18aa      	adds	r2, r5, r2
 8013a64:	9209      	str	r2, [sp, #36]	; 0x24
 8013a66:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8013a6a:	f10e 0204 	add.w	r2, lr, #4
 8013a6e:	920a      	str	r2, [sp, #40]	; 0x28
 8013a70:	00c9      	lsls	r1, r1, #3
 8013a72:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013a74:	310c      	adds	r1, #12
 8013a76:	00f6      	lsls	r6, r6, #3
 8013a78:	ea4f 00cc 	mov.w	r0, ip, lsl #3
 8013a7c:	9114      	str	r1, [sp, #80]	; 0x50
 8013a7e:	18a9      	adds	r1, r5, r2
 8013a80:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013a82:	9612      	str	r6, [sp, #72]	; 0x48
 8013a84:	00ff      	lsls	r7, r7, #3
 8013a86:	19ae      	adds	r6, r5, r6
 8013a88:	3008      	adds	r0, #8
 8013a8a:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8013a8e:	9606      	str	r6, [sp, #24]
 8013a90:	9019      	str	r0, [sp, #100]	; 0x64
 8013a92:	18aa      	adds	r2, r5, r2
 8013a94:	0164      	lsls	r4, r4, #5
 8013a96:	19ee      	adds	r6, r5, r7
 8013a98:	f10c 000c 	add.w	r0, ip, #12
 8013a9c:	9713      	str	r7, [sp, #76]	; 0x4c
 8013a9e:	9604      	str	r6, [sp, #16]
 8013aa0:	9015      	str	r0, [sp, #84]	; 0x54
 8013aa2:	9103      	str	r1, [sp, #12]
 8013aa4:	9205      	str	r2, [sp, #20]
 8013aa6:	f104 0208 	add.w	r2, r4, #8
 8013aaa:	9218      	str	r2, [sp, #96]	; 0x60
 8013aac:	f04f 0801 	mov.w	r8, #1
 8013ab0:	2200      	movs	r2, #0
 8013ab2:	f102 0108 	add.w	r1, r2, #8
 8013ab6:	460f      	mov	r7, r1
 8013ab8:	910b      	str	r1, [sp, #44]	; 0x2c
 8013aba:	9918      	ldr	r1, [sp, #96]	; 0x60
 8013abc:	188e      	adds	r6, r1, r2
 8013abe:	9916      	ldr	r1, [sp, #88]	; 0x58
 8013ac0:	188d      	adds	r5, r1, r2
 8013ac2:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8013ac4:	188c      	adds	r4, r1, r2
 8013ac6:	9919      	ldr	r1, [sp, #100]	; 0x64
 8013ac8:	1888      	adds	r0, r1, r2
 8013aca:	9914      	ldr	r1, [sp, #80]	; 0x50
 8013acc:	eb01 0c02 	add.w	ip, r1, r2
 8013ad0:	9915      	ldr	r1, [sp, #84]	; 0x54
 8013ad2:	440a      	add	r2, r1
 8013ad4:	9903      	ldr	r1, [sp, #12]
 8013ad6:	edd1 fa00 	vldr	s31, [r1]
 8013ada:	9905      	ldr	r1, [sp, #20]
 8013adc:	ed91 fa00 	vldr	s30, [r1]
 8013ae0:	9904      	ldr	r1, [sp, #16]
 8013ae2:	edd1 ea00 	vldr	s29, [r1]
 8013ae6:	9906      	ldr	r1, [sp, #24]
 8013ae8:	ed91 ea00 	vldr	s28, [r1]
 8013aec:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013aee:	edd1 da00 	vldr	s27, [r1]
 8013af2:	9908      	ldr	r1, [sp, #32]
 8013af4:	ed91 da00 	vldr	s26, [r1]
 8013af8:	9907      	ldr	r1, [sp, #28]
 8013afa:	edd1 ca00 	vldr	s25, [r1]
 8013afe:	9903      	ldr	r1, [sp, #12]
 8013b00:	ed91 ca01 	vldr	s24, [r1, #4]
 8013b04:	9905      	ldr	r1, [sp, #20]
 8013b06:	edd1 ba01 	vldr	s23, [r1, #4]
 8013b0a:	9904      	ldr	r1, [sp, #16]
 8013b0c:	edd1 aa01 	vldr	s21, [r1, #4]
 8013b10:	9906      	ldr	r1, [sp, #24]
 8013b12:	ed91 aa01 	vldr	s20, [r1, #4]
 8013b16:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013b18:	edd1 7a01 	vldr	s15, [r1, #4]
 8013b1c:	9908      	ldr	r1, [sp, #32]
 8013b1e:	edcd 7a00 	vstr	s15, [sp]
 8013b22:	edd1 7a01 	vldr	s15, [r1, #4]
 8013b26:	9907      	ldr	r1, [sp, #28]
 8013b28:	edcd 7a01 	vstr	s15, [sp, #4]
 8013b2c:	edd1 7a01 	vldr	s15, [r1, #4]
 8013b30:	eb0a 0e07 	add.w	lr, sl, r7
 8013b34:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8013b36:	edcd 7a02 	vstr	s15, [sp, #8]
 8013b3a:	eb0c 010a 	add.w	r1, ip, sl
 8013b3e:	4456      	add	r6, sl
 8013b40:	4455      	add	r5, sl
 8013b42:	4454      	add	r4, sl
 8013b44:	4450      	add	r0, sl
 8013b46:	4452      	add	r2, sl
 8013b48:	46c4      	mov	ip, r8
 8013b4a:	e001      	b.n	8013b50 <arm_radix8_butterfly_f32+0x334>
 8013b4c:	3f3504f3 	.word	0x3f3504f3
 8013b50:	ed96 5a00 	vldr	s10, [r6]
 8013b54:	ed52 9a01 	vldr	s19, [r2, #-4]
 8013b58:	ed11 6a01 	vldr	s12, [r1, #-4]
 8013b5c:	edd0 7a00 	vldr	s15, [r0]
 8013b60:	ed17 7a01 	vldr	s14, [r7, #-4]
 8013b64:	edde 3a00 	vldr	s7, [lr]
 8013b68:	ed94 3a00 	vldr	s6, [r4]
 8013b6c:	ed95 2a00 	vldr	s4, [r5]
 8013b70:	ed9e 0a01 	vldr	s0, [lr, #4]
 8013b74:	ee33 8a85 	vadd.f32	s16, s7, s10
 8013b78:	ee32 1a06 	vadd.f32	s2, s4, s12
 8013b7c:	ee33 4a29 	vadd.f32	s8, s6, s19
 8013b80:	ee77 4a87 	vadd.f32	s9, s15, s14
 8013b84:	ee78 1a04 	vadd.f32	s3, s16, s8
 8013b88:	ee71 6a24 	vadd.f32	s13, s2, s9
 8013b8c:	ee32 2a46 	vsub.f32	s4, s4, s12
 8013b90:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8013b94:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013b98:	ed8e 6a00 	vstr	s12, [lr]
 8013b9c:	edd0 8a01 	vldr	s17, [r0, #4]
 8013ba0:	ed95 9a01 	vldr	s18, [r5, #4]
 8013ba4:	edd1 2a00 	vldr	s5, [r1]
 8013ba8:	ed97 7a00 	vldr	s14, [r7]
 8013bac:	edd4 0a01 	vldr	s1, [r4, #4]
 8013bb0:	ed96 6a01 	vldr	s12, [r6, #4]
 8013bb4:	edd2 5a00 	vldr	s11, [r2]
 8013bb8:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8013bbc:	ee33 3a69 	vsub.f32	s6, s6, s19
 8013bc0:	ee39 5a62 	vsub.f32	s10, s18, s5
 8013bc4:	ee78 9ac7 	vsub.f32	s19, s17, s14
 8013bc8:	ee38 4a44 	vsub.f32	s8, s16, s8
 8013bcc:	ee38 7a87 	vadd.f32	s14, s17, s14
 8013bd0:	ee30 8aa5 	vadd.f32	s16, s1, s11
 8013bd4:	ee79 2a22 	vadd.f32	s5, s18, s5
 8013bd8:	ee75 8a69 	vsub.f32	s17, s10, s19
 8013bdc:	ee32 9a27 	vadd.f32	s18, s4, s15
 8013be0:	ee35 5a29 	vadd.f32	s10, s10, s19
 8013be4:	ee72 7a67 	vsub.f32	s15, s4, s15
 8013be8:	ee30 2a06 	vadd.f32	s4, s0, s12
 8013bec:	ee69 9a0b 	vmul.f32	s19, s18, s22
 8013bf0:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8013bf4:	ee32 9a08 	vadd.f32	s18, s4, s16
 8013bf8:	ee68 8a8b 	vmul.f32	s17, s17, s22
 8013bfc:	ee32 2a48 	vsub.f32	s4, s4, s16
 8013c00:	ee71 4a64 	vsub.f32	s9, s2, s9
 8013c04:	ee25 5a0b 	vmul.f32	s10, s10, s22
 8013c08:	ee32 1a87 	vadd.f32	s2, s5, s14
 8013c0c:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8013c10:	ee72 2ac7 	vsub.f32	s5, s5, s14
 8013c14:	ee30 6a46 	vsub.f32	s12, s0, s12
 8013c18:	ee73 0a29 	vadd.f32	s1, s6, s19
 8013c1c:	ee36 0a28 	vadd.f32	s0, s12, s17
 8013c20:	ee33 3a69 	vsub.f32	s6, s6, s19
 8013c24:	ee32 7a64 	vsub.f32	s14, s4, s9
 8013c28:	ee73 9aa7 	vadd.f32	s19, s7, s15
 8013c2c:	ee36 6a68 	vsub.f32	s12, s12, s17
 8013c30:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8013c34:	ee75 8a85 	vadd.f32	s17, s11, s10
 8013c38:	ee74 3a22 	vadd.f32	s7, s8, s5
 8013c3c:	ee35 5ac5 	vsub.f32	s10, s11, s10
 8013c40:	ee71 6ae6 	vsub.f32	s13, s3, s13
 8013c44:	ee79 1a41 	vsub.f32	s3, s18, s2
 8013c48:	ee39 8aa8 	vadd.f32	s16, s19, s17
 8013c4c:	ee76 5a43 	vsub.f32	s11, s12, s6
 8013c50:	ee74 2a62 	vsub.f32	s5, s8, s5
 8013c54:	ee72 4a24 	vadd.f32	s9, s4, s9
 8013c58:	ee30 4a60 	vsub.f32	s8, s0, s1
 8013c5c:	ee79 8ae8 	vsub.f32	s17, s19, s17
 8013c60:	ee30 0a20 	vadd.f32	s0, s0, s1
 8013c64:	ee77 9a85 	vadd.f32	s19, s15, s10
 8013c68:	ee36 6a03 	vadd.f32	s12, s12, s6
 8013c6c:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8013c70:	ee2e 2a21 	vmul.f32	s4, s28, s3
 8013c74:	ee2e 5a26 	vmul.f32	s10, s28, s13
 8013c78:	ee6f 0a23 	vmul.f32	s1, s30, s7
 8013c7c:	ee2a 3a21 	vmul.f32	s6, s20, s3
 8013c80:	ee39 1a01 	vadd.f32	s2, s18, s2
 8013c84:	ee6a 6a26 	vmul.f32	s13, s20, s13
 8013c88:	ee2b 9a87 	vmul.f32	s18, s23, s14
 8013c8c:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 8013c90:	ee2f 7a07 	vmul.f32	s14, s30, s14
 8013c94:	ee6f 1a84 	vmul.f32	s3, s31, s8
 8013c98:	ee35 3a03 	vadd.f32	s6, s10, s6
 8013c9c:	ee72 6a66 	vsub.f32	s13, s4, s13
 8013ca0:	ee2c 5a04 	vmul.f32	s10, s24, s8
 8013ca4:	ee2f 2a88 	vmul.f32	s4, s31, s16
 8013ca8:	ed9d 4a02 	vldr	s8, [sp, #8]
 8013cac:	ed8e 1a01 	vstr	s2, [lr, #4]
 8013cb0:	ee77 3a63 	vsub.f32	s7, s14, s7
 8013cb4:	ee2c 8a08 	vmul.f32	s16, s24, s16
 8013cb8:	ed9d 7a01 	vldr	s14, [sp, #4]
 8013cbc:	ed86 3a00 	vstr	s6, [r6]
 8013cc0:	ee30 9a89 	vadd.f32	s18, s1, s18
 8013cc4:	ee32 2a05 	vadd.f32	s4, s4, s10
 8013cc8:	ee6d 0a22 	vmul.f32	s1, s26, s5
 8013ccc:	ee31 8ac8 	vsub.f32	s16, s3, s16
 8013cd0:	ee67 2a22 	vmul.f32	s5, s14, s5
 8013cd4:	ee64 1a00 	vmul.f32	s3, s8, s0
 8013cd8:	ee27 7a24 	vmul.f32	s14, s14, s9
 8013cdc:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 8013ce0:	ee6d 4a24 	vmul.f32	s9, s26, s9
 8013ce4:	ee64 8a28 	vmul.f32	s17, s8, s17
 8013ce8:	ed9d 4a00 	vldr	s8, [sp]
 8013cec:	edc6 6a01 	vstr	s13, [r6, #4]
 8013cf0:	ee74 2ae2 	vsub.f32	s5, s9, s5
 8013cf4:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 8013cf8:	ee64 9a29 	vmul.f32	s19, s8, s19
 8013cfc:	ee24 4a25 	vmul.f32	s8, s8, s11
 8013d00:	ee30 7a87 	vadd.f32	s14, s1, s14
 8013d04:	ee74 4a84 	vadd.f32	s9, s9, s8
 8013d08:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 8013d0c:	ee2a 4a86 	vmul.f32	s8, s21, s12
 8013d10:	ee2c 0a80 	vmul.f32	s0, s25, s0
 8013d14:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 8013d18:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 8013d1c:	ee2e 6a86 	vmul.f32	s12, s29, s12
 8013d20:	ee75 1a21 	vadd.f32	s3, s10, s3
 8013d24:	ee30 0a68 	vsub.f32	s0, s0, s17
 8013d28:	ee75 9ae9 	vsub.f32	s19, s11, s19
 8013d2c:	ee70 0a84 	vadd.f32	s1, s1, s8
 8013d30:	ee36 6a67 	vsub.f32	s12, s12, s15
 8013d34:	44dc      	add	ip, fp
 8013d36:	45e1      	cmp	r9, ip
 8013d38:	ed84 9a00 	vstr	s18, [r4]
 8013d3c:	edc4 3a01 	vstr	s7, [r4, #4]
 8013d40:	449e      	add	lr, r3
 8013d42:	ed02 7a01 	vstr	s14, [r2, #-4]
 8013d46:	edc2 2a00 	vstr	s5, [r2]
 8013d4a:	441e      	add	r6, r3
 8013d4c:	ed85 2a00 	vstr	s4, [r5]
 8013d50:	ed85 8a01 	vstr	s16, [r5, #4]
 8013d54:	441c      	add	r4, r3
 8013d56:	ed47 1a01 	vstr	s3, [r7, #-4]
 8013d5a:	ed87 0a00 	vstr	s0, [r7]
 8013d5e:	441a      	add	r2, r3
 8013d60:	ed41 4a01 	vstr	s9, [r1, #-4]
 8013d64:	edc1 9a00 	vstr	s19, [r1]
 8013d68:	441d      	add	r5, r3
 8013d6a:	edc0 0a00 	vstr	s1, [r0]
 8013d6e:	441f      	add	r7, r3
 8013d70:	ed80 6a01 	vstr	s12, [r0, #4]
 8013d74:	4419      	add	r1, r3
 8013d76:	4418      	add	r0, r3
 8013d78:	f63f aeea 	bhi.w	8013b50 <arm_radix8_butterfly_f32+0x334>
 8013d7c:	9a03      	ldr	r2, [sp, #12]
 8013d7e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8013d80:	440a      	add	r2, r1
 8013d82:	9203      	str	r2, [sp, #12]
 8013d84:	990e      	ldr	r1, [sp, #56]	; 0x38
 8013d86:	9a05      	ldr	r2, [sp, #20]
 8013d88:	440a      	add	r2, r1
 8013d8a:	9205      	str	r2, [sp, #20]
 8013d8c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8013d8e:	9a04      	ldr	r2, [sp, #16]
 8013d90:	440a      	add	r2, r1
 8013d92:	9204      	str	r2, [sp, #16]
 8013d94:	9912      	ldr	r1, [sp, #72]	; 0x48
 8013d96:	9a06      	ldr	r2, [sp, #24]
 8013d98:	440a      	add	r2, r1
 8013d9a:	9206      	str	r2, [sp, #24]
 8013d9c:	9911      	ldr	r1, [sp, #68]	; 0x44
 8013d9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013da0:	440a      	add	r2, r1
 8013da2:	9209      	str	r2, [sp, #36]	; 0x24
 8013da4:	9910      	ldr	r1, [sp, #64]	; 0x40
 8013da6:	9a08      	ldr	r2, [sp, #32]
 8013da8:	440a      	add	r2, r1
 8013daa:	9208      	str	r2, [sp, #32]
 8013dac:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8013dae:	9a07      	ldr	r2, [sp, #28]
 8013db0:	440a      	add	r2, r1
 8013db2:	9207      	str	r2, [sp, #28]
 8013db4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8013db6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013db8:	f108 0801 	add.w	r8, r8, #1
 8013dbc:	3208      	adds	r2, #8
 8013dbe:	4588      	cmp	r8, r1
 8013dc0:	920a      	str	r2, [sp, #40]	; 0x28
 8013dc2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013dc4:	f47f ae75 	bne.w	8013ab2 <arm_radix8_butterfly_f32+0x296>
 8013dc8:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 8013dcc:	9300      	str	r3, [sp, #0]
 8013dce:	46c3      	mov	fp, r8
 8013dd0:	f8dd e06c 	ldr.w	lr, [sp, #108]	; 0x6c
 8013dd4:	e532      	b.n	801383c <arm_radix8_butterfly_f32+0x20>
 8013dd6:	b01d      	add	sp, #116	; 0x74
 8013dd8:	ecbd 8b10 	vpop	{d8-d15}
 8013ddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013de0 <D16_GENERIC>:
 8013de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013de4:	b089      	sub	sp, #36	; 0x24
 8013de6:	68d4      	ldr	r4, [r2, #12]
 8013de8:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8013dea:	6993      	ldr	r3, [r2, #24]
 8013dec:	9407      	str	r4, [sp, #28]
 8013dee:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8013df0:	9306      	str	r3, [sp, #24]
 8013df2:	9402      	str	r4, [sp, #8]
 8013df4:	f8d2 a010 	ldr.w	sl, [r2, #16]
 8013df8:	f8d2 b014 	ldr.w	fp, [r2, #20]
 8013dfc:	69d3      	ldr	r3, [r2, #28]
 8013dfe:	6896      	ldr	r6, [r2, #8]
 8013e00:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8013e02:	9103      	str	r1, [sp, #12]
 8013e04:	2d00      	cmp	r5, #0
 8013e06:	d066      	beq.n	8013ed6 <D16_GENERIC+0xf6>
 8013e08:	f004 0510 	and.w	r5, r4, #16
 8013e0c:	f004 0420 	and.w	r4, r4, #32
 8013e10:	9504      	str	r5, [sp, #16]
 8013e12:	4938      	ldr	r1, [pc, #224]	; (8013ef4 <D16_GENERIC+0x114>)
 8013e14:	9405      	str	r4, [sp, #20]
 8013e16:	f04f 0e00 	mov.w	lr, #0
 8013e1a:	4635      	mov	r5, r6
 8013e1c:	e04f      	b.n	8013ebe <D16_GENERIC+0xde>
 8013e1e:	5d87      	ldrb	r7, [r0, r6]
 8013e20:	7804      	ldrb	r4, [r0, #0]
 8013e22:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 8013e26:	eb04 2407 	add.w	r4, r4, r7, lsl #8
 8013e2a:	b2e6      	uxtb	r6, r4
 8013e2c:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8013e30:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8013e34:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 8013e38:	4433      	add	r3, r6
 8013e3a:	eb04 2493 	add.w	r4, r4, r3, lsr #10
 8013e3e:	f3c4 0609 	ubfx	r6, r4, #0, #10
 8013e42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8013e46:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
 8013e4a:	0aa3      	lsrs	r3, r4, #10
 8013e4c:	4c2a      	ldr	r4, [pc, #168]	; (8013ef8 <D16_GENERIC+0x118>)
 8013e4e:	fb26 5404 	smlad	r4, r6, r4, r5
 8013e52:	4d2a      	ldr	r5, [pc, #168]	; (8013efc <D16_GENERIC+0x11c>)
 8013e54:	fb26 f505 	smuad	r5, r6, r5
 8013e58:	f5a4 6400 	sub.w	r4, r4, #2048	; 0x800
 8013e5c:	eb04 080a 	add.w	r8, r4, sl
 8013e60:	eba8 080b 	sub.w	r8, r8, fp
 8013e64:	4646      	mov	r6, r8
 8013e66:	17f7      	asrs	r7, r6, #31
 8013e68:	e9cd 6700 	strd	r6, r7, [sp]
 8013e6c:	9e04      	ldr	r6, [sp, #16]
 8013e6e:	f10e 0c01 	add.w	ip, lr, #1
 8013e72:	b16e      	cbz	r6, 8013e90 <D16_GENERIC+0xb0>
 8013e74:	6a16      	ldr	r6, [r2, #32]
 8013e76:	9f01      	ldr	r7, [sp, #4]
 8013e78:	fba8 8906 	umull	r8, r9, r8, r6
 8013e7c:	fb06 9907 	mla	r9, r6, r7, r9
 8013e80:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 8013e84:	f149 0900 	adc.w	r9, r9, #0
 8013e88:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 8013e8c:	46a3      	mov	fp, r4
 8013e8e:	4654      	mov	r4, sl
 8013e90:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 8013e92:	9f02      	ldr	r7, [sp, #8]
 8013e94:	0424      	lsls	r4, r4, #16
 8013e96:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8013e9a:	f04f 0900 	mov.w	r9, #0
 8013e9e:	fb0e fe06 	mul.w	lr, lr, r6
 8013ea2:	fbc7 8904 	smlal	r8, r9, r7, r4
 8013ea6:	9e03      	ldr	r6, [sp, #12]
 8013ea8:	464f      	mov	r7, r9
 8013eaa:	10bc      	asrs	r4, r7, #2
 8013eac:	f304 040f 	ssat	r4, #16, r4
 8013eb0:	f826 401e 	strh.w	r4, [r6, lr, lsl #1]
 8013eb4:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 8013eb6:	fa1f fe8c 	uxth.w	lr, ip
 8013eba:	4574      	cmp	r4, lr
 8013ebc:	d90a      	bls.n	8013ed4 <D16_GENERIC+0xf4>
 8013ebe:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 8013ec0:	2c01      	cmp	r4, #1
 8013ec2:	b2e6      	uxtb	r6, r4
 8013ec4:	d1ab      	bne.n	8013e1e <D16_GENERIC+0x3e>
 8013ec6:	9e05      	ldr	r6, [sp, #20]
 8013ec8:	f850 4b02 	ldr.w	r4, [r0], #2
 8013ecc:	2e00      	cmp	r6, #0
 8013ece:	d0ac      	beq.n	8013e2a <D16_GENERIC+0x4a>
 8013ed0:	ba64      	rev16	r4, r4
 8013ed2:	e7aa      	b.n	8013e2a <D16_GENERIC+0x4a>
 8013ed4:	462e      	mov	r6, r5
 8013ed6:	9907      	ldr	r1, [sp, #28]
 8013ed8:	61d3      	str	r3, [r2, #28]
 8013eda:	9b06      	ldr	r3, [sp, #24]
 8013edc:	6096      	str	r6, [r2, #8]
 8013ede:	2000      	movs	r0, #0
 8013ee0:	60d1      	str	r1, [r2, #12]
 8013ee2:	f8c2 a010 	str.w	sl, [r2, #16]
 8013ee6:	f8c2 b014 	str.w	fp, [r2, #20]
 8013eea:	6193      	str	r3, [r2, #24]
 8013eec:	b009      	add	sp, #36	; 0x24
 8013eee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ef2:	bf00      	nop
 8013ef4:	200004d8 	.word	0x200004d8
 8013ef8:	00030001 	.word	0x00030001
 8013efc:	00010003 	.word	0x00010003

08013f00 <D24_GENERIC>:
 8013f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f04:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 8013f06:	6993      	ldr	r3, [r2, #24]
 8013f08:	6b15      	ldr	r5, [r2, #48]	; 0x30
 8013f0a:	f8d2 a010 	ldr.w	sl, [r2, #16]
 8013f0e:	f8d2 9014 	ldr.w	r9, [r2, #20]
 8013f12:	6894      	ldr	r4, [r2, #8]
 8013f14:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 8013f18:	b089      	sub	sp, #36	; 0x24
 8013f1a:	9307      	str	r3, [sp, #28]
 8013f1c:	9503      	str	r5, [sp, #12]
 8013f1e:	69d3      	ldr	r3, [r2, #28]
 8013f20:	6b55      	ldr	r5, [r2, #52]	; 0x34
 8013f22:	9104      	str	r1, [sp, #16]
 8013f24:	2e00      	cmp	r6, #0
 8013f26:	f000 8096 	beq.w	8014056 <D24_GENERIC+0x156>
 8013f2a:	f005 0610 	and.w	r6, r5, #16
 8013f2e:	f005 0520 	and.w	r5, r5, #32
 8013f32:	4954      	ldr	r1, [pc, #336]	; (8014084 <D24_GENERIC+0x184>)
 8013f34:	9605      	str	r6, [sp, #20]
 8013f36:	9506      	str	r5, [sp, #24]
 8013f38:	f04f 0e00 	mov.w	lr, #0
 8013f3c:	f8cd 9008 	str.w	r9, [sp, #8]
 8013f40:	e06a      	b.n	8014018 <D24_GENERIC+0x118>
 8013f42:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 8013f46:	f810 8007 	ldrb.w	r8, [r0, r7]
 8013f4a:	f890 c000 	ldrb.w	ip, [r0]
 8013f4e:	042d      	lsls	r5, r5, #16
 8013f50:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 8013f54:	eb05 2508 	add.w	r5, r5, r8, lsl #8
 8013f58:	44ac      	add	ip, r5
 8013f5a:	4438      	add	r0, r7
 8013f5c:	fa5f f68c 	uxtb.w	r6, ip
 8013f60:	f3cc 2507 	ubfx	r5, ip, #8, #8
 8013f64:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8013f68:	f851 7025 	ldr.w	r7, [r1, r5, lsl #2]
 8013f6c:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8013f70:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 8013f74:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 8013f78:	f851 302c 	ldr.w	r3, [r1, ip, lsl #2]
 8013f7c:	f3c7 0509 	ubfx	r5, r7, #0, #10
 8013f80:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8013f84:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 8013f88:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 8013f8c:	4d3e      	ldr	r5, [pc, #248]	; (8014088 <D24_GENERIC+0x188>)
 8013f8e:	fb26 b705 	smlad	r7, r6, r5, fp
 8013f92:	4d3e      	ldr	r5, [pc, #248]	; (801408c <D24_GENERIC+0x18c>)
 8013f94:	fb26 4b05 	smlad	fp, r6, r5, r4
 8013f98:	f3c3 0409 	ubfx	r4, r3, #0, #10
 8013f9c:	eb04 0844 	add.w	r8, r4, r4, lsl #1
 8013fa0:	eb0b 0b48 	add.w	fp, fp, r8, lsl #1
 8013fa4:	2401      	movs	r4, #1
 8013fa6:	fb26 f604 	smuad	r6, r6, r4
 8013faa:	f5a7 55d8 	sub.w	r5, r7, #6912	; 0x1b00
 8013fae:	9f02      	ldr	r7, [sp, #8]
 8013fb0:	eb0e 0c04 	add.w	ip, lr, r4
 8013fb4:	eb08 0406 	add.w	r4, r8, r6
 8013fb8:	eb05 060a 	add.w	r6, r5, sl
 8013fbc:	1bf6      	subs	r6, r6, r7
 8013fbe:	4637      	mov	r7, r6
 8013fc0:	ea4f 78e6 	mov.w	r8, r6, asr #31
 8013fc4:	e9cd 7800 	strd	r7, r8, [sp]
 8013fc8:	9f05      	ldr	r7, [sp, #20]
 8013fca:	b177      	cbz	r7, 8013fea <D24_GENERIC+0xea>
 8013fcc:	f8d2 8020 	ldr.w	r8, [r2, #32]
 8013fd0:	9502      	str	r5, [sp, #8]
 8013fd2:	fba6 9a08 	umull	r9, sl, r6, r8
 8013fd6:	9e01      	ldr	r6, [sp, #4]
 8013fd8:	fb08 aa06 	mla	sl, r8, r6, sl
 8013fdc:	f119 4600 	adds.w	r6, r9, #2147483648	; 0x80000000
 8013fe0:	f14a 0700 	adc.w	r7, sl, #0
 8013fe4:	ea4f 0a47 	mov.w	sl, r7, lsl #1
 8013fe8:	4655      	mov	r5, sl
 8013fea:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 8013fec:	9f03      	ldr	r7, [sp, #12]
 8013fee:	03ad      	lsls	r5, r5, #14
 8013ff0:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8013ff4:	f04f 0900 	mov.w	r9, #0
 8013ff8:	fb0e fe06 	mul.w	lr, lr, r6
 8013ffc:	fbc7 8905 	smlal	r8, r9, r7, r5
 8014000:	9e04      	ldr	r6, [sp, #16]
 8014002:	464f      	mov	r7, r9
 8014004:	10bd      	asrs	r5, r7, #2
 8014006:	f305 050f 	ssat	r5, #16, r5
 801400a:	f826 501e 	strh.w	r5, [r6, lr, lsl #1]
 801400e:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8014010:	fa1f fe8c 	uxth.w	lr, ip
 8014014:	4575      	cmp	r5, lr
 8014016:	d91c      	bls.n	8014052 <D24_GENERIC+0x152>
 8014018:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 801401a:	b2ef      	uxtb	r7, r5
 801401c:	2d01      	cmp	r5, #1
 801401e:	b23e      	sxth	r6, r7
 8014020:	d18f      	bne.n	8013f42 <D24_GENERIC+0x42>
 8014022:	9d06      	ldr	r5, [sp, #24]
 8014024:	b15d      	cbz	r5, 801403e <D24_GENERIC+0x13e>
 8014026:	f01e 0f01 	tst.w	lr, #1
 801402a:	d122      	bne.n	8014072 <D24_GENERIC+0x172>
 801402c:	7805      	ldrb	r5, [r0, #0]
 801402e:	78c7      	ldrb	r7, [r0, #3]
 8014030:	7846      	ldrb	r6, [r0, #1]
 8014032:	022d      	lsls	r5, r5, #8
 8014034:	eb05 4c07 	add.w	ip, r5, r7, lsl #16
 8014038:	44b4      	add	ip, r6
 801403a:	3002      	adds	r0, #2
 801403c:	e78e      	b.n	8013f5c <D24_GENERIC+0x5c>
 801403e:	7846      	ldrb	r6, [r0, #1]
 8014040:	f890 c002 	ldrb.w	ip, [r0, #2]
 8014044:	f810 5b03 	ldrb.w	r5, [r0], #3
 8014048:	0236      	lsls	r6, r6, #8
 801404a:	eb06 4c0c 	add.w	ip, r6, ip, lsl #16
 801404e:	44ac      	add	ip, r5
 8014050:	e784      	b.n	8013f5c <D24_GENERIC+0x5c>
 8014052:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8014056:	61d3      	str	r3, [r2, #28]
 8014058:	9b07      	ldr	r3, [sp, #28]
 801405a:	6094      	str	r4, [r2, #8]
 801405c:	2000      	movs	r0, #0
 801405e:	f8c2 b00c 	str.w	fp, [r2, #12]
 8014062:	f8c2 a010 	str.w	sl, [r2, #16]
 8014066:	f8c2 9014 	str.w	r9, [r2, #20]
 801406a:	6193      	str	r3, [r2, #24]
 801406c:	b009      	add	sp, #36	; 0x24
 801406e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014072:	78c5      	ldrb	r5, [r0, #3]
 8014074:	7887      	ldrb	r7, [r0, #2]
 8014076:	f810 6b04 	ldrb.w	r6, [r0], #4
 801407a:	022d      	lsls	r5, r5, #8
 801407c:	eb05 4c07 	add.w	ip, r5, r7, lsl #16
 8014080:	44b4      	add	ip, r6
 8014082:	e76b      	b.n	8013f5c <D24_GENERIC+0x5c>
 8014084:	200004d8 	.word	0x200004d8
 8014088:	00030001 	.word	0x00030001
 801408c:	00060007 	.word	0x00060007

08014090 <D32_GENERIC>:
 8014090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014094:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8014096:	6993      	ldr	r3, [r2, #24]
 8014098:	6b14      	ldr	r4, [r2, #48]	; 0x30
 801409a:	f8d2 a010 	ldr.w	sl, [r2, #16]
 801409e:	f8d2 9014 	ldr.w	r9, [r2, #20]
 80140a2:	69d6      	ldr	r6, [r2, #28]
 80140a4:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 80140a8:	b089      	sub	sp, #36	; 0x24
 80140aa:	9307      	str	r3, [sp, #28]
 80140ac:	9403      	str	r4, [sp, #12]
 80140ae:	6893      	ldr	r3, [r2, #8]
 80140b0:	6b54      	ldr	r4, [r2, #52]	; 0x34
 80140b2:	9104      	str	r1, [sp, #16]
 80140b4:	2d00      	cmp	r5, #0
 80140b6:	f000 809f 	beq.w	80141f8 <D32_GENERIC+0x168>
 80140ba:	f004 0510 	and.w	r5, r4, #16
 80140be:	f004 0420 	and.w	r4, r4, #32
 80140c2:	9505      	str	r5, [sp, #20]
 80140c4:	4953      	ldr	r1, [pc, #332]	; (8014214 <D32_GENERIC+0x184>)
 80140c6:	9406      	str	r4, [sp, #24]
 80140c8:	f04f 0c00 	mov.w	ip, #0
 80140cc:	f8cd 9008 	str.w	r9, [sp, #8]
 80140d0:	461d      	mov	r5, r3
 80140d2:	4617      	mov	r7, r2
 80140d4:	e077      	b.n	80141c6 <D32_GENERIC+0x136>
 80140d6:	f818 3003 	ldrb.w	r3, [r8, r3]
 80140da:	f810 800e 	ldrb.w	r8, [r0, lr]
 80140de:	f810 e002 	ldrb.w	lr, [r0, r2]
 80140e2:	7800      	ldrb	r0, [r0, #0]
 80140e4:	041b      	lsls	r3, r3, #16
 80140e6:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 80140ea:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 80140ee:	4403      	add	r3, r0
 80140f0:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 80140f4:	b2dc      	uxtb	r4, r3
 80140f6:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80140fa:	f3c3 4807 	ubfx	r8, r3, #16, #8
 80140fe:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 8014102:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8014106:	0e1b      	lsrs	r3, r3, #24
 8014108:	eb04 2496 	add.w	r4, r4, r6, lsr #10
 801410c:	f851 6028 	ldr.w	r6, [r1, r8, lsl #2]
 8014110:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8014114:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 8014118:	eb06 2e92 	add.w	lr, r6, r2, lsr #10
 801411c:	eb03 269e 	add.w	r6, r3, lr, lsr #10
 8014120:	f3c6 0309 	ubfx	r3, r6, #0, #10
 8014124:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8014128:	f3c2 0209 	ubfx	r2, r2, #0, #10
 801412c:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8014130:	ea43 4e0e 	orr.w	lr, r3, lr, lsl #16
 8014134:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8014138:	4b37      	ldr	r3, [pc, #220]	; (8014218 <D32_GENERIC+0x188>)
 801413a:	fb22 b403 	smlad	r4, r2, r3, fp
 801413e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8014142:	fb2e 4803 	smlad	r8, lr, r3, r4
 8014146:	4b35      	ldr	r3, [pc, #212]	; (801421c <D32_GENERIC+0x18c>)
 8014148:	fb22 5503 	smlad	r5, r2, r3, r5
 801414c:	4b34      	ldr	r3, [pc, #208]	; (8014220 <D32_GENERIC+0x190>)
 801414e:	fb2e 5b03 	smlad	fp, lr, r3, r5
 8014152:	2301      	movs	r3, #1
 8014154:	fb22 f203 	smuad	r2, r2, r3
 8014158:	4b32      	ldr	r3, [pc, #200]	; (8014224 <D32_GENERIC+0x194>)
 801415a:	fb2e 2503 	smlad	r5, lr, r3, r2
 801415e:	9b02      	ldr	r3, [sp, #8]
 8014160:	f5a8 4480 	sub.w	r4, r8, #16384	; 0x4000
 8014164:	eb04 080a 	add.w	r8, r4, sl
 8014168:	eba8 0803 	sub.w	r8, r8, r3
 801416c:	4642      	mov	r2, r8
 801416e:	17d3      	asrs	r3, r2, #31
 8014170:	e9cd 2300 	strd	r2, r3, [sp]
 8014174:	9b05      	ldr	r3, [sp, #20]
 8014176:	f10c 0e01 	add.w	lr, ip, #1
 801417a:	b16b      	cbz	r3, 8014198 <D32_GENERIC+0x108>
 801417c:	6a3a      	ldr	r2, [r7, #32]
 801417e:	9b01      	ldr	r3, [sp, #4]
 8014180:	9402      	str	r4, [sp, #8]
 8014182:	fba8 8902 	umull	r8, r9, r8, r2
 8014186:	fb02 9903 	mla	r9, r2, r3, r9
 801418a:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 801418e:	f149 0900 	adc.w	r9, r9, #0
 8014192:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 8014196:	4654      	mov	r4, sl
 8014198:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801419a:	9a04      	ldr	r2, [sp, #16]
 801419c:	fb0c fc03 	mul.w	ip, ip, r3
 80141a0:	9b03      	ldr	r3, [sp, #12]
 80141a2:	0364      	lsls	r4, r4, #13
 80141a4:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 80141a8:	f04f 0900 	mov.w	r9, #0
 80141ac:	fbc3 8904 	smlal	r8, r9, r3, r4
 80141b0:	464b      	mov	r3, r9
 80141b2:	109b      	asrs	r3, r3, #2
 80141b4:	f303 030f 	ssat	r3, #16, r3
 80141b8:	f822 301c 	strh.w	r3, [r2, ip, lsl #1]
 80141bc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80141be:	fa1f fc8e 	uxth.w	ip, lr
 80141c2:	4563      	cmp	r3, ip
 80141c4:	d914      	bls.n	80141f0 <D32_GENERIC+0x160>
 80141c6:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 80141c8:	b2e2      	uxtb	r2, r4
 80141ca:	eb02 0e42 	add.w	lr, r2, r2, lsl #1
 80141ce:	eb00 080e 	add.w	r8, r0, lr
 80141d2:	4253      	negs	r3, r2
 80141d4:	2c01      	cmp	r4, #1
 80141d6:	eb08 0403 	add.w	r4, r8, r3
 80141da:	f47f af7c 	bne.w	80140d6 <D32_GENERIC+0x46>
 80141de:	1d02      	adds	r2, r0, #4
 80141e0:	6803      	ldr	r3, [r0, #0]
 80141e2:	9806      	ldr	r0, [sp, #24]
 80141e4:	b110      	cbz	r0, 80141ec <D32_GENERIC+0x15c>
 80141e6:	ba5b      	rev16	r3, r3
 80141e8:	4610      	mov	r0, r2
 80141ea:	e783      	b.n	80140f4 <D32_GENERIC+0x64>
 80141ec:	4610      	mov	r0, r2
 80141ee:	e781      	b.n	80140f4 <D32_GENERIC+0x64>
 80141f0:	f8dd 9008 	ldr.w	r9, [sp, #8]
 80141f4:	462b      	mov	r3, r5
 80141f6:	463a      	mov	r2, r7
 80141f8:	6093      	str	r3, [r2, #8]
 80141fa:	9b07      	ldr	r3, [sp, #28]
 80141fc:	f8c2 b00c 	str.w	fp, [r2, #12]
 8014200:	2000      	movs	r0, #0
 8014202:	61d6      	str	r6, [r2, #28]
 8014204:	f8c2 a010 	str.w	sl, [r2, #16]
 8014208:	f8c2 9014 	str.w	r9, [r2, #20]
 801420c:	6193      	str	r3, [r2, #24]
 801420e:	b009      	add	sp, #36	; 0x24
 8014210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014214:	200004d8 	.word	0x200004d8
 8014218:	00060003 	.word	0x00060003
 801421c:	000a000c 	.word	0x000a000c
 8014220:	000c000a 	.word	0x000c000a
 8014224:	00030006 	.word	0x00030006

08014228 <D48_GENERIC>:
 8014228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801422c:	b089      	sub	sp, #36	; 0x24
 801422e:	6953      	ldr	r3, [r2, #20]
 8014230:	68d4      	ldr	r4, [r2, #12]
 8014232:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8014234:	9302      	str	r3, [sp, #8]
 8014236:	9400      	str	r4, [sp, #0]
 8014238:	6993      	ldr	r3, [r2, #24]
 801423a:	6b14      	ldr	r4, [r2, #48]	; 0x30
 801423c:	9307      	str	r3, [sp, #28]
 801423e:	9403      	str	r4, [sp, #12]
 8014240:	f8d2 a010 	ldr.w	sl, [r2, #16]
 8014244:	69d6      	ldr	r6, [r2, #28]
 8014246:	6893      	ldr	r3, [r2, #8]
 8014248:	6b54      	ldr	r4, [r2, #52]	; 0x34
 801424a:	9104      	str	r1, [sp, #16]
 801424c:	2d00      	cmp	r5, #0
 801424e:	f000 80c5 	beq.w	80143dc <D48_GENERIC+0x1b4>
 8014252:	f004 0510 	and.w	r5, r4, #16
 8014256:	f004 0420 	and.w	r4, r4, #32
 801425a:	4967      	ldr	r1, [pc, #412]	; (80143f8 <D48_GENERIC+0x1d0>)
 801425c:	9505      	str	r5, [sp, #20]
 801425e:	9406      	str	r4, [sp, #24]
 8014260:	f04f 0c00 	mov.w	ip, #0
 8014264:	4657      	mov	r7, sl
 8014266:	9301      	str	r3, [sp, #4]
 8014268:	e09c      	b.n	80143a4 <D48_GENERIC+0x17c>
 801426a:	f81b 4005 	ldrb.w	r4, [fp, r5]
 801426e:	f810 b009 	ldrb.w	fp, [r0, r9]
 8014272:	f81a 9009 	ldrb.w	r9, [sl, r9]
 8014276:	f810 a00e 	ldrb.w	sl, [r0, lr]
 801427a:	7800      	ldrb	r0, [r0, #0]
 801427c:	0424      	lsls	r4, r4, #16
 801427e:	eb04 6b0b 	add.w	fp, r4, fp, lsl #24
 8014282:	f818 4005 	ldrb.w	r4, [r8, r5]
 8014286:	eb0b 2b0a 	add.w	fp, fp, sl, lsl #8
 801428a:	44a8      	add	r8, r5
 801428c:	eb04 2409 	add.w	r4, r4, r9, lsl #8
 8014290:	eb0b 0500 	add.w	r5, fp, r0
 8014294:	eb08 004e 	add.w	r0, r8, lr, lsl #1
 8014298:	fa5f f885 	uxtb.w	r8, r5
 801429c:	f3c5 2e07 	ubfx	lr, r5, #8, #8
 80142a0:	f851 a028 	ldr.w	sl, [r1, r8, lsl #2]
 80142a4:	f851 902e 	ldr.w	r9, [r1, lr, lsl #2]
 80142a8:	f3c5 4e07 	ubfx	lr, r5, #16, #8
 80142ac:	0e2d      	lsrs	r5, r5, #24
 80142ae:	eb0a 2a96 	add.w	sl, sl, r6, lsr #10
 80142b2:	f851 802e 	ldr.w	r8, [r1, lr, lsl #2]
 80142b6:	f851 e025 	ldr.w	lr, [r1, r5, lsl #2]
 80142ba:	b2e6      	uxtb	r6, r4
 80142bc:	eb09 259a 	add.w	r5, r9, sl, lsr #10
 80142c0:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80142c4:	eb08 2895 	add.w	r8, r8, r5, lsr #10
 80142c8:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 80142cc:	f851 9024 	ldr.w	r9, [r1, r4, lsl #2]
 80142d0:	eb0e 2498 	add.w	r4, lr, r8, lsr #10
 80142d4:	eb06 2e94 	add.w	lr, r6, r4, lsr #10
 80142d8:	eb09 269e 	add.w	r6, r9, lr, lsr #10
 80142dc:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80142e0:	f3c4 0409 	ubfx	r4, r4, #0, #10
 80142e4:	f3c6 0909 	ubfx	r9, r6, #0, #10
 80142e8:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 80142ec:	f3c8 0809 	ubfx	r8, r8, #0, #10
 80142f0:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 80142f4:	ea45 4a0a 	orr.w	sl, r5, sl, lsl #16
 80142f8:	ea44 4808 	orr.w	r8, r4, r8, lsl #16
 80142fc:	ea49 4e0e 	orr.w	lr, r9, lr, lsl #16
 8014300:	4c3e      	ldr	r4, [pc, #248]	; (80143fc <D48_GENERIC+0x1d4>)
 8014302:	9d00      	ldr	r5, [sp, #0]
 8014304:	fb2a 5404 	smlad	r4, sl, r4, r5
 8014308:	4d3d      	ldr	r5, [pc, #244]	; (8014400 <D48_GENERIC+0x1d8>)
 801430a:	fb28 4405 	smlad	r4, r8, r5, r4
 801430e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8014312:	fb2e 4b03 	smlad	fp, lr, r3, r4
 8014316:	4c3b      	ldr	r4, [pc, #236]	; (8014404 <D48_GENERIC+0x1dc>)
 8014318:	9b01      	ldr	r3, [sp, #4]
 801431a:	fb2a 3304 	smlad	r3, sl, r4, r3
 801431e:	f04f 141b 	mov.w	r4, #1769499	; 0x1b001b
 8014322:	fb28 3304 	smlad	r3, r8, r4, r3
 8014326:	4c38      	ldr	r4, [pc, #224]	; (8014408 <D48_GENERIC+0x1e0>)
 8014328:	fb2e 3304 	smlad	r3, lr, r4, r3
 801432c:	2501      	movs	r5, #1
 801432e:	9300      	str	r3, [sp, #0]
 8014330:	fb2a fa05 	smuad	sl, sl, r5
 8014334:	4b35      	ldr	r3, [pc, #212]	; (801440c <D48_GENERIC+0x1e4>)
 8014336:	fb28 a803 	smlad	r8, r8, r3, sl
 801433a:	4b35      	ldr	r3, [pc, #212]	; (8014410 <D48_GENERIC+0x1e8>)
 801433c:	fb2e 8303 	smlad	r3, lr, r3, r8
 8014340:	f5ab 4458 	sub.w	r4, fp, #55296	; 0xd800
 8014344:	9301      	str	r3, [sp, #4]
 8014346:	9b02      	ldr	r3, [sp, #8]
 8014348:	eb04 0807 	add.w	r8, r4, r7
 801434c:	eba8 0803 	sub.w	r8, r8, r3
 8014350:	9b05      	ldr	r3, [sp, #20]
 8014352:	4465      	add	r5, ip
 8014354:	ea4f 7be8 	mov.w	fp, r8, asr #31
 8014358:	b163      	cbz	r3, 8014374 <D48_GENERIC+0x14c>
 801435a:	6a17      	ldr	r7, [r2, #32]
 801435c:	9402      	str	r4, [sp, #8]
 801435e:	fba8 8907 	umull	r8, r9, r8, r7
 8014362:	fb07 990b 	mla	r9, r7, fp, r9
 8014366:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 801436a:	f149 0900 	adc.w	r9, r9, #0
 801436e:	ea4f 0749 	mov.w	r7, r9, lsl #1
 8014372:	463c      	mov	r4, r7
 8014374:	f8b2 e028 	ldrh.w	lr, [r2, #40]	; 0x28
 8014378:	9b03      	ldr	r3, [sp, #12]
 801437a:	02e4      	lsls	r4, r4, #11
 801437c:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8014380:	f04f 0900 	mov.w	r9, #0
 8014384:	fb0c fc0e 	mul.w	ip, ip, lr
 8014388:	fbc3 8904 	smlal	r8, r9, r3, r4
 801438c:	9b04      	ldr	r3, [sp, #16]
 801438e:	ea4f 04a9 	mov.w	r4, r9, asr #2
 8014392:	f304 040f 	ssat	r4, #16, r4
 8014396:	f823 401c 	strh.w	r4, [r3, ip, lsl #1]
 801439a:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 801439c:	fa1f fc85 	uxth.w	ip, r5
 80143a0:	4564      	cmp	r4, ip
 80143a2:	d919      	bls.n	80143d8 <D48_GENERIC+0x1b0>
 80143a4:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 80143a6:	fa5f fe84 	uxtb.w	lr, r4
 80143aa:	eb0e 094e 	add.w	r9, lr, lr, lsl #1
 80143ae:	f1ce 0500 	rsb	r5, lr, #0
 80143b2:	eb00 0b09 	add.w	fp, r0, r9
 80143b6:	eb0b 0a05 	add.w	sl, fp, r5
 80143ba:	2c01      	cmp	r4, #1
 80143bc:	eb0a 0809 	add.w	r8, sl, r9
 80143c0:	f47f af53 	bne.w	801426a <D48_GENERIC+0x42>
 80143c4:	9b06      	ldr	r3, [sp, #24]
 80143c6:	6805      	ldr	r5, [r0, #0]
 80143c8:	6844      	ldr	r4, [r0, #4]
 80143ca:	3006      	adds	r0, #6
 80143cc:	2b00      	cmp	r3, #0
 80143ce:	f43f af63 	beq.w	8014298 <D48_GENERIC+0x70>
 80143d2:	ba6d      	rev16	r5, r5
 80143d4:	ba64      	rev16	r4, r4
 80143d6:	e75f      	b.n	8014298 <D48_GENERIC+0x70>
 80143d8:	9b01      	ldr	r3, [sp, #4]
 80143da:	46ba      	mov	sl, r7
 80143dc:	6093      	str	r3, [r2, #8]
 80143de:	9b00      	ldr	r3, [sp, #0]
 80143e0:	60d3      	str	r3, [r2, #12]
 80143e2:	9b02      	ldr	r3, [sp, #8]
 80143e4:	6153      	str	r3, [r2, #20]
 80143e6:	9b07      	ldr	r3, [sp, #28]
 80143e8:	61d6      	str	r6, [r2, #28]
 80143ea:	2000      	movs	r0, #0
 80143ec:	f8c2 a010 	str.w	sl, [r2, #16]
 80143f0:	6193      	str	r3, [r2, #24]
 80143f2:	b009      	add	sp, #36	; 0x24
 80143f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80143f8:	200004d8 	.word	0x200004d8
 80143fc:	000f000a 	.word	0x000f000a
 8014400:	00060003 	.word	0x00060003
 8014404:	00150019 	.word	0x00150019
 8014408:	00190015 	.word	0x00190015
 801440c:	00030006 	.word	0x00030006
 8014410:	000a000f 	.word	0x000a000f

08014414 <D64_GENERIC>:
 8014414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014418:	b089      	sub	sp, #36	; 0x24
 801441a:	6913      	ldr	r3, [r2, #16]
 801441c:	6895      	ldr	r5, [r2, #8]
 801441e:	9303      	str	r3, [sp, #12]
 8014420:	9501      	str	r5, [sp, #4]
 8014422:	6953      	ldr	r3, [r2, #20]
 8014424:	68d5      	ldr	r5, [r2, #12]
 8014426:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 8014428:	9304      	str	r3, [sp, #16]
 801442a:	9500      	str	r5, [sp, #0]
 801442c:	6993      	ldr	r3, [r2, #24]
 801442e:	6b15      	ldr	r5, [r2, #48]	; 0x30
 8014430:	9307      	str	r3, [sp, #28]
 8014432:	9505      	str	r5, [sp, #20]
 8014434:	69d3      	ldr	r3, [r2, #28]
 8014436:	9106      	str	r1, [sp, #24]
 8014438:	2c00      	cmp	r4, #0
 801443a:	f000 80d9 	beq.w	80145f0 <D64_GENERIC+0x1dc>
 801443e:	6a11      	ldr	r1, [r2, #32]
 8014440:	9102      	str	r1, [sp, #8]
 8014442:	f8df e1ec 	ldr.w	lr, [pc, #492]	; 8014630 <D64_GENERIC+0x21c>
 8014446:	f04f 0c00 	mov.w	ip, #0
 801444a:	4681      	mov	r9, r0
 801444c:	e0c1      	b.n	80145d2 <D64_GENERIC+0x1be>
 801444e:	eb06 0846 	add.w	r8, r6, r6, lsl #1
 8014452:	4274      	negs	r4, r6
 8014454:	eb09 0708 	add.w	r7, r9, r8
 8014458:	eb07 0a44 	add.w	sl, r7, r4, lsl #1
 801445c:	eb0a 0548 	add.w	r5, sl, r8, lsl #1
 8014460:	5d38      	ldrb	r0, [r7, r4]
 8014462:	5d29      	ldrb	r1, [r5, r4]
 8014464:	f81a b018 	ldrb.w	fp, [sl, r8, lsl #1]
 8014468:	f819 a008 	ldrb.w	sl, [r9, r8]
 801446c:	f817 8014 	ldrb.w	r8, [r7, r4, lsl #1]
 8014470:	f899 7000 	ldrb.w	r7, [r9]
 8014474:	f815 9014 	ldrb.w	r9, [r5, r4, lsl #1]
 8014478:	4425      	add	r5, r4
 801447a:	0409      	lsls	r1, r1, #16
 801447c:	0400      	lsls	r0, r0, #16
 801447e:	eb01 610b 	add.w	r1, r1, fp, lsl #24
 8014482:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 8014486:	f815 b014 	ldrb.w	fp, [r5, r4, lsl #1]
 801448a:	eb01 2109 	add.w	r1, r1, r9, lsl #8
 801448e:	eb05 0444 	add.w	r4, r5, r4, lsl #1
 8014492:	eb00 2008 	add.w	r0, r0, r8, lsl #8
 8014496:	4459      	add	r1, fp
 8014498:	eb04 0986 	add.w	r9, r4, r6, lsl #2
 801449c:	4438      	add	r0, r7
 801449e:	b2c5      	uxtb	r5, r0
 80144a0:	f3c0 2407 	ubfx	r4, r0, #8, #8
 80144a4:	f85e 6025 	ldr.w	r6, [lr, r5, lsl #2]
 80144a8:	f85e 5024 	ldr.w	r5, [lr, r4, lsl #2]
 80144ac:	f3c0 4407 	ubfx	r4, r0, #16, #8
 80144b0:	0e00      	lsrs	r0, r0, #24
 80144b2:	eb03 0806 	add.w	r8, r3, r6
 80144b6:	f85e 7024 	ldr.w	r7, [lr, r4, lsl #2]
 80144ba:	f85e 4020 	ldr.w	r4, [lr, r0, lsl #2]
 80144be:	f3c1 2307 	ubfx	r3, r1, #8, #8
 80144c2:	b2c8      	uxtb	r0, r1
 80144c4:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 80144c8:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 80144cc:	f85e 6020 	ldr.w	r6, [lr, r0, lsl #2]
 80144d0:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 80144d4:	f3c1 4307 	ubfx	r3, r1, #16, #8
 80144d8:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 80144dc:	0e09      	lsrs	r1, r1, #24
 80144de:	eb06 2694 	add.w	r6, r6, r4, lsr #10
 80144e2:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
 80144e6:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
 80144ea:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 80144ee:	eb03 2a90 	add.w	sl, r3, r0, lsr #10
 80144f2:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 80144f6:	f3ca 0309 	ubfx	r3, sl, #0, #10
 80144fa:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80144fe:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8014502:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8014506:	f3c1 0a09 	ubfx	sl, r1, #0, #10
 801450a:	f3c8 0809 	ubfx	r8, r8, #0, #10
 801450e:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8014512:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8014516:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 801451a:	ea4a 4a03 	orr.w	sl, sl, r3, lsl #16
 801451e:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 8014522:	0a8b      	lsrs	r3, r1, #10
 8014524:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8014528:	4939      	ldr	r1, [pc, #228]	; (8014610 <D64_GENERIC+0x1fc>)
 801452a:	9c00      	ldr	r4, [sp, #0]
 801452c:	fb28 4101 	smlad	r1, r8, r1, r4
 8014530:	4c38      	ldr	r4, [pc, #224]	; (8014614 <D64_GENERIC+0x200>)
 8014532:	fb27 1104 	smlad	r1, r7, r4, r1
 8014536:	4c38      	ldr	r4, [pc, #224]	; (8014618 <D64_GENERIC+0x204>)
 8014538:	fb20 1104 	smlad	r1, r0, r4, r1
 801453c:	f44f 3680 	mov.w	r6, #65536	; 0x10000
 8014540:	fb2a 1106 	smlad	r1, sl, r6, r1
 8014544:	4c35      	ldr	r4, [pc, #212]	; (801461c <D64_GENERIC+0x208>)
 8014546:	9d01      	ldr	r5, [sp, #4]
 8014548:	fb28 5404 	smlad	r4, r8, r4, r5
 801454c:	4d33      	ldr	r5, [pc, #204]	; (801461c <D64_GENERIC+0x208>)
 801454e:	fb2a 4415 	smladx	r4, sl, r5, r4
 8014552:	4d33      	ldr	r5, [pc, #204]	; (8014620 <D64_GENERIC+0x20c>)
 8014554:	fb27 4405 	smlad	r4, r7, r5, r4
 8014558:	fb20 4415 	smladx	r4, r0, r5, r4
 801455c:	2501      	movs	r5, #1
 801455e:	9400      	str	r4, [sp, #0]
 8014560:	fb28 f805 	smuad	r8, r8, r5
 8014564:	4c2f      	ldr	r4, [pc, #188]	; (8014624 <D64_GENERIC+0x210>)
 8014566:	fb27 8704 	smlad	r7, r7, r4, r8
 801456a:	4c2f      	ldr	r4, [pc, #188]	; (8014628 <D64_GENERIC+0x214>)
 801456c:	fb20 7004 	smlad	r0, r0, r4, r7
 8014570:	4c2e      	ldr	r4, [pc, #184]	; (801462c <D64_GENERIC+0x218>)
 8014572:	fb2a 0004 	smlad	r0, sl, r4, r0
 8014576:	f5a1 3600 	sub.w	r6, r1, #131072	; 0x20000
 801457a:	9902      	ldr	r1, [sp, #8]
 801457c:	9001      	str	r0, [sp, #4]
 801457e:	b189      	cbz	r1, 80145a4 <D64_GENERIC+0x190>
 8014580:	9803      	ldr	r0, [sp, #12]
 8014582:	9c04      	ldr	r4, [sp, #16]
 8014584:	9604      	str	r6, [sp, #16]
 8014586:	4430      	add	r0, r6
 8014588:	1b00      	subs	r0, r0, r4
 801458a:	17c5      	asrs	r5, r0, #31
 801458c:	460f      	mov	r7, r1
 801458e:	fba0 0101 	umull	r0, r1, r0, r1
 8014592:	fb07 1105 	mla	r1, r7, r5, r1
 8014596:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 801459a:	f141 0100 	adc.w	r1, r1, #0
 801459e:	0049      	lsls	r1, r1, #1
 80145a0:	9103      	str	r1, [sp, #12]
 80145a2:	460e      	mov	r6, r1
 80145a4:	8d14      	ldrh	r4, [r2, #40]	; 0x28
 80145a6:	9905      	ldr	r1, [sp, #20]
 80145a8:	9806      	ldr	r0, [sp, #24]
 80145aa:	02b6      	lsls	r6, r6, #10
 80145ac:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 80145b0:	f04f 0800 	mov.w	r8, #0
 80145b4:	fb0c f404 	mul.w	r4, ip, r4
 80145b8:	fbc1 7806 	smlal	r7, r8, r1, r6
 80145bc:	4641      	mov	r1, r8
 80145be:	1089      	asrs	r1, r1, #2
 80145c0:	f301 010f 	ssat	r1, #16, r1
 80145c4:	f820 1014 	strh.w	r1, [r0, r4, lsl #1]
 80145c8:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
 80145ca:	f10c 0c01 	add.w	ip, ip, #1
 80145ce:	4561      	cmp	r1, ip
 80145d0:	dd0e      	ble.n	80145f0 <D64_GENERIC+0x1dc>
 80145d2:	8d56      	ldrh	r6, [r2, #42]	; 0x2a
 80145d4:	2e01      	cmp	r6, #1
 80145d6:	f47f af3a 	bne.w	801444e <D64_GENERIC+0x3a>
 80145da:	6b56      	ldr	r6, [r2, #52]	; 0x34
 80145dc:	06b4      	lsls	r4, r6, #26
 80145de:	e899 0003 	ldmia.w	r9, {r0, r1}
 80145e2:	f109 0908 	add.w	r9, r9, #8
 80145e6:	f57f af5a 	bpl.w	801449e <D64_GENERIC+0x8a>
 80145ea:	ba40      	rev16	r0, r0
 80145ec:	ba49      	rev16	r1, r1
 80145ee:	e756      	b.n	801449e <D64_GENERIC+0x8a>
 80145f0:	61d3      	str	r3, [r2, #28]
 80145f2:	9b03      	ldr	r3, [sp, #12]
 80145f4:	9901      	ldr	r1, [sp, #4]
 80145f6:	6113      	str	r3, [r2, #16]
 80145f8:	9b04      	ldr	r3, [sp, #16]
 80145fa:	6091      	str	r1, [r2, #8]
 80145fc:	6153      	str	r3, [r2, #20]
 80145fe:	9900      	ldr	r1, [sp, #0]
 8014600:	9b07      	ldr	r3, [sp, #28]
 8014602:	60d1      	str	r1, [r2, #12]
 8014604:	2000      	movs	r0, #0
 8014606:	6193      	str	r3, [r2, #24]
 8014608:	b009      	add	sp, #36	; 0x24
 801460a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801460e:	bf00      	nop
 8014610:	001c0015 	.word	0x001c0015
 8014614:	000f000a 	.word	0x000f000a
 8014618:	00060003 	.word	0x00060003
 801461c:	0024002a 	.word	0x0024002a
 8014620:	002e0030 	.word	0x002e0030
 8014624:	00030006 	.word	0x00030006
 8014628:	000a000f 	.word	0x000a000f
 801462c:	0015001c 	.word	0x0015001c
 8014630:	200004d8 	.word	0x200004d8

08014634 <D80_GENERIC>:
 8014634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014638:	b08b      	sub	sp, #44	; 0x2c
 801463a:	6914      	ldr	r4, [r2, #16]
 801463c:	9404      	str	r4, [sp, #16]
 801463e:	6954      	ldr	r4, [r2, #20]
 8014640:	9405      	str	r4, [sp, #20]
 8014642:	6994      	ldr	r4, [r2, #24]
 8014644:	9409      	str	r4, [sp, #36]	; 0x24
 8014646:	6894      	ldr	r4, [r2, #8]
 8014648:	9402      	str	r4, [sp, #8]
 801464a:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 801464c:	68d4      	ldr	r4, [r2, #12]
 801464e:	9401      	str	r4, [sp, #4]
 8014650:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8014652:	f8d2 b01c 	ldr.w	fp, [r2, #28]
 8014656:	9406      	str	r4, [sp, #24]
 8014658:	9107      	str	r1, [sp, #28]
 801465a:	2b00      	cmp	r3, #0
 801465c:	f000 810f 	beq.w	801487e <D80_GENERIC+0x24a>
 8014660:	6a13      	ldr	r3, [r2, #32]
 8014662:	9308      	str	r3, [sp, #32]
 8014664:	2300      	movs	r3, #0
 8014666:	9200      	str	r2, [sp, #0]
 8014668:	f8df 9264 	ldr.w	r9, [pc, #612]	; 80148d0 <D80_GENERIC+0x29c>
 801466c:	f8cd b00c 	str.w	fp, [sp, #12]
 8014670:	461a      	mov	r2, r3
 8014672:	e0ed      	b.n	8014850 <D80_GENERIC+0x21c>
 8014674:	fa5f fc8c 	uxtb.w	ip, ip
 8014678:	fa0f f48c 	sxth.w	r4, ip
 801467c:	0066      	lsls	r6, r4, #1
 801467e:	eb06 0804 	add.w	r8, r6, r4
 8014682:	f1cc 0500 	rsb	r5, ip, #0
 8014686:	eb00 0108 	add.w	r1, r0, r8
 801468a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 801468e:	194b      	adds	r3, r1, r5
 8014690:	5d49      	ldrb	r1, [r1, r5]
 8014692:	f810 a008 	ldrb.w	sl, [r0, r8]
 8014696:	f813 b004 	ldrb.w	fp, [r3, r4]
 801469a:	f810 c00c 	ldrb.w	ip, [r0, ip]
 801469e:	f890 8000 	ldrb.w	r8, [r0]
 80146a2:	eb03 0e04 	add.w	lr, r3, r4
 80146a6:	eb0e 0705 	add.w	r7, lr, r5
 80146aa:	0409      	lsls	r1, r1, #16
 80146ac:	f81e 3005 	ldrb.w	r3, [lr, r5]
 80146b0:	f81e e015 	ldrb.w	lr, [lr, r5, lsl #1]
 80146b4:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 80146b8:	eb07 0a45 	add.w	sl, r7, r5, lsl #1
 80146bc:	eb0a 0004 	add.w	r0, sl, r4
 80146c0:	041b      	lsls	r3, r3, #16
 80146c2:	f81a a004 	ldrb.w	sl, [sl, r4]
 80146c6:	f817 7015 	ldrb.w	r7, [r7, r5, lsl #1]
 80146ca:	5d44      	ldrb	r4, [r0, r5]
 80146cc:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 80146d0:	eb01 210c 	add.w	r1, r1, ip, lsl #8
 80146d4:	4428      	add	r0, r5
 80146d6:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 80146da:	4441      	add	r1, r8
 80146dc:	4430      	add	r0, r6
 80146de:	eb04 240a 	add.w	r4, r4, sl, lsl #8
 80146e2:	441f      	add	r7, r3
 80146e4:	b2cd      	uxtb	r5, r1
 80146e6:	f3c1 2307 	ubfx	r3, r1, #8, #8
 80146ea:	f859 6025 	ldr.w	r6, [r9, r5, lsl #2]
 80146ee:	f859 e023 	ldr.w	lr, [r9, r3, lsl #2]
 80146f2:	9b03      	ldr	r3, [sp, #12]
 80146f4:	f3c1 4507 	ubfx	r5, r1, #16, #8
 80146f8:	0e09      	lsrs	r1, r1, #24
 80146fa:	4433      	add	r3, r6
 80146fc:	f859 8025 	ldr.w	r8, [r9, r5, lsl #2]
 8014700:	f859 6021 	ldr.w	r6, [r9, r1, lsl #2]
 8014704:	b2fd      	uxtb	r5, r7
 8014706:	eb0e 2193 	add.w	r1, lr, r3, lsr #10
 801470a:	469b      	mov	fp, r3
 801470c:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8014710:	eb08 2891 	add.w	r8, r8, r1, lsr #10
 8014714:	f859 c025 	ldr.w	ip, [r9, r5, lsl #2]
 8014718:	f859 5023 	ldr.w	r5, [r9, r3, lsl #2]
 801471c:	f3c7 4e07 	ubfx	lr, r7, #16, #8
 8014720:	eb06 2698 	add.w	r6, r6, r8, lsr #10
 8014724:	0e3b      	lsrs	r3, r7, #24
 8014726:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 801472a:	f859 702e 	ldr.w	r7, [r9, lr, lsl #2]
 801472e:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8014732:	fa5f fe84 	uxtb.w	lr, r4
 8014736:	eb05 259c 	add.w	r5, r5, ip, lsr #10
 801473a:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801473e:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 8014742:	f859 e02e 	ldr.w	lr, [r9, lr, lsl #2]
 8014746:	f859 4024 	ldr.w	r4, [r9, r4, lsl #2]
 801474a:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 801474e:	eb0e 2e93 	add.w	lr, lr, r3, lsr #10
 8014752:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 8014756:	f3c1 0109 	ubfx	r1, r1, #0, #10
 801475a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801475e:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8014762:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8014766:	f3c6 0609 	ubfx	r6, r6, #0, #10
 801476a:	f3c5 0509 	ubfx	r5, r5, #0, #10
 801476e:	ea41 4b0b 	orr.w	fp, r1, fp, lsl #16
 8014772:	ea43 4707 	orr.w	r7, r3, r7, lsl #16
 8014776:	f3c4 0109 	ubfx	r1, r4, #0, #10
 801477a:	0aa3      	lsrs	r3, r4, #10
 801477c:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8014780:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8014784:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8014788:	ea41 4e0e 	orr.w	lr, r1, lr, lsl #16
 801478c:	9303      	str	r3, [sp, #12]
 801478e:	ea46 4808 	orr.w	r8, r6, r8, lsl #16
 8014792:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
 8014796:	4b42      	ldr	r3, [pc, #264]	; (80148a0 <D80_GENERIC+0x26c>)
 8014798:	9901      	ldr	r1, [sp, #4]
 801479a:	fb2b 1303 	smlad	r3, fp, r3, r1
 801479e:	4941      	ldr	r1, [pc, #260]	; (80148a4 <D80_GENERIC+0x270>)
 80147a0:	fb28 3301 	smlad	r3, r8, r1, r3
 80147a4:	4940      	ldr	r1, [pc, #256]	; (80148a8 <D80_GENERIC+0x274>)
 80147a6:	fb2c 3301 	smlad	r3, ip, r1, r3
 80147aa:	4940      	ldr	r1, [pc, #256]	; (80148ac <D80_GENERIC+0x278>)
 80147ac:	fb27 3301 	smlad	r3, r7, r1, r3
 80147b0:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80147b4:	fb2e 3301 	smlad	r3, lr, r1, r3
 80147b8:	493d      	ldr	r1, [pc, #244]	; (80148b0 <D80_GENERIC+0x27c>)
 80147ba:	9c02      	ldr	r4, [sp, #8]
 80147bc:	fb2b 4401 	smlad	r4, fp, r1, r4
 80147c0:	493c      	ldr	r1, [pc, #240]	; (80148b4 <D80_GENERIC+0x280>)
 80147c2:	fb28 4401 	smlad	r4, r8, r1, r4
 80147c6:	f04f 114b 	mov.w	r1, #4915275	; 0x4b004b
 80147ca:	fb2c 4101 	smlad	r1, ip, r1, r4
 80147ce:	4c3a      	ldr	r4, [pc, #232]	; (80148b8 <D80_GENERIC+0x284>)
 80147d0:	fb27 1104 	smlad	r1, r7, r4, r1
 80147d4:	4c39      	ldr	r4, [pc, #228]	; (80148bc <D80_GENERIC+0x288>)
 80147d6:	fb2e 1104 	smlad	r1, lr, r4, r1
 80147da:	9101      	str	r1, [sp, #4]
 80147dc:	2101      	movs	r1, #1
 80147de:	fb2b fb01 	smuad	fp, fp, r1
 80147e2:	4937      	ldr	r1, [pc, #220]	; (80148c0 <D80_GENERIC+0x28c>)
 80147e4:	fb28 b801 	smlad	r8, r8, r1, fp
 80147e8:	4d36      	ldr	r5, [pc, #216]	; (80148c4 <D80_GENERIC+0x290>)
 80147ea:	fb2c 8c05 	smlad	ip, ip, r5, r8
 80147ee:	4d36      	ldr	r5, [pc, #216]	; (80148c8 <D80_GENERIC+0x294>)
 80147f0:	fb27 c705 	smlad	r7, r7, r5, ip
 80147f4:	4d35      	ldr	r5, [pc, #212]	; (80148cc <D80_GENERIC+0x298>)
 80147f6:	fb2e 7105 	smlad	r1, lr, r5, r7
 80147fa:	9102      	str	r1, [sp, #8]
 80147fc:	9908      	ldr	r1, [sp, #32]
 80147fe:	f5a3 337a 	sub.w	r3, r3, #256000	; 0x3e800
 8014802:	b181      	cbz	r1, 8014826 <D80_GENERIC+0x1f2>
 8014804:	9c04      	ldr	r4, [sp, #16]
 8014806:	9d05      	ldr	r5, [sp, #20]
 8014808:	9305      	str	r3, [sp, #20]
 801480a:	441c      	add	r4, r3
 801480c:	1b64      	subs	r4, r4, r5
 801480e:	17e7      	asrs	r7, r4, #31
 8014810:	fba4 4501 	umull	r4, r5, r4, r1
 8014814:	fb01 5507 	mla	r5, r1, r7, r5
 8014818:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 801481c:	f145 0500 	adc.w	r5, r5, #0
 8014820:	0069      	lsls	r1, r5, #1
 8014822:	9104      	str	r1, [sp, #16]
 8014824:	460b      	mov	r3, r1
 8014826:	9e00      	ldr	r6, [sp, #0]
 8014828:	9f06      	ldr	r7, [sp, #24]
 801482a:	8d31      	ldrh	r1, [r6, #40]	; 0x28
 801482c:	025b      	lsls	r3, r3, #9
 801482e:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8014832:	2500      	movs	r5, #0
 8014834:	fb02 f101 	mul.w	r1, r2, r1
 8014838:	fbc7 4503 	smlal	r4, r5, r7, r3
 801483c:	9c07      	ldr	r4, [sp, #28]
 801483e:	10ab      	asrs	r3, r5, #2
 8014840:	f303 030f 	ssat	r3, #16, r3
 8014844:	f824 3011 	strh.w	r3, [r4, r1, lsl #1]
 8014848:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 801484a:	3201      	adds	r2, #1
 801484c:	4293      	cmp	r3, r2
 801484e:	dd13      	ble.n	8014878 <D80_GENERIC+0x244>
 8014850:	9b00      	ldr	r3, [sp, #0]
 8014852:	f8b3 c02a 	ldrh.w	ip, [r3, #42]	; 0x2a
 8014856:	f1bc 0f01 	cmp.w	ip, #1
 801485a:	f47f af0b 	bne.w	8014674 <D80_GENERIC+0x40>
 801485e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014860:	6884      	ldr	r4, [r0, #8]
 8014862:	069b      	lsls	r3, r3, #26
 8014864:	e890 0082 	ldmia.w	r0, {r1, r7}
 8014868:	f100 000a 	add.w	r0, r0, #10
 801486c:	f57f af3a 	bpl.w	80146e4 <D80_GENERIC+0xb0>
 8014870:	ba49      	rev16	r1, r1
 8014872:	ba7f      	rev16	r7, r7
 8014874:	ba64      	rev16	r4, r4
 8014876:	e735      	b.n	80146e4 <D80_GENERIC+0xb0>
 8014878:	f8dd b00c 	ldr.w	fp, [sp, #12]
 801487c:	4632      	mov	r2, r6
 801487e:	9b02      	ldr	r3, [sp, #8]
 8014880:	6093      	str	r3, [r2, #8]
 8014882:	9b01      	ldr	r3, [sp, #4]
 8014884:	60d3      	str	r3, [r2, #12]
 8014886:	9b04      	ldr	r3, [sp, #16]
 8014888:	6113      	str	r3, [r2, #16]
 801488a:	9b05      	ldr	r3, [sp, #20]
 801488c:	6153      	str	r3, [r2, #20]
 801488e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014890:	f8c2 b01c 	str.w	fp, [r2, #28]
 8014894:	2000      	movs	r0, #0
 8014896:	6193      	str	r3, [r2, #24]
 8014898:	b00b      	add	sp, #44	; 0x2c
 801489a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801489e:	bf00      	nop
 80148a0:	002d0024 	.word	0x002d0024
 80148a4:	001c0015 	.word	0x001c0015
 80148a8:	000f000a 	.word	0x000f000a
 80148ac:	00060003 	.word	0x00060003
 80148b0:	0037003f 	.word	0x0037003f
 80148b4:	00450049 	.word	0x00450049
 80148b8:	00490045 	.word	0x00490045
 80148bc:	003f0037 	.word	0x003f0037
 80148c0:	00030006 	.word	0x00030006
 80148c4:	000a000f 	.word	0x000a000f
 80148c8:	0015001c 	.word	0x0015001c
 80148cc:	0024002d 	.word	0x0024002d
 80148d0:	200004d8 	.word	0x200004d8

080148d4 <D128_GENERIC>:
 80148d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80148d8:	b093      	sub	sp, #76	; 0x4c
 80148da:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 80148dc:	9005      	str	r0, [sp, #20]
 80148de:	4610      	mov	r0, r2
 80148e0:	9201      	str	r2, [sp, #4]
 80148e2:	6912      	ldr	r2, [r2, #16]
 80148e4:	920c      	str	r2, [sp, #48]	; 0x30
 80148e6:	4602      	mov	r2, r0
 80148e8:	6940      	ldr	r0, [r0, #20]
 80148ea:	900d      	str	r0, [sp, #52]	; 0x34
 80148ec:	4610      	mov	r0, r2
 80148ee:	4614      	mov	r4, r2
 80148f0:	6992      	ldr	r2, [r2, #24]
 80148f2:	9211      	str	r2, [sp, #68]	; 0x44
 80148f4:	69c2      	ldr	r2, [r0, #28]
 80148f6:	9202      	str	r2, [sp, #8]
 80148f8:	68e2      	ldr	r2, [r4, #12]
 80148fa:	6880      	ldr	r0, [r0, #8]
 80148fc:	9203      	str	r2, [sp, #12]
 80148fe:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8014900:	9004      	str	r0, [sp, #16]
 8014902:	920e      	str	r2, [sp, #56]	; 0x38
 8014904:	910f      	str	r1, [sp, #60]	; 0x3c
 8014906:	2b00      	cmp	r3, #0
 8014908:	f000 819b 	beq.w	8014c42 <D128_GENERIC+0x36e>
 801490c:	6a23      	ldr	r3, [r4, #32]
 801490e:	9310      	str	r3, [sp, #64]	; 0x40
 8014910:	2300      	movs	r3, #0
 8014912:	f8df 93a8 	ldr.w	r9, [pc, #936]	; 8014cbc <D128_GENERIC+0x3e8>
 8014916:	9306      	str	r3, [sp, #24]
 8014918:	e17a      	b.n	8014c10 <D128_GENERIC+0x33c>
 801491a:	b2d2      	uxtb	r2, r2
 801491c:	9d05      	ldr	r5, [sp, #20]
 801491e:	b214      	sxth	r4, r2
 8014920:	eb04 0a44 	add.w	sl, r4, r4, lsl #1
 8014924:	4250      	negs	r0, r2
 8014926:	eb05 010a 	add.w	r1, r5, sl
 801492a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801492e:	eb01 0800 	add.w	r8, r1, r0
 8014932:	eb0b 0c04 	add.w	ip, fp, r4
 8014936:	eb08 070c 	add.w	r7, r8, ip
 801493a:	183b      	adds	r3, r7, r0
 801493c:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 8014940:	eb03 0e40 	add.w	lr, r3, r0, lsl #1
 8014944:	eb0e 0604 	add.w	r6, lr, r4
 8014948:	9307      	str	r3, [sp, #28]
 801494a:	1833      	adds	r3, r6, r0
 801494c:	9305      	str	r3, [sp, #20]
 801494e:	462b      	mov	r3, r5
 8014950:	f815 a00a 	ldrb.w	sl, [r5, sl]
 8014954:	f8cd a020 	str.w	sl, [sp, #32]
 8014958:	f818 a00c 	ldrb.w	sl, [r8, ip]
 801495c:	f813 c002 	ldrb.w	ip, [r3, r2]
 8014960:	f81e 8004 	ldrb.w	r8, [lr, r4]
 8014964:	5c3a      	ldrb	r2, [r7, r0]
 8014966:	f817 e010 	ldrb.w	lr, [r7, r0, lsl #1]
 801496a:	781f      	ldrb	r7, [r3, #0]
 801496c:	9b07      	ldr	r3, [sp, #28]
 801496e:	9d05      	ldr	r5, [sp, #20]
 8014970:	f813 3010 	ldrb.w	r3, [r3, r0, lsl #1]
 8014974:	5c09      	ldrb	r1, [r1, r0]
 8014976:	9709      	str	r7, [sp, #36]	; 0x24
 8014978:	9307      	str	r3, [sp, #28]
 801497a:	f816 7010 	ldrb.w	r7, [r6, r0, lsl #1]
 801497e:	5c33      	ldrb	r3, [r6, r0]
 8014980:	0412      	lsls	r2, r2, #16
 8014982:	eb05 0640 	add.w	r6, r5, r0, lsl #1
 8014986:	eb02 620a 	add.w	r2, r2, sl, lsl #24
 801498a:	9d08      	ldr	r5, [sp, #32]
 801498c:	eb06 0a04 	add.w	sl, r6, r4
 8014990:	0409      	lsls	r1, r1, #16
 8014992:	eb01 6105 	add.w	r1, r1, r5, lsl #24
 8014996:	f81a 5000 	ldrb.w	r5, [sl, r0]
 801499a:	5d36      	ldrb	r6, [r6, r4]
 801499c:	9c05      	ldr	r4, [sp, #20]
 801499e:	042d      	lsls	r5, r5, #16
 80149a0:	eb05 6606 	add.w	r6, r5, r6, lsl #24
 80149a4:	eb01 210c 	add.w	r1, r1, ip, lsl #8
 80149a8:	f81a 5010 	ldrb.w	r5, [sl, r0, lsl #1]
 80149ac:	f814 4010 	ldrb.w	r4, [r4, r0, lsl #1]
 80149b0:	eb0a 0c00 	add.w	ip, sl, r0
 80149b4:	041b      	lsls	r3, r3, #16
 80149b6:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 80149ba:	eb06 2605 	add.w	r6, r6, r5, lsl #8
 80149be:	f81c a010 	ldrb.w	sl, [ip, r0, lsl #1]
 80149c2:	9d07      	ldr	r5, [sp, #28]
 80149c4:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 80149c8:	eb0c 0040 	add.w	r0, ip, r0, lsl #1
 80149cc:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80149ce:	4458      	add	r0, fp
 80149d0:	eb02 220e 	add.w	r2, r2, lr, lsl #8
 80149d4:	9005      	str	r0, [sp, #20]
 80149d6:	4439      	add	r1, r7
 80149d8:	442a      	add	r2, r5
 80149da:	44b2      	add	sl, r6
 80149dc:	1918      	adds	r0, r3, r4
 80149de:	b2cb      	uxtb	r3, r1
 80149e0:	f3c1 2407 	ubfx	r4, r1, #8, #8
 80149e4:	9e02      	ldr	r6, [sp, #8]
 80149e6:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80149ea:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 80149ee:	f3c1 4407 	ubfx	r4, r1, #16, #8
 80149f2:	441e      	add	r6, r3
 80149f4:	0e09      	lsrs	r1, r1, #24
 80149f6:	4633      	mov	r3, r6
 80149f8:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 80149fc:	f859 7021 	ldr.w	r7, [r9, r1, lsl #2]
 8014a00:	b2d4      	uxtb	r4, r2
 8014a02:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8014a06:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8014a0a:	eb06 2b95 	add.w	fp, r6, r5, lsr #10
 8014a0e:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 8014a12:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8014a16:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8014a1a:	0e12      	lsrs	r2, r2, #24
 8014a1c:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 8014a20:	eb06 2897 	add.w	r8, r6, r7, lsr #10
 8014a24:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 8014a28:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 8014a2c:	9702      	str	r7, [sp, #8]
 8014a2e:	b2c2      	uxtb	r2, r0
 8014a30:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 8014a34:	eb06 2c91 	add.w	ip, r6, r1, lsr #10
 8014a38:	f859 6022 	ldr.w	r6, [r9, r2, lsl #2]
 8014a3c:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 8014a40:	f3c0 2207 	ubfx	r2, r0, #8, #8
 8014a44:	eb06 2e94 	add.w	lr, r6, r4, lsr #10
 8014a48:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8014a4c:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 8014a50:	f859 7026 	ldr.w	r7, [r9, r6, lsl #2]
 8014a54:	0e00      	lsrs	r0, r0, #24
 8014a56:	fa5f f68a 	uxtb.w	r6, sl
 8014a5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8014a5e:	9309      	str	r3, [sp, #36]	; 0x24
 8014a60:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 8014a64:	f859 6026 	ldr.w	r6, [r9, r6, lsl #2]
 8014a68:	eb02 229e 	add.w	r2, r2, lr, lsr #10
 8014a6c:	f3ca 2307 	ubfx	r3, sl, #8, #8
 8014a70:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8014a74:	950a      	str	r5, [sp, #40]	; 0x28
 8014a76:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 8014a7a:	f3ca 4507 	ubfx	r5, sl, #16, #8
 8014a7e:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 8014a82:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8014a86:	f859 5025 	ldr.w	r5, [r9, r5, lsl #2]
 8014a8a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8014a8e:	920b      	str	r2, [sp, #44]	; 0x2c
 8014a90:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 8014a94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014a96:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 8014a9a:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8014a9e:	9307      	str	r3, [sp, #28]
 8014aa0:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8014aa4:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 8014aa8:	9b02      	ldr	r3, [sp, #8]
 8014aaa:	f8cd c008 	str.w	ip, [sp, #8]
 8014aae:	4694      	mov	ip, r2
 8014ab0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014ab2:	f859 a02a 	ldr.w	sl, [r9, sl, lsl #2]
 8014ab6:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8014aba:	9a02      	ldr	r2, [sp, #8]
 8014abc:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8014ac0:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 8014ac4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8014ac8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014aca:	f8cd a020 	str.w	sl, [sp, #32]
 8014ace:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8014ad2:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8014ad6:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8014ada:	9b07      	ldr	r3, [sp, #28]
 8014adc:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8014ae0:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8014ae4:	ea42 480e 	orr.w	r8, r2, lr, lsl #16
 8014ae8:	9a08      	ldr	r2, [sp, #32]
 8014aea:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8014aee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8014af2:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8014af6:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8014afa:	f3c2 0e09 	ubfx	lr, r2, #0, #10
 8014afe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8014b02:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8014b06:	0a96      	lsrs	r6, r2, #10
 8014b08:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8014b0c:	9602      	str	r6, [sp, #8]
 8014b0e:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8014b12:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 8014b16:	ea4e 4505 	orr.w	r5, lr, r5, lsl #16
 8014b1a:	4e53      	ldr	r6, [pc, #332]	; (8014c68 <D128_GENERIC+0x394>)
 8014b1c:	9f03      	ldr	r7, [sp, #12]
 8014b1e:	fb2c 7606 	smlad	r6, ip, r6, r7
 8014b22:	4f52      	ldr	r7, [pc, #328]	; (8014c6c <D128_GENERIC+0x398>)
 8014b24:	fb2a 6607 	smlad	r6, sl, r7, r6
 8014b28:	4f51      	ldr	r7, [pc, #324]	; (8014c70 <D128_GENERIC+0x39c>)
 8014b2a:	fb21 6607 	smlad	r6, r1, r7, r6
 8014b2e:	4f51      	ldr	r7, [pc, #324]	; (8014c74 <D128_GENERIC+0x3a0>)
 8014b30:	fb24 6607 	smlad	r6, r4, r7, r6
 8014b34:	4f50      	ldr	r7, [pc, #320]	; (8014c78 <D128_GENERIC+0x3a4>)
 8014b36:	fb28 6607 	smlad	r6, r8, r7, r6
 8014b3a:	4f50      	ldr	r7, [pc, #320]	; (8014c7c <D128_GENERIC+0x3a8>)
 8014b3c:	fb20 6607 	smlad	r6, r0, r7, r6
 8014b40:	4f4f      	ldr	r7, [pc, #316]	; (8014c80 <D128_GENERIC+0x3ac>)
 8014b42:	fb23 6607 	smlad	r6, r3, r7, r6
 8014b46:	f44f 3780 	mov.w	r7, #65536	; 0x10000
 8014b4a:	fb25 6607 	smlad	r6, r5, r7, r6
 8014b4e:	4f4d      	ldr	r7, [pc, #308]	; (8014c84 <D128_GENERIC+0x3b0>)
 8014b50:	9a04      	ldr	r2, [sp, #16]
 8014b52:	fb2c 2e07 	smlad	lr, ip, r7, r2
 8014b56:	4a4c      	ldr	r2, [pc, #304]	; (8014c88 <D128_GENERIC+0x3b4>)
 8014b58:	fb2a ee02 	smlad	lr, sl, r2, lr
 8014b5c:	4f4b      	ldr	r7, [pc, #300]	; (8014c8c <D128_GENERIC+0x3b8>)
 8014b5e:	fb21 ee07 	smlad	lr, r1, r7, lr
 8014b62:	4f4b      	ldr	r7, [pc, #300]	; (8014c90 <D128_GENERIC+0x3bc>)
 8014b64:	fb24 ee07 	smlad	lr, r4, r7, lr
 8014b68:	4f4a      	ldr	r7, [pc, #296]	; (8014c94 <D128_GENERIC+0x3c0>)
 8014b6a:	fb28 ee07 	smlad	lr, r8, r7, lr
 8014b6e:	4f4a      	ldr	r7, [pc, #296]	; (8014c98 <D128_GENERIC+0x3c4>)
 8014b70:	fb20 ee07 	smlad	lr, r0, r7, lr
 8014b74:	4f49      	ldr	r7, [pc, #292]	; (8014c9c <D128_GENERIC+0x3c8>)
 8014b76:	fb23 e707 	smlad	r7, r3, r7, lr
 8014b7a:	f8df e144 	ldr.w	lr, [pc, #324]	; 8014cc0 <D128_GENERIC+0x3ec>
 8014b7e:	fb25 720e 	smlad	r2, r5, lr, r7
 8014b82:	f04f 0b01 	mov.w	fp, #1
 8014b86:	9203      	str	r2, [sp, #12]
 8014b88:	fb2c fb0b 	smuad	fp, ip, fp
 8014b8c:	4f44      	ldr	r7, [pc, #272]	; (8014ca0 <D128_GENERIC+0x3cc>)
 8014b8e:	fb2a ba07 	smlad	sl, sl, r7, fp
 8014b92:	4f44      	ldr	r7, [pc, #272]	; (8014ca4 <D128_GENERIC+0x3d0>)
 8014b94:	fb21 aa07 	smlad	sl, r1, r7, sl
 8014b98:	4f43      	ldr	r7, [pc, #268]	; (8014ca8 <D128_GENERIC+0x3d4>)
 8014b9a:	fb24 aa07 	smlad	sl, r4, r7, sl
 8014b9e:	4f43      	ldr	r7, [pc, #268]	; (8014cac <D128_GENERIC+0x3d8>)
 8014ba0:	fb28 a707 	smlad	r7, r8, r7, sl
 8014ba4:	4a42      	ldr	r2, [pc, #264]	; (8014cb0 <D128_GENERIC+0x3dc>)
 8014ba6:	fb20 7702 	smlad	r7, r0, r2, r7
 8014baa:	4a42      	ldr	r2, [pc, #264]	; (8014cb4 <D128_GENERIC+0x3e0>)
 8014bac:	fb23 7702 	smlad	r7, r3, r2, r7
 8014bb0:	4b41      	ldr	r3, [pc, #260]	; (8014cb8 <D128_GENERIC+0x3e4>)
 8014bb2:	fb25 7303 	smlad	r3, r5, r3, r7
 8014bb6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8014bb8:	9304      	str	r3, [sp, #16]
 8014bba:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
 8014bbe:	b185      	cbz	r5, 8014be2 <D128_GENERIC+0x30e>
 8014bc0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014bc2:	990d      	ldr	r1, [sp, #52]	; 0x34
 8014bc4:	960d      	str	r6, [sp, #52]	; 0x34
 8014bc6:	4432      	add	r2, r6
 8014bc8:	1a52      	subs	r2, r2, r1
 8014bca:	17d1      	asrs	r1, r2, #31
 8014bcc:	fba2 2305 	umull	r2, r3, r2, r5
 8014bd0:	fb05 3301 	mla	r3, r5, r1, r3
 8014bd4:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8014bd8:	f143 0300 	adc.w	r3, r3, #0
 8014bdc:	005b      	lsls	r3, r3, #1
 8014bde:	930c      	str	r3, [sp, #48]	; 0x30
 8014be0:	461e      	mov	r6, r3
 8014be2:	9801      	ldr	r0, [sp, #4]
 8014be4:	9c06      	ldr	r4, [sp, #24]
 8014be6:	8d01      	ldrh	r1, [r0, #40]	; 0x28
 8014be8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8014bea:	01f6      	lsls	r6, r6, #7
 8014bec:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8014bf0:	2300      	movs	r3, #0
 8014bf2:	fbc5 2306 	smlal	r2, r3, r5, r6
 8014bf6:	fb04 f101 	mul.w	r1, r4, r1
 8014bfa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014bfc:	109b      	asrs	r3, r3, #2
 8014bfe:	f303 030f 	ssat	r3, #16, r3
 8014c02:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
 8014c06:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 8014c08:	1c62      	adds	r2, r4, #1
 8014c0a:	4293      	cmp	r3, r2
 8014c0c:	9206      	str	r2, [sp, #24]
 8014c0e:	dd18      	ble.n	8014c42 <D128_GENERIC+0x36e>
 8014c10:	9b01      	ldr	r3, [sp, #4]
 8014c12:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8014c14:	2a01      	cmp	r2, #1
 8014c16:	f47f ae80 	bne.w	801491a <D128_GENERIC+0x46>
 8014c1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014c1c:	9d05      	ldr	r5, [sp, #20]
 8014c1e:	069b      	lsls	r3, r3, #26
 8014c20:	6829      	ldr	r1, [r5, #0]
 8014c22:	686a      	ldr	r2, [r5, #4]
 8014c24:	68a8      	ldr	r0, [r5, #8]
 8014c26:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 8014c2a:	f105 0410 	add.w	r4, r5, #16
 8014c2e:	d506      	bpl.n	8014c3e <D128_GENERIC+0x36a>
 8014c30:	ba49      	rev16	r1, r1
 8014c32:	ba52      	rev16	r2, r2
 8014c34:	ba40      	rev16	r0, r0
 8014c36:	fa9a fa9a 	rev16.w	sl, sl
 8014c3a:	9405      	str	r4, [sp, #20]
 8014c3c:	e6cf      	b.n	80149de <D128_GENERIC+0x10a>
 8014c3e:	9405      	str	r4, [sp, #20]
 8014c40:	e6cd      	b.n	80149de <D128_GENERIC+0x10a>
 8014c42:	9a01      	ldr	r2, [sp, #4]
 8014c44:	9904      	ldr	r1, [sp, #16]
 8014c46:	6091      	str	r1, [r2, #8]
 8014c48:	9903      	ldr	r1, [sp, #12]
 8014c4a:	60d1      	str	r1, [r2, #12]
 8014c4c:	9b02      	ldr	r3, [sp, #8]
 8014c4e:	61d3      	str	r3, [r2, #28]
 8014c50:	4611      	mov	r1, r2
 8014c52:	4613      	mov	r3, r2
 8014c54:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014c56:	610a      	str	r2, [r1, #16]
 8014c58:	990d      	ldr	r1, [sp, #52]	; 0x34
 8014c5a:	6159      	str	r1, [r3, #20]
 8014c5c:	9911      	ldr	r1, [sp, #68]	; 0x44
 8014c5e:	6199      	str	r1, [r3, #24]
 8014c60:	2000      	movs	r0, #0
 8014c62:	b013      	add	sp, #76	; 0x4c
 8014c64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c68:	00780069 	.word	0x00780069
 8014c6c:	005b004e 	.word	0x005b004e
 8014c70:	00420037 	.word	0x00420037
 8014c74:	002d0024 	.word	0x002d0024
 8014c78:	001c0015 	.word	0x001c0015
 8014c7c:	000f000a 	.word	0x000f000a
 8014c80:	00060003 	.word	0x00060003
 8014c84:	00880096 	.word	0x00880096
 8014c88:	00a200ac 	.word	0x00a200ac
 8014c8c:	00b400ba 	.word	0x00b400ba
 8014c90:	00be00c0 	.word	0x00be00c0
 8014c94:	00c000be 	.word	0x00c000be
 8014c98:	00ba00b4 	.word	0x00ba00b4
 8014c9c:	00ac00a2 	.word	0x00ac00a2
 8014ca0:	00030006 	.word	0x00030006
 8014ca4:	000a000f 	.word	0x000a000f
 8014ca8:	0015001c 	.word	0x0015001c
 8014cac:	0024002d 	.word	0x0024002d
 8014cb0:	00370042 	.word	0x00370042
 8014cb4:	004e005b 	.word	0x004e005b
 8014cb8:	00690078 	.word	0x00690078
 8014cbc:	200004d8 	.word	0x200004d8
 8014cc0:	00960088 	.word	0x00960088

08014cc4 <D16_1CH_HTONS_VOL_HP>:
 8014cc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014cc8:	4691      	mov	r9, r2
 8014cca:	b083      	sub	sp, #12
 8014ccc:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8014cce:	f8d9 3018 	ldr.w	r3, [r9, #24]
 8014cd2:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8014cd6:	9300      	str	r3, [sp, #0]
 8014cd8:	4680      	mov	r8, r0
 8014cda:	f8d9 7014 	ldr.w	r7, [r9, #20]
 8014cde:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8014ce2:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8014ce6:	f8d9 5008 	ldr.w	r5, [r9, #8]
 8014cea:	9401      	str	r4, [sp, #4]
 8014cec:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 8014cf0:	f8d9 e020 	ldr.w	lr, [r9, #32]
 8014cf4:	2a00      	cmp	r2, #0
 8014cf6:	d04e      	beq.n	8014d96 <D16_1CH_HTONS_VOL_HP+0xd2>
 8014cf8:	f8df c0a8 	ldr.w	ip, [pc, #168]	; 8014da4 <D16_1CH_HTONS_VOL_HP+0xe0>
 8014cfc:	1e8c      	subs	r4, r1, #2
 8014cfe:	eb08 0b42 	add.w	fp, r8, r2, lsl #1
 8014d02:	f858 2b02 	ldr.w	r2, [r8], #2
 8014d06:	ba52      	rev16	r2, r2
 8014d08:	b2d6      	uxtb	r6, r2
 8014d0a:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8014d0e:	f85c 2026 	ldr.w	r2, [ip, r6, lsl #2]
 8014d12:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 8014d16:	4413      	add	r3, r2
 8014d18:	eb01 2293 	add.w	r2, r1, r3, lsr #10
 8014d1c:	f3c2 0109 	ubfx	r1, r2, #0, #10
 8014d20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8014d24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8014d28:	0a93      	lsrs	r3, r2, #10
 8014d2a:	4a1c      	ldr	r2, [pc, #112]	; (8014d9c <D16_1CH_HTONS_VOL_HP+0xd8>)
 8014d2c:	fb21 5202 	smlad	r2, r1, r2, r5
 8014d30:	4d1b      	ldr	r5, [pc, #108]	; (8014da0 <D16_1CH_HTONS_VOL_HP+0xdc>)
 8014d32:	fb21 f505 	smuad	r5, r1, r5
 8014d36:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 8014d3a:	4410      	add	r0, r2
 8014d3c:	1bc0      	subs	r0, r0, r7
 8014d3e:	17c7      	asrs	r7, r0, #31
 8014d40:	fba0 010e 	umull	r0, r1, r0, lr
 8014d44:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 8014d48:	fb0e 1107 	mla	r1, lr, r7, r1
 8014d4c:	f141 0100 	adc.w	r1, r1, #0
 8014d50:	0448      	lsls	r0, r1, #17
 8014d52:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8014d56:	2700      	movs	r7, #0
 8014d58:	fbc0 670a 	smlal	r6, r7, r0, sl
 8014d5c:	45d8      	cmp	r8, fp
 8014d5e:	ea4f 0041 	mov.w	r0, r1, lsl #1
 8014d62:	ea4f 01a7 	mov.w	r1, r7, asr #2
 8014d66:	4617      	mov	r7, r2
 8014d68:	f301 010f 	ssat	r1, #16, r1
 8014d6c:	f824 1f02 	strh.w	r1, [r4, #2]!
 8014d70:	d1c7      	bne.n	8014d02 <D16_1CH_HTONS_VOL_HP+0x3e>
 8014d72:	9901      	ldr	r1, [sp, #4]
 8014d74:	f8c9 301c 	str.w	r3, [r9, #28]
 8014d78:	9b00      	ldr	r3, [sp, #0]
 8014d7a:	f8c9 0010 	str.w	r0, [r9, #16]
 8014d7e:	2000      	movs	r0, #0
 8014d80:	f8c9 5008 	str.w	r5, [r9, #8]
 8014d84:	f8c9 100c 	str.w	r1, [r9, #12]
 8014d88:	f8c9 2014 	str.w	r2, [r9, #20]
 8014d8c:	f8c9 3018 	str.w	r3, [r9, #24]
 8014d90:	b003      	add	sp, #12
 8014d92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d96:	463a      	mov	r2, r7
 8014d98:	4621      	mov	r1, r4
 8014d9a:	e7eb      	b.n	8014d74 <D16_1CH_HTONS_VOL_HP+0xb0>
 8014d9c:	00030001 	.word	0x00030001
 8014da0:	00010003 	.word	0x00010003
 8014da4:	200004d8 	.word	0x200004d8

08014da8 <D24_1CH_HTONS_VOL_HP>:
 8014da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014dac:	b089      	sub	sp, #36	; 0x24
 8014dae:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8014db0:	6996      	ldr	r6, [r2, #24]
 8014db2:	9304      	str	r3, [sp, #16]
 8014db4:	6b17      	ldr	r7, [r2, #48]	; 0x30
 8014db6:	9207      	str	r2, [sp, #28]
 8014db8:	6915      	ldr	r5, [r2, #16]
 8014dba:	6954      	ldr	r4, [r2, #20]
 8014dbc:	9606      	str	r6, [sp, #24]
 8014dbe:	6893      	ldr	r3, [r2, #8]
 8014dc0:	69d6      	ldr	r6, [r2, #28]
 8014dc2:	f8d2 c00c 	ldr.w	ip, [r2, #12]
 8014dc6:	f8d2 a020 	ldr.w	sl, [r2, #32]
 8014dca:	9a04      	ldr	r2, [sp, #16]
 8014dcc:	9705      	str	r7, [sp, #20]
 8014dce:	2a00      	cmp	r2, #0
 8014dd0:	d07e      	beq.n	8014ed0 <D24_1CH_HTONS_VOL_HP+0x128>
 8014dd2:	f1a1 0b02 	sub.w	fp, r1, #2
 8014dd6:	2700      	movs	r7, #0
 8014dd8:	46a8      	mov	r8, r5
 8014dda:	f8cd b004 	str.w	fp, [sp, #4]
 8014dde:	4655      	mov	r5, sl
 8014de0:	46e3      	mov	fp, ip
 8014de2:	f8df e0f8 	ldr.w	lr, [pc, #248]	; 8014edc <D24_1CH_HTONS_VOL_HP+0x134>
 8014de6:	46ba      	mov	sl, r7
 8014de8:	469c      	mov	ip, r3
 8014dea:	e055      	b.n	8014e98 <D24_1CH_HTONS_VOL_HP+0xf0>
 8014dec:	7802      	ldrb	r2, [r0, #0]
 8014dee:	78c3      	ldrb	r3, [r0, #3]
 8014df0:	7841      	ldrb	r1, [r0, #1]
 8014df2:	0212      	lsls	r2, r2, #8
 8014df4:	eb02 4303 	add.w	r3, r2, r3, lsl #16
 8014df8:	440b      	add	r3, r1
 8014dfa:	3002      	adds	r0, #2
 8014dfc:	b2d9      	uxtb	r1, r3
 8014dfe:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8014e02:	f85e 7021 	ldr.w	r7, [lr, r1, lsl #2]
 8014e06:	f85e 2022 	ldr.w	r2, [lr, r2, lsl #2]
 8014e0a:	0c1b      	lsrs	r3, r3, #16
 8014e0c:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 8014e10:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 8014e14:	f85e 6023 	ldr.w	r6, [lr, r3, lsl #2]
 8014e18:	f3c7 0309 	ubfx	r3, r7, #0, #10
 8014e1c:	f3c2 0709 	ubfx	r7, r2, #0, #10
 8014e20:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 8014e24:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 8014e28:	4a2a      	ldr	r2, [pc, #168]	; (8014ed4 <D24_1CH_HTONS_VOL_HP+0x12c>)
 8014e2a:	fb23 b102 	smlad	r1, r3, r2, fp
 8014e2e:	4a2a      	ldr	r2, [pc, #168]	; (8014ed8 <D24_1CH_HTONS_VOL_HP+0x130>)
 8014e30:	fb23 cb02 	smlad	fp, r3, r2, ip
 8014e34:	f3c6 0c09 	ubfx	ip, r6, #0, #10
 8014e38:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8014e3c:	eb0b 0b4c 	add.w	fp, fp, ip, lsl #1
 8014e40:	2201      	movs	r2, #1
 8014e42:	fb23 f702 	smuad	r7, r3, r2
 8014e46:	f5a1 51d8 	sub.w	r1, r1, #6912	; 0x1b00
 8014e4a:	eb01 0208 	add.w	r2, r1, r8
 8014e4e:	1b12      	subs	r2, r2, r4
 8014e50:	17d4      	asrs	r4, r2, #31
 8014e52:	fba2 2305 	umull	r2, r3, r2, r5
 8014e56:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8014e5a:	fb05 3304 	mla	r3, r5, r4, r3
 8014e5e:	f143 0300 	adc.w	r3, r3, #0
 8014e62:	9c05      	ldr	r4, [sp, #20]
 8014e64:	03da      	lsls	r2, r3, #15
 8014e66:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8014e6a:	f04f 0900 	mov.w	r9, #0
 8014e6e:	fbc4 8902 	smlal	r8, r9, r4, r2
 8014e72:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8014e76:	9a01      	ldr	r2, [sp, #4]
 8014e78:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8014e7c:	9b03      	ldr	r3, [sp, #12]
 8014e7e:	109b      	asrs	r3, r3, #2
 8014e80:	f303 030f 	ssat	r3, #16, r3
 8014e84:	f822 3f02 	strh.w	r3, [r2, #2]!
 8014e88:	9b04      	ldr	r3, [sp, #16]
 8014e8a:	9201      	str	r2, [sp, #4]
 8014e8c:	f10a 0a01 	add.w	sl, sl, #1
 8014e90:	459a      	cmp	sl, r3
 8014e92:	44bc      	add	ip, r7
 8014e94:	460c      	mov	r4, r1
 8014e96:	d00b      	beq.n	8014eb0 <D24_1CH_HTONS_VOL_HP+0x108>
 8014e98:	f01a 0f01 	tst.w	sl, #1
 8014e9c:	d0a6      	beq.n	8014dec <D24_1CH_HTONS_VOL_HP+0x44>
 8014e9e:	78c2      	ldrb	r2, [r0, #3]
 8014ea0:	7883      	ldrb	r3, [r0, #2]
 8014ea2:	f810 1b04 	ldrb.w	r1, [r0], #4
 8014ea6:	0212      	lsls	r2, r2, #8
 8014ea8:	eb02 4303 	add.w	r3, r2, r3, lsl #16
 8014eac:	440b      	add	r3, r1
 8014eae:	e7a5      	b.n	8014dfc <D24_1CH_HTONS_VOL_HP+0x54>
 8014eb0:	4663      	mov	r3, ip
 8014eb2:	4645      	mov	r5, r8
 8014eb4:	46dc      	mov	ip, fp
 8014eb6:	9807      	ldr	r0, [sp, #28]
 8014eb8:	6141      	str	r1, [r0, #20]
 8014eba:	9906      	ldr	r1, [sp, #24]
 8014ebc:	6083      	str	r3, [r0, #8]
 8014ebe:	f8c0 c00c 	str.w	ip, [r0, #12]
 8014ec2:	61c6      	str	r6, [r0, #28]
 8014ec4:	6105      	str	r5, [r0, #16]
 8014ec6:	6181      	str	r1, [r0, #24]
 8014ec8:	2000      	movs	r0, #0
 8014eca:	b009      	add	sp, #36	; 0x24
 8014ecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ed0:	4621      	mov	r1, r4
 8014ed2:	e7f0      	b.n	8014eb6 <D24_1CH_HTONS_VOL_HP+0x10e>
 8014ed4:	00030001 	.word	0x00030001
 8014ed8:	00060007 	.word	0x00060007
 8014edc:	200004d8 	.word	0x200004d8

08014ee0 <D32_1CH_HTONS_VOL_HP>:
 8014ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ee4:	4692      	mov	sl, r2
 8014ee6:	b087      	sub	sp, #28
 8014ee8:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8014eea:	f8da 3018 	ldr.w	r3, [sl, #24]
 8014eee:	f8da 5030 	ldr.w	r5, [sl, #48]	; 0x30
 8014ef2:	9304      	str	r3, [sp, #16]
 8014ef4:	f8da 4010 	ldr.w	r4, [sl, #16]
 8014ef8:	f8da 8014 	ldr.w	r8, [sl, #20]
 8014efc:	f8da 601c 	ldr.w	r6, [sl, #28]
 8014f00:	f8da 3008 	ldr.w	r3, [sl, #8]
 8014f04:	f8da e00c 	ldr.w	lr, [sl, #12]
 8014f08:	9501      	str	r5, [sp, #4]
 8014f0a:	f8da c020 	ldr.w	ip, [sl, #32]
 8014f0e:	2a00      	cmp	r2, #0
 8014f10:	d07b      	beq.n	801500a <D32_1CH_HTONS_VOL_HP+0x12a>
 8014f12:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8014f16:	4f3e      	ldr	r7, [pc, #248]	; (8015010 <D32_1CH_HTONS_VOL_HP+0x130>)
 8014f18:	f8cd c00c 	str.w	ip, [sp, #12]
 8014f1c:	9202      	str	r2, [sp, #8]
 8014f1e:	460d      	mov	r5, r1
 8014f20:	46a1      	mov	r9, r4
 8014f22:	4684      	mov	ip, r0
 8014f24:	f8cd a014 	str.w	sl, [sp, #20]
 8014f28:	f85c 1b04 	ldr.w	r1, [ip], #4
 8014f2c:	ba49      	rev16	r1, r1
 8014f2e:	b2c8      	uxtb	r0, r1
 8014f30:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8014f34:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 8014f38:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 8014f3c:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8014f40:	0e09      	lsrs	r1, r1, #24
 8014f42:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 8014f46:	f857 602a 	ldr.w	r6, [r7, sl, lsl #2]
 8014f4a:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8014f4e:	eb02 2290 	add.w	r2, r2, r0, lsr #10
 8014f52:	eb06 2a92 	add.w	sl, r6, r2, lsr #10
 8014f56:	eb01 269a 	add.w	r6, r1, sl, lsr #10
 8014f5a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8014f5e:	f3c6 0109 	ubfx	r1, r6, #0, #10
 8014f62:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8014f66:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8014f6a:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 8014f6e:	ea41 4a0a 	orr.w	sl, r1, sl, lsl #16
 8014f72:	4a28      	ldr	r2, [pc, #160]	; (8015014 <D32_1CH_HTONS_VOL_HP+0x134>)
 8014f74:	fb20 e202 	smlad	r2, r0, r2, lr
 8014f78:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8014f7c:	fb2a 2101 	smlad	r1, sl, r1, r2
 8014f80:	4a25      	ldr	r2, [pc, #148]	; (8015018 <D32_1CH_HTONS_VOL_HP+0x138>)
 8014f82:	fb20 3302 	smlad	r3, r0, r2, r3
 8014f86:	4a25      	ldr	r2, [pc, #148]	; (801501c <D32_1CH_HTONS_VOL_HP+0x13c>)
 8014f88:	fb2a 3e02 	smlad	lr, sl, r2, r3
 8014f8c:	2301      	movs	r3, #1
 8014f8e:	fb20 f003 	smuad	r0, r0, r3
 8014f92:	4b23      	ldr	r3, [pc, #140]	; (8015020 <D32_1CH_HTONS_VOL_HP+0x140>)
 8014f94:	fb2a 0303 	smlad	r3, sl, r3, r0
 8014f98:	f5a1 4280 	sub.w	r2, r1, #16384	; 0x4000
 8014f9c:	9c03      	ldr	r4, [sp, #12]
 8014f9e:	eb02 0009 	add.w	r0, r2, r9
 8014fa2:	eba0 0008 	sub.w	r0, r0, r8
 8014fa6:	ea4f 7be0 	mov.w	fp, r0, asr #31
 8014faa:	fba0 0104 	umull	r0, r1, r0, r4
 8014fae:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 8014fb2:	fb04 110b 	mla	r1, r4, fp, r1
 8014fb6:	f141 0100 	adc.w	r1, r1, #0
 8014fba:	9c01      	ldr	r4, [sp, #4]
 8014fbc:	0388      	lsls	r0, r1, #14
 8014fbe:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8014fc2:	f04f 0900 	mov.w	r9, #0
 8014fc6:	fbc0 8904 	smlal	r8, r9, r0, r4
 8014fca:	ea4f 00a9 	mov.w	r0, r9, asr #2
 8014fce:	ea4f 0941 	mov.w	r9, r1, lsl #1
 8014fd2:	f300 000f 	ssat	r0, #16, r0
 8014fd6:	9902      	ldr	r1, [sp, #8]
 8014fd8:	f825 0b02 	strh.w	r0, [r5], #2
 8014fdc:	428d      	cmp	r5, r1
 8014fde:	4690      	mov	r8, r2
 8014fe0:	d1a2      	bne.n	8014f28 <D32_1CH_HTONS_VOL_HP+0x48>
 8014fe2:	f8dd a014 	ldr.w	sl, [sp, #20]
 8014fe6:	464c      	mov	r4, r9
 8014fe8:	f8ca 3008 	str.w	r3, [sl, #8]
 8014fec:	9b04      	ldr	r3, [sp, #16]
 8014fee:	f8ca e00c 	str.w	lr, [sl, #12]
 8014ff2:	2000      	movs	r0, #0
 8014ff4:	f8ca 601c 	str.w	r6, [sl, #28]
 8014ff8:	f8ca 4010 	str.w	r4, [sl, #16]
 8014ffc:	f8ca 2014 	str.w	r2, [sl, #20]
 8015000:	f8ca 3018 	str.w	r3, [sl, #24]
 8015004:	b007      	add	sp, #28
 8015006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801500a:	4642      	mov	r2, r8
 801500c:	e7ec      	b.n	8014fe8 <D32_1CH_HTONS_VOL_HP+0x108>
 801500e:	bf00      	nop
 8015010:	200004d8 	.word	0x200004d8
 8015014:	00060003 	.word	0x00060003
 8015018:	000a000c 	.word	0x000a000c
 801501c:	000c000a 	.word	0x000c000a
 8015020:	00030006 	.word	0x00030006

08015024 <D48_1CH_HTONS_VOL_HP>:
 8015024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015028:	4613      	mov	r3, r2
 801502a:	461c      	mov	r4, r3
 801502c:	b087      	sub	sp, #28
 801502e:	4625      	mov	r5, r4
 8015030:	4626      	mov	r6, r4
 8015032:	6b2d      	ldr	r5, [r5, #48]	; 0x30
 8015034:	9205      	str	r2, [sp, #20]
 8015036:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8015038:	f8d3 9014 	ldr.w	r9, [r3, #20]
 801503c:	9501      	str	r5, [sp, #4]
 801503e:	4680      	mov	r8, r0
 8015040:	6a35      	ldr	r5, [r6, #32]
 8015042:	6918      	ldr	r0, [r3, #16]
 8015044:	699b      	ldr	r3, [r3, #24]
 8015046:	9304      	str	r3, [sp, #16]
 8015048:	f8d4 e01c 	ldr.w	lr, [r4, #28]
 801504c:	68a3      	ldr	r3, [r4, #8]
 801504e:	9502      	str	r5, [sp, #8]
 8015050:	68e4      	ldr	r4, [r4, #12]
 8015052:	2a00      	cmp	r2, #0
 8015054:	f000 808c 	beq.w	8015170 <D48_1CH_HTONS_VOL_HP+0x14c>
 8015058:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 801505c:	4d45      	ldr	r5, [pc, #276]	; (8015174 <D48_1CH_HTONS_VOL_HP+0x150>)
 801505e:	9203      	str	r2, [sp, #12]
 8015060:	468c      	mov	ip, r1
 8015062:	e898 0044 	ldmia.w	r8, {r2, r6}
 8015066:	f108 0806 	add.w	r8, r8, #6
 801506a:	ba52      	rev16	r2, r2
 801506c:	ba76      	rev16	r6, r6
 801506e:	b2d7      	uxtb	r7, r2
 8015070:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8015074:	f855 a027 	ldr.w	sl, [r5, r7, lsl #2]
 8015078:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 801507c:	f3c2 4707 	ubfx	r7, r2, #16, #8
 8015080:	0e12      	lsrs	r2, r2, #24
 8015082:	eb0a 2a9e 	add.w	sl, sl, lr, lsr #10
 8015086:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 801508a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801508e:	fa5f fb86 	uxtb.w	fp, r6
 8015092:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 8015096:	f3c6 2e07 	ubfx	lr, r6, #8, #8
 801509a:	eb07 2791 	add.w	r7, r7, r1, lsr #10
 801509e:	f855 602b 	ldr.w	r6, [r5, fp, lsl #2]
 80150a2:	f855 e02e 	ldr.w	lr, [r5, lr, lsl #2]
 80150a6:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 80150aa:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 80150ae:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 80150b2:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80150b6:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80150ba:	f3ce 0b09 	ubfx	fp, lr, #0, #10
 80150be:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 80150c2:	f3c7 0709 	ubfx	r7, r7, #0, #10
 80150c6:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80150ca:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 80150ce:	ea41 4a0a 	orr.w	sl, r1, sl, lsl #16
 80150d2:	ea4b 4606 	orr.w	r6, fp, r6, lsl #16
 80150d6:	4a28      	ldr	r2, [pc, #160]	; (8015178 <D48_1CH_HTONS_VOL_HP+0x154>)
 80150d8:	fb2a 4202 	smlad	r2, sl, r2, r4
 80150dc:	4927      	ldr	r1, [pc, #156]	; (801517c <D48_1CH_HTONS_VOL_HP+0x158>)
 80150de:	fb27 2201 	smlad	r2, r7, r1, r2
 80150e2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80150e6:	fb26 2201 	smlad	r2, r6, r1, r2
 80150ea:	4925      	ldr	r1, [pc, #148]	; (8015180 <D48_1CH_HTONS_VOL_HP+0x15c>)
 80150ec:	fb2a 3401 	smlad	r4, sl, r1, r3
 80150f0:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
 80150f4:	fb27 4403 	smlad	r4, r7, r3, r4
 80150f8:	4b22      	ldr	r3, [pc, #136]	; (8015184 <D48_1CH_HTONS_VOL_HP+0x160>)
 80150fa:	fb26 4403 	smlad	r4, r6, r3, r4
 80150fe:	2101      	movs	r1, #1
 8015100:	fb2a fa01 	smuad	sl, sl, r1
 8015104:	4b20      	ldr	r3, [pc, #128]	; (8015188 <D48_1CH_HTONS_VOL_HP+0x164>)
 8015106:	fb27 a703 	smlad	r7, r7, r3, sl
 801510a:	4b20      	ldr	r3, [pc, #128]	; (801518c <D48_1CH_HTONS_VOL_HP+0x168>)
 801510c:	fb26 7303 	smlad	r3, r6, r3, r7
 8015110:	f5a2 4258 	sub.w	r2, r2, #55296	; 0xd800
 8015114:	9e02      	ldr	r6, [sp, #8]
 8015116:	9f01      	ldr	r7, [sp, #4]
 8015118:	4410      	add	r0, r2
 801511a:	eba0 0009 	sub.w	r0, r0, r9
 801511e:	ea4f 7ae0 	mov.w	sl, r0, asr #31
 8015122:	fba0 0106 	umull	r0, r1, r0, r6
 8015126:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 801512a:	fb06 110a 	mla	r1, r6, sl, r1
 801512e:	f141 0100 	adc.w	r1, r1, #0
 8015132:	0308      	lsls	r0, r1, #12
 8015134:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 8015138:	f04f 0a00 	mov.w	sl, #0
 801513c:	fbc0 9a07 	smlal	r9, sl, r0, r7
 8015140:	4657      	mov	r7, sl
 8015142:	10b8      	asrs	r0, r7, #2
 8015144:	f300 000f 	ssat	r0, #16, r0
 8015148:	f82c 0b02 	strh.w	r0, [ip], #2
 801514c:	0048      	lsls	r0, r1, #1
 801514e:	9903      	ldr	r1, [sp, #12]
 8015150:	458c      	cmp	ip, r1
 8015152:	4691      	mov	r9, r2
 8015154:	d185      	bne.n	8015062 <D48_1CH_HTONS_VOL_HP+0x3e>
 8015156:	9d05      	ldr	r5, [sp, #20]
 8015158:	616a      	str	r2, [r5, #20]
 801515a:	9a04      	ldr	r2, [sp, #16]
 801515c:	6128      	str	r0, [r5, #16]
 801515e:	2000      	movs	r0, #0
 8015160:	60ab      	str	r3, [r5, #8]
 8015162:	60ec      	str	r4, [r5, #12]
 8015164:	f8c5 e01c 	str.w	lr, [r5, #28]
 8015168:	61aa      	str	r2, [r5, #24]
 801516a:	b007      	add	sp, #28
 801516c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015170:	464a      	mov	r2, r9
 8015172:	e7f0      	b.n	8015156 <D48_1CH_HTONS_VOL_HP+0x132>
 8015174:	200004d8 	.word	0x200004d8
 8015178:	000f000a 	.word	0x000f000a
 801517c:	00060003 	.word	0x00060003
 8015180:	00150019 	.word	0x00150019
 8015184:	00190015 	.word	0x00190015
 8015188:	00030006 	.word	0x00030006
 801518c:	000a000f 	.word	0x000a000f

08015190 <D64_1CH_HTONS_VOL_HP>:
 8015190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015194:	b089      	sub	sp, #36	; 0x24
 8015196:	4614      	mov	r4, r2
 8015198:	9207      	str	r2, [sp, #28]
 801519a:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 801519c:	f8d2 c010 	ldr.w	ip, [r2, #16]
 80151a0:	f8d2 8014 	ldr.w	r8, [r2, #20]
 80151a4:	6992      	ldr	r2, [r2, #24]
 80151a6:	9206      	str	r2, [sp, #24]
 80151a8:	68e2      	ldr	r2, [r4, #12]
 80151aa:	9201      	str	r2, [sp, #4]
 80151ac:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80151ae:	9203      	str	r2, [sp, #12]
 80151b0:	6a22      	ldr	r2, [r4, #32]
 80151b2:	69e5      	ldr	r5, [r4, #28]
 80151b4:	68a6      	ldr	r6, [r4, #8]
 80151b6:	9204      	str	r2, [sp, #16]
 80151b8:	2b00      	cmp	r3, #0
 80151ba:	f000 80b0 	beq.w	801531e <D64_1CH_HTONS_VOL_HP+0x18e>
 80151be:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 80151c2:	4f58      	ldr	r7, [pc, #352]	; (8015324 <D64_1CH_HTONS_VOL_HP+0x194>)
 80151c4:	9305      	str	r3, [sp, #20]
 80151c6:	9102      	str	r1, [sp, #8]
 80151c8:	f850 2b08 	ldr.w	r2, [r0], #8
 80151cc:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80151d0:	ba52      	rev16	r2, r2
 80151d2:	fa93 f993 	rev16.w	r9, r3
 80151d6:	b2d4      	uxtb	r4, r2
 80151d8:	f3c2 2307 	ubfx	r3, r2, #8, #8
 80151dc:	f857 b024 	ldr.w	fp, [r7, r4, lsl #2]
 80151e0:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 80151e4:	9901      	ldr	r1, [sp, #4]
 80151e6:	f3c2 4407 	ubfx	r4, r2, #16, #8
 80151ea:	0e12      	lsrs	r2, r2, #24
 80151ec:	44ab      	add	fp, r5
 80151ee:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80151f2:	f857 4022 	ldr.w	r4, [r7, r2, lsl #2]
 80151f6:	fa5f f289 	uxtb.w	r2, r9
 80151fa:	eb03 2e9b 	add.w	lr, r3, fp, lsr #10
 80151fe:	f3c9 2307 	ubfx	r3, r9, #8, #8
 8015202:	eb05 2a9e 	add.w	sl, r5, lr, lsr #10
 8015206:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 801520a:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 801520e:	f3c9 4507 	ubfx	r5, r9, #16, #8
 8015212:	eb04 249a 	add.w	r4, r4, sl, lsr #10
 8015216:	ea4f 6919 	mov.w	r9, r9, lsr #24
 801521a:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 801521e:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 8015222:	f857 9029 	ldr.w	r9, [r7, r9, lsl #2]
 8015226:	eb03 2392 	add.w	r3, r3, r2, lsr #10
 801522a:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 801522e:	eb09 2995 	add.w	r9, r9, r5, lsr #10
 8015232:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8015236:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 801523a:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 801523e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8015242:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8015246:	ea4e 4b0b 	orr.w	fp, lr, fp, lsl #16
 801524a:	f3c4 0409 	ubfx	r4, r4, #0, #10
 801524e:	f3c9 0e09 	ubfx	lr, r9, #0, #10
 8015252:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8015256:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 801525a:	ea4e 4e05 	orr.w	lr, lr, r5, lsl #16
 801525e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8015262:	ea4f 2599 	mov.w	r5, r9, lsr #10
 8015266:	4b30      	ldr	r3, [pc, #192]	; (8015328 <D64_1CH_HTONS_VOL_HP+0x198>)
 8015268:	fb2b 1303 	smlad	r3, fp, r3, r1
 801526c:	492f      	ldr	r1, [pc, #188]	; (801532c <D64_1CH_HTONS_VOL_HP+0x19c>)
 801526e:	fb24 3301 	smlad	r3, r4, r1, r3
 8015272:	492f      	ldr	r1, [pc, #188]	; (8015330 <D64_1CH_HTONS_VOL_HP+0x1a0>)
 8015274:	fb22 3301 	smlad	r3, r2, r1, r3
 8015278:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 801527c:	fb2e 390a 	smlad	r9, lr, sl, r3
 8015280:	4b2c      	ldr	r3, [pc, #176]	; (8015334 <D64_1CH_HTONS_VOL_HP+0x1a4>)
 8015282:	fb2b 6603 	smlad	r6, fp, r3, r6
 8015286:	fb2e 6613 	smladx	r6, lr, r3, r6
 801528a:	4b2b      	ldr	r3, [pc, #172]	; (8015338 <D64_1CH_HTONS_VOL_HP+0x1a8>)
 801528c:	fb24 6603 	smlad	r6, r4, r3, r6
 8015290:	fb22 6313 	smladx	r3, r2, r3, r6
 8015294:	f04f 0a01 	mov.w	sl, #1
 8015298:	9301      	str	r3, [sp, #4]
 801529a:	fb2b fb0a 	smuad	fp, fp, sl
 801529e:	4b27      	ldr	r3, [pc, #156]	; (801533c <D64_1CH_HTONS_VOL_HP+0x1ac>)
 80152a0:	fb24 ba03 	smlad	sl, r4, r3, fp
 80152a4:	4b26      	ldr	r3, [pc, #152]	; (8015340 <D64_1CH_HTONS_VOL_HP+0x1b0>)
 80152a6:	fb22 a203 	smlad	r2, r2, r3, sl
 80152aa:	4b26      	ldr	r3, [pc, #152]	; (8015344 <D64_1CH_HTONS_VOL_HP+0x1b4>)
 80152ac:	fb2e 2603 	smlad	r6, lr, r3, r2
 80152b0:	f5a9 3a00 	sub.w	sl, r9, #131072	; 0x20000
 80152b4:	eb0a 020c 	add.w	r2, sl, ip
 80152b8:	9c04      	ldr	r4, [sp, #16]
 80152ba:	9903      	ldr	r1, [sp, #12]
 80152bc:	eba2 0208 	sub.w	r2, r2, r8
 80152c0:	ea4f 79e2 	mov.w	r9, r2, asr #31
 80152c4:	fba2 2304 	umull	r2, r3, r2, r4
 80152c8:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 80152cc:	fb04 3309 	mla	r3, r4, r9, r3
 80152d0:	f143 0300 	adc.w	r3, r3, #0
 80152d4:	02da      	lsls	r2, r3, #11
 80152d6:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 80152da:	f04f 0900 	mov.w	r9, #0
 80152de:	fbc1 8902 	smlal	r8, r9, r1, r2
 80152e2:	9902      	ldr	r1, [sp, #8]
 80152e4:	ea4f 02a9 	mov.w	r2, r9, asr #2
 80152e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80152ec:	f302 020f 	ssat	r2, #16, r2
 80152f0:	9b05      	ldr	r3, [sp, #20]
 80152f2:	f821 2b02 	strh.w	r2, [r1], #2
 80152f6:	4299      	cmp	r1, r3
 80152f8:	9102      	str	r1, [sp, #8]
 80152fa:	46d0      	mov	r8, sl
 80152fc:	f47f af64 	bne.w	80151c8 <D64_1CH_HTONS_VOL_HP+0x38>
 8015300:	9a07      	ldr	r2, [sp, #28]
 8015302:	9901      	ldr	r1, [sp, #4]
 8015304:	60d1      	str	r1, [r2, #12]
 8015306:	9906      	ldr	r1, [sp, #24]
 8015308:	6096      	str	r6, [r2, #8]
 801530a:	2000      	movs	r0, #0
 801530c:	61d5      	str	r5, [r2, #28]
 801530e:	f8c2 c010 	str.w	ip, [r2, #16]
 8015312:	f8c2 a014 	str.w	sl, [r2, #20]
 8015316:	6191      	str	r1, [r2, #24]
 8015318:	b009      	add	sp, #36	; 0x24
 801531a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801531e:	46c2      	mov	sl, r8
 8015320:	4622      	mov	r2, r4
 8015322:	e7ee      	b.n	8015302 <D64_1CH_HTONS_VOL_HP+0x172>
 8015324:	200004d8 	.word	0x200004d8
 8015328:	001c0015 	.word	0x001c0015
 801532c:	000f000a 	.word	0x000f000a
 8015330:	00060003 	.word	0x00060003
 8015334:	0024002a 	.word	0x0024002a
 8015338:	002e0030 	.word	0x002e0030
 801533c:	00030006 	.word	0x00030006
 8015340:	000a000f 	.word	0x000a000f
 8015344:	0015001c 	.word	0x0015001c

08015348 <D80_1CH_HTONS_VOL_HP>:
 8015348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801534c:	4613      	mov	r3, r2
 801534e:	b089      	sub	sp, #36	; 0x24
 8015350:	4686      	mov	lr, r0
 8015352:	6918      	ldr	r0, [r3, #16]
 8015354:	9000      	str	r0, [sp, #0]
 8015356:	4618      	mov	r0, r3
 8015358:	461c      	mov	r4, r3
 801535a:	695b      	ldr	r3, [r3, #20]
 801535c:	9302      	str	r3, [sp, #8]
 801535e:	6983      	ldr	r3, [r0, #24]
 8015360:	9306      	str	r3, [sp, #24]
 8015362:	f8d0 c008 	ldr.w	ip, [r0, #8]
 8015366:	69c3      	ldr	r3, [r0, #28]
 8015368:	68c0      	ldr	r0, [r0, #12]
 801536a:	9207      	str	r2, [sp, #28]
 801536c:	9001      	str	r0, [sp, #4]
 801536e:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8015370:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8015372:	9003      	str	r0, [sp, #12]
 8015374:	6a20      	ldr	r0, [r4, #32]
 8015376:	9004      	str	r0, [sp, #16]
 8015378:	2a00      	cmp	r2, #0
 801537a:	f000 80d2 	beq.w	8015522 <D80_1CH_HTONS_VOL_HP+0x1da>
 801537e:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8015382:	4869      	ldr	r0, [pc, #420]	; (8015528 <D80_1CH_HTONS_VOL_HP+0x1e0>)
 8015384:	9205      	str	r2, [sp, #20]
 8015386:	461c      	mov	r4, r3
 8015388:	f8de 5000 	ldr.w	r5, [lr]
 801538c:	f8de 2004 	ldr.w	r2, [lr, #4]
 8015390:	f8de 3008 	ldr.w	r3, [lr, #8]
 8015394:	f10e 0e0a 	add.w	lr, lr, #10
 8015398:	ba6d      	rev16	r5, r5
 801539a:	ba52      	rev16	r2, r2
 801539c:	fa93 fb93 	rev16.w	fp, r3
 80153a0:	b2ee      	uxtb	r6, r5
 80153a2:	f3c5 2307 	ubfx	r3, r5, #8, #8
 80153a6:	f850 7026 	ldr.w	r7, [r0, r6, lsl #2]
 80153aa:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80153ae:	f3c5 4607 	ubfx	r6, r5, #16, #8
 80153b2:	eb04 0a07 	add.w	sl, r4, r7
 80153b6:	0e2d      	lsrs	r5, r5, #24
 80153b8:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
 80153bc:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
 80153c0:	eb03 239a 	add.w	r3, r3, sl, lsr #10
 80153c4:	eb04 2993 	add.w	r9, r4, r3, lsr #10
 80153c8:	b2d5      	uxtb	r5, r2
 80153ca:	f3c2 2407 	ubfx	r4, r2, #8, #8
 80153ce:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
 80153d2:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
 80153d6:	f3c2 4407 	ubfx	r4, r2, #16, #8
 80153da:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 80153de:	0e12      	lsrs	r2, r2, #24
 80153e0:	eb07 2896 	add.w	r8, r7, r6, lsr #10
 80153e4:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
 80153e8:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 80153ec:	fa5f f48b 	uxtb.w	r4, fp
 80153f0:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 80153f4:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 80153f8:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 80153fc:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 8015400:	f850 b02b 	ldr.w	fp, [r0, fp, lsl #2]
 8015404:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 8015408:	eb04 2492 	add.w	r4, r4, r2, lsr #10
 801540c:	eb0b 2b94 	add.w	fp, fp, r4, lsr #10
 8015410:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8015414:	f3c9 0909 	ubfx	r9, r9, #0, #10
 8015418:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 801541c:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8015420:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8015424:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8015428:	ea46 4909 	orr.w	r9, r6, r9, lsl #16
 801542c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8015430:	f3cb 0609 	ubfx	r6, fp, #0, #10
 8015434:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8015438:	f3c2 0209 	ubfx	r2, r2, #0, #10
 801543c:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 8015440:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8015444:	ea46 4604 	orr.w	r6, r6, r4, lsl #16
 8015448:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 801544c:	ea4f 249b 	mov.w	r4, fp, lsr #10
 8015450:	4d36      	ldr	r5, [pc, #216]	; (801552c <D80_1CH_HTONS_VOL_HP+0x1e4>)
 8015452:	9f01      	ldr	r7, [sp, #4]
 8015454:	fb23 7505 	smlad	r5, r3, r5, r7
 8015458:	4f35      	ldr	r7, [pc, #212]	; (8015530 <D80_1CH_HTONS_VOL_HP+0x1e8>)
 801545a:	fb29 5507 	smlad	r5, r9, r7, r5
 801545e:	4f35      	ldr	r7, [pc, #212]	; (8015534 <D80_1CH_HTONS_VOL_HP+0x1ec>)
 8015460:	fb28 5507 	smlad	r5, r8, r7, r5
 8015464:	4f34      	ldr	r7, [pc, #208]	; (8015538 <D80_1CH_HTONS_VOL_HP+0x1f0>)
 8015466:	fb22 5507 	smlad	r5, r2, r7, r5
 801546a:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 801546e:	fb26 5b0a 	smlad	fp, r6, sl, r5
 8015472:	4d32      	ldr	r5, [pc, #200]	; (801553c <D80_1CH_HTONS_VOL_HP+0x1f4>)
 8015474:	fb23 cc05 	smlad	ip, r3, r5, ip
 8015478:	4d31      	ldr	r5, [pc, #196]	; (8015540 <D80_1CH_HTONS_VOL_HP+0x1f8>)
 801547a:	fb29 cc05 	smlad	ip, r9, r5, ip
 801547e:	f04f 154b 	mov.w	r5, #4915275	; 0x4b004b
 8015482:	fb28 c505 	smlad	r5, r8, r5, ip
 8015486:	4f2f      	ldr	r7, [pc, #188]	; (8015544 <D80_1CH_HTONS_VOL_HP+0x1fc>)
 8015488:	fb22 5507 	smlad	r5, r2, r7, r5
 801548c:	4f2e      	ldr	r7, [pc, #184]	; (8015548 <D80_1CH_HTONS_VOL_HP+0x200>)
 801548e:	fb26 5507 	smlad	r5, r6, r7, r5
 8015492:	f04f 0a01 	mov.w	sl, #1
 8015496:	9501      	str	r5, [sp, #4]
 8015498:	fb23 fa0a 	smuad	sl, r3, sl
 801549c:	4b2b      	ldr	r3, [pc, #172]	; (801554c <D80_1CH_HTONS_VOL_HP+0x204>)
 801549e:	fb29 a903 	smlad	r9, r9, r3, sl
 80154a2:	4d2b      	ldr	r5, [pc, #172]	; (8015550 <D80_1CH_HTONS_VOL_HP+0x208>)
 80154a4:	fb28 9805 	smlad	r8, r8, r5, r9
 80154a8:	4d2a      	ldr	r5, [pc, #168]	; (8015554 <D80_1CH_HTONS_VOL_HP+0x20c>)
 80154aa:	fb22 8205 	smlad	r2, r2, r5, r8
 80154ae:	4b2a      	ldr	r3, [pc, #168]	; (8015558 <D80_1CH_HTONS_VOL_HP+0x210>)
 80154b0:	fb26 2c03 	smlad	ip, r6, r3, r2
 80154b4:	9b00      	ldr	r3, [sp, #0]
 80154b6:	9d04      	ldr	r5, [sp, #16]
 80154b8:	f5ab 3a7a 	sub.w	sl, fp, #256000	; 0x3e800
 80154bc:	4453      	add	r3, sl
 80154be:	461a      	mov	r2, r3
 80154c0:	9b02      	ldr	r3, [sp, #8]
 80154c2:	f8cd a008 	str.w	sl, [sp, #8]
 80154c6:	1ad2      	subs	r2, r2, r3
 80154c8:	17d7      	asrs	r7, r2, #31
 80154ca:	fba2 2305 	umull	r2, r3, r2, r5
 80154ce:	fb05 3307 	mla	r3, r5, r7, r3
 80154d2:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 80154d6:	f143 0300 	adc.w	r3, r3, #0
 80154da:	9d03      	ldr	r5, [sp, #12]
 80154dc:	029a      	lsls	r2, r3, #10
 80154de:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80154e2:	2700      	movs	r7, #0
 80154e4:	005b      	lsls	r3, r3, #1
 80154e6:	fbc5 6702 	smlal	r6, r7, r5, r2
 80154ea:	10ba      	asrs	r2, r7, #2
 80154ec:	9300      	str	r3, [sp, #0]
 80154ee:	f302 020f 	ssat	r2, #16, r2
 80154f2:	9b05      	ldr	r3, [sp, #20]
 80154f4:	f821 2b02 	strh.w	r2, [r1], #2
 80154f8:	4299      	cmp	r1, r3
 80154fa:	f47f af45 	bne.w	8015388 <D80_1CH_HTONS_VOL_HP+0x40>
 80154fe:	4623      	mov	r3, r4
 8015500:	9907      	ldr	r1, [sp, #28]
 8015502:	9801      	ldr	r0, [sp, #4]
 8015504:	60c8      	str	r0, [r1, #12]
 8015506:	9a00      	ldr	r2, [sp, #0]
 8015508:	f8c1 c008 	str.w	ip, [r1, #8]
 801550c:	4608      	mov	r0, r1
 801550e:	61cb      	str	r3, [r1, #28]
 8015510:	610a      	str	r2, [r1, #16]
 8015512:	f8c1 a014 	str.w	sl, [r1, #20]
 8015516:	9906      	ldr	r1, [sp, #24]
 8015518:	6181      	str	r1, [r0, #24]
 801551a:	2000      	movs	r0, #0
 801551c:	b009      	add	sp, #36	; 0x24
 801551e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015522:	f8dd a008 	ldr.w	sl, [sp, #8]
 8015526:	e7eb      	b.n	8015500 <D80_1CH_HTONS_VOL_HP+0x1b8>
 8015528:	200004d8 	.word	0x200004d8
 801552c:	002d0024 	.word	0x002d0024
 8015530:	001c0015 	.word	0x001c0015
 8015534:	000f000a 	.word	0x000f000a
 8015538:	00060003 	.word	0x00060003
 801553c:	0037003f 	.word	0x0037003f
 8015540:	00450049 	.word	0x00450049
 8015544:	00490045 	.word	0x00490045
 8015548:	003f0037 	.word	0x003f0037
 801554c:	00030006 	.word	0x00030006
 8015550:	000a000f 	.word	0x000a000f
 8015554:	0015001c 	.word	0x0015001c
 8015558:	0024002d 	.word	0x0024002d

0801555c <D128_1CH_HTONS_VOL_HP>:
 801555c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015560:	b093      	sub	sp, #76	; 0x4c
 8015562:	4614      	mov	r4, r2
 8015564:	9211      	str	r2, [sp, #68]	; 0x44
 8015566:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8015568:	6912      	ldr	r2, [r2, #16]
 801556a:	9203      	str	r2, [sp, #12]
 801556c:	4622      	mov	r2, r4
 801556e:	4615      	mov	r5, r2
 8015570:	6964      	ldr	r4, [r4, #20]
 8015572:	9406      	str	r4, [sp, #24]
 8015574:	4614      	mov	r4, r2
 8015576:	6992      	ldr	r2, [r2, #24]
 8015578:	9210      	str	r2, [sp, #64]	; 0x40
 801557a:	68ea      	ldr	r2, [r5, #12]
 801557c:	9204      	str	r2, [sp, #16]
 801557e:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8015580:	69e6      	ldr	r6, [r4, #28]
 8015582:	920d      	str	r2, [sp, #52]	; 0x34
 8015584:	68a4      	ldr	r4, [r4, #8]
 8015586:	6a2a      	ldr	r2, [r5, #32]
 8015588:	9405      	str	r4, [sp, #20]
 801558a:	920e      	str	r2, [sp, #56]	; 0x38
 801558c:	2b00      	cmp	r3, #0
 801558e:	f000 8145 	beq.w	801581c <D128_1CH_HTONS_VOL_HP+0x2c0>
 8015592:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8015596:	930f      	str	r3, [sp, #60]	; 0x3c
 8015598:	f8df 82dc 	ldr.w	r8, [pc, #732]	; 8015878 <D128_1CH_HTONS_VOL_HP+0x31c>
 801559c:	9107      	str	r1, [sp, #28]
 801559e:	f100 0310 	add.w	r3, r0, #16
 80155a2:	4699      	mov	r9, r3
 80155a4:	f1a9 0110 	sub.w	r1, r9, #16
 80155a8:	c90e      	ldmia	r1, {r1, r2, r3}
 80155aa:	f859 0c04 	ldr.w	r0, [r9, #-4]
 80155ae:	ba49      	rev16	r1, r1
 80155b0:	ba52      	rev16	r2, r2
 80155b2:	ba5b      	rev16	r3, r3
 80155b4:	fa90 fa90 	rev16.w	sl, r0
 80155b8:	f3c1 2007 	ubfx	r0, r1, #8, #8
 80155bc:	b2cc      	uxtb	r4, r1
 80155be:	f858 5020 	ldr.w	r5, [r8, r0, lsl #2]
 80155c2:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 80155c6:	f3c1 4007 	ubfx	r0, r1, #16, #8
 80155ca:	0e09      	lsrs	r1, r1, #24
 80155cc:	4426      	add	r6, r4
 80155ce:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 80155d2:	f858 7021 	ldr.w	r7, [r8, r1, lsl #2]
 80155d6:	b2d0      	uxtb	r0, r2
 80155d8:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 80155dc:	eb04 2b95 	add.w	fp, r4, r5, lsr #10
 80155e0:	f3c2 2107 	ubfx	r1, r2, #8, #8
 80155e4:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 80155e8:	f858 1021 	ldr.w	r1, [r8, r1, lsl #2]
 80155ec:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 80155f0:	f3c2 4007 	ubfx	r0, r2, #16, #8
 80155f4:	0e12      	lsrs	r2, r2, #24
 80155f6:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 80155fa:	9701      	str	r7, [sp, #4]
 80155fc:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 8015600:	4627      	mov	r7, r4
 8015602:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
 8015606:	9702      	str	r7, [sp, #8]
 8015608:	b2da      	uxtb	r2, r3
 801560a:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 801560e:	eb00 2c91 	add.w	ip, r0, r1, lsr #10
 8015612:	f858 0022 	ldr.w	r0, [r8, r2, lsl #2]
 8015616:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 801561a:	eb00 2e94 	add.w	lr, r0, r4, lsr #10
 801561e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8015622:	f3c3 4007 	ubfx	r0, r3, #16, #8
 8015626:	0e1b      	lsrs	r3, r3, #24
 8015628:	f858 7020 	ldr.w	r7, [r8, r0, lsl #2]
 801562c:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 8015630:	f858 0023 	ldr.w	r0, [r8, r3, lsl #2]
 8015634:	fa5f f38a 	uxtb.w	r3, sl
 8015638:	f3c6 0609 	ubfx	r6, r6, #0, #10
 801563c:	960a      	str	r6, [sp, #40]	; 0x28
 801563e:	eb02 229e 	add.w	r2, r2, lr, lsr #10
 8015642:	f858 6023 	ldr.w	r6, [r8, r3, lsl #2]
 8015646:	f3c5 0509 	ubfx	r5, r5, #0, #10
 801564a:	f3ca 2307 	ubfx	r3, sl, #8, #8
 801564e:	950b      	str	r5, [sp, #44]	; 0x2c
 8015650:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 8015654:	f3ca 4507 	ubfx	r5, sl, #16, #8
 8015658:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 801565c:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8015660:	f858 5025 	ldr.w	r5, [r8, r5, lsl #2]
 8015664:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 8015668:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 801566c:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 8015670:	f858 a02a 	ldr.w	sl, [r8, sl, lsl #2]
 8015674:	9308      	str	r3, [sp, #32]
 8015676:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 801567a:	9b01      	ldr	r3, [sp, #4]
 801567c:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 8015680:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8015684:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8015688:	9b02      	ldr	r3, [sp, #8]
 801568a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801568e:	9302      	str	r3, [sp, #8]
 8015690:	9b08      	ldr	r3, [sp, #32]
 8015692:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8015696:	9308      	str	r3, [sp, #32]
 8015698:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801569a:	f3c5 0509 	ubfx	r5, r5, #0, #10
 801569e:	950c      	str	r5, [sp, #48]	; 0x30
 80156a0:	461d      	mov	r5, r3
 80156a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80156a4:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 80156a8:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80156ac:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 80156b0:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 80156b4:	9301      	str	r3, [sp, #4]
 80156b6:	9b02      	ldr	r3, [sp, #8]
 80156b8:	9202      	str	r2, [sp, #8]
 80156ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80156bc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80156be:	f3c7 0709 	ubfx	r7, r7, #0, #10
 80156c2:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80156c6:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80156ca:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80156ce:	f3c2 0709 	ubfx	r7, r2, #0, #10
 80156d2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80156d6:	ea47 4505 	orr.w	r5, r7, r5, lsl #16
 80156da:	9b08      	ldr	r3, [sp, #32]
 80156dc:	9f01      	ldr	r7, [sp, #4]
 80156de:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 80156e2:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 80156e6:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80156ea:	f3c4 0409 	ubfx	r4, r4, #0, #10
 80156ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80156f2:	46be      	mov	lr, r7
 80156f4:	0a96      	lsrs	r6, r2, #10
 80156f6:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 80156fa:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 80156fe:	4f49      	ldr	r7, [pc, #292]	; (8015824 <D128_1CH_HTONS_VOL_HP+0x2c8>)
 8015700:	9a04      	ldr	r2, [sp, #16]
 8015702:	fb2e 2e07 	smlad	lr, lr, r7, r2
 8015706:	4a48      	ldr	r2, [pc, #288]	; (8015828 <D128_1CH_HTONS_VOL_HP+0x2cc>)
 8015708:	fb2a ee02 	smlad	lr, sl, r2, lr
 801570c:	4a47      	ldr	r2, [pc, #284]	; (801582c <D128_1CH_HTONS_VOL_HP+0x2d0>)
 801570e:	fb21 ee02 	smlad	lr, r1, r2, lr
 8015712:	4a47      	ldr	r2, [pc, #284]	; (8015830 <D128_1CH_HTONS_VOL_HP+0x2d4>)
 8015714:	fb24 ee02 	smlad	lr, r4, r2, lr
 8015718:	4a46      	ldr	r2, [pc, #280]	; (8015834 <D128_1CH_HTONS_VOL_HP+0x2d8>)
 801571a:	9f02      	ldr	r7, [sp, #8]
 801571c:	fb27 ee02 	smlad	lr, r7, r2, lr
 8015720:	4a45      	ldr	r2, [pc, #276]	; (8015838 <D128_1CH_HTONS_VOL_HP+0x2dc>)
 8015722:	fb20 ee02 	smlad	lr, r0, r2, lr
 8015726:	4a45      	ldr	r2, [pc, #276]	; (801583c <D128_1CH_HTONS_VOL_HP+0x2e0>)
 8015728:	fb23 e702 	smlad	r7, r3, r2, lr
 801572c:	f44f 3e80 	mov.w	lr, #65536	; 0x10000
 8015730:	fb25 7e0e 	smlad	lr, r5, lr, r7
 8015734:	9f01      	ldr	r7, [sp, #4]
 8015736:	4a42      	ldr	r2, [pc, #264]	; (8015840 <D128_1CH_HTONS_VOL_HP+0x2e4>)
 8015738:	46bc      	mov	ip, r7
 801573a:	9f05      	ldr	r7, [sp, #20]
 801573c:	fb2c 7c02 	smlad	ip, ip, r2, r7
 8015740:	4a40      	ldr	r2, [pc, #256]	; (8015844 <D128_1CH_HTONS_VOL_HP+0x2e8>)
 8015742:	fb2a cc02 	smlad	ip, sl, r2, ip
 8015746:	4f40      	ldr	r7, [pc, #256]	; (8015848 <D128_1CH_HTONS_VOL_HP+0x2ec>)
 8015748:	fb21 cc07 	smlad	ip, r1, r7, ip
 801574c:	4f3f      	ldr	r7, [pc, #252]	; (801584c <D128_1CH_HTONS_VOL_HP+0x2f0>)
 801574e:	fb24 cc07 	smlad	ip, r4, r7, ip
 8015752:	4f3f      	ldr	r7, [pc, #252]	; (8015850 <D128_1CH_HTONS_VOL_HP+0x2f4>)
 8015754:	9a02      	ldr	r2, [sp, #8]
 8015756:	fb22 cc07 	smlad	ip, r2, r7, ip
 801575a:	4f3e      	ldr	r7, [pc, #248]	; (8015854 <D128_1CH_HTONS_VOL_HP+0x2f8>)
 801575c:	fb20 cc07 	smlad	ip, r0, r7, ip
 8015760:	4f3d      	ldr	r7, [pc, #244]	; (8015858 <D128_1CH_HTONS_VOL_HP+0x2fc>)
 8015762:	fb23 c707 	smlad	r7, r3, r7, ip
 8015766:	f8df c114 	ldr.w	ip, [pc, #276]	; 801587c <D128_1CH_HTONS_VOL_HP+0x320>
 801576a:	fb25 720c 	smlad	r2, r5, ip, r7
 801576e:	f04f 0b01 	mov.w	fp, #1
 8015772:	9204      	str	r2, [sp, #16]
 8015774:	9f01      	ldr	r7, [sp, #4]
 8015776:	fb27 fb0b 	smuad	fp, r7, fp
 801577a:	4f38      	ldr	r7, [pc, #224]	; (801585c <D128_1CH_HTONS_VOL_HP+0x300>)
 801577c:	fb2a ba07 	smlad	sl, sl, r7, fp
 8015780:	4f37      	ldr	r7, [pc, #220]	; (8015860 <D128_1CH_HTONS_VOL_HP+0x304>)
 8015782:	fb21 aa07 	smlad	sl, r1, r7, sl
 8015786:	4f37      	ldr	r7, [pc, #220]	; (8015864 <D128_1CH_HTONS_VOL_HP+0x308>)
 8015788:	fb24 aa07 	smlad	sl, r4, r7, sl
 801578c:	4f36      	ldr	r7, [pc, #216]	; (8015868 <D128_1CH_HTONS_VOL_HP+0x30c>)
 801578e:	9a02      	ldr	r2, [sp, #8]
 8015790:	fb22 a707 	smlad	r7, r2, r7, sl
 8015794:	4a35      	ldr	r2, [pc, #212]	; (801586c <D128_1CH_HTONS_VOL_HP+0x310>)
 8015796:	fb20 7702 	smlad	r7, r0, r2, r7
 801579a:	4a35      	ldr	r2, [pc, #212]	; (8015870 <D128_1CH_HTONS_VOL_HP+0x314>)
 801579c:	fb23 7702 	smlad	r7, r3, r2, r7
 80157a0:	4b34      	ldr	r3, [pc, #208]	; (8015874 <D128_1CH_HTONS_VOL_HP+0x318>)
 80157a2:	fb25 7303 	smlad	r3, r5, r3, r7
 80157a6:	9305      	str	r3, [sp, #20]
 80157a8:	9b03      	ldr	r3, [sp, #12]
 80157aa:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80157ac:	f5ae 1e80 	sub.w	lr, lr, #1048576	; 0x100000
 80157b0:	4473      	add	r3, lr
 80157b2:	461a      	mov	r2, r3
 80157b4:	9b06      	ldr	r3, [sp, #24]
 80157b6:	f8cd e018 	str.w	lr, [sp, #24]
 80157ba:	1ad2      	subs	r2, r2, r3
 80157bc:	17d1      	asrs	r1, r2, #31
 80157be:	fba2 2304 	umull	r2, r3, r2, r4
 80157c2:	fb04 3301 	mla	r3, r4, r1, r3
 80157c6:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 80157ca:	f143 0300 	adc.w	r3, r3, #0
 80157ce:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80157d0:	021a      	lsls	r2, r3, #8
 80157d2:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80157d6:	2100      	movs	r1, #0
 80157d8:	fbc4 0102 	smlal	r0, r1, r4, r2
 80157dc:	108a      	asrs	r2, r1, #2
 80157de:	9907      	ldr	r1, [sp, #28]
 80157e0:	f302 020f 	ssat	r2, #16, r2
 80157e4:	005b      	lsls	r3, r3, #1
 80157e6:	f821 2b02 	strh.w	r2, [r1], #2
 80157ea:	9303      	str	r3, [sp, #12]
 80157ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80157ee:	9107      	str	r1, [sp, #28]
 80157f0:	4299      	cmp	r1, r3
 80157f2:	f109 0910 	add.w	r9, r9, #16
 80157f6:	f47f aed5 	bne.w	80155a4 <D128_1CH_HTONS_VOL_HP+0x48>
 80157fa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80157fc:	9905      	ldr	r1, [sp, #20]
 80157fe:	6091      	str	r1, [r2, #8]
 8015800:	9904      	ldr	r1, [sp, #16]
 8015802:	60d1      	str	r1, [r2, #12]
 8015804:	4613      	mov	r3, r2
 8015806:	61d6      	str	r6, [r2, #28]
 8015808:	9910      	ldr	r1, [sp, #64]	; 0x40
 801580a:	9a03      	ldr	r2, [sp, #12]
 801580c:	611a      	str	r2, [r3, #16]
 801580e:	2000      	movs	r0, #0
 8015810:	f8c3 e014 	str.w	lr, [r3, #20]
 8015814:	6199      	str	r1, [r3, #24]
 8015816:	b013      	add	sp, #76	; 0x4c
 8015818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801581c:	f8dd e018 	ldr.w	lr, [sp, #24]
 8015820:	e7eb      	b.n	80157fa <D128_1CH_HTONS_VOL_HP+0x29e>
 8015822:	bf00      	nop
 8015824:	00780069 	.word	0x00780069
 8015828:	005b004e 	.word	0x005b004e
 801582c:	00420037 	.word	0x00420037
 8015830:	002d0024 	.word	0x002d0024
 8015834:	001c0015 	.word	0x001c0015
 8015838:	000f000a 	.word	0x000f000a
 801583c:	00060003 	.word	0x00060003
 8015840:	00880096 	.word	0x00880096
 8015844:	00a200ac 	.word	0x00a200ac
 8015848:	00b400ba 	.word	0x00b400ba
 801584c:	00be00c0 	.word	0x00be00c0
 8015850:	00c000be 	.word	0x00c000be
 8015854:	00ba00b4 	.word	0x00ba00b4
 8015858:	00ac00a2 	.word	0x00ac00a2
 801585c:	00030006 	.word	0x00030006
 8015860:	000a000f 	.word	0x000a000f
 8015864:	0015001c 	.word	0x0015001c
 8015868:	0024002d 	.word	0x0024002d
 801586c:	00370042 	.word	0x00370042
 8015870:	004e005b 	.word	0x004e005b
 8015874:	00690078 	.word	0x00690078
 8015878:	200004d8 	.word	0x200004d8
 801587c:	00960088 	.word	0x00960088

08015880 <PDM_Filter_Init>:
 8015880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015882:	2240      	movs	r2, #64	; 0x40
 8015884:	4604      	mov	r4, r0
 8015886:	2100      	movs	r1, #0
 8015888:	300c      	adds	r0, #12
 801588a:	f000 fb92 	bl	8015fb2 <memset>
 801588e:	493b      	ldr	r1, [pc, #236]	; (801597c <PDM_Filter_Init+0xfc>)
 8015890:	483b      	ldr	r0, [pc, #236]	; (8015980 <PDM_Filter_Init+0x100>)
 8015892:	f000 f98d 	bl	8015bb0 <CRC_Lock>
 8015896:	8822      	ldrh	r2, [r4, #0]
 8015898:	8963      	ldrh	r3, [r4, #10]
 801589a:	4938      	ldr	r1, [pc, #224]	; (801597c <PDM_Filter_Init+0xfc>)
 801589c:	8925      	ldrh	r5, [r4, #8]
 801589e:	86a3      	strh	r3, [r4, #52]	; 0x34
 80158a0:	2801      	cmp	r0, #1
 80158a2:	f04f 0300 	mov.w	r3, #0
 80158a6:	bf18      	it	ne
 80158a8:	2100      	movne	r1, #0
 80158aa:	2a01      	cmp	r2, #1
 80158ac:	6461      	str	r1, [r4, #68]	; 0x44
 80158ae:	86e5      	strh	r5, [r4, #54]	; 0x36
 80158b0:	61a3      	str	r3, [r4, #24]
 80158b2:	6123      	str	r3, [r4, #16]
 80158b4:	6163      	str	r3, [r4, #20]
 80158b6:	60e3      	str	r3, [r4, #12]
 80158b8:	6263      	str	r3, [r4, #36]	; 0x24
 80158ba:	61e3      	str	r3, [r4, #28]
 80158bc:	6223      	str	r3, [r4, #32]
 80158be:	6423      	str	r3, [r4, #64]	; 0x40
 80158c0:	d918      	bls.n	80158f4 <PDM_Filter_Init+0x74>
 80158c2:	2003      	movs	r0, #3
 80158c4:	2302      	movs	r3, #2
 80158c6:	8862      	ldrh	r2, [r4, #2]
 80158c8:	2a01      	cmp	r2, #1
 80158ca:	d91d      	bls.n	8015908 <PDM_Filter_Init+0x88>
 80158cc:	2140      	movs	r1, #64	; 0x40
 80158ce:	2300      	movs	r3, #0
 80158d0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80158d2:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
 80158d6:	6862      	ldr	r2, [r4, #4]
 80158d8:	bf04      	itt	eq
 80158da:	6421      	streq	r1, [r4, #64]	; 0x40
 80158dc:	460b      	moveq	r3, r1
 80158de:	b11a      	cbz	r2, 80158e8 <PDM_Filter_Init+0x68>
 80158e0:	f043 0310 	orr.w	r3, r3, #16
 80158e4:	6423      	str	r3, [r4, #64]	; 0x40
 80158e6:	62e2      	str	r2, [r4, #44]	; 0x2c
 80158e8:	2200      	movs	r2, #0
 80158ea:	8722      	strh	r2, [r4, #56]	; 0x38
 80158ec:	b908      	cbnz	r0, 80158f2 <PDM_Filter_Init+0x72>
 80158ee:	3380      	adds	r3, #128	; 0x80
 80158f0:	6423      	str	r3, [r4, #64]	; 0x40
 80158f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80158f4:	4d23      	ldr	r5, [pc, #140]	; (8015984 <PDM_Filter_Init+0x104>)
 80158f6:	d010      	beq.n	801591a <PDM_Filter_Init+0x9a>
 80158f8:	782a      	ldrb	r2, [r5, #0]
 80158fa:	2a01      	cmp	r2, #1
 80158fc:	d027      	beq.n	801594e <PDM_Filter_Init+0xce>
 80158fe:	8862      	ldrh	r2, [r4, #2]
 8015900:	2a01      	cmp	r2, #1
 8015902:	f04f 0001 	mov.w	r0, #1
 8015906:	d8e1      	bhi.n	80158cc <PDM_Filter_Init+0x4c>
 8015908:	d001      	beq.n	801590e <PDM_Filter_Init+0x8e>
 801590a:	4618      	mov	r0, r3
 801590c:	e7de      	b.n	80158cc <PDM_Filter_Init+0x4c>
 801590e:	2220      	movs	r2, #32
 8015910:	4618      	mov	r0, r3
 8015912:	6422      	str	r2, [r4, #64]	; 0x40
 8015914:	4613      	mov	r3, r2
 8015916:	2160      	movs	r1, #96	; 0x60
 8015918:	e7da      	b.n	80158d0 <PDM_Filter_Init+0x50>
 801591a:	7829      	ldrb	r1, [r5, #0]
 801591c:	2900      	cmp	r1, #0
 801591e:	d1ee      	bne.n	80158fe <PDM_Filter_Init+0x7e>
 8015920:	4919      	ldr	r1, [pc, #100]	; (8015988 <PDM_Filter_Init+0x108>)
 8015922:	f8df e06c 	ldr.w	lr, [pc, #108]	; 8015990 <PDM_Filter_Init+0x110>
 8015926:	4f19      	ldr	r7, [pc, #100]	; (801598c <PDM_Filter_Init+0x10c>)
 8015928:	f501 6680 	add.w	r6, r1, #1024	; 0x400
 801592c:	684a      	ldr	r2, [r1, #4]
 801592e:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 8015932:	ea02 0007 	and.w	r0, r2, r7
 8015936:	4303      	orrs	r3, r0
 8015938:	f3c2 5209 	ubfx	r2, r2, #20, #10
 801593c:	4413      	add	r3, r2
 801593e:	f841 3f04 	str.w	r3, [r1, #4]!
 8015942:	428e      	cmp	r6, r1
 8015944:	d1f2      	bne.n	801592c <PDM_Filter_Init+0xac>
 8015946:	2001      	movs	r0, #1
 8015948:	7028      	strb	r0, [r5, #0]
 801594a:	2300      	movs	r3, #0
 801594c:	e7bb      	b.n	80158c6 <PDM_Filter_Init+0x46>
 801594e:	490e      	ldr	r1, [pc, #56]	; (8015988 <PDM_Filter_Init+0x108>)
 8015950:	f8df e03c 	ldr.w	lr, [pc, #60]	; 8015990 <PDM_Filter_Init+0x110>
 8015954:	4f0d      	ldr	r7, [pc, #52]	; (801598c <PDM_Filter_Init+0x10c>)
 8015956:	f501 6680 	add.w	r6, r1, #1024	; 0x400
 801595a:	684a      	ldr	r2, [r1, #4]
 801595c:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 8015960:	ea02 0007 	and.w	r0, r2, r7
 8015964:	4303      	orrs	r3, r0
 8015966:	f3c2 5209 	ubfx	r2, r2, #20, #10
 801596a:	4413      	add	r3, r2
 801596c:	f841 3f04 	str.w	r3, [r1, #4]!
 8015970:	428e      	cmp	r6, r1
 8015972:	d1f2      	bne.n	801595a <PDM_Filter_Init+0xda>
 8015974:	2300      	movs	r3, #0
 8015976:	702b      	strb	r3, [r5, #0]
 8015978:	e7c1      	b.n	80158fe <PDM_Filter_Init+0x7e>
 801597a:	bf00      	nop
 801597c:	b5e8b5cd 	.word	0xb5e8b5cd
 8015980:	f407a5c2 	.word	0xf407a5c2
 8015984:	200084c8 	.word	0x200084c8
 8015988:	200004d4 	.word	0x200004d4
 801598c:	000ffc00 	.word	0x000ffc00
 8015990:	3ff00000 	.word	0x3ff00000

08015994 <PDM_Filter_setConfig>:
 8015994:	4b66      	ldr	r3, [pc, #408]	; (8015b30 <PDM_Filter_setConfig+0x19c>)
 8015996:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8015998:	429a      	cmp	r2, r3
 801599a:	d001      	beq.n	80159a0 <PDM_Filter_setConfig+0xc>
 801599c:	2004      	movs	r0, #4
 801599e:	4770      	bx	lr
 80159a0:	b530      	push	{r4, r5, lr}
 80159a2:	880a      	ldrh	r2, [r1, #0]
 80159a4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80159a6:	ed2d 8b04 	vpush	{d8-d9}
 80159aa:	4604      	mov	r4, r0
 80159ac:	460d      	mov	r5, r1
 80159ae:	1e51      	subs	r1, r2, #1
 80159b0:	f423 7080 	bic.w	r0, r3, #256	; 0x100
 80159b4:	2906      	cmp	r1, #6
 80159b6:	b083      	sub	sp, #12
 80159b8:	6420      	str	r0, [r4, #64]	; 0x40
 80159ba:	d91a      	bls.n	80159f2 <PDM_Filter_setConfig+0x5e>
 80159bc:	2008      	movs	r0, #8
 80159be:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 80159c2:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 80159c6:	4299      	cmp	r1, r3
 80159c8:	d07e      	beq.n	8015ac8 <PDM_Filter_setConfig+0x134>
 80159ca:	f113 0f0c 	cmn.w	r3, #12
 80159ce:	da2a      	bge.n	8015a26 <PDM_Filter_setConfig+0x92>
 80159d0:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 80159d4:	3040      	adds	r0, #64	; 0x40
 80159d6:	80ab      	strh	r3, [r5, #4]
 80159d8:	8622      	strh	r2, [r4, #48]	; 0x30
 80159da:	886b      	ldrh	r3, [r5, #2]
 80159dc:	8663      	strh	r3, [r4, #50]	; 0x32
 80159de:	b920      	cbnz	r0, 80159ea <PDM_Filter_setConfig+0x56>
 80159e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80159e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80159e6:	6423      	str	r3, [r4, #64]	; 0x40
 80159e8:	2000      	movs	r0, #0
 80159ea:	b003      	add	sp, #12
 80159ec:	ecbd 8b04 	vpop	{d8-d9}
 80159f0:	bd30      	pop	{r4, r5, pc}
 80159f2:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 80159f4:	4291      	cmp	r1, r2
 80159f6:	d06c      	beq.n	8015ad2 <PDM_Filter_setConfig+0x13e>
 80159f8:	f423 7387 	bic.w	r3, r3, #270	; 0x10e
 80159fc:	f023 0301 	bic.w	r3, r3, #1
 8015a00:	4313      	orrs	r3, r2
 8015a02:	f003 0170 	and.w	r1, r3, #112	; 0x70
 8015a06:	6423      	str	r3, [r4, #64]	; 0x40
 8015a08:	2970      	cmp	r1, #112	; 0x70
 8015a0a:	f003 030f 	and.w	r3, r3, #15
 8015a0e:	f103 33ff 	add.w	r3, r3, #4294967295
 8015a12:	d066      	beq.n	8015ae2 <PDM_Filter_setConfig+0x14e>
 8015a14:	2b06      	cmp	r3, #6
 8015a16:	f200 8089 	bhi.w	8015b2c <PDM_Filter_setConfig+0x198>
 8015a1a:	e8df f003 	tbb	[pc, r3]
 8015a1e:	4f52      	.short	0x4f52
 8015a20:	3d43494c 	.word	0x3d43494c
 8015a24:	46          	.byte	0x46
 8015a25:	00          	.byte	0x00
 8015a26:	2b33      	cmp	r3, #51	; 0x33
 8015a28:	dc32      	bgt.n	8015a90 <PDM_Filter_setConfig+0xfc>
 8015a2a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8015a2c:	f002 020f 	and.w	r2, r2, #15
 8015a30:	3a01      	subs	r2, #1
 8015a32:	2a06      	cmp	r2, #6
 8015a34:	d872      	bhi.n	8015b1c <PDM_Filter_setConfig+0x188>
 8015a36:	493f      	ldr	r1, [pc, #252]	; (8015b34 <PDM_Filter_setConfig+0x1a0>)
 8015a38:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8015a3c:	ed92 9a00 	vldr	s18, [r2]
 8015a40:	ed92 8a07 	vldr	s16, [r2, #28]
 8015a44:	9001      	str	r0, [sp, #4]
 8015a46:	ee07 3a90 	vmov	s15, r3
 8015a4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015a4e:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 8015a52:	eec7 0aa0 	vdiv.f32	s1, s15, s1
 8015a56:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8015a5a:	f001 fd93 	bl	8017584 <powf>
 8015a5e:	eddf 0a36 	vldr	s1, [pc, #216]	; 8015b38 <PDM_Filter_setConfig+0x1a4>
 8015a62:	eef0 8a40 	vmov.f32	s17, s0
 8015a66:	ee70 0ac9 	vsub.f32	s1, s1, s18
 8015a6a:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8015a6e:	f001 fd89 	bl	8017584 <powf>
 8015a72:	ee28 8a28 	vmul.f32	s16, s16, s17
 8015a76:	ee28 0a00 	vmul.f32	s0, s16, s0
 8015a7a:	f001 faf9 	bl	8017070 <roundf>
 8015a7e:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8015a82:	88ab      	ldrh	r3, [r5, #4]
 8015a84:	882a      	ldrh	r2, [r5, #0]
 8015a86:	9801      	ldr	r0, [sp, #4]
 8015a88:	ed84 0a0f 	vstr	s0, [r4, #60]	; 0x3c
 8015a8c:	8723      	strh	r3, [r4, #56]	; 0x38
 8015a8e:	e7a3      	b.n	80159d8 <PDM_Filter_setConfig+0x44>
 8015a90:	2333      	movs	r3, #51	; 0x33
 8015a92:	3040      	adds	r0, #64	; 0x40
 8015a94:	80ab      	strh	r3, [r5, #4]
 8015a96:	e79f      	b.n	80159d8 <PDM_Filter_setConfig+0x44>
 8015a98:	4b28      	ldr	r3, [pc, #160]	; (8015b3c <PDM_Filter_setConfig+0x1a8>)
 8015a9a:	64a3      	str	r3, [r4, #72]	; 0x48
 8015a9c:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8015aa0:	2000      	movs	r0, #0
 8015aa2:	e792      	b.n	80159ca <PDM_Filter_setConfig+0x36>
 8015aa4:	4b26      	ldr	r3, [pc, #152]	; (8015b40 <PDM_Filter_setConfig+0x1ac>)
 8015aa6:	64a3      	str	r3, [r4, #72]	; 0x48
 8015aa8:	e7f8      	b.n	8015a9c <PDM_Filter_setConfig+0x108>
 8015aaa:	4b26      	ldr	r3, [pc, #152]	; (8015b44 <PDM_Filter_setConfig+0x1b0>)
 8015aac:	64a3      	str	r3, [r4, #72]	; 0x48
 8015aae:	e7f5      	b.n	8015a9c <PDM_Filter_setConfig+0x108>
 8015ab0:	4b25      	ldr	r3, [pc, #148]	; (8015b48 <PDM_Filter_setConfig+0x1b4>)
 8015ab2:	64a3      	str	r3, [r4, #72]	; 0x48
 8015ab4:	e7f2      	b.n	8015a9c <PDM_Filter_setConfig+0x108>
 8015ab6:	4b25      	ldr	r3, [pc, #148]	; (8015b4c <PDM_Filter_setConfig+0x1b8>)
 8015ab8:	64a3      	str	r3, [r4, #72]	; 0x48
 8015aba:	e7ef      	b.n	8015a9c <PDM_Filter_setConfig+0x108>
 8015abc:	4b24      	ldr	r3, [pc, #144]	; (8015b50 <PDM_Filter_setConfig+0x1bc>)
 8015abe:	64a3      	str	r3, [r4, #72]	; 0x48
 8015ac0:	e7ec      	b.n	8015a9c <PDM_Filter_setConfig+0x108>
 8015ac2:	4b24      	ldr	r3, [pc, #144]	; (8015b54 <PDM_Filter_setConfig+0x1c0>)
 8015ac4:	64a3      	str	r3, [r4, #72]	; 0x48
 8015ac6:	e7e9      	b.n	8015a9c <PDM_Filter_setConfig+0x108>
 8015ac8:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 8015aca:	4291      	cmp	r1, r2
 8015acc:	f47f af7d 	bne.w	80159ca <PDM_Filter_setConfig+0x36>
 8015ad0:	e783      	b.n	80159da <PDM_Filter_setConfig+0x46>
 8015ad2:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8015ad6:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 8015ada:	4299      	cmp	r1, r3
 8015adc:	d023      	beq.n	8015b26 <PDM_Filter_setConfig+0x192>
 8015ade:	2000      	movs	r0, #0
 8015ae0:	e773      	b.n	80159ca <PDM_Filter_setConfig+0x36>
 8015ae2:	2b06      	cmp	r3, #6
 8015ae4:	d822      	bhi.n	8015b2c <PDM_Filter_setConfig+0x198>
 8015ae6:	e8df f003 	tbb	[pc, r3]
 8015aea:	1316      	.short	0x1316
 8015aec:	070a0d10 	.word	0x070a0d10
 8015af0:	04          	.byte	0x04
 8015af1:	00          	.byte	0x00
 8015af2:	4b19      	ldr	r3, [pc, #100]	; (8015b58 <PDM_Filter_setConfig+0x1c4>)
 8015af4:	64a3      	str	r3, [r4, #72]	; 0x48
 8015af6:	e7d1      	b.n	8015a9c <PDM_Filter_setConfig+0x108>
 8015af8:	4b18      	ldr	r3, [pc, #96]	; (8015b5c <PDM_Filter_setConfig+0x1c8>)
 8015afa:	64a3      	str	r3, [r4, #72]	; 0x48
 8015afc:	e7ce      	b.n	8015a9c <PDM_Filter_setConfig+0x108>
 8015afe:	4b18      	ldr	r3, [pc, #96]	; (8015b60 <PDM_Filter_setConfig+0x1cc>)
 8015b00:	64a3      	str	r3, [r4, #72]	; 0x48
 8015b02:	e7cb      	b.n	8015a9c <PDM_Filter_setConfig+0x108>
 8015b04:	4b17      	ldr	r3, [pc, #92]	; (8015b64 <PDM_Filter_setConfig+0x1d0>)
 8015b06:	64a3      	str	r3, [r4, #72]	; 0x48
 8015b08:	e7c8      	b.n	8015a9c <PDM_Filter_setConfig+0x108>
 8015b0a:	4b17      	ldr	r3, [pc, #92]	; (8015b68 <PDM_Filter_setConfig+0x1d4>)
 8015b0c:	64a3      	str	r3, [r4, #72]	; 0x48
 8015b0e:	e7c5      	b.n	8015a9c <PDM_Filter_setConfig+0x108>
 8015b10:	4b16      	ldr	r3, [pc, #88]	; (8015b6c <PDM_Filter_setConfig+0x1d8>)
 8015b12:	64a3      	str	r3, [r4, #72]	; 0x48
 8015b14:	e7c2      	b.n	8015a9c <PDM_Filter_setConfig+0x108>
 8015b16:	4b16      	ldr	r3, [pc, #88]	; (8015b70 <PDM_Filter_setConfig+0x1dc>)
 8015b18:	64a3      	str	r3, [r4, #72]	; 0x48
 8015b1a:	e7bf      	b.n	8015a9c <PDM_Filter_setConfig+0x108>
 8015b1c:	ed9f 8a15 	vldr	s16, [pc, #84]	; 8015b74 <PDM_Filter_setConfig+0x1e0>
 8015b20:	eeb0 9a48 	vmov.f32	s18, s16
 8015b24:	e78e      	b.n	8015a44 <PDM_Filter_setConfig+0xb0>
 8015b26:	886b      	ldrh	r3, [r5, #2]
 8015b28:	8663      	strh	r3, [r4, #50]	; 0x32
 8015b2a:	e759      	b.n	80159e0 <PDM_Filter_setConfig+0x4c>
 8015b2c:	2000      	movs	r0, #0
 8015b2e:	e746      	b.n	80159be <PDM_Filter_setConfig+0x2a>
 8015b30:	b5e8b5cd 	.word	0xb5e8b5cd
 8015b34:	0801a00c 	.word	0x0801a00c
 8015b38:	42000000 	.word	0x42000000
 8015b3c:	08013f01 	.word	0x08013f01
 8015b40:	08013de1 	.word	0x08013de1
 8015b44:	08014091 	.word	0x08014091
 8015b48:	080148d5 	.word	0x080148d5
 8015b4c:	08014635 	.word	0x08014635
 8015b50:	08014415 	.word	0x08014415
 8015b54:	08014229 	.word	0x08014229
 8015b58:	08014ee1 	.word	0x08014ee1
 8015b5c:	08014da9 	.word	0x08014da9
 8015b60:	08014cc5 	.word	0x08014cc5
 8015b64:	0801555d 	.word	0x0801555d
 8015b68:	08015349 	.word	0x08015349
 8015b6c:	08015191 	.word	0x08015191
 8015b70:	08015025 	.word	0x08015025
 8015b74:	00000000 	.word	0x00000000

08015b78 <PDM_Filter>:
 8015b78:	b410      	push	{r4}
 8015b7a:	4b0c      	ldr	r3, [pc, #48]	; (8015bac <PDM_Filter+0x34>)
 8015b7c:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8015b7e:	429c      	cmp	r4, r3
 8015b80:	d003      	beq.n	8015b8a <PDM_Filter+0x12>
 8015b82:	2004      	movs	r0, #4
 8015b84:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015b88:	4770      	bx	lr
 8015b8a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8015b8c:	05dc      	lsls	r4, r3, #23
 8015b8e:	d407      	bmi.n	8015ba0 <PDM_Filter+0x28>
 8015b90:	f013 0f80 	tst.w	r3, #128	; 0x80
 8015b94:	bf14      	ite	ne
 8015b96:	2020      	movne	r0, #32
 8015b98:	2030      	moveq	r0, #48	; 0x30
 8015b9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015b9e:	4770      	bx	lr
 8015ba0:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8015ba2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015ba6:	320c      	adds	r2, #12
 8015ba8:	4718      	bx	r3
 8015baa:	bf00      	nop
 8015bac:	b5e8b5cd 	.word	0xb5e8b5cd

08015bb0 <CRC_Lock>:
 8015bb0:	4a17      	ldr	r2, [pc, #92]	; (8015c10 <CRC_Lock+0x60>)
 8015bb2:	6813      	ldr	r3, [r2, #0]
 8015bb4:	b410      	push	{r4}
 8015bb6:	f023 0301 	bic.w	r3, r3, #1
 8015bba:	4c16      	ldr	r4, [pc, #88]	; (8015c14 <CRC_Lock+0x64>)
 8015bbc:	6013      	str	r3, [r2, #0]
 8015bbe:	6823      	ldr	r3, [r4, #0]
 8015bc0:	b933      	cbnz	r3, 8015bd0 <CRC_Lock+0x20>
 8015bc2:	4b15      	ldr	r3, [pc, #84]	; (8015c18 <CRC_Lock+0x68>)
 8015bc4:	681b      	ldr	r3, [r3, #0]
 8015bc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8015bca:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8015bce:	d00f      	beq.n	8015bf0 <CRC_Lock+0x40>
 8015bd0:	4a12      	ldr	r2, [pc, #72]	; (8015c1c <CRC_Lock+0x6c>)
 8015bd2:	2301      	movs	r3, #1
 8015bd4:	6013      	str	r3, [r2, #0]
 8015bd6:	6813      	ldr	r3, [r2, #0]
 8015bd8:	2b00      	cmp	r3, #0
 8015bda:	d1fc      	bne.n	8015bd6 <CRC_Lock+0x26>
 8015bdc:	4b10      	ldr	r3, [pc, #64]	; (8015c20 <CRC_Lock+0x70>)
 8015bde:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015be2:	6018      	str	r0, [r3, #0]
 8015be4:	6818      	ldr	r0, [r3, #0]
 8015be6:	1a08      	subs	r0, r1, r0
 8015be8:	fab0 f080 	clz	r0, r0
 8015bec:	0940      	lsrs	r0, r0, #5
 8015bee:	4770      	bx	lr
 8015bf0:	4a0c      	ldr	r2, [pc, #48]	; (8015c24 <CRC_Lock+0x74>)
 8015bf2:	2301      	movs	r3, #1
 8015bf4:	6013      	str	r3, [r2, #0]
 8015bf6:	6813      	ldr	r3, [r2, #0]
 8015bf8:	2b00      	cmp	r3, #0
 8015bfa:	d1fc      	bne.n	8015bf6 <CRC_Lock+0x46>
 8015bfc:	4b0a      	ldr	r3, [pc, #40]	; (8015c28 <CRC_Lock+0x78>)
 8015bfe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015c02:	6018      	str	r0, [r3, #0]
 8015c04:	6818      	ldr	r0, [r3, #0]
 8015c06:	1a40      	subs	r0, r0, r1
 8015c08:	fab0 f080 	clz	r0, r0
 8015c0c:	0940      	lsrs	r0, r0, #5
 8015c0e:	4770      	bx	lr
 8015c10:	e0002000 	.word	0xe0002000
 8015c14:	e0042000 	.word	0xe0042000
 8015c18:	5c001000 	.word	0x5c001000
 8015c1c:	40023008 	.word	0x40023008
 8015c20:	40023000 	.word	0x40023000
 8015c24:	58024c08 	.word	0x58024c08
 8015c28:	58024c00 	.word	0x58024c00

08015c2c <atoi>:
 8015c2c:	220a      	movs	r2, #10
 8015c2e:	2100      	movs	r1, #0
 8015c30:	f000 bbf4 	b.w	801641c <strtol>

08015c34 <__errno>:
 8015c34:	4b01      	ldr	r3, [pc, #4]	; (8015c3c <__errno+0x8>)
 8015c36:	6818      	ldr	r0, [r3, #0]
 8015c38:	4770      	bx	lr
 8015c3a:	bf00      	nop
 8015c3c:	200008d8 	.word	0x200008d8

08015c40 <__sflush_r>:
 8015c40:	898a      	ldrh	r2, [r1, #12]
 8015c42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015c46:	4605      	mov	r5, r0
 8015c48:	0710      	lsls	r0, r2, #28
 8015c4a:	460c      	mov	r4, r1
 8015c4c:	d458      	bmi.n	8015d00 <__sflush_r+0xc0>
 8015c4e:	684b      	ldr	r3, [r1, #4]
 8015c50:	2b00      	cmp	r3, #0
 8015c52:	dc05      	bgt.n	8015c60 <__sflush_r+0x20>
 8015c54:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015c56:	2b00      	cmp	r3, #0
 8015c58:	dc02      	bgt.n	8015c60 <__sflush_r+0x20>
 8015c5a:	2000      	movs	r0, #0
 8015c5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015c60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015c62:	2e00      	cmp	r6, #0
 8015c64:	d0f9      	beq.n	8015c5a <__sflush_r+0x1a>
 8015c66:	2300      	movs	r3, #0
 8015c68:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015c6c:	682f      	ldr	r7, [r5, #0]
 8015c6e:	6a21      	ldr	r1, [r4, #32]
 8015c70:	602b      	str	r3, [r5, #0]
 8015c72:	d032      	beq.n	8015cda <__sflush_r+0x9a>
 8015c74:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015c76:	89a3      	ldrh	r3, [r4, #12]
 8015c78:	075a      	lsls	r2, r3, #29
 8015c7a:	d505      	bpl.n	8015c88 <__sflush_r+0x48>
 8015c7c:	6863      	ldr	r3, [r4, #4]
 8015c7e:	1ac0      	subs	r0, r0, r3
 8015c80:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015c82:	b10b      	cbz	r3, 8015c88 <__sflush_r+0x48>
 8015c84:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015c86:	1ac0      	subs	r0, r0, r3
 8015c88:	2300      	movs	r3, #0
 8015c8a:	4602      	mov	r2, r0
 8015c8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015c8e:	6a21      	ldr	r1, [r4, #32]
 8015c90:	4628      	mov	r0, r5
 8015c92:	47b0      	blx	r6
 8015c94:	1c43      	adds	r3, r0, #1
 8015c96:	89a3      	ldrh	r3, [r4, #12]
 8015c98:	d106      	bne.n	8015ca8 <__sflush_r+0x68>
 8015c9a:	6829      	ldr	r1, [r5, #0]
 8015c9c:	291d      	cmp	r1, #29
 8015c9e:	d848      	bhi.n	8015d32 <__sflush_r+0xf2>
 8015ca0:	4a29      	ldr	r2, [pc, #164]	; (8015d48 <__sflush_r+0x108>)
 8015ca2:	40ca      	lsrs	r2, r1
 8015ca4:	07d6      	lsls	r6, r2, #31
 8015ca6:	d544      	bpl.n	8015d32 <__sflush_r+0xf2>
 8015ca8:	2200      	movs	r2, #0
 8015caa:	6062      	str	r2, [r4, #4]
 8015cac:	04d9      	lsls	r1, r3, #19
 8015cae:	6922      	ldr	r2, [r4, #16]
 8015cb0:	6022      	str	r2, [r4, #0]
 8015cb2:	d504      	bpl.n	8015cbe <__sflush_r+0x7e>
 8015cb4:	1c42      	adds	r2, r0, #1
 8015cb6:	d101      	bne.n	8015cbc <__sflush_r+0x7c>
 8015cb8:	682b      	ldr	r3, [r5, #0]
 8015cba:	b903      	cbnz	r3, 8015cbe <__sflush_r+0x7e>
 8015cbc:	6560      	str	r0, [r4, #84]	; 0x54
 8015cbe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015cc0:	602f      	str	r7, [r5, #0]
 8015cc2:	2900      	cmp	r1, #0
 8015cc4:	d0c9      	beq.n	8015c5a <__sflush_r+0x1a>
 8015cc6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015cca:	4299      	cmp	r1, r3
 8015ccc:	d002      	beq.n	8015cd4 <__sflush_r+0x94>
 8015cce:	4628      	mov	r0, r5
 8015cd0:	f000 f978 	bl	8015fc4 <_free_r>
 8015cd4:	2000      	movs	r0, #0
 8015cd6:	6360      	str	r0, [r4, #52]	; 0x34
 8015cd8:	e7c0      	b.n	8015c5c <__sflush_r+0x1c>
 8015cda:	2301      	movs	r3, #1
 8015cdc:	4628      	mov	r0, r5
 8015cde:	47b0      	blx	r6
 8015ce0:	1c41      	adds	r1, r0, #1
 8015ce2:	d1c8      	bne.n	8015c76 <__sflush_r+0x36>
 8015ce4:	682b      	ldr	r3, [r5, #0]
 8015ce6:	2b00      	cmp	r3, #0
 8015ce8:	d0c5      	beq.n	8015c76 <__sflush_r+0x36>
 8015cea:	2b1d      	cmp	r3, #29
 8015cec:	d001      	beq.n	8015cf2 <__sflush_r+0xb2>
 8015cee:	2b16      	cmp	r3, #22
 8015cf0:	d101      	bne.n	8015cf6 <__sflush_r+0xb6>
 8015cf2:	602f      	str	r7, [r5, #0]
 8015cf4:	e7b1      	b.n	8015c5a <__sflush_r+0x1a>
 8015cf6:	89a3      	ldrh	r3, [r4, #12]
 8015cf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015cfc:	81a3      	strh	r3, [r4, #12]
 8015cfe:	e7ad      	b.n	8015c5c <__sflush_r+0x1c>
 8015d00:	690f      	ldr	r7, [r1, #16]
 8015d02:	2f00      	cmp	r7, #0
 8015d04:	d0a9      	beq.n	8015c5a <__sflush_r+0x1a>
 8015d06:	0793      	lsls	r3, r2, #30
 8015d08:	680e      	ldr	r6, [r1, #0]
 8015d0a:	bf08      	it	eq
 8015d0c:	694b      	ldreq	r3, [r1, #20]
 8015d0e:	600f      	str	r7, [r1, #0]
 8015d10:	bf18      	it	ne
 8015d12:	2300      	movne	r3, #0
 8015d14:	eba6 0807 	sub.w	r8, r6, r7
 8015d18:	608b      	str	r3, [r1, #8]
 8015d1a:	f1b8 0f00 	cmp.w	r8, #0
 8015d1e:	dd9c      	ble.n	8015c5a <__sflush_r+0x1a>
 8015d20:	4643      	mov	r3, r8
 8015d22:	463a      	mov	r2, r7
 8015d24:	6a21      	ldr	r1, [r4, #32]
 8015d26:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015d28:	4628      	mov	r0, r5
 8015d2a:	47b0      	blx	r6
 8015d2c:	2800      	cmp	r0, #0
 8015d2e:	dc06      	bgt.n	8015d3e <__sflush_r+0xfe>
 8015d30:	89a3      	ldrh	r3, [r4, #12]
 8015d32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015d36:	81a3      	strh	r3, [r4, #12]
 8015d38:	f04f 30ff 	mov.w	r0, #4294967295
 8015d3c:	e78e      	b.n	8015c5c <__sflush_r+0x1c>
 8015d3e:	4407      	add	r7, r0
 8015d40:	eba8 0800 	sub.w	r8, r8, r0
 8015d44:	e7e9      	b.n	8015d1a <__sflush_r+0xda>
 8015d46:	bf00      	nop
 8015d48:	20400001 	.word	0x20400001

08015d4c <_fflush_r>:
 8015d4c:	b538      	push	{r3, r4, r5, lr}
 8015d4e:	690b      	ldr	r3, [r1, #16]
 8015d50:	4605      	mov	r5, r0
 8015d52:	460c      	mov	r4, r1
 8015d54:	b1db      	cbz	r3, 8015d8e <_fflush_r+0x42>
 8015d56:	b118      	cbz	r0, 8015d60 <_fflush_r+0x14>
 8015d58:	6983      	ldr	r3, [r0, #24]
 8015d5a:	b90b      	cbnz	r3, 8015d60 <_fflush_r+0x14>
 8015d5c:	f000 f860 	bl	8015e20 <__sinit>
 8015d60:	4b0c      	ldr	r3, [pc, #48]	; (8015d94 <_fflush_r+0x48>)
 8015d62:	429c      	cmp	r4, r3
 8015d64:	d109      	bne.n	8015d7a <_fflush_r+0x2e>
 8015d66:	686c      	ldr	r4, [r5, #4]
 8015d68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015d6c:	b17b      	cbz	r3, 8015d8e <_fflush_r+0x42>
 8015d6e:	4621      	mov	r1, r4
 8015d70:	4628      	mov	r0, r5
 8015d72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015d76:	f7ff bf63 	b.w	8015c40 <__sflush_r>
 8015d7a:	4b07      	ldr	r3, [pc, #28]	; (8015d98 <_fflush_r+0x4c>)
 8015d7c:	429c      	cmp	r4, r3
 8015d7e:	d101      	bne.n	8015d84 <_fflush_r+0x38>
 8015d80:	68ac      	ldr	r4, [r5, #8]
 8015d82:	e7f1      	b.n	8015d68 <_fflush_r+0x1c>
 8015d84:	4b05      	ldr	r3, [pc, #20]	; (8015d9c <_fflush_r+0x50>)
 8015d86:	429c      	cmp	r4, r3
 8015d88:	bf08      	it	eq
 8015d8a:	68ec      	ldreq	r4, [r5, #12]
 8015d8c:	e7ec      	b.n	8015d68 <_fflush_r+0x1c>
 8015d8e:	2000      	movs	r0, #0
 8015d90:	bd38      	pop	{r3, r4, r5, pc}
 8015d92:	bf00      	nop
 8015d94:	0802fa30 	.word	0x0802fa30
 8015d98:	0802fa50 	.word	0x0802fa50
 8015d9c:	0802fa10 	.word	0x0802fa10

08015da0 <std>:
 8015da0:	2300      	movs	r3, #0
 8015da2:	b510      	push	{r4, lr}
 8015da4:	4604      	mov	r4, r0
 8015da6:	e9c0 3300 	strd	r3, r3, [r0]
 8015daa:	6083      	str	r3, [r0, #8]
 8015dac:	8181      	strh	r1, [r0, #12]
 8015dae:	6643      	str	r3, [r0, #100]	; 0x64
 8015db0:	81c2      	strh	r2, [r0, #14]
 8015db2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015db6:	6183      	str	r3, [r0, #24]
 8015db8:	4619      	mov	r1, r3
 8015dba:	2208      	movs	r2, #8
 8015dbc:	305c      	adds	r0, #92	; 0x5c
 8015dbe:	f000 f8f8 	bl	8015fb2 <memset>
 8015dc2:	4b05      	ldr	r3, [pc, #20]	; (8015dd8 <std+0x38>)
 8015dc4:	6263      	str	r3, [r4, #36]	; 0x24
 8015dc6:	4b05      	ldr	r3, [pc, #20]	; (8015ddc <std+0x3c>)
 8015dc8:	62a3      	str	r3, [r4, #40]	; 0x28
 8015dca:	4b05      	ldr	r3, [pc, #20]	; (8015de0 <std+0x40>)
 8015dcc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015dce:	4b05      	ldr	r3, [pc, #20]	; (8015de4 <std+0x44>)
 8015dd0:	6224      	str	r4, [r4, #32]
 8015dd2:	6323      	str	r3, [r4, #48]	; 0x30
 8015dd4:	bd10      	pop	{r4, pc}
 8015dd6:	bf00      	nop
 8015dd8:	0801626d 	.word	0x0801626d
 8015ddc:	0801628f 	.word	0x0801628f
 8015de0:	080162c7 	.word	0x080162c7
 8015de4:	080162eb 	.word	0x080162eb

08015de8 <_cleanup_r>:
 8015de8:	4901      	ldr	r1, [pc, #4]	; (8015df0 <_cleanup_r+0x8>)
 8015dea:	f000 b885 	b.w	8015ef8 <_fwalk_reent>
 8015dee:	bf00      	nop
 8015df0:	08015d4d 	.word	0x08015d4d

08015df4 <__sfmoreglue>:
 8015df4:	b570      	push	{r4, r5, r6, lr}
 8015df6:	1e4a      	subs	r2, r1, #1
 8015df8:	2568      	movs	r5, #104	; 0x68
 8015dfa:	4355      	muls	r5, r2
 8015dfc:	460e      	mov	r6, r1
 8015dfe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8015e02:	f000 f92d 	bl	8016060 <_malloc_r>
 8015e06:	4604      	mov	r4, r0
 8015e08:	b140      	cbz	r0, 8015e1c <__sfmoreglue+0x28>
 8015e0a:	2100      	movs	r1, #0
 8015e0c:	e9c0 1600 	strd	r1, r6, [r0]
 8015e10:	300c      	adds	r0, #12
 8015e12:	60a0      	str	r0, [r4, #8]
 8015e14:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8015e18:	f000 f8cb 	bl	8015fb2 <memset>
 8015e1c:	4620      	mov	r0, r4
 8015e1e:	bd70      	pop	{r4, r5, r6, pc}

08015e20 <__sinit>:
 8015e20:	6983      	ldr	r3, [r0, #24]
 8015e22:	b510      	push	{r4, lr}
 8015e24:	4604      	mov	r4, r0
 8015e26:	bb33      	cbnz	r3, 8015e76 <__sinit+0x56>
 8015e28:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8015e2c:	6503      	str	r3, [r0, #80]	; 0x50
 8015e2e:	4b12      	ldr	r3, [pc, #72]	; (8015e78 <__sinit+0x58>)
 8015e30:	4a12      	ldr	r2, [pc, #72]	; (8015e7c <__sinit+0x5c>)
 8015e32:	681b      	ldr	r3, [r3, #0]
 8015e34:	6282      	str	r2, [r0, #40]	; 0x28
 8015e36:	4298      	cmp	r0, r3
 8015e38:	bf04      	itt	eq
 8015e3a:	2301      	moveq	r3, #1
 8015e3c:	6183      	streq	r3, [r0, #24]
 8015e3e:	f000 f81f 	bl	8015e80 <__sfp>
 8015e42:	6060      	str	r0, [r4, #4]
 8015e44:	4620      	mov	r0, r4
 8015e46:	f000 f81b 	bl	8015e80 <__sfp>
 8015e4a:	60a0      	str	r0, [r4, #8]
 8015e4c:	4620      	mov	r0, r4
 8015e4e:	f000 f817 	bl	8015e80 <__sfp>
 8015e52:	2200      	movs	r2, #0
 8015e54:	60e0      	str	r0, [r4, #12]
 8015e56:	2104      	movs	r1, #4
 8015e58:	6860      	ldr	r0, [r4, #4]
 8015e5a:	f7ff ffa1 	bl	8015da0 <std>
 8015e5e:	2201      	movs	r2, #1
 8015e60:	2109      	movs	r1, #9
 8015e62:	68a0      	ldr	r0, [r4, #8]
 8015e64:	f7ff ff9c 	bl	8015da0 <std>
 8015e68:	2202      	movs	r2, #2
 8015e6a:	2112      	movs	r1, #18
 8015e6c:	68e0      	ldr	r0, [r4, #12]
 8015e6e:	f7ff ff97 	bl	8015da0 <std>
 8015e72:	2301      	movs	r3, #1
 8015e74:	61a3      	str	r3, [r4, #24]
 8015e76:	bd10      	pop	{r4, pc}
 8015e78:	0802fa70 	.word	0x0802fa70
 8015e7c:	08015de9 	.word	0x08015de9

08015e80 <__sfp>:
 8015e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015e82:	4b1b      	ldr	r3, [pc, #108]	; (8015ef0 <__sfp+0x70>)
 8015e84:	681e      	ldr	r6, [r3, #0]
 8015e86:	69b3      	ldr	r3, [r6, #24]
 8015e88:	4607      	mov	r7, r0
 8015e8a:	b913      	cbnz	r3, 8015e92 <__sfp+0x12>
 8015e8c:	4630      	mov	r0, r6
 8015e8e:	f7ff ffc7 	bl	8015e20 <__sinit>
 8015e92:	3648      	adds	r6, #72	; 0x48
 8015e94:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8015e98:	3b01      	subs	r3, #1
 8015e9a:	d503      	bpl.n	8015ea4 <__sfp+0x24>
 8015e9c:	6833      	ldr	r3, [r6, #0]
 8015e9e:	b133      	cbz	r3, 8015eae <__sfp+0x2e>
 8015ea0:	6836      	ldr	r6, [r6, #0]
 8015ea2:	e7f7      	b.n	8015e94 <__sfp+0x14>
 8015ea4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8015ea8:	b16d      	cbz	r5, 8015ec6 <__sfp+0x46>
 8015eaa:	3468      	adds	r4, #104	; 0x68
 8015eac:	e7f4      	b.n	8015e98 <__sfp+0x18>
 8015eae:	2104      	movs	r1, #4
 8015eb0:	4638      	mov	r0, r7
 8015eb2:	f7ff ff9f 	bl	8015df4 <__sfmoreglue>
 8015eb6:	6030      	str	r0, [r6, #0]
 8015eb8:	2800      	cmp	r0, #0
 8015eba:	d1f1      	bne.n	8015ea0 <__sfp+0x20>
 8015ebc:	230c      	movs	r3, #12
 8015ebe:	603b      	str	r3, [r7, #0]
 8015ec0:	4604      	mov	r4, r0
 8015ec2:	4620      	mov	r0, r4
 8015ec4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015ec6:	4b0b      	ldr	r3, [pc, #44]	; (8015ef4 <__sfp+0x74>)
 8015ec8:	6665      	str	r5, [r4, #100]	; 0x64
 8015eca:	e9c4 5500 	strd	r5, r5, [r4]
 8015ece:	60a5      	str	r5, [r4, #8]
 8015ed0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8015ed4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8015ed8:	2208      	movs	r2, #8
 8015eda:	4629      	mov	r1, r5
 8015edc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8015ee0:	f000 f867 	bl	8015fb2 <memset>
 8015ee4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8015ee8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8015eec:	e7e9      	b.n	8015ec2 <__sfp+0x42>
 8015eee:	bf00      	nop
 8015ef0:	0802fa70 	.word	0x0802fa70
 8015ef4:	ffff0001 	.word	0xffff0001

08015ef8 <_fwalk_reent>:
 8015ef8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015efc:	4680      	mov	r8, r0
 8015efe:	4689      	mov	r9, r1
 8015f00:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8015f04:	2600      	movs	r6, #0
 8015f06:	b914      	cbnz	r4, 8015f0e <_fwalk_reent+0x16>
 8015f08:	4630      	mov	r0, r6
 8015f0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015f0e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8015f12:	3f01      	subs	r7, #1
 8015f14:	d501      	bpl.n	8015f1a <_fwalk_reent+0x22>
 8015f16:	6824      	ldr	r4, [r4, #0]
 8015f18:	e7f5      	b.n	8015f06 <_fwalk_reent+0xe>
 8015f1a:	89ab      	ldrh	r3, [r5, #12]
 8015f1c:	2b01      	cmp	r3, #1
 8015f1e:	d907      	bls.n	8015f30 <_fwalk_reent+0x38>
 8015f20:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015f24:	3301      	adds	r3, #1
 8015f26:	d003      	beq.n	8015f30 <_fwalk_reent+0x38>
 8015f28:	4629      	mov	r1, r5
 8015f2a:	4640      	mov	r0, r8
 8015f2c:	47c8      	blx	r9
 8015f2e:	4306      	orrs	r6, r0
 8015f30:	3568      	adds	r5, #104	; 0x68
 8015f32:	e7ee      	b.n	8015f12 <_fwalk_reent+0x1a>

08015f34 <__libc_init_array>:
 8015f34:	b570      	push	{r4, r5, r6, lr}
 8015f36:	4e0d      	ldr	r6, [pc, #52]	; (8015f6c <__libc_init_array+0x38>)
 8015f38:	4c0d      	ldr	r4, [pc, #52]	; (8015f70 <__libc_init_array+0x3c>)
 8015f3a:	1ba4      	subs	r4, r4, r6
 8015f3c:	10a4      	asrs	r4, r4, #2
 8015f3e:	2500      	movs	r5, #0
 8015f40:	42a5      	cmp	r5, r4
 8015f42:	d109      	bne.n	8015f58 <__libc_init_array+0x24>
 8015f44:	4e0b      	ldr	r6, [pc, #44]	; (8015f74 <__libc_init_array+0x40>)
 8015f46:	4c0c      	ldr	r4, [pc, #48]	; (8015f78 <__libc_init_array+0x44>)
 8015f48:	f003 fa0c 	bl	8019364 <_init>
 8015f4c:	1ba4      	subs	r4, r4, r6
 8015f4e:	10a4      	asrs	r4, r4, #2
 8015f50:	2500      	movs	r5, #0
 8015f52:	42a5      	cmp	r5, r4
 8015f54:	d105      	bne.n	8015f62 <__libc_init_array+0x2e>
 8015f56:	bd70      	pop	{r4, r5, r6, pc}
 8015f58:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015f5c:	4798      	blx	r3
 8015f5e:	3501      	adds	r5, #1
 8015f60:	e7ee      	b.n	8015f40 <__libc_init_array+0xc>
 8015f62:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015f66:	4798      	blx	r3
 8015f68:	3501      	adds	r5, #1
 8015f6a:	e7f2      	b.n	8015f52 <__libc_init_array+0x1e>
 8015f6c:	0802fc68 	.word	0x0802fc68
 8015f70:	0802fc68 	.word	0x0802fc68
 8015f74:	0802fc68 	.word	0x0802fc68
 8015f78:	0802fc6c 	.word	0x0802fc6c

08015f7c <malloc>:
 8015f7c:	4b02      	ldr	r3, [pc, #8]	; (8015f88 <malloc+0xc>)
 8015f7e:	4601      	mov	r1, r0
 8015f80:	6818      	ldr	r0, [r3, #0]
 8015f82:	f000 b86d 	b.w	8016060 <_malloc_r>
 8015f86:	bf00      	nop
 8015f88:	200008d8 	.word	0x200008d8

08015f8c <free>:
 8015f8c:	4b02      	ldr	r3, [pc, #8]	; (8015f98 <free+0xc>)
 8015f8e:	4601      	mov	r1, r0
 8015f90:	6818      	ldr	r0, [r3, #0]
 8015f92:	f000 b817 	b.w	8015fc4 <_free_r>
 8015f96:	bf00      	nop
 8015f98:	200008d8 	.word	0x200008d8

08015f9c <memcpy>:
 8015f9c:	b510      	push	{r4, lr}
 8015f9e:	1e43      	subs	r3, r0, #1
 8015fa0:	440a      	add	r2, r1
 8015fa2:	4291      	cmp	r1, r2
 8015fa4:	d100      	bne.n	8015fa8 <memcpy+0xc>
 8015fa6:	bd10      	pop	{r4, pc}
 8015fa8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015fac:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015fb0:	e7f7      	b.n	8015fa2 <memcpy+0x6>

08015fb2 <memset>:
 8015fb2:	4402      	add	r2, r0
 8015fb4:	4603      	mov	r3, r0
 8015fb6:	4293      	cmp	r3, r2
 8015fb8:	d100      	bne.n	8015fbc <memset+0xa>
 8015fba:	4770      	bx	lr
 8015fbc:	f803 1b01 	strb.w	r1, [r3], #1
 8015fc0:	e7f9      	b.n	8015fb6 <memset+0x4>
	...

08015fc4 <_free_r>:
 8015fc4:	b538      	push	{r3, r4, r5, lr}
 8015fc6:	4605      	mov	r5, r0
 8015fc8:	2900      	cmp	r1, #0
 8015fca:	d045      	beq.n	8016058 <_free_r+0x94>
 8015fcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015fd0:	1f0c      	subs	r4, r1, #4
 8015fd2:	2b00      	cmp	r3, #0
 8015fd4:	bfb8      	it	lt
 8015fd6:	18e4      	addlt	r4, r4, r3
 8015fd8:	f000 fba4 	bl	8016724 <__malloc_lock>
 8015fdc:	4a1f      	ldr	r2, [pc, #124]	; (801605c <_free_r+0x98>)
 8015fde:	6813      	ldr	r3, [r2, #0]
 8015fe0:	4610      	mov	r0, r2
 8015fe2:	b933      	cbnz	r3, 8015ff2 <_free_r+0x2e>
 8015fe4:	6063      	str	r3, [r4, #4]
 8015fe6:	6014      	str	r4, [r2, #0]
 8015fe8:	4628      	mov	r0, r5
 8015fea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015fee:	f000 bb9a 	b.w	8016726 <__malloc_unlock>
 8015ff2:	42a3      	cmp	r3, r4
 8015ff4:	d90c      	bls.n	8016010 <_free_r+0x4c>
 8015ff6:	6821      	ldr	r1, [r4, #0]
 8015ff8:	1862      	adds	r2, r4, r1
 8015ffa:	4293      	cmp	r3, r2
 8015ffc:	bf04      	itt	eq
 8015ffe:	681a      	ldreq	r2, [r3, #0]
 8016000:	685b      	ldreq	r3, [r3, #4]
 8016002:	6063      	str	r3, [r4, #4]
 8016004:	bf04      	itt	eq
 8016006:	1852      	addeq	r2, r2, r1
 8016008:	6022      	streq	r2, [r4, #0]
 801600a:	6004      	str	r4, [r0, #0]
 801600c:	e7ec      	b.n	8015fe8 <_free_r+0x24>
 801600e:	4613      	mov	r3, r2
 8016010:	685a      	ldr	r2, [r3, #4]
 8016012:	b10a      	cbz	r2, 8016018 <_free_r+0x54>
 8016014:	42a2      	cmp	r2, r4
 8016016:	d9fa      	bls.n	801600e <_free_r+0x4a>
 8016018:	6819      	ldr	r1, [r3, #0]
 801601a:	1858      	adds	r0, r3, r1
 801601c:	42a0      	cmp	r0, r4
 801601e:	d10b      	bne.n	8016038 <_free_r+0x74>
 8016020:	6820      	ldr	r0, [r4, #0]
 8016022:	4401      	add	r1, r0
 8016024:	1858      	adds	r0, r3, r1
 8016026:	4282      	cmp	r2, r0
 8016028:	6019      	str	r1, [r3, #0]
 801602a:	d1dd      	bne.n	8015fe8 <_free_r+0x24>
 801602c:	6810      	ldr	r0, [r2, #0]
 801602e:	6852      	ldr	r2, [r2, #4]
 8016030:	605a      	str	r2, [r3, #4]
 8016032:	4401      	add	r1, r0
 8016034:	6019      	str	r1, [r3, #0]
 8016036:	e7d7      	b.n	8015fe8 <_free_r+0x24>
 8016038:	d902      	bls.n	8016040 <_free_r+0x7c>
 801603a:	230c      	movs	r3, #12
 801603c:	602b      	str	r3, [r5, #0]
 801603e:	e7d3      	b.n	8015fe8 <_free_r+0x24>
 8016040:	6820      	ldr	r0, [r4, #0]
 8016042:	1821      	adds	r1, r4, r0
 8016044:	428a      	cmp	r2, r1
 8016046:	bf04      	itt	eq
 8016048:	6811      	ldreq	r1, [r2, #0]
 801604a:	6852      	ldreq	r2, [r2, #4]
 801604c:	6062      	str	r2, [r4, #4]
 801604e:	bf04      	itt	eq
 8016050:	1809      	addeq	r1, r1, r0
 8016052:	6021      	streq	r1, [r4, #0]
 8016054:	605c      	str	r4, [r3, #4]
 8016056:	e7c7      	b.n	8015fe8 <_free_r+0x24>
 8016058:	bd38      	pop	{r3, r4, r5, pc}
 801605a:	bf00      	nop
 801605c:	200084cc 	.word	0x200084cc

08016060 <_malloc_r>:
 8016060:	b570      	push	{r4, r5, r6, lr}
 8016062:	1ccd      	adds	r5, r1, #3
 8016064:	f025 0503 	bic.w	r5, r5, #3
 8016068:	3508      	adds	r5, #8
 801606a:	2d0c      	cmp	r5, #12
 801606c:	bf38      	it	cc
 801606e:	250c      	movcc	r5, #12
 8016070:	2d00      	cmp	r5, #0
 8016072:	4606      	mov	r6, r0
 8016074:	db01      	blt.n	801607a <_malloc_r+0x1a>
 8016076:	42a9      	cmp	r1, r5
 8016078:	d903      	bls.n	8016082 <_malloc_r+0x22>
 801607a:	230c      	movs	r3, #12
 801607c:	6033      	str	r3, [r6, #0]
 801607e:	2000      	movs	r0, #0
 8016080:	bd70      	pop	{r4, r5, r6, pc}
 8016082:	f000 fb4f 	bl	8016724 <__malloc_lock>
 8016086:	4a21      	ldr	r2, [pc, #132]	; (801610c <_malloc_r+0xac>)
 8016088:	6814      	ldr	r4, [r2, #0]
 801608a:	4621      	mov	r1, r4
 801608c:	b991      	cbnz	r1, 80160b4 <_malloc_r+0x54>
 801608e:	4c20      	ldr	r4, [pc, #128]	; (8016110 <_malloc_r+0xb0>)
 8016090:	6823      	ldr	r3, [r4, #0]
 8016092:	b91b      	cbnz	r3, 801609c <_malloc_r+0x3c>
 8016094:	4630      	mov	r0, r6
 8016096:	f000 f8b9 	bl	801620c <_sbrk_r>
 801609a:	6020      	str	r0, [r4, #0]
 801609c:	4629      	mov	r1, r5
 801609e:	4630      	mov	r0, r6
 80160a0:	f000 f8b4 	bl	801620c <_sbrk_r>
 80160a4:	1c43      	adds	r3, r0, #1
 80160a6:	d124      	bne.n	80160f2 <_malloc_r+0x92>
 80160a8:	230c      	movs	r3, #12
 80160aa:	6033      	str	r3, [r6, #0]
 80160ac:	4630      	mov	r0, r6
 80160ae:	f000 fb3a 	bl	8016726 <__malloc_unlock>
 80160b2:	e7e4      	b.n	801607e <_malloc_r+0x1e>
 80160b4:	680b      	ldr	r3, [r1, #0]
 80160b6:	1b5b      	subs	r3, r3, r5
 80160b8:	d418      	bmi.n	80160ec <_malloc_r+0x8c>
 80160ba:	2b0b      	cmp	r3, #11
 80160bc:	d90f      	bls.n	80160de <_malloc_r+0x7e>
 80160be:	600b      	str	r3, [r1, #0]
 80160c0:	50cd      	str	r5, [r1, r3]
 80160c2:	18cc      	adds	r4, r1, r3
 80160c4:	4630      	mov	r0, r6
 80160c6:	f000 fb2e 	bl	8016726 <__malloc_unlock>
 80160ca:	f104 000b 	add.w	r0, r4, #11
 80160ce:	1d23      	adds	r3, r4, #4
 80160d0:	f020 0007 	bic.w	r0, r0, #7
 80160d4:	1ac3      	subs	r3, r0, r3
 80160d6:	d0d3      	beq.n	8016080 <_malloc_r+0x20>
 80160d8:	425a      	negs	r2, r3
 80160da:	50e2      	str	r2, [r4, r3]
 80160dc:	e7d0      	b.n	8016080 <_malloc_r+0x20>
 80160de:	428c      	cmp	r4, r1
 80160e0:	684b      	ldr	r3, [r1, #4]
 80160e2:	bf16      	itet	ne
 80160e4:	6063      	strne	r3, [r4, #4]
 80160e6:	6013      	streq	r3, [r2, #0]
 80160e8:	460c      	movne	r4, r1
 80160ea:	e7eb      	b.n	80160c4 <_malloc_r+0x64>
 80160ec:	460c      	mov	r4, r1
 80160ee:	6849      	ldr	r1, [r1, #4]
 80160f0:	e7cc      	b.n	801608c <_malloc_r+0x2c>
 80160f2:	1cc4      	adds	r4, r0, #3
 80160f4:	f024 0403 	bic.w	r4, r4, #3
 80160f8:	42a0      	cmp	r0, r4
 80160fa:	d005      	beq.n	8016108 <_malloc_r+0xa8>
 80160fc:	1a21      	subs	r1, r4, r0
 80160fe:	4630      	mov	r0, r6
 8016100:	f000 f884 	bl	801620c <_sbrk_r>
 8016104:	3001      	adds	r0, #1
 8016106:	d0cf      	beq.n	80160a8 <_malloc_r+0x48>
 8016108:	6025      	str	r5, [r4, #0]
 801610a:	e7db      	b.n	80160c4 <_malloc_r+0x64>
 801610c:	200084cc 	.word	0x200084cc
 8016110:	200084d0 	.word	0x200084d0

08016114 <iprintf>:
 8016114:	b40f      	push	{r0, r1, r2, r3}
 8016116:	4b0a      	ldr	r3, [pc, #40]	; (8016140 <iprintf+0x2c>)
 8016118:	b513      	push	{r0, r1, r4, lr}
 801611a:	681c      	ldr	r4, [r3, #0]
 801611c:	b124      	cbz	r4, 8016128 <iprintf+0x14>
 801611e:	69a3      	ldr	r3, [r4, #24]
 8016120:	b913      	cbnz	r3, 8016128 <iprintf+0x14>
 8016122:	4620      	mov	r0, r4
 8016124:	f7ff fe7c 	bl	8015e20 <__sinit>
 8016128:	ab05      	add	r3, sp, #20
 801612a:	9a04      	ldr	r2, [sp, #16]
 801612c:	68a1      	ldr	r1, [r4, #8]
 801612e:	9301      	str	r3, [sp, #4]
 8016130:	4620      	mov	r0, r4
 8016132:	f000 fc75 	bl	8016a20 <_vfiprintf_r>
 8016136:	b002      	add	sp, #8
 8016138:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801613c:	b004      	add	sp, #16
 801613e:	4770      	bx	lr
 8016140:	200008d8 	.word	0x200008d8

08016144 <_puts_r>:
 8016144:	b570      	push	{r4, r5, r6, lr}
 8016146:	460e      	mov	r6, r1
 8016148:	4605      	mov	r5, r0
 801614a:	b118      	cbz	r0, 8016154 <_puts_r+0x10>
 801614c:	6983      	ldr	r3, [r0, #24]
 801614e:	b90b      	cbnz	r3, 8016154 <_puts_r+0x10>
 8016150:	f7ff fe66 	bl	8015e20 <__sinit>
 8016154:	69ab      	ldr	r3, [r5, #24]
 8016156:	68ac      	ldr	r4, [r5, #8]
 8016158:	b913      	cbnz	r3, 8016160 <_puts_r+0x1c>
 801615a:	4628      	mov	r0, r5
 801615c:	f7ff fe60 	bl	8015e20 <__sinit>
 8016160:	4b23      	ldr	r3, [pc, #140]	; (80161f0 <_puts_r+0xac>)
 8016162:	429c      	cmp	r4, r3
 8016164:	d117      	bne.n	8016196 <_puts_r+0x52>
 8016166:	686c      	ldr	r4, [r5, #4]
 8016168:	89a3      	ldrh	r3, [r4, #12]
 801616a:	071b      	lsls	r3, r3, #28
 801616c:	d51d      	bpl.n	80161aa <_puts_r+0x66>
 801616e:	6923      	ldr	r3, [r4, #16]
 8016170:	b1db      	cbz	r3, 80161aa <_puts_r+0x66>
 8016172:	3e01      	subs	r6, #1
 8016174:	68a3      	ldr	r3, [r4, #8]
 8016176:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801617a:	3b01      	subs	r3, #1
 801617c:	60a3      	str	r3, [r4, #8]
 801617e:	b9e9      	cbnz	r1, 80161bc <_puts_r+0x78>
 8016180:	2b00      	cmp	r3, #0
 8016182:	da2e      	bge.n	80161e2 <_puts_r+0x9e>
 8016184:	4622      	mov	r2, r4
 8016186:	210a      	movs	r1, #10
 8016188:	4628      	mov	r0, r5
 801618a:	f000 f95d 	bl	8016448 <__swbuf_r>
 801618e:	3001      	adds	r0, #1
 8016190:	d011      	beq.n	80161b6 <_puts_r+0x72>
 8016192:	200a      	movs	r0, #10
 8016194:	e011      	b.n	80161ba <_puts_r+0x76>
 8016196:	4b17      	ldr	r3, [pc, #92]	; (80161f4 <_puts_r+0xb0>)
 8016198:	429c      	cmp	r4, r3
 801619a:	d101      	bne.n	80161a0 <_puts_r+0x5c>
 801619c:	68ac      	ldr	r4, [r5, #8]
 801619e:	e7e3      	b.n	8016168 <_puts_r+0x24>
 80161a0:	4b15      	ldr	r3, [pc, #84]	; (80161f8 <_puts_r+0xb4>)
 80161a2:	429c      	cmp	r4, r3
 80161a4:	bf08      	it	eq
 80161a6:	68ec      	ldreq	r4, [r5, #12]
 80161a8:	e7de      	b.n	8016168 <_puts_r+0x24>
 80161aa:	4621      	mov	r1, r4
 80161ac:	4628      	mov	r0, r5
 80161ae:	f000 f9af 	bl	8016510 <__swsetup_r>
 80161b2:	2800      	cmp	r0, #0
 80161b4:	d0dd      	beq.n	8016172 <_puts_r+0x2e>
 80161b6:	f04f 30ff 	mov.w	r0, #4294967295
 80161ba:	bd70      	pop	{r4, r5, r6, pc}
 80161bc:	2b00      	cmp	r3, #0
 80161be:	da04      	bge.n	80161ca <_puts_r+0x86>
 80161c0:	69a2      	ldr	r2, [r4, #24]
 80161c2:	429a      	cmp	r2, r3
 80161c4:	dc06      	bgt.n	80161d4 <_puts_r+0x90>
 80161c6:	290a      	cmp	r1, #10
 80161c8:	d004      	beq.n	80161d4 <_puts_r+0x90>
 80161ca:	6823      	ldr	r3, [r4, #0]
 80161cc:	1c5a      	adds	r2, r3, #1
 80161ce:	6022      	str	r2, [r4, #0]
 80161d0:	7019      	strb	r1, [r3, #0]
 80161d2:	e7cf      	b.n	8016174 <_puts_r+0x30>
 80161d4:	4622      	mov	r2, r4
 80161d6:	4628      	mov	r0, r5
 80161d8:	f000 f936 	bl	8016448 <__swbuf_r>
 80161dc:	3001      	adds	r0, #1
 80161de:	d1c9      	bne.n	8016174 <_puts_r+0x30>
 80161e0:	e7e9      	b.n	80161b6 <_puts_r+0x72>
 80161e2:	6823      	ldr	r3, [r4, #0]
 80161e4:	200a      	movs	r0, #10
 80161e6:	1c5a      	adds	r2, r3, #1
 80161e8:	6022      	str	r2, [r4, #0]
 80161ea:	7018      	strb	r0, [r3, #0]
 80161ec:	e7e5      	b.n	80161ba <_puts_r+0x76>
 80161ee:	bf00      	nop
 80161f0:	0802fa30 	.word	0x0802fa30
 80161f4:	0802fa50 	.word	0x0802fa50
 80161f8:	0802fa10 	.word	0x0802fa10

080161fc <puts>:
 80161fc:	4b02      	ldr	r3, [pc, #8]	; (8016208 <puts+0xc>)
 80161fe:	4601      	mov	r1, r0
 8016200:	6818      	ldr	r0, [r3, #0]
 8016202:	f7ff bf9f 	b.w	8016144 <_puts_r>
 8016206:	bf00      	nop
 8016208:	200008d8 	.word	0x200008d8

0801620c <_sbrk_r>:
 801620c:	b538      	push	{r3, r4, r5, lr}
 801620e:	4c06      	ldr	r4, [pc, #24]	; (8016228 <_sbrk_r+0x1c>)
 8016210:	2300      	movs	r3, #0
 8016212:	4605      	mov	r5, r0
 8016214:	4608      	mov	r0, r1
 8016216:	6023      	str	r3, [r4, #0]
 8016218:	f7f6 fd2e 	bl	800cc78 <_sbrk>
 801621c:	1c43      	adds	r3, r0, #1
 801621e:	d102      	bne.n	8016226 <_sbrk_r+0x1a>
 8016220:	6823      	ldr	r3, [r4, #0]
 8016222:	b103      	cbz	r3, 8016226 <_sbrk_r+0x1a>
 8016224:	602b      	str	r3, [r5, #0]
 8016226:	bd38      	pop	{r3, r4, r5, pc}
 8016228:	2001276c 	.word	0x2001276c

0801622c <siprintf>:
 801622c:	b40e      	push	{r1, r2, r3}
 801622e:	b500      	push	{lr}
 8016230:	b09c      	sub	sp, #112	; 0x70
 8016232:	ab1d      	add	r3, sp, #116	; 0x74
 8016234:	9002      	str	r0, [sp, #8]
 8016236:	9006      	str	r0, [sp, #24]
 8016238:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801623c:	4809      	ldr	r0, [pc, #36]	; (8016264 <siprintf+0x38>)
 801623e:	9107      	str	r1, [sp, #28]
 8016240:	9104      	str	r1, [sp, #16]
 8016242:	4909      	ldr	r1, [pc, #36]	; (8016268 <siprintf+0x3c>)
 8016244:	f853 2b04 	ldr.w	r2, [r3], #4
 8016248:	9105      	str	r1, [sp, #20]
 801624a:	6800      	ldr	r0, [r0, #0]
 801624c:	9301      	str	r3, [sp, #4]
 801624e:	a902      	add	r1, sp, #8
 8016250:	f000 fac4 	bl	80167dc <_svfiprintf_r>
 8016254:	9b02      	ldr	r3, [sp, #8]
 8016256:	2200      	movs	r2, #0
 8016258:	701a      	strb	r2, [r3, #0]
 801625a:	b01c      	add	sp, #112	; 0x70
 801625c:	f85d eb04 	ldr.w	lr, [sp], #4
 8016260:	b003      	add	sp, #12
 8016262:	4770      	bx	lr
 8016264:	200008d8 	.word	0x200008d8
 8016268:	ffff0208 	.word	0xffff0208

0801626c <__sread>:
 801626c:	b510      	push	{r4, lr}
 801626e:	460c      	mov	r4, r1
 8016270:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016274:	f000 fe72 	bl	8016f5c <_read_r>
 8016278:	2800      	cmp	r0, #0
 801627a:	bfab      	itete	ge
 801627c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801627e:	89a3      	ldrhlt	r3, [r4, #12]
 8016280:	181b      	addge	r3, r3, r0
 8016282:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016286:	bfac      	ite	ge
 8016288:	6563      	strge	r3, [r4, #84]	; 0x54
 801628a:	81a3      	strhlt	r3, [r4, #12]
 801628c:	bd10      	pop	{r4, pc}

0801628e <__swrite>:
 801628e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016292:	461f      	mov	r7, r3
 8016294:	898b      	ldrh	r3, [r1, #12]
 8016296:	05db      	lsls	r3, r3, #23
 8016298:	4605      	mov	r5, r0
 801629a:	460c      	mov	r4, r1
 801629c:	4616      	mov	r6, r2
 801629e:	d505      	bpl.n	80162ac <__swrite+0x1e>
 80162a0:	2302      	movs	r3, #2
 80162a2:	2200      	movs	r2, #0
 80162a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80162a8:	f000 f9b4 	bl	8016614 <_lseek_r>
 80162ac:	89a3      	ldrh	r3, [r4, #12]
 80162ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80162b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80162b6:	81a3      	strh	r3, [r4, #12]
 80162b8:	4632      	mov	r2, r6
 80162ba:	463b      	mov	r3, r7
 80162bc:	4628      	mov	r0, r5
 80162be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80162c2:	f000 b913 	b.w	80164ec <_write_r>

080162c6 <__sseek>:
 80162c6:	b510      	push	{r4, lr}
 80162c8:	460c      	mov	r4, r1
 80162ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80162ce:	f000 f9a1 	bl	8016614 <_lseek_r>
 80162d2:	1c43      	adds	r3, r0, #1
 80162d4:	89a3      	ldrh	r3, [r4, #12]
 80162d6:	bf15      	itete	ne
 80162d8:	6560      	strne	r0, [r4, #84]	; 0x54
 80162da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80162de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80162e2:	81a3      	strheq	r3, [r4, #12]
 80162e4:	bf18      	it	ne
 80162e6:	81a3      	strhne	r3, [r4, #12]
 80162e8:	bd10      	pop	{r4, pc}

080162ea <__sclose>:
 80162ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80162ee:	f000 b97d 	b.w	80165ec <_close_r>

080162f2 <strcpy>:
 80162f2:	4603      	mov	r3, r0
 80162f4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80162f8:	f803 2b01 	strb.w	r2, [r3], #1
 80162fc:	2a00      	cmp	r2, #0
 80162fe:	d1f9      	bne.n	80162f4 <strcpy+0x2>
 8016300:	4770      	bx	lr

08016302 <strncmp>:
 8016302:	b510      	push	{r4, lr}
 8016304:	b16a      	cbz	r2, 8016322 <strncmp+0x20>
 8016306:	3901      	subs	r1, #1
 8016308:	1884      	adds	r4, r0, r2
 801630a:	f810 3b01 	ldrb.w	r3, [r0], #1
 801630e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8016312:	4293      	cmp	r3, r2
 8016314:	d103      	bne.n	801631e <strncmp+0x1c>
 8016316:	42a0      	cmp	r0, r4
 8016318:	d001      	beq.n	801631e <strncmp+0x1c>
 801631a:	2b00      	cmp	r3, #0
 801631c:	d1f5      	bne.n	801630a <strncmp+0x8>
 801631e:	1a98      	subs	r0, r3, r2
 8016320:	bd10      	pop	{r4, pc}
 8016322:	4610      	mov	r0, r2
 8016324:	e7fc      	b.n	8016320 <strncmp+0x1e>

08016326 <_strtol_l.isra.0>:
 8016326:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801632a:	4680      	mov	r8, r0
 801632c:	4689      	mov	r9, r1
 801632e:	4692      	mov	sl, r2
 8016330:	461e      	mov	r6, r3
 8016332:	460f      	mov	r7, r1
 8016334:	463d      	mov	r5, r7
 8016336:	9808      	ldr	r0, [sp, #32]
 8016338:	f815 4b01 	ldrb.w	r4, [r5], #1
 801633c:	f000 f966 	bl	801660c <__locale_ctype_ptr_l>
 8016340:	4420      	add	r0, r4
 8016342:	7843      	ldrb	r3, [r0, #1]
 8016344:	f013 0308 	ands.w	r3, r3, #8
 8016348:	d132      	bne.n	80163b0 <_strtol_l.isra.0+0x8a>
 801634a:	2c2d      	cmp	r4, #45	; 0x2d
 801634c:	d132      	bne.n	80163b4 <_strtol_l.isra.0+0x8e>
 801634e:	787c      	ldrb	r4, [r7, #1]
 8016350:	1cbd      	adds	r5, r7, #2
 8016352:	2201      	movs	r2, #1
 8016354:	2e00      	cmp	r6, #0
 8016356:	d05d      	beq.n	8016414 <_strtol_l.isra.0+0xee>
 8016358:	2e10      	cmp	r6, #16
 801635a:	d109      	bne.n	8016370 <_strtol_l.isra.0+0x4a>
 801635c:	2c30      	cmp	r4, #48	; 0x30
 801635e:	d107      	bne.n	8016370 <_strtol_l.isra.0+0x4a>
 8016360:	782b      	ldrb	r3, [r5, #0]
 8016362:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8016366:	2b58      	cmp	r3, #88	; 0x58
 8016368:	d14f      	bne.n	801640a <_strtol_l.isra.0+0xe4>
 801636a:	786c      	ldrb	r4, [r5, #1]
 801636c:	2610      	movs	r6, #16
 801636e:	3502      	adds	r5, #2
 8016370:	2a00      	cmp	r2, #0
 8016372:	bf14      	ite	ne
 8016374:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8016378:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 801637c:	2700      	movs	r7, #0
 801637e:	fbb1 fcf6 	udiv	ip, r1, r6
 8016382:	4638      	mov	r0, r7
 8016384:	fb06 1e1c 	mls	lr, r6, ip, r1
 8016388:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801638c:	2b09      	cmp	r3, #9
 801638e:	d817      	bhi.n	80163c0 <_strtol_l.isra.0+0x9a>
 8016390:	461c      	mov	r4, r3
 8016392:	42a6      	cmp	r6, r4
 8016394:	dd23      	ble.n	80163de <_strtol_l.isra.0+0xb8>
 8016396:	1c7b      	adds	r3, r7, #1
 8016398:	d007      	beq.n	80163aa <_strtol_l.isra.0+0x84>
 801639a:	4584      	cmp	ip, r0
 801639c:	d31c      	bcc.n	80163d8 <_strtol_l.isra.0+0xb2>
 801639e:	d101      	bne.n	80163a4 <_strtol_l.isra.0+0x7e>
 80163a0:	45a6      	cmp	lr, r4
 80163a2:	db19      	blt.n	80163d8 <_strtol_l.isra.0+0xb2>
 80163a4:	fb00 4006 	mla	r0, r0, r6, r4
 80163a8:	2701      	movs	r7, #1
 80163aa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80163ae:	e7eb      	b.n	8016388 <_strtol_l.isra.0+0x62>
 80163b0:	462f      	mov	r7, r5
 80163b2:	e7bf      	b.n	8016334 <_strtol_l.isra.0+0xe>
 80163b4:	2c2b      	cmp	r4, #43	; 0x2b
 80163b6:	bf04      	itt	eq
 80163b8:	1cbd      	addeq	r5, r7, #2
 80163ba:	787c      	ldrbeq	r4, [r7, #1]
 80163bc:	461a      	mov	r2, r3
 80163be:	e7c9      	b.n	8016354 <_strtol_l.isra.0+0x2e>
 80163c0:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80163c4:	2b19      	cmp	r3, #25
 80163c6:	d801      	bhi.n	80163cc <_strtol_l.isra.0+0xa6>
 80163c8:	3c37      	subs	r4, #55	; 0x37
 80163ca:	e7e2      	b.n	8016392 <_strtol_l.isra.0+0x6c>
 80163cc:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80163d0:	2b19      	cmp	r3, #25
 80163d2:	d804      	bhi.n	80163de <_strtol_l.isra.0+0xb8>
 80163d4:	3c57      	subs	r4, #87	; 0x57
 80163d6:	e7dc      	b.n	8016392 <_strtol_l.isra.0+0x6c>
 80163d8:	f04f 37ff 	mov.w	r7, #4294967295
 80163dc:	e7e5      	b.n	80163aa <_strtol_l.isra.0+0x84>
 80163de:	1c7b      	adds	r3, r7, #1
 80163e0:	d108      	bne.n	80163f4 <_strtol_l.isra.0+0xce>
 80163e2:	2322      	movs	r3, #34	; 0x22
 80163e4:	f8c8 3000 	str.w	r3, [r8]
 80163e8:	4608      	mov	r0, r1
 80163ea:	f1ba 0f00 	cmp.w	sl, #0
 80163ee:	d107      	bne.n	8016400 <_strtol_l.isra.0+0xda>
 80163f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80163f4:	b102      	cbz	r2, 80163f8 <_strtol_l.isra.0+0xd2>
 80163f6:	4240      	negs	r0, r0
 80163f8:	f1ba 0f00 	cmp.w	sl, #0
 80163fc:	d0f8      	beq.n	80163f0 <_strtol_l.isra.0+0xca>
 80163fe:	b10f      	cbz	r7, 8016404 <_strtol_l.isra.0+0xde>
 8016400:	f105 39ff 	add.w	r9, r5, #4294967295
 8016404:	f8ca 9000 	str.w	r9, [sl]
 8016408:	e7f2      	b.n	80163f0 <_strtol_l.isra.0+0xca>
 801640a:	2430      	movs	r4, #48	; 0x30
 801640c:	2e00      	cmp	r6, #0
 801640e:	d1af      	bne.n	8016370 <_strtol_l.isra.0+0x4a>
 8016410:	2608      	movs	r6, #8
 8016412:	e7ad      	b.n	8016370 <_strtol_l.isra.0+0x4a>
 8016414:	2c30      	cmp	r4, #48	; 0x30
 8016416:	d0a3      	beq.n	8016360 <_strtol_l.isra.0+0x3a>
 8016418:	260a      	movs	r6, #10
 801641a:	e7a9      	b.n	8016370 <_strtol_l.isra.0+0x4a>

0801641c <strtol>:
 801641c:	4b08      	ldr	r3, [pc, #32]	; (8016440 <strtol+0x24>)
 801641e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016420:	681c      	ldr	r4, [r3, #0]
 8016422:	4d08      	ldr	r5, [pc, #32]	; (8016444 <strtol+0x28>)
 8016424:	6a23      	ldr	r3, [r4, #32]
 8016426:	2b00      	cmp	r3, #0
 8016428:	bf08      	it	eq
 801642a:	462b      	moveq	r3, r5
 801642c:	9300      	str	r3, [sp, #0]
 801642e:	4613      	mov	r3, r2
 8016430:	460a      	mov	r2, r1
 8016432:	4601      	mov	r1, r0
 8016434:	4620      	mov	r0, r4
 8016436:	f7ff ff76 	bl	8016326 <_strtol_l.isra.0>
 801643a:	b003      	add	sp, #12
 801643c:	bd30      	pop	{r4, r5, pc}
 801643e:	bf00      	nop
 8016440:	200008d8 	.word	0x200008d8
 8016444:	2000093c 	.word	0x2000093c

08016448 <__swbuf_r>:
 8016448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801644a:	460e      	mov	r6, r1
 801644c:	4614      	mov	r4, r2
 801644e:	4605      	mov	r5, r0
 8016450:	b118      	cbz	r0, 801645a <__swbuf_r+0x12>
 8016452:	6983      	ldr	r3, [r0, #24]
 8016454:	b90b      	cbnz	r3, 801645a <__swbuf_r+0x12>
 8016456:	f7ff fce3 	bl	8015e20 <__sinit>
 801645a:	4b21      	ldr	r3, [pc, #132]	; (80164e0 <__swbuf_r+0x98>)
 801645c:	429c      	cmp	r4, r3
 801645e:	d12a      	bne.n	80164b6 <__swbuf_r+0x6e>
 8016460:	686c      	ldr	r4, [r5, #4]
 8016462:	69a3      	ldr	r3, [r4, #24]
 8016464:	60a3      	str	r3, [r4, #8]
 8016466:	89a3      	ldrh	r3, [r4, #12]
 8016468:	071a      	lsls	r2, r3, #28
 801646a:	d52e      	bpl.n	80164ca <__swbuf_r+0x82>
 801646c:	6923      	ldr	r3, [r4, #16]
 801646e:	b363      	cbz	r3, 80164ca <__swbuf_r+0x82>
 8016470:	6923      	ldr	r3, [r4, #16]
 8016472:	6820      	ldr	r0, [r4, #0]
 8016474:	1ac0      	subs	r0, r0, r3
 8016476:	6963      	ldr	r3, [r4, #20]
 8016478:	b2f6      	uxtb	r6, r6
 801647a:	4283      	cmp	r3, r0
 801647c:	4637      	mov	r7, r6
 801647e:	dc04      	bgt.n	801648a <__swbuf_r+0x42>
 8016480:	4621      	mov	r1, r4
 8016482:	4628      	mov	r0, r5
 8016484:	f7ff fc62 	bl	8015d4c <_fflush_r>
 8016488:	bb28      	cbnz	r0, 80164d6 <__swbuf_r+0x8e>
 801648a:	68a3      	ldr	r3, [r4, #8]
 801648c:	3b01      	subs	r3, #1
 801648e:	60a3      	str	r3, [r4, #8]
 8016490:	6823      	ldr	r3, [r4, #0]
 8016492:	1c5a      	adds	r2, r3, #1
 8016494:	6022      	str	r2, [r4, #0]
 8016496:	701e      	strb	r6, [r3, #0]
 8016498:	6963      	ldr	r3, [r4, #20]
 801649a:	3001      	adds	r0, #1
 801649c:	4283      	cmp	r3, r0
 801649e:	d004      	beq.n	80164aa <__swbuf_r+0x62>
 80164a0:	89a3      	ldrh	r3, [r4, #12]
 80164a2:	07db      	lsls	r3, r3, #31
 80164a4:	d519      	bpl.n	80164da <__swbuf_r+0x92>
 80164a6:	2e0a      	cmp	r6, #10
 80164a8:	d117      	bne.n	80164da <__swbuf_r+0x92>
 80164aa:	4621      	mov	r1, r4
 80164ac:	4628      	mov	r0, r5
 80164ae:	f7ff fc4d 	bl	8015d4c <_fflush_r>
 80164b2:	b190      	cbz	r0, 80164da <__swbuf_r+0x92>
 80164b4:	e00f      	b.n	80164d6 <__swbuf_r+0x8e>
 80164b6:	4b0b      	ldr	r3, [pc, #44]	; (80164e4 <__swbuf_r+0x9c>)
 80164b8:	429c      	cmp	r4, r3
 80164ba:	d101      	bne.n	80164c0 <__swbuf_r+0x78>
 80164bc:	68ac      	ldr	r4, [r5, #8]
 80164be:	e7d0      	b.n	8016462 <__swbuf_r+0x1a>
 80164c0:	4b09      	ldr	r3, [pc, #36]	; (80164e8 <__swbuf_r+0xa0>)
 80164c2:	429c      	cmp	r4, r3
 80164c4:	bf08      	it	eq
 80164c6:	68ec      	ldreq	r4, [r5, #12]
 80164c8:	e7cb      	b.n	8016462 <__swbuf_r+0x1a>
 80164ca:	4621      	mov	r1, r4
 80164cc:	4628      	mov	r0, r5
 80164ce:	f000 f81f 	bl	8016510 <__swsetup_r>
 80164d2:	2800      	cmp	r0, #0
 80164d4:	d0cc      	beq.n	8016470 <__swbuf_r+0x28>
 80164d6:	f04f 37ff 	mov.w	r7, #4294967295
 80164da:	4638      	mov	r0, r7
 80164dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80164de:	bf00      	nop
 80164e0:	0802fa30 	.word	0x0802fa30
 80164e4:	0802fa50 	.word	0x0802fa50
 80164e8:	0802fa10 	.word	0x0802fa10

080164ec <_write_r>:
 80164ec:	b538      	push	{r3, r4, r5, lr}
 80164ee:	4c07      	ldr	r4, [pc, #28]	; (801650c <_write_r+0x20>)
 80164f0:	4605      	mov	r5, r0
 80164f2:	4608      	mov	r0, r1
 80164f4:	4611      	mov	r1, r2
 80164f6:	2200      	movs	r2, #0
 80164f8:	6022      	str	r2, [r4, #0]
 80164fa:	461a      	mov	r2, r3
 80164fc:	f7f6 fbdc 	bl	800ccb8 <_write>
 8016500:	1c43      	adds	r3, r0, #1
 8016502:	d102      	bne.n	801650a <_write_r+0x1e>
 8016504:	6823      	ldr	r3, [r4, #0]
 8016506:	b103      	cbz	r3, 801650a <_write_r+0x1e>
 8016508:	602b      	str	r3, [r5, #0]
 801650a:	bd38      	pop	{r3, r4, r5, pc}
 801650c:	2001276c 	.word	0x2001276c

08016510 <__swsetup_r>:
 8016510:	4b32      	ldr	r3, [pc, #200]	; (80165dc <__swsetup_r+0xcc>)
 8016512:	b570      	push	{r4, r5, r6, lr}
 8016514:	681d      	ldr	r5, [r3, #0]
 8016516:	4606      	mov	r6, r0
 8016518:	460c      	mov	r4, r1
 801651a:	b125      	cbz	r5, 8016526 <__swsetup_r+0x16>
 801651c:	69ab      	ldr	r3, [r5, #24]
 801651e:	b913      	cbnz	r3, 8016526 <__swsetup_r+0x16>
 8016520:	4628      	mov	r0, r5
 8016522:	f7ff fc7d 	bl	8015e20 <__sinit>
 8016526:	4b2e      	ldr	r3, [pc, #184]	; (80165e0 <__swsetup_r+0xd0>)
 8016528:	429c      	cmp	r4, r3
 801652a:	d10f      	bne.n	801654c <__swsetup_r+0x3c>
 801652c:	686c      	ldr	r4, [r5, #4]
 801652e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016532:	b29a      	uxth	r2, r3
 8016534:	0715      	lsls	r5, r2, #28
 8016536:	d42c      	bmi.n	8016592 <__swsetup_r+0x82>
 8016538:	06d0      	lsls	r0, r2, #27
 801653a:	d411      	bmi.n	8016560 <__swsetup_r+0x50>
 801653c:	2209      	movs	r2, #9
 801653e:	6032      	str	r2, [r6, #0]
 8016540:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016544:	81a3      	strh	r3, [r4, #12]
 8016546:	f04f 30ff 	mov.w	r0, #4294967295
 801654a:	e03e      	b.n	80165ca <__swsetup_r+0xba>
 801654c:	4b25      	ldr	r3, [pc, #148]	; (80165e4 <__swsetup_r+0xd4>)
 801654e:	429c      	cmp	r4, r3
 8016550:	d101      	bne.n	8016556 <__swsetup_r+0x46>
 8016552:	68ac      	ldr	r4, [r5, #8]
 8016554:	e7eb      	b.n	801652e <__swsetup_r+0x1e>
 8016556:	4b24      	ldr	r3, [pc, #144]	; (80165e8 <__swsetup_r+0xd8>)
 8016558:	429c      	cmp	r4, r3
 801655a:	bf08      	it	eq
 801655c:	68ec      	ldreq	r4, [r5, #12]
 801655e:	e7e6      	b.n	801652e <__swsetup_r+0x1e>
 8016560:	0751      	lsls	r1, r2, #29
 8016562:	d512      	bpl.n	801658a <__swsetup_r+0x7a>
 8016564:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016566:	b141      	cbz	r1, 801657a <__swsetup_r+0x6a>
 8016568:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801656c:	4299      	cmp	r1, r3
 801656e:	d002      	beq.n	8016576 <__swsetup_r+0x66>
 8016570:	4630      	mov	r0, r6
 8016572:	f7ff fd27 	bl	8015fc4 <_free_r>
 8016576:	2300      	movs	r3, #0
 8016578:	6363      	str	r3, [r4, #52]	; 0x34
 801657a:	89a3      	ldrh	r3, [r4, #12]
 801657c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016580:	81a3      	strh	r3, [r4, #12]
 8016582:	2300      	movs	r3, #0
 8016584:	6063      	str	r3, [r4, #4]
 8016586:	6923      	ldr	r3, [r4, #16]
 8016588:	6023      	str	r3, [r4, #0]
 801658a:	89a3      	ldrh	r3, [r4, #12]
 801658c:	f043 0308 	orr.w	r3, r3, #8
 8016590:	81a3      	strh	r3, [r4, #12]
 8016592:	6923      	ldr	r3, [r4, #16]
 8016594:	b94b      	cbnz	r3, 80165aa <__swsetup_r+0x9a>
 8016596:	89a3      	ldrh	r3, [r4, #12]
 8016598:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801659c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80165a0:	d003      	beq.n	80165aa <__swsetup_r+0x9a>
 80165a2:	4621      	mov	r1, r4
 80165a4:	4630      	mov	r0, r6
 80165a6:	f000 f86b 	bl	8016680 <__smakebuf_r>
 80165aa:	89a2      	ldrh	r2, [r4, #12]
 80165ac:	f012 0301 	ands.w	r3, r2, #1
 80165b0:	d00c      	beq.n	80165cc <__swsetup_r+0xbc>
 80165b2:	2300      	movs	r3, #0
 80165b4:	60a3      	str	r3, [r4, #8]
 80165b6:	6963      	ldr	r3, [r4, #20]
 80165b8:	425b      	negs	r3, r3
 80165ba:	61a3      	str	r3, [r4, #24]
 80165bc:	6923      	ldr	r3, [r4, #16]
 80165be:	b953      	cbnz	r3, 80165d6 <__swsetup_r+0xc6>
 80165c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80165c4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80165c8:	d1ba      	bne.n	8016540 <__swsetup_r+0x30>
 80165ca:	bd70      	pop	{r4, r5, r6, pc}
 80165cc:	0792      	lsls	r2, r2, #30
 80165ce:	bf58      	it	pl
 80165d0:	6963      	ldrpl	r3, [r4, #20]
 80165d2:	60a3      	str	r3, [r4, #8]
 80165d4:	e7f2      	b.n	80165bc <__swsetup_r+0xac>
 80165d6:	2000      	movs	r0, #0
 80165d8:	e7f7      	b.n	80165ca <__swsetup_r+0xba>
 80165da:	bf00      	nop
 80165dc:	200008d8 	.word	0x200008d8
 80165e0:	0802fa30 	.word	0x0802fa30
 80165e4:	0802fa50 	.word	0x0802fa50
 80165e8:	0802fa10 	.word	0x0802fa10

080165ec <_close_r>:
 80165ec:	b538      	push	{r3, r4, r5, lr}
 80165ee:	4c06      	ldr	r4, [pc, #24]	; (8016608 <_close_r+0x1c>)
 80165f0:	2300      	movs	r3, #0
 80165f2:	4605      	mov	r5, r0
 80165f4:	4608      	mov	r0, r1
 80165f6:	6023      	str	r3, [r4, #0]
 80165f8:	f7f6 fb6c 	bl	800ccd4 <_close>
 80165fc:	1c43      	adds	r3, r0, #1
 80165fe:	d102      	bne.n	8016606 <_close_r+0x1a>
 8016600:	6823      	ldr	r3, [r4, #0]
 8016602:	b103      	cbz	r3, 8016606 <_close_r+0x1a>
 8016604:	602b      	str	r3, [r5, #0]
 8016606:	bd38      	pop	{r3, r4, r5, pc}
 8016608:	2001276c 	.word	0x2001276c

0801660c <__locale_ctype_ptr_l>:
 801660c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8016610:	4770      	bx	lr
	...

08016614 <_lseek_r>:
 8016614:	b538      	push	{r3, r4, r5, lr}
 8016616:	4c07      	ldr	r4, [pc, #28]	; (8016634 <_lseek_r+0x20>)
 8016618:	4605      	mov	r5, r0
 801661a:	4608      	mov	r0, r1
 801661c:	4611      	mov	r1, r2
 801661e:	2200      	movs	r2, #0
 8016620:	6022      	str	r2, [r4, #0]
 8016622:	461a      	mov	r2, r3
 8016624:	f7f6 fb60 	bl	800cce8 <_lseek>
 8016628:	1c43      	adds	r3, r0, #1
 801662a:	d102      	bne.n	8016632 <_lseek_r+0x1e>
 801662c:	6823      	ldr	r3, [r4, #0]
 801662e:	b103      	cbz	r3, 8016632 <_lseek_r+0x1e>
 8016630:	602b      	str	r3, [r5, #0]
 8016632:	bd38      	pop	{r3, r4, r5, pc}
 8016634:	2001276c 	.word	0x2001276c

08016638 <__swhatbuf_r>:
 8016638:	b570      	push	{r4, r5, r6, lr}
 801663a:	460e      	mov	r6, r1
 801663c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016640:	2900      	cmp	r1, #0
 8016642:	b096      	sub	sp, #88	; 0x58
 8016644:	4614      	mov	r4, r2
 8016646:	461d      	mov	r5, r3
 8016648:	da07      	bge.n	801665a <__swhatbuf_r+0x22>
 801664a:	2300      	movs	r3, #0
 801664c:	602b      	str	r3, [r5, #0]
 801664e:	89b3      	ldrh	r3, [r6, #12]
 8016650:	061a      	lsls	r2, r3, #24
 8016652:	d410      	bmi.n	8016676 <__swhatbuf_r+0x3e>
 8016654:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016658:	e00e      	b.n	8016678 <__swhatbuf_r+0x40>
 801665a:	466a      	mov	r2, sp
 801665c:	f000 fc9e 	bl	8016f9c <_fstat_r>
 8016660:	2800      	cmp	r0, #0
 8016662:	dbf2      	blt.n	801664a <__swhatbuf_r+0x12>
 8016664:	9a01      	ldr	r2, [sp, #4]
 8016666:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801666a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801666e:	425a      	negs	r2, r3
 8016670:	415a      	adcs	r2, r3
 8016672:	602a      	str	r2, [r5, #0]
 8016674:	e7ee      	b.n	8016654 <__swhatbuf_r+0x1c>
 8016676:	2340      	movs	r3, #64	; 0x40
 8016678:	2000      	movs	r0, #0
 801667a:	6023      	str	r3, [r4, #0]
 801667c:	b016      	add	sp, #88	; 0x58
 801667e:	bd70      	pop	{r4, r5, r6, pc}

08016680 <__smakebuf_r>:
 8016680:	898b      	ldrh	r3, [r1, #12]
 8016682:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016684:	079d      	lsls	r5, r3, #30
 8016686:	4606      	mov	r6, r0
 8016688:	460c      	mov	r4, r1
 801668a:	d507      	bpl.n	801669c <__smakebuf_r+0x1c>
 801668c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016690:	6023      	str	r3, [r4, #0]
 8016692:	6123      	str	r3, [r4, #16]
 8016694:	2301      	movs	r3, #1
 8016696:	6163      	str	r3, [r4, #20]
 8016698:	b002      	add	sp, #8
 801669a:	bd70      	pop	{r4, r5, r6, pc}
 801669c:	ab01      	add	r3, sp, #4
 801669e:	466a      	mov	r2, sp
 80166a0:	f7ff ffca 	bl	8016638 <__swhatbuf_r>
 80166a4:	9900      	ldr	r1, [sp, #0]
 80166a6:	4605      	mov	r5, r0
 80166a8:	4630      	mov	r0, r6
 80166aa:	f7ff fcd9 	bl	8016060 <_malloc_r>
 80166ae:	b948      	cbnz	r0, 80166c4 <__smakebuf_r+0x44>
 80166b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80166b4:	059a      	lsls	r2, r3, #22
 80166b6:	d4ef      	bmi.n	8016698 <__smakebuf_r+0x18>
 80166b8:	f023 0303 	bic.w	r3, r3, #3
 80166bc:	f043 0302 	orr.w	r3, r3, #2
 80166c0:	81a3      	strh	r3, [r4, #12]
 80166c2:	e7e3      	b.n	801668c <__smakebuf_r+0xc>
 80166c4:	4b0d      	ldr	r3, [pc, #52]	; (80166fc <__smakebuf_r+0x7c>)
 80166c6:	62b3      	str	r3, [r6, #40]	; 0x28
 80166c8:	89a3      	ldrh	r3, [r4, #12]
 80166ca:	6020      	str	r0, [r4, #0]
 80166cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80166d0:	81a3      	strh	r3, [r4, #12]
 80166d2:	9b00      	ldr	r3, [sp, #0]
 80166d4:	6163      	str	r3, [r4, #20]
 80166d6:	9b01      	ldr	r3, [sp, #4]
 80166d8:	6120      	str	r0, [r4, #16]
 80166da:	b15b      	cbz	r3, 80166f4 <__smakebuf_r+0x74>
 80166dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80166e0:	4630      	mov	r0, r6
 80166e2:	f000 fc6d 	bl	8016fc0 <_isatty_r>
 80166e6:	b128      	cbz	r0, 80166f4 <__smakebuf_r+0x74>
 80166e8:	89a3      	ldrh	r3, [r4, #12]
 80166ea:	f023 0303 	bic.w	r3, r3, #3
 80166ee:	f043 0301 	orr.w	r3, r3, #1
 80166f2:	81a3      	strh	r3, [r4, #12]
 80166f4:	89a3      	ldrh	r3, [r4, #12]
 80166f6:	431d      	orrs	r5, r3
 80166f8:	81a5      	strh	r5, [r4, #12]
 80166fa:	e7cd      	b.n	8016698 <__smakebuf_r+0x18>
 80166fc:	08015de9 	.word	0x08015de9

08016700 <__ascii_mbtowc>:
 8016700:	b082      	sub	sp, #8
 8016702:	b901      	cbnz	r1, 8016706 <__ascii_mbtowc+0x6>
 8016704:	a901      	add	r1, sp, #4
 8016706:	b142      	cbz	r2, 801671a <__ascii_mbtowc+0x1a>
 8016708:	b14b      	cbz	r3, 801671e <__ascii_mbtowc+0x1e>
 801670a:	7813      	ldrb	r3, [r2, #0]
 801670c:	600b      	str	r3, [r1, #0]
 801670e:	7812      	ldrb	r2, [r2, #0]
 8016710:	1c10      	adds	r0, r2, #0
 8016712:	bf18      	it	ne
 8016714:	2001      	movne	r0, #1
 8016716:	b002      	add	sp, #8
 8016718:	4770      	bx	lr
 801671a:	4610      	mov	r0, r2
 801671c:	e7fb      	b.n	8016716 <__ascii_mbtowc+0x16>
 801671e:	f06f 0001 	mvn.w	r0, #1
 8016722:	e7f8      	b.n	8016716 <__ascii_mbtowc+0x16>

08016724 <__malloc_lock>:
 8016724:	4770      	bx	lr

08016726 <__malloc_unlock>:
 8016726:	4770      	bx	lr

08016728 <__ssputs_r>:
 8016728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801672c:	688e      	ldr	r6, [r1, #8]
 801672e:	429e      	cmp	r6, r3
 8016730:	4682      	mov	sl, r0
 8016732:	460c      	mov	r4, r1
 8016734:	4690      	mov	r8, r2
 8016736:	4699      	mov	r9, r3
 8016738:	d837      	bhi.n	80167aa <__ssputs_r+0x82>
 801673a:	898a      	ldrh	r2, [r1, #12]
 801673c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016740:	d031      	beq.n	80167a6 <__ssputs_r+0x7e>
 8016742:	6825      	ldr	r5, [r4, #0]
 8016744:	6909      	ldr	r1, [r1, #16]
 8016746:	1a6f      	subs	r7, r5, r1
 8016748:	6965      	ldr	r5, [r4, #20]
 801674a:	2302      	movs	r3, #2
 801674c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016750:	fb95 f5f3 	sdiv	r5, r5, r3
 8016754:	f109 0301 	add.w	r3, r9, #1
 8016758:	443b      	add	r3, r7
 801675a:	429d      	cmp	r5, r3
 801675c:	bf38      	it	cc
 801675e:	461d      	movcc	r5, r3
 8016760:	0553      	lsls	r3, r2, #21
 8016762:	d530      	bpl.n	80167c6 <__ssputs_r+0x9e>
 8016764:	4629      	mov	r1, r5
 8016766:	f7ff fc7b 	bl	8016060 <_malloc_r>
 801676a:	4606      	mov	r6, r0
 801676c:	b950      	cbnz	r0, 8016784 <__ssputs_r+0x5c>
 801676e:	230c      	movs	r3, #12
 8016770:	f8ca 3000 	str.w	r3, [sl]
 8016774:	89a3      	ldrh	r3, [r4, #12]
 8016776:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801677a:	81a3      	strh	r3, [r4, #12]
 801677c:	f04f 30ff 	mov.w	r0, #4294967295
 8016780:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016784:	463a      	mov	r2, r7
 8016786:	6921      	ldr	r1, [r4, #16]
 8016788:	f7ff fc08 	bl	8015f9c <memcpy>
 801678c:	89a3      	ldrh	r3, [r4, #12]
 801678e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8016792:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016796:	81a3      	strh	r3, [r4, #12]
 8016798:	6126      	str	r6, [r4, #16]
 801679a:	6165      	str	r5, [r4, #20]
 801679c:	443e      	add	r6, r7
 801679e:	1bed      	subs	r5, r5, r7
 80167a0:	6026      	str	r6, [r4, #0]
 80167a2:	60a5      	str	r5, [r4, #8]
 80167a4:	464e      	mov	r6, r9
 80167a6:	454e      	cmp	r6, r9
 80167a8:	d900      	bls.n	80167ac <__ssputs_r+0x84>
 80167aa:	464e      	mov	r6, r9
 80167ac:	4632      	mov	r2, r6
 80167ae:	4641      	mov	r1, r8
 80167b0:	6820      	ldr	r0, [r4, #0]
 80167b2:	f000 fc15 	bl	8016fe0 <memmove>
 80167b6:	68a3      	ldr	r3, [r4, #8]
 80167b8:	1b9b      	subs	r3, r3, r6
 80167ba:	60a3      	str	r3, [r4, #8]
 80167bc:	6823      	ldr	r3, [r4, #0]
 80167be:	441e      	add	r6, r3
 80167c0:	6026      	str	r6, [r4, #0]
 80167c2:	2000      	movs	r0, #0
 80167c4:	e7dc      	b.n	8016780 <__ssputs_r+0x58>
 80167c6:	462a      	mov	r2, r5
 80167c8:	f000 fc23 	bl	8017012 <_realloc_r>
 80167cc:	4606      	mov	r6, r0
 80167ce:	2800      	cmp	r0, #0
 80167d0:	d1e2      	bne.n	8016798 <__ssputs_r+0x70>
 80167d2:	6921      	ldr	r1, [r4, #16]
 80167d4:	4650      	mov	r0, sl
 80167d6:	f7ff fbf5 	bl	8015fc4 <_free_r>
 80167da:	e7c8      	b.n	801676e <__ssputs_r+0x46>

080167dc <_svfiprintf_r>:
 80167dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80167e0:	461d      	mov	r5, r3
 80167e2:	898b      	ldrh	r3, [r1, #12]
 80167e4:	061f      	lsls	r7, r3, #24
 80167e6:	b09d      	sub	sp, #116	; 0x74
 80167e8:	4680      	mov	r8, r0
 80167ea:	460c      	mov	r4, r1
 80167ec:	4616      	mov	r6, r2
 80167ee:	d50f      	bpl.n	8016810 <_svfiprintf_r+0x34>
 80167f0:	690b      	ldr	r3, [r1, #16]
 80167f2:	b96b      	cbnz	r3, 8016810 <_svfiprintf_r+0x34>
 80167f4:	2140      	movs	r1, #64	; 0x40
 80167f6:	f7ff fc33 	bl	8016060 <_malloc_r>
 80167fa:	6020      	str	r0, [r4, #0]
 80167fc:	6120      	str	r0, [r4, #16]
 80167fe:	b928      	cbnz	r0, 801680c <_svfiprintf_r+0x30>
 8016800:	230c      	movs	r3, #12
 8016802:	f8c8 3000 	str.w	r3, [r8]
 8016806:	f04f 30ff 	mov.w	r0, #4294967295
 801680a:	e0c8      	b.n	801699e <_svfiprintf_r+0x1c2>
 801680c:	2340      	movs	r3, #64	; 0x40
 801680e:	6163      	str	r3, [r4, #20]
 8016810:	2300      	movs	r3, #0
 8016812:	9309      	str	r3, [sp, #36]	; 0x24
 8016814:	2320      	movs	r3, #32
 8016816:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801681a:	2330      	movs	r3, #48	; 0x30
 801681c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016820:	9503      	str	r5, [sp, #12]
 8016822:	f04f 0b01 	mov.w	fp, #1
 8016826:	4637      	mov	r7, r6
 8016828:	463d      	mov	r5, r7
 801682a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801682e:	b10b      	cbz	r3, 8016834 <_svfiprintf_r+0x58>
 8016830:	2b25      	cmp	r3, #37	; 0x25
 8016832:	d13e      	bne.n	80168b2 <_svfiprintf_r+0xd6>
 8016834:	ebb7 0a06 	subs.w	sl, r7, r6
 8016838:	d00b      	beq.n	8016852 <_svfiprintf_r+0x76>
 801683a:	4653      	mov	r3, sl
 801683c:	4632      	mov	r2, r6
 801683e:	4621      	mov	r1, r4
 8016840:	4640      	mov	r0, r8
 8016842:	f7ff ff71 	bl	8016728 <__ssputs_r>
 8016846:	3001      	adds	r0, #1
 8016848:	f000 80a4 	beq.w	8016994 <_svfiprintf_r+0x1b8>
 801684c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801684e:	4453      	add	r3, sl
 8016850:	9309      	str	r3, [sp, #36]	; 0x24
 8016852:	783b      	ldrb	r3, [r7, #0]
 8016854:	2b00      	cmp	r3, #0
 8016856:	f000 809d 	beq.w	8016994 <_svfiprintf_r+0x1b8>
 801685a:	2300      	movs	r3, #0
 801685c:	f04f 32ff 	mov.w	r2, #4294967295
 8016860:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016864:	9304      	str	r3, [sp, #16]
 8016866:	9307      	str	r3, [sp, #28]
 8016868:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801686c:	931a      	str	r3, [sp, #104]	; 0x68
 801686e:	462f      	mov	r7, r5
 8016870:	2205      	movs	r2, #5
 8016872:	f817 1b01 	ldrb.w	r1, [r7], #1
 8016876:	4850      	ldr	r0, [pc, #320]	; (80169b8 <_svfiprintf_r+0x1dc>)
 8016878:	f7ed fd2a 	bl	80042d0 <memchr>
 801687c:	9b04      	ldr	r3, [sp, #16]
 801687e:	b9d0      	cbnz	r0, 80168b6 <_svfiprintf_r+0xda>
 8016880:	06d9      	lsls	r1, r3, #27
 8016882:	bf44      	itt	mi
 8016884:	2220      	movmi	r2, #32
 8016886:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801688a:	071a      	lsls	r2, r3, #28
 801688c:	bf44      	itt	mi
 801688e:	222b      	movmi	r2, #43	; 0x2b
 8016890:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016894:	782a      	ldrb	r2, [r5, #0]
 8016896:	2a2a      	cmp	r2, #42	; 0x2a
 8016898:	d015      	beq.n	80168c6 <_svfiprintf_r+0xea>
 801689a:	9a07      	ldr	r2, [sp, #28]
 801689c:	462f      	mov	r7, r5
 801689e:	2000      	movs	r0, #0
 80168a0:	250a      	movs	r5, #10
 80168a2:	4639      	mov	r1, r7
 80168a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80168a8:	3b30      	subs	r3, #48	; 0x30
 80168aa:	2b09      	cmp	r3, #9
 80168ac:	d94d      	bls.n	801694a <_svfiprintf_r+0x16e>
 80168ae:	b1b8      	cbz	r0, 80168e0 <_svfiprintf_r+0x104>
 80168b0:	e00f      	b.n	80168d2 <_svfiprintf_r+0xf6>
 80168b2:	462f      	mov	r7, r5
 80168b4:	e7b8      	b.n	8016828 <_svfiprintf_r+0x4c>
 80168b6:	4a40      	ldr	r2, [pc, #256]	; (80169b8 <_svfiprintf_r+0x1dc>)
 80168b8:	1a80      	subs	r0, r0, r2
 80168ba:	fa0b f000 	lsl.w	r0, fp, r0
 80168be:	4318      	orrs	r0, r3
 80168c0:	9004      	str	r0, [sp, #16]
 80168c2:	463d      	mov	r5, r7
 80168c4:	e7d3      	b.n	801686e <_svfiprintf_r+0x92>
 80168c6:	9a03      	ldr	r2, [sp, #12]
 80168c8:	1d11      	adds	r1, r2, #4
 80168ca:	6812      	ldr	r2, [r2, #0]
 80168cc:	9103      	str	r1, [sp, #12]
 80168ce:	2a00      	cmp	r2, #0
 80168d0:	db01      	blt.n	80168d6 <_svfiprintf_r+0xfa>
 80168d2:	9207      	str	r2, [sp, #28]
 80168d4:	e004      	b.n	80168e0 <_svfiprintf_r+0x104>
 80168d6:	4252      	negs	r2, r2
 80168d8:	f043 0302 	orr.w	r3, r3, #2
 80168dc:	9207      	str	r2, [sp, #28]
 80168de:	9304      	str	r3, [sp, #16]
 80168e0:	783b      	ldrb	r3, [r7, #0]
 80168e2:	2b2e      	cmp	r3, #46	; 0x2e
 80168e4:	d10c      	bne.n	8016900 <_svfiprintf_r+0x124>
 80168e6:	787b      	ldrb	r3, [r7, #1]
 80168e8:	2b2a      	cmp	r3, #42	; 0x2a
 80168ea:	d133      	bne.n	8016954 <_svfiprintf_r+0x178>
 80168ec:	9b03      	ldr	r3, [sp, #12]
 80168ee:	1d1a      	adds	r2, r3, #4
 80168f0:	681b      	ldr	r3, [r3, #0]
 80168f2:	9203      	str	r2, [sp, #12]
 80168f4:	2b00      	cmp	r3, #0
 80168f6:	bfb8      	it	lt
 80168f8:	f04f 33ff 	movlt.w	r3, #4294967295
 80168fc:	3702      	adds	r7, #2
 80168fe:	9305      	str	r3, [sp, #20]
 8016900:	4d2e      	ldr	r5, [pc, #184]	; (80169bc <_svfiprintf_r+0x1e0>)
 8016902:	7839      	ldrb	r1, [r7, #0]
 8016904:	2203      	movs	r2, #3
 8016906:	4628      	mov	r0, r5
 8016908:	f7ed fce2 	bl	80042d0 <memchr>
 801690c:	b138      	cbz	r0, 801691e <_svfiprintf_r+0x142>
 801690e:	2340      	movs	r3, #64	; 0x40
 8016910:	1b40      	subs	r0, r0, r5
 8016912:	fa03 f000 	lsl.w	r0, r3, r0
 8016916:	9b04      	ldr	r3, [sp, #16]
 8016918:	4303      	orrs	r3, r0
 801691a:	3701      	adds	r7, #1
 801691c:	9304      	str	r3, [sp, #16]
 801691e:	7839      	ldrb	r1, [r7, #0]
 8016920:	4827      	ldr	r0, [pc, #156]	; (80169c0 <_svfiprintf_r+0x1e4>)
 8016922:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016926:	2206      	movs	r2, #6
 8016928:	1c7e      	adds	r6, r7, #1
 801692a:	f7ed fcd1 	bl	80042d0 <memchr>
 801692e:	2800      	cmp	r0, #0
 8016930:	d038      	beq.n	80169a4 <_svfiprintf_r+0x1c8>
 8016932:	4b24      	ldr	r3, [pc, #144]	; (80169c4 <_svfiprintf_r+0x1e8>)
 8016934:	bb13      	cbnz	r3, 801697c <_svfiprintf_r+0x1a0>
 8016936:	9b03      	ldr	r3, [sp, #12]
 8016938:	3307      	adds	r3, #7
 801693a:	f023 0307 	bic.w	r3, r3, #7
 801693e:	3308      	adds	r3, #8
 8016940:	9303      	str	r3, [sp, #12]
 8016942:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016944:	444b      	add	r3, r9
 8016946:	9309      	str	r3, [sp, #36]	; 0x24
 8016948:	e76d      	b.n	8016826 <_svfiprintf_r+0x4a>
 801694a:	fb05 3202 	mla	r2, r5, r2, r3
 801694e:	2001      	movs	r0, #1
 8016950:	460f      	mov	r7, r1
 8016952:	e7a6      	b.n	80168a2 <_svfiprintf_r+0xc6>
 8016954:	2300      	movs	r3, #0
 8016956:	3701      	adds	r7, #1
 8016958:	9305      	str	r3, [sp, #20]
 801695a:	4619      	mov	r1, r3
 801695c:	250a      	movs	r5, #10
 801695e:	4638      	mov	r0, r7
 8016960:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016964:	3a30      	subs	r2, #48	; 0x30
 8016966:	2a09      	cmp	r2, #9
 8016968:	d903      	bls.n	8016972 <_svfiprintf_r+0x196>
 801696a:	2b00      	cmp	r3, #0
 801696c:	d0c8      	beq.n	8016900 <_svfiprintf_r+0x124>
 801696e:	9105      	str	r1, [sp, #20]
 8016970:	e7c6      	b.n	8016900 <_svfiprintf_r+0x124>
 8016972:	fb05 2101 	mla	r1, r5, r1, r2
 8016976:	2301      	movs	r3, #1
 8016978:	4607      	mov	r7, r0
 801697a:	e7f0      	b.n	801695e <_svfiprintf_r+0x182>
 801697c:	ab03      	add	r3, sp, #12
 801697e:	9300      	str	r3, [sp, #0]
 8016980:	4622      	mov	r2, r4
 8016982:	4b11      	ldr	r3, [pc, #68]	; (80169c8 <_svfiprintf_r+0x1ec>)
 8016984:	a904      	add	r1, sp, #16
 8016986:	4640      	mov	r0, r8
 8016988:	f3af 8000 	nop.w
 801698c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8016990:	4681      	mov	r9, r0
 8016992:	d1d6      	bne.n	8016942 <_svfiprintf_r+0x166>
 8016994:	89a3      	ldrh	r3, [r4, #12]
 8016996:	065b      	lsls	r3, r3, #25
 8016998:	f53f af35 	bmi.w	8016806 <_svfiprintf_r+0x2a>
 801699c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801699e:	b01d      	add	sp, #116	; 0x74
 80169a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80169a4:	ab03      	add	r3, sp, #12
 80169a6:	9300      	str	r3, [sp, #0]
 80169a8:	4622      	mov	r2, r4
 80169aa:	4b07      	ldr	r3, [pc, #28]	; (80169c8 <_svfiprintf_r+0x1ec>)
 80169ac:	a904      	add	r1, sp, #16
 80169ae:	4640      	mov	r0, r8
 80169b0:	f000 f9c2 	bl	8016d38 <_printf_i>
 80169b4:	e7ea      	b.n	801698c <_svfiprintf_r+0x1b0>
 80169b6:	bf00      	nop
 80169b8:	0802fa7e 	.word	0x0802fa7e
 80169bc:	0802fa84 	.word	0x0802fa84
 80169c0:	0802fa88 	.word	0x0802fa88
 80169c4:	00000000 	.word	0x00000000
 80169c8:	08016729 	.word	0x08016729

080169cc <__sfputc_r>:
 80169cc:	6893      	ldr	r3, [r2, #8]
 80169ce:	3b01      	subs	r3, #1
 80169d0:	2b00      	cmp	r3, #0
 80169d2:	b410      	push	{r4}
 80169d4:	6093      	str	r3, [r2, #8]
 80169d6:	da08      	bge.n	80169ea <__sfputc_r+0x1e>
 80169d8:	6994      	ldr	r4, [r2, #24]
 80169da:	42a3      	cmp	r3, r4
 80169dc:	db01      	blt.n	80169e2 <__sfputc_r+0x16>
 80169de:	290a      	cmp	r1, #10
 80169e0:	d103      	bne.n	80169ea <__sfputc_r+0x1e>
 80169e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80169e6:	f7ff bd2f 	b.w	8016448 <__swbuf_r>
 80169ea:	6813      	ldr	r3, [r2, #0]
 80169ec:	1c58      	adds	r0, r3, #1
 80169ee:	6010      	str	r0, [r2, #0]
 80169f0:	7019      	strb	r1, [r3, #0]
 80169f2:	4608      	mov	r0, r1
 80169f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80169f8:	4770      	bx	lr

080169fa <__sfputs_r>:
 80169fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80169fc:	4606      	mov	r6, r0
 80169fe:	460f      	mov	r7, r1
 8016a00:	4614      	mov	r4, r2
 8016a02:	18d5      	adds	r5, r2, r3
 8016a04:	42ac      	cmp	r4, r5
 8016a06:	d101      	bne.n	8016a0c <__sfputs_r+0x12>
 8016a08:	2000      	movs	r0, #0
 8016a0a:	e007      	b.n	8016a1c <__sfputs_r+0x22>
 8016a0c:	463a      	mov	r2, r7
 8016a0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016a12:	4630      	mov	r0, r6
 8016a14:	f7ff ffda 	bl	80169cc <__sfputc_r>
 8016a18:	1c43      	adds	r3, r0, #1
 8016a1a:	d1f3      	bne.n	8016a04 <__sfputs_r+0xa>
 8016a1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016a20 <_vfiprintf_r>:
 8016a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a24:	460c      	mov	r4, r1
 8016a26:	b09d      	sub	sp, #116	; 0x74
 8016a28:	4617      	mov	r7, r2
 8016a2a:	461d      	mov	r5, r3
 8016a2c:	4606      	mov	r6, r0
 8016a2e:	b118      	cbz	r0, 8016a38 <_vfiprintf_r+0x18>
 8016a30:	6983      	ldr	r3, [r0, #24]
 8016a32:	b90b      	cbnz	r3, 8016a38 <_vfiprintf_r+0x18>
 8016a34:	f7ff f9f4 	bl	8015e20 <__sinit>
 8016a38:	4b7c      	ldr	r3, [pc, #496]	; (8016c2c <_vfiprintf_r+0x20c>)
 8016a3a:	429c      	cmp	r4, r3
 8016a3c:	d158      	bne.n	8016af0 <_vfiprintf_r+0xd0>
 8016a3e:	6874      	ldr	r4, [r6, #4]
 8016a40:	89a3      	ldrh	r3, [r4, #12]
 8016a42:	0718      	lsls	r0, r3, #28
 8016a44:	d55e      	bpl.n	8016b04 <_vfiprintf_r+0xe4>
 8016a46:	6923      	ldr	r3, [r4, #16]
 8016a48:	2b00      	cmp	r3, #0
 8016a4a:	d05b      	beq.n	8016b04 <_vfiprintf_r+0xe4>
 8016a4c:	2300      	movs	r3, #0
 8016a4e:	9309      	str	r3, [sp, #36]	; 0x24
 8016a50:	2320      	movs	r3, #32
 8016a52:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016a56:	2330      	movs	r3, #48	; 0x30
 8016a58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016a5c:	9503      	str	r5, [sp, #12]
 8016a5e:	f04f 0b01 	mov.w	fp, #1
 8016a62:	46b8      	mov	r8, r7
 8016a64:	4645      	mov	r5, r8
 8016a66:	f815 3b01 	ldrb.w	r3, [r5], #1
 8016a6a:	b10b      	cbz	r3, 8016a70 <_vfiprintf_r+0x50>
 8016a6c:	2b25      	cmp	r3, #37	; 0x25
 8016a6e:	d154      	bne.n	8016b1a <_vfiprintf_r+0xfa>
 8016a70:	ebb8 0a07 	subs.w	sl, r8, r7
 8016a74:	d00b      	beq.n	8016a8e <_vfiprintf_r+0x6e>
 8016a76:	4653      	mov	r3, sl
 8016a78:	463a      	mov	r2, r7
 8016a7a:	4621      	mov	r1, r4
 8016a7c:	4630      	mov	r0, r6
 8016a7e:	f7ff ffbc 	bl	80169fa <__sfputs_r>
 8016a82:	3001      	adds	r0, #1
 8016a84:	f000 80c2 	beq.w	8016c0c <_vfiprintf_r+0x1ec>
 8016a88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016a8a:	4453      	add	r3, sl
 8016a8c:	9309      	str	r3, [sp, #36]	; 0x24
 8016a8e:	f898 3000 	ldrb.w	r3, [r8]
 8016a92:	2b00      	cmp	r3, #0
 8016a94:	f000 80ba 	beq.w	8016c0c <_vfiprintf_r+0x1ec>
 8016a98:	2300      	movs	r3, #0
 8016a9a:	f04f 32ff 	mov.w	r2, #4294967295
 8016a9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016aa2:	9304      	str	r3, [sp, #16]
 8016aa4:	9307      	str	r3, [sp, #28]
 8016aa6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016aaa:	931a      	str	r3, [sp, #104]	; 0x68
 8016aac:	46a8      	mov	r8, r5
 8016aae:	2205      	movs	r2, #5
 8016ab0:	f818 1b01 	ldrb.w	r1, [r8], #1
 8016ab4:	485e      	ldr	r0, [pc, #376]	; (8016c30 <_vfiprintf_r+0x210>)
 8016ab6:	f7ed fc0b 	bl	80042d0 <memchr>
 8016aba:	9b04      	ldr	r3, [sp, #16]
 8016abc:	bb78      	cbnz	r0, 8016b1e <_vfiprintf_r+0xfe>
 8016abe:	06d9      	lsls	r1, r3, #27
 8016ac0:	bf44      	itt	mi
 8016ac2:	2220      	movmi	r2, #32
 8016ac4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016ac8:	071a      	lsls	r2, r3, #28
 8016aca:	bf44      	itt	mi
 8016acc:	222b      	movmi	r2, #43	; 0x2b
 8016ace:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016ad2:	782a      	ldrb	r2, [r5, #0]
 8016ad4:	2a2a      	cmp	r2, #42	; 0x2a
 8016ad6:	d02a      	beq.n	8016b2e <_vfiprintf_r+0x10e>
 8016ad8:	9a07      	ldr	r2, [sp, #28]
 8016ada:	46a8      	mov	r8, r5
 8016adc:	2000      	movs	r0, #0
 8016ade:	250a      	movs	r5, #10
 8016ae0:	4641      	mov	r1, r8
 8016ae2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016ae6:	3b30      	subs	r3, #48	; 0x30
 8016ae8:	2b09      	cmp	r3, #9
 8016aea:	d969      	bls.n	8016bc0 <_vfiprintf_r+0x1a0>
 8016aec:	b360      	cbz	r0, 8016b48 <_vfiprintf_r+0x128>
 8016aee:	e024      	b.n	8016b3a <_vfiprintf_r+0x11a>
 8016af0:	4b50      	ldr	r3, [pc, #320]	; (8016c34 <_vfiprintf_r+0x214>)
 8016af2:	429c      	cmp	r4, r3
 8016af4:	d101      	bne.n	8016afa <_vfiprintf_r+0xda>
 8016af6:	68b4      	ldr	r4, [r6, #8]
 8016af8:	e7a2      	b.n	8016a40 <_vfiprintf_r+0x20>
 8016afa:	4b4f      	ldr	r3, [pc, #316]	; (8016c38 <_vfiprintf_r+0x218>)
 8016afc:	429c      	cmp	r4, r3
 8016afe:	bf08      	it	eq
 8016b00:	68f4      	ldreq	r4, [r6, #12]
 8016b02:	e79d      	b.n	8016a40 <_vfiprintf_r+0x20>
 8016b04:	4621      	mov	r1, r4
 8016b06:	4630      	mov	r0, r6
 8016b08:	f7ff fd02 	bl	8016510 <__swsetup_r>
 8016b0c:	2800      	cmp	r0, #0
 8016b0e:	d09d      	beq.n	8016a4c <_vfiprintf_r+0x2c>
 8016b10:	f04f 30ff 	mov.w	r0, #4294967295
 8016b14:	b01d      	add	sp, #116	; 0x74
 8016b16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b1a:	46a8      	mov	r8, r5
 8016b1c:	e7a2      	b.n	8016a64 <_vfiprintf_r+0x44>
 8016b1e:	4a44      	ldr	r2, [pc, #272]	; (8016c30 <_vfiprintf_r+0x210>)
 8016b20:	1a80      	subs	r0, r0, r2
 8016b22:	fa0b f000 	lsl.w	r0, fp, r0
 8016b26:	4318      	orrs	r0, r3
 8016b28:	9004      	str	r0, [sp, #16]
 8016b2a:	4645      	mov	r5, r8
 8016b2c:	e7be      	b.n	8016aac <_vfiprintf_r+0x8c>
 8016b2e:	9a03      	ldr	r2, [sp, #12]
 8016b30:	1d11      	adds	r1, r2, #4
 8016b32:	6812      	ldr	r2, [r2, #0]
 8016b34:	9103      	str	r1, [sp, #12]
 8016b36:	2a00      	cmp	r2, #0
 8016b38:	db01      	blt.n	8016b3e <_vfiprintf_r+0x11e>
 8016b3a:	9207      	str	r2, [sp, #28]
 8016b3c:	e004      	b.n	8016b48 <_vfiprintf_r+0x128>
 8016b3e:	4252      	negs	r2, r2
 8016b40:	f043 0302 	orr.w	r3, r3, #2
 8016b44:	9207      	str	r2, [sp, #28]
 8016b46:	9304      	str	r3, [sp, #16]
 8016b48:	f898 3000 	ldrb.w	r3, [r8]
 8016b4c:	2b2e      	cmp	r3, #46	; 0x2e
 8016b4e:	d10e      	bne.n	8016b6e <_vfiprintf_r+0x14e>
 8016b50:	f898 3001 	ldrb.w	r3, [r8, #1]
 8016b54:	2b2a      	cmp	r3, #42	; 0x2a
 8016b56:	d138      	bne.n	8016bca <_vfiprintf_r+0x1aa>
 8016b58:	9b03      	ldr	r3, [sp, #12]
 8016b5a:	1d1a      	adds	r2, r3, #4
 8016b5c:	681b      	ldr	r3, [r3, #0]
 8016b5e:	9203      	str	r2, [sp, #12]
 8016b60:	2b00      	cmp	r3, #0
 8016b62:	bfb8      	it	lt
 8016b64:	f04f 33ff 	movlt.w	r3, #4294967295
 8016b68:	f108 0802 	add.w	r8, r8, #2
 8016b6c:	9305      	str	r3, [sp, #20]
 8016b6e:	4d33      	ldr	r5, [pc, #204]	; (8016c3c <_vfiprintf_r+0x21c>)
 8016b70:	f898 1000 	ldrb.w	r1, [r8]
 8016b74:	2203      	movs	r2, #3
 8016b76:	4628      	mov	r0, r5
 8016b78:	f7ed fbaa 	bl	80042d0 <memchr>
 8016b7c:	b140      	cbz	r0, 8016b90 <_vfiprintf_r+0x170>
 8016b7e:	2340      	movs	r3, #64	; 0x40
 8016b80:	1b40      	subs	r0, r0, r5
 8016b82:	fa03 f000 	lsl.w	r0, r3, r0
 8016b86:	9b04      	ldr	r3, [sp, #16]
 8016b88:	4303      	orrs	r3, r0
 8016b8a:	f108 0801 	add.w	r8, r8, #1
 8016b8e:	9304      	str	r3, [sp, #16]
 8016b90:	f898 1000 	ldrb.w	r1, [r8]
 8016b94:	482a      	ldr	r0, [pc, #168]	; (8016c40 <_vfiprintf_r+0x220>)
 8016b96:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016b9a:	2206      	movs	r2, #6
 8016b9c:	f108 0701 	add.w	r7, r8, #1
 8016ba0:	f7ed fb96 	bl	80042d0 <memchr>
 8016ba4:	2800      	cmp	r0, #0
 8016ba6:	d037      	beq.n	8016c18 <_vfiprintf_r+0x1f8>
 8016ba8:	4b26      	ldr	r3, [pc, #152]	; (8016c44 <_vfiprintf_r+0x224>)
 8016baa:	bb1b      	cbnz	r3, 8016bf4 <_vfiprintf_r+0x1d4>
 8016bac:	9b03      	ldr	r3, [sp, #12]
 8016bae:	3307      	adds	r3, #7
 8016bb0:	f023 0307 	bic.w	r3, r3, #7
 8016bb4:	3308      	adds	r3, #8
 8016bb6:	9303      	str	r3, [sp, #12]
 8016bb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016bba:	444b      	add	r3, r9
 8016bbc:	9309      	str	r3, [sp, #36]	; 0x24
 8016bbe:	e750      	b.n	8016a62 <_vfiprintf_r+0x42>
 8016bc0:	fb05 3202 	mla	r2, r5, r2, r3
 8016bc4:	2001      	movs	r0, #1
 8016bc6:	4688      	mov	r8, r1
 8016bc8:	e78a      	b.n	8016ae0 <_vfiprintf_r+0xc0>
 8016bca:	2300      	movs	r3, #0
 8016bcc:	f108 0801 	add.w	r8, r8, #1
 8016bd0:	9305      	str	r3, [sp, #20]
 8016bd2:	4619      	mov	r1, r3
 8016bd4:	250a      	movs	r5, #10
 8016bd6:	4640      	mov	r0, r8
 8016bd8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016bdc:	3a30      	subs	r2, #48	; 0x30
 8016bde:	2a09      	cmp	r2, #9
 8016be0:	d903      	bls.n	8016bea <_vfiprintf_r+0x1ca>
 8016be2:	2b00      	cmp	r3, #0
 8016be4:	d0c3      	beq.n	8016b6e <_vfiprintf_r+0x14e>
 8016be6:	9105      	str	r1, [sp, #20]
 8016be8:	e7c1      	b.n	8016b6e <_vfiprintf_r+0x14e>
 8016bea:	fb05 2101 	mla	r1, r5, r1, r2
 8016bee:	2301      	movs	r3, #1
 8016bf0:	4680      	mov	r8, r0
 8016bf2:	e7f0      	b.n	8016bd6 <_vfiprintf_r+0x1b6>
 8016bf4:	ab03      	add	r3, sp, #12
 8016bf6:	9300      	str	r3, [sp, #0]
 8016bf8:	4622      	mov	r2, r4
 8016bfa:	4b13      	ldr	r3, [pc, #76]	; (8016c48 <_vfiprintf_r+0x228>)
 8016bfc:	a904      	add	r1, sp, #16
 8016bfe:	4630      	mov	r0, r6
 8016c00:	f3af 8000 	nop.w
 8016c04:	f1b0 3fff 	cmp.w	r0, #4294967295
 8016c08:	4681      	mov	r9, r0
 8016c0a:	d1d5      	bne.n	8016bb8 <_vfiprintf_r+0x198>
 8016c0c:	89a3      	ldrh	r3, [r4, #12]
 8016c0e:	065b      	lsls	r3, r3, #25
 8016c10:	f53f af7e 	bmi.w	8016b10 <_vfiprintf_r+0xf0>
 8016c14:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016c16:	e77d      	b.n	8016b14 <_vfiprintf_r+0xf4>
 8016c18:	ab03      	add	r3, sp, #12
 8016c1a:	9300      	str	r3, [sp, #0]
 8016c1c:	4622      	mov	r2, r4
 8016c1e:	4b0a      	ldr	r3, [pc, #40]	; (8016c48 <_vfiprintf_r+0x228>)
 8016c20:	a904      	add	r1, sp, #16
 8016c22:	4630      	mov	r0, r6
 8016c24:	f000 f888 	bl	8016d38 <_printf_i>
 8016c28:	e7ec      	b.n	8016c04 <_vfiprintf_r+0x1e4>
 8016c2a:	bf00      	nop
 8016c2c:	0802fa30 	.word	0x0802fa30
 8016c30:	0802fa7e 	.word	0x0802fa7e
 8016c34:	0802fa50 	.word	0x0802fa50
 8016c38:	0802fa10 	.word	0x0802fa10
 8016c3c:	0802fa84 	.word	0x0802fa84
 8016c40:	0802fa88 	.word	0x0802fa88
 8016c44:	00000000 	.word	0x00000000
 8016c48:	080169fb 	.word	0x080169fb

08016c4c <_printf_common>:
 8016c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016c50:	4691      	mov	r9, r2
 8016c52:	461f      	mov	r7, r3
 8016c54:	688a      	ldr	r2, [r1, #8]
 8016c56:	690b      	ldr	r3, [r1, #16]
 8016c58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8016c5c:	4293      	cmp	r3, r2
 8016c5e:	bfb8      	it	lt
 8016c60:	4613      	movlt	r3, r2
 8016c62:	f8c9 3000 	str.w	r3, [r9]
 8016c66:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8016c6a:	4606      	mov	r6, r0
 8016c6c:	460c      	mov	r4, r1
 8016c6e:	b112      	cbz	r2, 8016c76 <_printf_common+0x2a>
 8016c70:	3301      	adds	r3, #1
 8016c72:	f8c9 3000 	str.w	r3, [r9]
 8016c76:	6823      	ldr	r3, [r4, #0]
 8016c78:	0699      	lsls	r1, r3, #26
 8016c7a:	bf42      	ittt	mi
 8016c7c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8016c80:	3302      	addmi	r3, #2
 8016c82:	f8c9 3000 	strmi.w	r3, [r9]
 8016c86:	6825      	ldr	r5, [r4, #0]
 8016c88:	f015 0506 	ands.w	r5, r5, #6
 8016c8c:	d107      	bne.n	8016c9e <_printf_common+0x52>
 8016c8e:	f104 0a19 	add.w	sl, r4, #25
 8016c92:	68e3      	ldr	r3, [r4, #12]
 8016c94:	f8d9 2000 	ldr.w	r2, [r9]
 8016c98:	1a9b      	subs	r3, r3, r2
 8016c9a:	42ab      	cmp	r3, r5
 8016c9c:	dc28      	bgt.n	8016cf0 <_printf_common+0xa4>
 8016c9e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8016ca2:	6822      	ldr	r2, [r4, #0]
 8016ca4:	3300      	adds	r3, #0
 8016ca6:	bf18      	it	ne
 8016ca8:	2301      	movne	r3, #1
 8016caa:	0692      	lsls	r2, r2, #26
 8016cac:	d42d      	bmi.n	8016d0a <_printf_common+0xbe>
 8016cae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016cb2:	4639      	mov	r1, r7
 8016cb4:	4630      	mov	r0, r6
 8016cb6:	47c0      	blx	r8
 8016cb8:	3001      	adds	r0, #1
 8016cba:	d020      	beq.n	8016cfe <_printf_common+0xb2>
 8016cbc:	6823      	ldr	r3, [r4, #0]
 8016cbe:	68e5      	ldr	r5, [r4, #12]
 8016cc0:	f8d9 2000 	ldr.w	r2, [r9]
 8016cc4:	f003 0306 	and.w	r3, r3, #6
 8016cc8:	2b04      	cmp	r3, #4
 8016cca:	bf08      	it	eq
 8016ccc:	1aad      	subeq	r5, r5, r2
 8016cce:	68a3      	ldr	r3, [r4, #8]
 8016cd0:	6922      	ldr	r2, [r4, #16]
 8016cd2:	bf0c      	ite	eq
 8016cd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016cd8:	2500      	movne	r5, #0
 8016cda:	4293      	cmp	r3, r2
 8016cdc:	bfc4      	itt	gt
 8016cde:	1a9b      	subgt	r3, r3, r2
 8016ce0:	18ed      	addgt	r5, r5, r3
 8016ce2:	f04f 0900 	mov.w	r9, #0
 8016ce6:	341a      	adds	r4, #26
 8016ce8:	454d      	cmp	r5, r9
 8016cea:	d11a      	bne.n	8016d22 <_printf_common+0xd6>
 8016cec:	2000      	movs	r0, #0
 8016cee:	e008      	b.n	8016d02 <_printf_common+0xb6>
 8016cf0:	2301      	movs	r3, #1
 8016cf2:	4652      	mov	r2, sl
 8016cf4:	4639      	mov	r1, r7
 8016cf6:	4630      	mov	r0, r6
 8016cf8:	47c0      	blx	r8
 8016cfa:	3001      	adds	r0, #1
 8016cfc:	d103      	bne.n	8016d06 <_printf_common+0xba>
 8016cfe:	f04f 30ff 	mov.w	r0, #4294967295
 8016d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016d06:	3501      	adds	r5, #1
 8016d08:	e7c3      	b.n	8016c92 <_printf_common+0x46>
 8016d0a:	18e1      	adds	r1, r4, r3
 8016d0c:	1c5a      	adds	r2, r3, #1
 8016d0e:	2030      	movs	r0, #48	; 0x30
 8016d10:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8016d14:	4422      	add	r2, r4
 8016d16:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8016d1a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8016d1e:	3302      	adds	r3, #2
 8016d20:	e7c5      	b.n	8016cae <_printf_common+0x62>
 8016d22:	2301      	movs	r3, #1
 8016d24:	4622      	mov	r2, r4
 8016d26:	4639      	mov	r1, r7
 8016d28:	4630      	mov	r0, r6
 8016d2a:	47c0      	blx	r8
 8016d2c:	3001      	adds	r0, #1
 8016d2e:	d0e6      	beq.n	8016cfe <_printf_common+0xb2>
 8016d30:	f109 0901 	add.w	r9, r9, #1
 8016d34:	e7d8      	b.n	8016ce8 <_printf_common+0x9c>
	...

08016d38 <_printf_i>:
 8016d38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016d3c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8016d40:	460c      	mov	r4, r1
 8016d42:	7e09      	ldrb	r1, [r1, #24]
 8016d44:	b085      	sub	sp, #20
 8016d46:	296e      	cmp	r1, #110	; 0x6e
 8016d48:	4617      	mov	r7, r2
 8016d4a:	4606      	mov	r6, r0
 8016d4c:	4698      	mov	r8, r3
 8016d4e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016d50:	f000 80b3 	beq.w	8016eba <_printf_i+0x182>
 8016d54:	d822      	bhi.n	8016d9c <_printf_i+0x64>
 8016d56:	2963      	cmp	r1, #99	; 0x63
 8016d58:	d036      	beq.n	8016dc8 <_printf_i+0x90>
 8016d5a:	d80a      	bhi.n	8016d72 <_printf_i+0x3a>
 8016d5c:	2900      	cmp	r1, #0
 8016d5e:	f000 80b9 	beq.w	8016ed4 <_printf_i+0x19c>
 8016d62:	2958      	cmp	r1, #88	; 0x58
 8016d64:	f000 8083 	beq.w	8016e6e <_printf_i+0x136>
 8016d68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016d6c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8016d70:	e032      	b.n	8016dd8 <_printf_i+0xa0>
 8016d72:	2964      	cmp	r1, #100	; 0x64
 8016d74:	d001      	beq.n	8016d7a <_printf_i+0x42>
 8016d76:	2969      	cmp	r1, #105	; 0x69
 8016d78:	d1f6      	bne.n	8016d68 <_printf_i+0x30>
 8016d7a:	6820      	ldr	r0, [r4, #0]
 8016d7c:	6813      	ldr	r3, [r2, #0]
 8016d7e:	0605      	lsls	r5, r0, #24
 8016d80:	f103 0104 	add.w	r1, r3, #4
 8016d84:	d52a      	bpl.n	8016ddc <_printf_i+0xa4>
 8016d86:	681b      	ldr	r3, [r3, #0]
 8016d88:	6011      	str	r1, [r2, #0]
 8016d8a:	2b00      	cmp	r3, #0
 8016d8c:	da03      	bge.n	8016d96 <_printf_i+0x5e>
 8016d8e:	222d      	movs	r2, #45	; 0x2d
 8016d90:	425b      	negs	r3, r3
 8016d92:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8016d96:	486f      	ldr	r0, [pc, #444]	; (8016f54 <_printf_i+0x21c>)
 8016d98:	220a      	movs	r2, #10
 8016d9a:	e039      	b.n	8016e10 <_printf_i+0xd8>
 8016d9c:	2973      	cmp	r1, #115	; 0x73
 8016d9e:	f000 809d 	beq.w	8016edc <_printf_i+0x1a4>
 8016da2:	d808      	bhi.n	8016db6 <_printf_i+0x7e>
 8016da4:	296f      	cmp	r1, #111	; 0x6f
 8016da6:	d020      	beq.n	8016dea <_printf_i+0xb2>
 8016da8:	2970      	cmp	r1, #112	; 0x70
 8016daa:	d1dd      	bne.n	8016d68 <_printf_i+0x30>
 8016dac:	6823      	ldr	r3, [r4, #0]
 8016dae:	f043 0320 	orr.w	r3, r3, #32
 8016db2:	6023      	str	r3, [r4, #0]
 8016db4:	e003      	b.n	8016dbe <_printf_i+0x86>
 8016db6:	2975      	cmp	r1, #117	; 0x75
 8016db8:	d017      	beq.n	8016dea <_printf_i+0xb2>
 8016dba:	2978      	cmp	r1, #120	; 0x78
 8016dbc:	d1d4      	bne.n	8016d68 <_printf_i+0x30>
 8016dbe:	2378      	movs	r3, #120	; 0x78
 8016dc0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8016dc4:	4864      	ldr	r0, [pc, #400]	; (8016f58 <_printf_i+0x220>)
 8016dc6:	e055      	b.n	8016e74 <_printf_i+0x13c>
 8016dc8:	6813      	ldr	r3, [r2, #0]
 8016dca:	1d19      	adds	r1, r3, #4
 8016dcc:	681b      	ldr	r3, [r3, #0]
 8016dce:	6011      	str	r1, [r2, #0]
 8016dd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016dd4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016dd8:	2301      	movs	r3, #1
 8016dda:	e08c      	b.n	8016ef6 <_printf_i+0x1be>
 8016ddc:	681b      	ldr	r3, [r3, #0]
 8016dde:	6011      	str	r1, [r2, #0]
 8016de0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8016de4:	bf18      	it	ne
 8016de6:	b21b      	sxthne	r3, r3
 8016de8:	e7cf      	b.n	8016d8a <_printf_i+0x52>
 8016dea:	6813      	ldr	r3, [r2, #0]
 8016dec:	6825      	ldr	r5, [r4, #0]
 8016dee:	1d18      	adds	r0, r3, #4
 8016df0:	6010      	str	r0, [r2, #0]
 8016df2:	0628      	lsls	r0, r5, #24
 8016df4:	d501      	bpl.n	8016dfa <_printf_i+0xc2>
 8016df6:	681b      	ldr	r3, [r3, #0]
 8016df8:	e002      	b.n	8016e00 <_printf_i+0xc8>
 8016dfa:	0668      	lsls	r0, r5, #25
 8016dfc:	d5fb      	bpl.n	8016df6 <_printf_i+0xbe>
 8016dfe:	881b      	ldrh	r3, [r3, #0]
 8016e00:	4854      	ldr	r0, [pc, #336]	; (8016f54 <_printf_i+0x21c>)
 8016e02:	296f      	cmp	r1, #111	; 0x6f
 8016e04:	bf14      	ite	ne
 8016e06:	220a      	movne	r2, #10
 8016e08:	2208      	moveq	r2, #8
 8016e0a:	2100      	movs	r1, #0
 8016e0c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8016e10:	6865      	ldr	r5, [r4, #4]
 8016e12:	60a5      	str	r5, [r4, #8]
 8016e14:	2d00      	cmp	r5, #0
 8016e16:	f2c0 8095 	blt.w	8016f44 <_printf_i+0x20c>
 8016e1a:	6821      	ldr	r1, [r4, #0]
 8016e1c:	f021 0104 	bic.w	r1, r1, #4
 8016e20:	6021      	str	r1, [r4, #0]
 8016e22:	2b00      	cmp	r3, #0
 8016e24:	d13d      	bne.n	8016ea2 <_printf_i+0x16a>
 8016e26:	2d00      	cmp	r5, #0
 8016e28:	f040 808e 	bne.w	8016f48 <_printf_i+0x210>
 8016e2c:	4665      	mov	r5, ip
 8016e2e:	2a08      	cmp	r2, #8
 8016e30:	d10b      	bne.n	8016e4a <_printf_i+0x112>
 8016e32:	6823      	ldr	r3, [r4, #0]
 8016e34:	07db      	lsls	r3, r3, #31
 8016e36:	d508      	bpl.n	8016e4a <_printf_i+0x112>
 8016e38:	6923      	ldr	r3, [r4, #16]
 8016e3a:	6862      	ldr	r2, [r4, #4]
 8016e3c:	429a      	cmp	r2, r3
 8016e3e:	bfde      	ittt	le
 8016e40:	2330      	movle	r3, #48	; 0x30
 8016e42:	f805 3c01 	strble.w	r3, [r5, #-1]
 8016e46:	f105 35ff 	addle.w	r5, r5, #4294967295
 8016e4a:	ebac 0305 	sub.w	r3, ip, r5
 8016e4e:	6123      	str	r3, [r4, #16]
 8016e50:	f8cd 8000 	str.w	r8, [sp]
 8016e54:	463b      	mov	r3, r7
 8016e56:	aa03      	add	r2, sp, #12
 8016e58:	4621      	mov	r1, r4
 8016e5a:	4630      	mov	r0, r6
 8016e5c:	f7ff fef6 	bl	8016c4c <_printf_common>
 8016e60:	3001      	adds	r0, #1
 8016e62:	d14d      	bne.n	8016f00 <_printf_i+0x1c8>
 8016e64:	f04f 30ff 	mov.w	r0, #4294967295
 8016e68:	b005      	add	sp, #20
 8016e6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016e6e:	4839      	ldr	r0, [pc, #228]	; (8016f54 <_printf_i+0x21c>)
 8016e70:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8016e74:	6813      	ldr	r3, [r2, #0]
 8016e76:	6821      	ldr	r1, [r4, #0]
 8016e78:	1d1d      	adds	r5, r3, #4
 8016e7a:	681b      	ldr	r3, [r3, #0]
 8016e7c:	6015      	str	r5, [r2, #0]
 8016e7e:	060a      	lsls	r2, r1, #24
 8016e80:	d50b      	bpl.n	8016e9a <_printf_i+0x162>
 8016e82:	07ca      	lsls	r2, r1, #31
 8016e84:	bf44      	itt	mi
 8016e86:	f041 0120 	orrmi.w	r1, r1, #32
 8016e8a:	6021      	strmi	r1, [r4, #0]
 8016e8c:	b91b      	cbnz	r3, 8016e96 <_printf_i+0x15e>
 8016e8e:	6822      	ldr	r2, [r4, #0]
 8016e90:	f022 0220 	bic.w	r2, r2, #32
 8016e94:	6022      	str	r2, [r4, #0]
 8016e96:	2210      	movs	r2, #16
 8016e98:	e7b7      	b.n	8016e0a <_printf_i+0xd2>
 8016e9a:	064d      	lsls	r5, r1, #25
 8016e9c:	bf48      	it	mi
 8016e9e:	b29b      	uxthmi	r3, r3
 8016ea0:	e7ef      	b.n	8016e82 <_printf_i+0x14a>
 8016ea2:	4665      	mov	r5, ip
 8016ea4:	fbb3 f1f2 	udiv	r1, r3, r2
 8016ea8:	fb02 3311 	mls	r3, r2, r1, r3
 8016eac:	5cc3      	ldrb	r3, [r0, r3]
 8016eae:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8016eb2:	460b      	mov	r3, r1
 8016eb4:	2900      	cmp	r1, #0
 8016eb6:	d1f5      	bne.n	8016ea4 <_printf_i+0x16c>
 8016eb8:	e7b9      	b.n	8016e2e <_printf_i+0xf6>
 8016eba:	6813      	ldr	r3, [r2, #0]
 8016ebc:	6825      	ldr	r5, [r4, #0]
 8016ebe:	6961      	ldr	r1, [r4, #20]
 8016ec0:	1d18      	adds	r0, r3, #4
 8016ec2:	6010      	str	r0, [r2, #0]
 8016ec4:	0628      	lsls	r0, r5, #24
 8016ec6:	681b      	ldr	r3, [r3, #0]
 8016ec8:	d501      	bpl.n	8016ece <_printf_i+0x196>
 8016eca:	6019      	str	r1, [r3, #0]
 8016ecc:	e002      	b.n	8016ed4 <_printf_i+0x19c>
 8016ece:	066a      	lsls	r2, r5, #25
 8016ed0:	d5fb      	bpl.n	8016eca <_printf_i+0x192>
 8016ed2:	8019      	strh	r1, [r3, #0]
 8016ed4:	2300      	movs	r3, #0
 8016ed6:	6123      	str	r3, [r4, #16]
 8016ed8:	4665      	mov	r5, ip
 8016eda:	e7b9      	b.n	8016e50 <_printf_i+0x118>
 8016edc:	6813      	ldr	r3, [r2, #0]
 8016ede:	1d19      	adds	r1, r3, #4
 8016ee0:	6011      	str	r1, [r2, #0]
 8016ee2:	681d      	ldr	r5, [r3, #0]
 8016ee4:	6862      	ldr	r2, [r4, #4]
 8016ee6:	2100      	movs	r1, #0
 8016ee8:	4628      	mov	r0, r5
 8016eea:	f7ed f9f1 	bl	80042d0 <memchr>
 8016eee:	b108      	cbz	r0, 8016ef4 <_printf_i+0x1bc>
 8016ef0:	1b40      	subs	r0, r0, r5
 8016ef2:	6060      	str	r0, [r4, #4]
 8016ef4:	6863      	ldr	r3, [r4, #4]
 8016ef6:	6123      	str	r3, [r4, #16]
 8016ef8:	2300      	movs	r3, #0
 8016efa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016efe:	e7a7      	b.n	8016e50 <_printf_i+0x118>
 8016f00:	6923      	ldr	r3, [r4, #16]
 8016f02:	462a      	mov	r2, r5
 8016f04:	4639      	mov	r1, r7
 8016f06:	4630      	mov	r0, r6
 8016f08:	47c0      	blx	r8
 8016f0a:	3001      	adds	r0, #1
 8016f0c:	d0aa      	beq.n	8016e64 <_printf_i+0x12c>
 8016f0e:	6823      	ldr	r3, [r4, #0]
 8016f10:	079b      	lsls	r3, r3, #30
 8016f12:	d413      	bmi.n	8016f3c <_printf_i+0x204>
 8016f14:	68e0      	ldr	r0, [r4, #12]
 8016f16:	9b03      	ldr	r3, [sp, #12]
 8016f18:	4298      	cmp	r0, r3
 8016f1a:	bfb8      	it	lt
 8016f1c:	4618      	movlt	r0, r3
 8016f1e:	e7a3      	b.n	8016e68 <_printf_i+0x130>
 8016f20:	2301      	movs	r3, #1
 8016f22:	464a      	mov	r2, r9
 8016f24:	4639      	mov	r1, r7
 8016f26:	4630      	mov	r0, r6
 8016f28:	47c0      	blx	r8
 8016f2a:	3001      	adds	r0, #1
 8016f2c:	d09a      	beq.n	8016e64 <_printf_i+0x12c>
 8016f2e:	3501      	adds	r5, #1
 8016f30:	68e3      	ldr	r3, [r4, #12]
 8016f32:	9a03      	ldr	r2, [sp, #12]
 8016f34:	1a9b      	subs	r3, r3, r2
 8016f36:	42ab      	cmp	r3, r5
 8016f38:	dcf2      	bgt.n	8016f20 <_printf_i+0x1e8>
 8016f3a:	e7eb      	b.n	8016f14 <_printf_i+0x1dc>
 8016f3c:	2500      	movs	r5, #0
 8016f3e:	f104 0919 	add.w	r9, r4, #25
 8016f42:	e7f5      	b.n	8016f30 <_printf_i+0x1f8>
 8016f44:	2b00      	cmp	r3, #0
 8016f46:	d1ac      	bne.n	8016ea2 <_printf_i+0x16a>
 8016f48:	7803      	ldrb	r3, [r0, #0]
 8016f4a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016f4e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016f52:	e76c      	b.n	8016e2e <_printf_i+0xf6>
 8016f54:	0802fa8f 	.word	0x0802fa8f
 8016f58:	0802faa0 	.word	0x0802faa0

08016f5c <_read_r>:
 8016f5c:	b538      	push	{r3, r4, r5, lr}
 8016f5e:	4c07      	ldr	r4, [pc, #28]	; (8016f7c <_read_r+0x20>)
 8016f60:	4605      	mov	r5, r0
 8016f62:	4608      	mov	r0, r1
 8016f64:	4611      	mov	r1, r2
 8016f66:	2200      	movs	r2, #0
 8016f68:	6022      	str	r2, [r4, #0]
 8016f6a:	461a      	mov	r2, r3
 8016f6c:	f7f5 febe 	bl	800ccec <_read>
 8016f70:	1c43      	adds	r3, r0, #1
 8016f72:	d102      	bne.n	8016f7a <_read_r+0x1e>
 8016f74:	6823      	ldr	r3, [r4, #0]
 8016f76:	b103      	cbz	r3, 8016f7a <_read_r+0x1e>
 8016f78:	602b      	str	r3, [r5, #0]
 8016f7a:	bd38      	pop	{r3, r4, r5, pc}
 8016f7c:	2001276c 	.word	0x2001276c

08016f80 <__ascii_wctomb>:
 8016f80:	b149      	cbz	r1, 8016f96 <__ascii_wctomb+0x16>
 8016f82:	2aff      	cmp	r2, #255	; 0xff
 8016f84:	bf85      	ittet	hi
 8016f86:	238a      	movhi	r3, #138	; 0x8a
 8016f88:	6003      	strhi	r3, [r0, #0]
 8016f8a:	700a      	strbls	r2, [r1, #0]
 8016f8c:	f04f 30ff 	movhi.w	r0, #4294967295
 8016f90:	bf98      	it	ls
 8016f92:	2001      	movls	r0, #1
 8016f94:	4770      	bx	lr
 8016f96:	4608      	mov	r0, r1
 8016f98:	4770      	bx	lr
	...

08016f9c <_fstat_r>:
 8016f9c:	b538      	push	{r3, r4, r5, lr}
 8016f9e:	4c07      	ldr	r4, [pc, #28]	; (8016fbc <_fstat_r+0x20>)
 8016fa0:	2300      	movs	r3, #0
 8016fa2:	4605      	mov	r5, r0
 8016fa4:	4608      	mov	r0, r1
 8016fa6:	4611      	mov	r1, r2
 8016fa8:	6023      	str	r3, [r4, #0]
 8016faa:	f7f5 fe96 	bl	800ccda <_fstat>
 8016fae:	1c43      	adds	r3, r0, #1
 8016fb0:	d102      	bne.n	8016fb8 <_fstat_r+0x1c>
 8016fb2:	6823      	ldr	r3, [r4, #0]
 8016fb4:	b103      	cbz	r3, 8016fb8 <_fstat_r+0x1c>
 8016fb6:	602b      	str	r3, [r5, #0]
 8016fb8:	bd38      	pop	{r3, r4, r5, pc}
 8016fba:	bf00      	nop
 8016fbc:	2001276c 	.word	0x2001276c

08016fc0 <_isatty_r>:
 8016fc0:	b538      	push	{r3, r4, r5, lr}
 8016fc2:	4c06      	ldr	r4, [pc, #24]	; (8016fdc <_isatty_r+0x1c>)
 8016fc4:	2300      	movs	r3, #0
 8016fc6:	4605      	mov	r5, r0
 8016fc8:	4608      	mov	r0, r1
 8016fca:	6023      	str	r3, [r4, #0]
 8016fcc:	f7f5 fe8a 	bl	800cce4 <_isatty>
 8016fd0:	1c43      	adds	r3, r0, #1
 8016fd2:	d102      	bne.n	8016fda <_isatty_r+0x1a>
 8016fd4:	6823      	ldr	r3, [r4, #0]
 8016fd6:	b103      	cbz	r3, 8016fda <_isatty_r+0x1a>
 8016fd8:	602b      	str	r3, [r5, #0]
 8016fda:	bd38      	pop	{r3, r4, r5, pc}
 8016fdc:	2001276c 	.word	0x2001276c

08016fe0 <memmove>:
 8016fe0:	4288      	cmp	r0, r1
 8016fe2:	b510      	push	{r4, lr}
 8016fe4:	eb01 0302 	add.w	r3, r1, r2
 8016fe8:	d807      	bhi.n	8016ffa <memmove+0x1a>
 8016fea:	1e42      	subs	r2, r0, #1
 8016fec:	4299      	cmp	r1, r3
 8016fee:	d00a      	beq.n	8017006 <memmove+0x26>
 8016ff0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016ff4:	f802 4f01 	strb.w	r4, [r2, #1]!
 8016ff8:	e7f8      	b.n	8016fec <memmove+0xc>
 8016ffa:	4283      	cmp	r3, r0
 8016ffc:	d9f5      	bls.n	8016fea <memmove+0xa>
 8016ffe:	1881      	adds	r1, r0, r2
 8017000:	1ad2      	subs	r2, r2, r3
 8017002:	42d3      	cmn	r3, r2
 8017004:	d100      	bne.n	8017008 <memmove+0x28>
 8017006:	bd10      	pop	{r4, pc}
 8017008:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801700c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8017010:	e7f7      	b.n	8017002 <memmove+0x22>

08017012 <_realloc_r>:
 8017012:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017014:	4607      	mov	r7, r0
 8017016:	4614      	mov	r4, r2
 8017018:	460e      	mov	r6, r1
 801701a:	b921      	cbnz	r1, 8017026 <_realloc_r+0x14>
 801701c:	4611      	mov	r1, r2
 801701e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8017022:	f7ff b81d 	b.w	8016060 <_malloc_r>
 8017026:	b922      	cbnz	r2, 8017032 <_realloc_r+0x20>
 8017028:	f7fe ffcc 	bl	8015fc4 <_free_r>
 801702c:	4625      	mov	r5, r4
 801702e:	4628      	mov	r0, r5
 8017030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017032:	f000 f814 	bl	801705e <_malloc_usable_size_r>
 8017036:	42a0      	cmp	r0, r4
 8017038:	d20f      	bcs.n	801705a <_realloc_r+0x48>
 801703a:	4621      	mov	r1, r4
 801703c:	4638      	mov	r0, r7
 801703e:	f7ff f80f 	bl	8016060 <_malloc_r>
 8017042:	4605      	mov	r5, r0
 8017044:	2800      	cmp	r0, #0
 8017046:	d0f2      	beq.n	801702e <_realloc_r+0x1c>
 8017048:	4631      	mov	r1, r6
 801704a:	4622      	mov	r2, r4
 801704c:	f7fe ffa6 	bl	8015f9c <memcpy>
 8017050:	4631      	mov	r1, r6
 8017052:	4638      	mov	r0, r7
 8017054:	f7fe ffb6 	bl	8015fc4 <_free_r>
 8017058:	e7e9      	b.n	801702e <_realloc_r+0x1c>
 801705a:	4635      	mov	r5, r6
 801705c:	e7e7      	b.n	801702e <_realloc_r+0x1c>

0801705e <_malloc_usable_size_r>:
 801705e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017062:	1f18      	subs	r0, r3, #4
 8017064:	2b00      	cmp	r3, #0
 8017066:	bfbc      	itt	lt
 8017068:	580b      	ldrlt	r3, [r1, r0]
 801706a:	18c0      	addlt	r0, r0, r3
 801706c:	4770      	bx	lr
	...

08017070 <roundf>:
 8017070:	ee10 0a10 	vmov	r0, s0
 8017074:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8017078:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 801707c:	2a16      	cmp	r2, #22
 801707e:	dc15      	bgt.n	80170ac <roundf+0x3c>
 8017080:	2a00      	cmp	r2, #0
 8017082:	da08      	bge.n	8017096 <roundf+0x26>
 8017084:	3201      	adds	r2, #1
 8017086:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 801708a:	d101      	bne.n	8017090 <roundf+0x20>
 801708c:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8017090:	ee00 3a10 	vmov	s0, r3
 8017094:	4770      	bx	lr
 8017096:	4908      	ldr	r1, [pc, #32]	; (80170b8 <roundf+0x48>)
 8017098:	4111      	asrs	r1, r2
 801709a:	4208      	tst	r0, r1
 801709c:	d0fa      	beq.n	8017094 <roundf+0x24>
 801709e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80170a2:	4113      	asrs	r3, r2
 80170a4:	4403      	add	r3, r0
 80170a6:	ea23 0301 	bic.w	r3, r3, r1
 80170aa:	e7f1      	b.n	8017090 <roundf+0x20>
 80170ac:	2a80      	cmp	r2, #128	; 0x80
 80170ae:	d1f1      	bne.n	8017094 <roundf+0x24>
 80170b0:	ee30 0a00 	vadd.f32	s0, s0, s0
 80170b4:	4770      	bx	lr
 80170b6:	bf00      	nop
 80170b8:	007fffff 	.word	0x007fffff
 80170bc:	00000000 	.word	0x00000000

080170c0 <exp>:
 80170c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80170c2:	ed2d 8b02 	vpush	{d8}
 80170c6:	4e38      	ldr	r6, [pc, #224]	; (80171a8 <exp+0xe8>)
 80170c8:	b08b      	sub	sp, #44	; 0x2c
 80170ca:	ec55 4b10 	vmov	r4, r5, d0
 80170ce:	f000 fc0f 	bl	80178f0 <__ieee754_exp>
 80170d2:	f996 3000 	ldrsb.w	r3, [r6]
 80170d6:	eeb0 8a40 	vmov.f32	s16, s0
 80170da:	eef0 8a60 	vmov.f32	s17, s1
 80170de:	3301      	adds	r3, #1
 80170e0:	d02c      	beq.n	801713c <exp+0x7c>
 80170e2:	ec45 4b10 	vmov	d0, r4, r5
 80170e6:	f001 fe53 	bl	8018d90 <finite>
 80170ea:	b338      	cbz	r0, 801713c <exp+0x7c>
 80170ec:	a32a      	add	r3, pc, #168	; (adr r3, 8017198 <exp+0xd8>)
 80170ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80170f2:	4620      	mov	r0, r4
 80170f4:	4629      	mov	r1, r5
 80170f6:	f7ed fd87 	bl	8004c08 <__aeabi_dcmpgt>
 80170fa:	4607      	mov	r7, r0
 80170fc:	2800      	cmp	r0, #0
 80170fe:	d030      	beq.n	8017162 <exp+0xa2>
 8017100:	2303      	movs	r3, #3
 8017102:	9300      	str	r3, [sp, #0]
 8017104:	4b29      	ldr	r3, [pc, #164]	; (80171ac <exp+0xec>)
 8017106:	9301      	str	r3, [sp, #4]
 8017108:	2300      	movs	r3, #0
 801710a:	9308      	str	r3, [sp, #32]
 801710c:	f996 3000 	ldrsb.w	r3, [r6]
 8017110:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8017114:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8017118:	b9c3      	cbnz	r3, 801714c <exp+0x8c>
 801711a:	4b25      	ldr	r3, [pc, #148]	; (80171b0 <exp+0xf0>)
 801711c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8017120:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8017124:	4668      	mov	r0, sp
 8017126:	f001 fe3b 	bl	8018da0 <matherr>
 801712a:	b1a8      	cbz	r0, 8017158 <exp+0x98>
 801712c:	9b08      	ldr	r3, [sp, #32]
 801712e:	b11b      	cbz	r3, 8017138 <exp+0x78>
 8017130:	f7fe fd80 	bl	8015c34 <__errno>
 8017134:	9b08      	ldr	r3, [sp, #32]
 8017136:	6003      	str	r3, [r0, #0]
 8017138:	ed9d 8b06 	vldr	d8, [sp, #24]
 801713c:	eeb0 0a48 	vmov.f32	s0, s16
 8017140:	eef0 0a68 	vmov.f32	s1, s17
 8017144:	b00b      	add	sp, #44	; 0x2c
 8017146:	ecbd 8b02 	vpop	{d8}
 801714a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801714c:	4919      	ldr	r1, [pc, #100]	; (80171b4 <exp+0xf4>)
 801714e:	2000      	movs	r0, #0
 8017150:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8017154:	2b02      	cmp	r3, #2
 8017156:	d1e5      	bne.n	8017124 <exp+0x64>
 8017158:	f7fe fd6c 	bl	8015c34 <__errno>
 801715c:	2322      	movs	r3, #34	; 0x22
 801715e:	6003      	str	r3, [r0, #0]
 8017160:	e7e4      	b.n	801712c <exp+0x6c>
 8017162:	a30f      	add	r3, pc, #60	; (adr r3, 80171a0 <exp+0xe0>)
 8017164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017168:	4620      	mov	r0, r4
 801716a:	4629      	mov	r1, r5
 801716c:	f7ed fd2e 	bl	8004bcc <__aeabi_dcmplt>
 8017170:	2800      	cmp	r0, #0
 8017172:	d0e3      	beq.n	801713c <exp+0x7c>
 8017174:	2304      	movs	r3, #4
 8017176:	9300      	str	r3, [sp, #0]
 8017178:	4b0c      	ldr	r3, [pc, #48]	; (80171ac <exp+0xec>)
 801717a:	9301      	str	r3, [sp, #4]
 801717c:	2200      	movs	r2, #0
 801717e:	2300      	movs	r3, #0
 8017180:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8017184:	9708      	str	r7, [sp, #32]
 8017186:	e9cd 4504 	strd	r4, r5, [sp, #16]
 801718a:	e9cd 4502 	strd	r4, r5, [sp, #8]
 801718e:	f996 3000 	ldrsb.w	r3, [r6]
 8017192:	e7df      	b.n	8017154 <exp+0x94>
 8017194:	f3af 8000 	nop.w
 8017198:	fefa39ef 	.word	0xfefa39ef
 801719c:	40862e42 	.word	0x40862e42
 80171a0:	d52d3051 	.word	0xd52d3051
 80171a4:	c0874910 	.word	0xc0874910
 80171a8:	20000aa8 	.word	0x20000aa8
 80171ac:	0802fbb2 	.word	0x0802fbb2
 80171b0:	47efffff 	.word	0x47efffff
 80171b4:	7ff00000 	.word	0x7ff00000

080171b8 <pow>:
 80171b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80171bc:	ed2d 8b04 	vpush	{d8-d9}
 80171c0:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8017494 <pow+0x2dc>
 80171c4:	b08d      	sub	sp, #52	; 0x34
 80171c6:	ec57 6b10 	vmov	r6, r7, d0
 80171ca:	ec55 4b11 	vmov	r4, r5, d1
 80171ce:	f000 fcff 	bl	8017bd0 <__ieee754_pow>
 80171d2:	f999 3000 	ldrsb.w	r3, [r9]
 80171d6:	9300      	str	r3, [sp, #0]
 80171d8:	3301      	adds	r3, #1
 80171da:	eeb0 8a40 	vmov.f32	s16, s0
 80171de:	eef0 8a60 	vmov.f32	s17, s1
 80171e2:	46c8      	mov	r8, r9
 80171e4:	d05f      	beq.n	80172a6 <pow+0xee>
 80171e6:	4622      	mov	r2, r4
 80171e8:	462b      	mov	r3, r5
 80171ea:	4620      	mov	r0, r4
 80171ec:	4629      	mov	r1, r5
 80171ee:	f7ed fd15 	bl	8004c1c <__aeabi_dcmpun>
 80171f2:	4683      	mov	fp, r0
 80171f4:	2800      	cmp	r0, #0
 80171f6:	d156      	bne.n	80172a6 <pow+0xee>
 80171f8:	4632      	mov	r2, r6
 80171fa:	463b      	mov	r3, r7
 80171fc:	4630      	mov	r0, r6
 80171fe:	4639      	mov	r1, r7
 8017200:	f7ed fd0c 	bl	8004c1c <__aeabi_dcmpun>
 8017204:	9001      	str	r0, [sp, #4]
 8017206:	b1e8      	cbz	r0, 8017244 <pow+0x8c>
 8017208:	2200      	movs	r2, #0
 801720a:	2300      	movs	r3, #0
 801720c:	4620      	mov	r0, r4
 801720e:	4629      	mov	r1, r5
 8017210:	f7ed fcd2 	bl	8004bb8 <__aeabi_dcmpeq>
 8017214:	2800      	cmp	r0, #0
 8017216:	d046      	beq.n	80172a6 <pow+0xee>
 8017218:	2301      	movs	r3, #1
 801721a:	9302      	str	r3, [sp, #8]
 801721c:	4b96      	ldr	r3, [pc, #600]	; (8017478 <pow+0x2c0>)
 801721e:	9303      	str	r3, [sp, #12]
 8017220:	4b96      	ldr	r3, [pc, #600]	; (801747c <pow+0x2c4>)
 8017222:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8017226:	2200      	movs	r2, #0
 8017228:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801722c:	9b00      	ldr	r3, [sp, #0]
 801722e:	2b02      	cmp	r3, #2
 8017230:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8017234:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8017238:	d033      	beq.n	80172a2 <pow+0xea>
 801723a:	a802      	add	r0, sp, #8
 801723c:	f001 fdb0 	bl	8018da0 <matherr>
 8017240:	bb48      	cbnz	r0, 8017296 <pow+0xde>
 8017242:	e05d      	b.n	8017300 <pow+0x148>
 8017244:	f04f 0a00 	mov.w	sl, #0
 8017248:	f04f 0b00 	mov.w	fp, #0
 801724c:	4652      	mov	r2, sl
 801724e:	465b      	mov	r3, fp
 8017250:	4630      	mov	r0, r6
 8017252:	4639      	mov	r1, r7
 8017254:	f7ed fcb0 	bl	8004bb8 <__aeabi_dcmpeq>
 8017258:	ec4b ab19 	vmov	d9, sl, fp
 801725c:	2800      	cmp	r0, #0
 801725e:	d054      	beq.n	801730a <pow+0x152>
 8017260:	4652      	mov	r2, sl
 8017262:	465b      	mov	r3, fp
 8017264:	4620      	mov	r0, r4
 8017266:	4629      	mov	r1, r5
 8017268:	f7ed fca6 	bl	8004bb8 <__aeabi_dcmpeq>
 801726c:	4680      	mov	r8, r0
 801726e:	b318      	cbz	r0, 80172b8 <pow+0x100>
 8017270:	2301      	movs	r3, #1
 8017272:	9302      	str	r3, [sp, #8]
 8017274:	4b80      	ldr	r3, [pc, #512]	; (8017478 <pow+0x2c0>)
 8017276:	9303      	str	r3, [sp, #12]
 8017278:	9b01      	ldr	r3, [sp, #4]
 801727a:	930a      	str	r3, [sp, #40]	; 0x28
 801727c:	9b00      	ldr	r3, [sp, #0]
 801727e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8017282:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8017286:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801728a:	2b00      	cmp	r3, #0
 801728c:	d0d5      	beq.n	801723a <pow+0x82>
 801728e:	4b7b      	ldr	r3, [pc, #492]	; (801747c <pow+0x2c4>)
 8017290:	2200      	movs	r2, #0
 8017292:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8017296:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017298:	b11b      	cbz	r3, 80172a2 <pow+0xea>
 801729a:	f7fe fccb 	bl	8015c34 <__errno>
 801729e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80172a0:	6003      	str	r3, [r0, #0]
 80172a2:	ed9d 8b08 	vldr	d8, [sp, #32]
 80172a6:	eeb0 0a48 	vmov.f32	s0, s16
 80172aa:	eef0 0a68 	vmov.f32	s1, s17
 80172ae:	b00d      	add	sp, #52	; 0x34
 80172b0:	ecbd 8b04 	vpop	{d8-d9}
 80172b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80172b8:	ec45 4b10 	vmov	d0, r4, r5
 80172bc:	f001 fd68 	bl	8018d90 <finite>
 80172c0:	2800      	cmp	r0, #0
 80172c2:	d0f0      	beq.n	80172a6 <pow+0xee>
 80172c4:	4652      	mov	r2, sl
 80172c6:	465b      	mov	r3, fp
 80172c8:	4620      	mov	r0, r4
 80172ca:	4629      	mov	r1, r5
 80172cc:	f7ed fc7e 	bl	8004bcc <__aeabi_dcmplt>
 80172d0:	2800      	cmp	r0, #0
 80172d2:	d0e8      	beq.n	80172a6 <pow+0xee>
 80172d4:	2301      	movs	r3, #1
 80172d6:	9302      	str	r3, [sp, #8]
 80172d8:	4b67      	ldr	r3, [pc, #412]	; (8017478 <pow+0x2c0>)
 80172da:	9303      	str	r3, [sp, #12]
 80172dc:	f999 3000 	ldrsb.w	r3, [r9]
 80172e0:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 80172e4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80172e8:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80172ec:	b913      	cbnz	r3, 80172f4 <pow+0x13c>
 80172ee:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80172f2:	e7a2      	b.n	801723a <pow+0x82>
 80172f4:	4962      	ldr	r1, [pc, #392]	; (8017480 <pow+0x2c8>)
 80172f6:	2000      	movs	r0, #0
 80172f8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80172fc:	2b02      	cmp	r3, #2
 80172fe:	d19c      	bne.n	801723a <pow+0x82>
 8017300:	f7fe fc98 	bl	8015c34 <__errno>
 8017304:	2321      	movs	r3, #33	; 0x21
 8017306:	6003      	str	r3, [r0, #0]
 8017308:	e7c5      	b.n	8017296 <pow+0xde>
 801730a:	eeb0 0a48 	vmov.f32	s0, s16
 801730e:	eef0 0a68 	vmov.f32	s1, s17
 8017312:	f001 fd3d 	bl	8018d90 <finite>
 8017316:	9000      	str	r0, [sp, #0]
 8017318:	2800      	cmp	r0, #0
 801731a:	f040 8081 	bne.w	8017420 <pow+0x268>
 801731e:	ec47 6b10 	vmov	d0, r6, r7
 8017322:	f001 fd35 	bl	8018d90 <finite>
 8017326:	2800      	cmp	r0, #0
 8017328:	d07a      	beq.n	8017420 <pow+0x268>
 801732a:	ec45 4b10 	vmov	d0, r4, r5
 801732e:	f001 fd2f 	bl	8018d90 <finite>
 8017332:	2800      	cmp	r0, #0
 8017334:	d074      	beq.n	8017420 <pow+0x268>
 8017336:	ec53 2b18 	vmov	r2, r3, d8
 801733a:	ee18 0a10 	vmov	r0, s16
 801733e:	4619      	mov	r1, r3
 8017340:	f7ed fc6c 	bl	8004c1c <__aeabi_dcmpun>
 8017344:	f999 9000 	ldrsb.w	r9, [r9]
 8017348:	4b4b      	ldr	r3, [pc, #300]	; (8017478 <pow+0x2c0>)
 801734a:	b1b0      	cbz	r0, 801737a <pow+0x1c2>
 801734c:	2201      	movs	r2, #1
 801734e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8017352:	9b00      	ldr	r3, [sp, #0]
 8017354:	930a      	str	r3, [sp, #40]	; 0x28
 8017356:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801735a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801735e:	f1b9 0f00 	cmp.w	r9, #0
 8017362:	d0c4      	beq.n	80172ee <pow+0x136>
 8017364:	4652      	mov	r2, sl
 8017366:	465b      	mov	r3, fp
 8017368:	4650      	mov	r0, sl
 801736a:	4659      	mov	r1, fp
 801736c:	f7ed fae6 	bl	800493c <__aeabi_ddiv>
 8017370:	f1b9 0f02 	cmp.w	r9, #2
 8017374:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8017378:	e7c1      	b.n	80172fe <pow+0x146>
 801737a:	2203      	movs	r2, #3
 801737c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8017380:	900a      	str	r0, [sp, #40]	; 0x28
 8017382:	4629      	mov	r1, r5
 8017384:	4620      	mov	r0, r4
 8017386:	2200      	movs	r2, #0
 8017388:	4b3e      	ldr	r3, [pc, #248]	; (8017484 <pow+0x2cc>)
 801738a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801738e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8017392:	f7ed f9a9 	bl	80046e8 <__aeabi_dmul>
 8017396:	4604      	mov	r4, r0
 8017398:	460d      	mov	r5, r1
 801739a:	f1b9 0f00 	cmp.w	r9, #0
 801739e:	d124      	bne.n	80173ea <pow+0x232>
 80173a0:	4b39      	ldr	r3, [pc, #228]	; (8017488 <pow+0x2d0>)
 80173a2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80173a6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80173aa:	4630      	mov	r0, r6
 80173ac:	4652      	mov	r2, sl
 80173ae:	465b      	mov	r3, fp
 80173b0:	4639      	mov	r1, r7
 80173b2:	f7ed fc0b 	bl	8004bcc <__aeabi_dcmplt>
 80173b6:	2800      	cmp	r0, #0
 80173b8:	d056      	beq.n	8017468 <pow+0x2b0>
 80173ba:	ec45 4b10 	vmov	d0, r4, r5
 80173be:	f001 fcfb 	bl	8018db8 <rint>
 80173c2:	4622      	mov	r2, r4
 80173c4:	462b      	mov	r3, r5
 80173c6:	ec51 0b10 	vmov	r0, r1, d0
 80173ca:	f7ed fbf5 	bl	8004bb8 <__aeabi_dcmpeq>
 80173ce:	b920      	cbnz	r0, 80173da <pow+0x222>
 80173d0:	4b2e      	ldr	r3, [pc, #184]	; (801748c <pow+0x2d4>)
 80173d2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80173d6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80173da:	f998 3000 	ldrsb.w	r3, [r8]
 80173de:	2b02      	cmp	r3, #2
 80173e0:	d142      	bne.n	8017468 <pow+0x2b0>
 80173e2:	f7fe fc27 	bl	8015c34 <__errno>
 80173e6:	2322      	movs	r3, #34	; 0x22
 80173e8:	e78d      	b.n	8017306 <pow+0x14e>
 80173ea:	4b29      	ldr	r3, [pc, #164]	; (8017490 <pow+0x2d8>)
 80173ec:	2200      	movs	r2, #0
 80173ee:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80173f2:	4630      	mov	r0, r6
 80173f4:	4652      	mov	r2, sl
 80173f6:	465b      	mov	r3, fp
 80173f8:	4639      	mov	r1, r7
 80173fa:	f7ed fbe7 	bl	8004bcc <__aeabi_dcmplt>
 80173fe:	2800      	cmp	r0, #0
 8017400:	d0eb      	beq.n	80173da <pow+0x222>
 8017402:	ec45 4b10 	vmov	d0, r4, r5
 8017406:	f001 fcd7 	bl	8018db8 <rint>
 801740a:	4622      	mov	r2, r4
 801740c:	462b      	mov	r3, r5
 801740e:	ec51 0b10 	vmov	r0, r1, d0
 8017412:	f7ed fbd1 	bl	8004bb8 <__aeabi_dcmpeq>
 8017416:	2800      	cmp	r0, #0
 8017418:	d1df      	bne.n	80173da <pow+0x222>
 801741a:	2200      	movs	r2, #0
 801741c:	4b18      	ldr	r3, [pc, #96]	; (8017480 <pow+0x2c8>)
 801741e:	e7da      	b.n	80173d6 <pow+0x21e>
 8017420:	2200      	movs	r2, #0
 8017422:	2300      	movs	r3, #0
 8017424:	ec51 0b18 	vmov	r0, r1, d8
 8017428:	f7ed fbc6 	bl	8004bb8 <__aeabi_dcmpeq>
 801742c:	2800      	cmp	r0, #0
 801742e:	f43f af3a 	beq.w	80172a6 <pow+0xee>
 8017432:	ec47 6b10 	vmov	d0, r6, r7
 8017436:	f001 fcab 	bl	8018d90 <finite>
 801743a:	2800      	cmp	r0, #0
 801743c:	f43f af33 	beq.w	80172a6 <pow+0xee>
 8017440:	ec45 4b10 	vmov	d0, r4, r5
 8017444:	f001 fca4 	bl	8018d90 <finite>
 8017448:	2800      	cmp	r0, #0
 801744a:	f43f af2c 	beq.w	80172a6 <pow+0xee>
 801744e:	2304      	movs	r3, #4
 8017450:	9302      	str	r3, [sp, #8]
 8017452:	4b09      	ldr	r3, [pc, #36]	; (8017478 <pow+0x2c0>)
 8017454:	9303      	str	r3, [sp, #12]
 8017456:	2300      	movs	r3, #0
 8017458:	930a      	str	r3, [sp, #40]	; 0x28
 801745a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801745e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8017462:	ed8d 9b08 	vstr	d9, [sp, #32]
 8017466:	e7b8      	b.n	80173da <pow+0x222>
 8017468:	a802      	add	r0, sp, #8
 801746a:	f001 fc99 	bl	8018da0 <matherr>
 801746e:	2800      	cmp	r0, #0
 8017470:	f47f af11 	bne.w	8017296 <pow+0xde>
 8017474:	e7b5      	b.n	80173e2 <pow+0x22a>
 8017476:	bf00      	nop
 8017478:	0802fbb6 	.word	0x0802fbb6
 801747c:	3ff00000 	.word	0x3ff00000
 8017480:	fff00000 	.word	0xfff00000
 8017484:	3fe00000 	.word	0x3fe00000
 8017488:	47efffff 	.word	0x47efffff
 801748c:	c7efffff 	.word	0xc7efffff
 8017490:	7ff00000 	.word	0x7ff00000
 8017494:	20000aa8 	.word	0x20000aa8

08017498 <log10f>:
 8017498:	b510      	push	{r4, lr}
 801749a:	ed2d 8b02 	vpush	{d8}
 801749e:	b08a      	sub	sp, #40	; 0x28
 80174a0:	eeb0 8a40 	vmov.f32	s16, s0
 80174a4:	f001 f952 	bl	801874c <__ieee754_log10f>
 80174a8:	4b31      	ldr	r3, [pc, #196]	; (8017570 <log10f+0xd8>)
 80174aa:	f993 4000 	ldrsb.w	r4, [r3]
 80174ae:	1c63      	adds	r3, r4, #1
 80174b0:	d059      	beq.n	8017566 <log10f+0xce>
 80174b2:	eeb4 8a48 	vcmp.f32	s16, s16
 80174b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80174ba:	d654      	bvs.n	8017566 <log10f+0xce>
 80174bc:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80174c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80174c4:	d84f      	bhi.n	8017566 <log10f+0xce>
 80174c6:	4b2b      	ldr	r3, [pc, #172]	; (8017574 <log10f+0xdc>)
 80174c8:	9301      	str	r3, [sp, #4]
 80174ca:	ee18 0a10 	vmov	r0, s16
 80174ce:	2300      	movs	r3, #0
 80174d0:	9308      	str	r3, [sp, #32]
 80174d2:	f7ed f8b1 	bl	8004638 <__aeabi_f2d>
 80174d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80174da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80174de:	b994      	cbnz	r4, 8017506 <log10f+0x6e>
 80174e0:	4b25      	ldr	r3, [pc, #148]	; (8017578 <log10f+0xe0>)
 80174e2:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80174e6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80174ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80174ee:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80174f2:	d025      	beq.n	8017540 <log10f+0xa8>
 80174f4:	2301      	movs	r3, #1
 80174f6:	2c02      	cmp	r4, #2
 80174f8:	9300      	str	r3, [sp, #0]
 80174fa:	d116      	bne.n	801752a <log10f+0x92>
 80174fc:	f7fe fb9a 	bl	8015c34 <__errno>
 8017500:	2321      	movs	r3, #33	; 0x21
 8017502:	6003      	str	r3, [r0, #0]
 8017504:	e016      	b.n	8017534 <log10f+0x9c>
 8017506:	4b1d      	ldr	r3, [pc, #116]	; (801757c <log10f+0xe4>)
 8017508:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801750c:	2200      	movs	r2, #0
 801750e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017512:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8017516:	d1ed      	bne.n	80174f4 <log10f+0x5c>
 8017518:	2302      	movs	r3, #2
 801751a:	429c      	cmp	r4, r3
 801751c:	9300      	str	r3, [sp, #0]
 801751e:	d111      	bne.n	8017544 <log10f+0xac>
 8017520:	f7fe fb88 	bl	8015c34 <__errno>
 8017524:	2322      	movs	r3, #34	; 0x22
 8017526:	6003      	str	r3, [r0, #0]
 8017528:	e011      	b.n	801754e <log10f+0xb6>
 801752a:	4668      	mov	r0, sp
 801752c:	f001 fc38 	bl	8018da0 <matherr>
 8017530:	2800      	cmp	r0, #0
 8017532:	d0e3      	beq.n	80174fc <log10f+0x64>
 8017534:	4812      	ldr	r0, [pc, #72]	; (8017580 <log10f+0xe8>)
 8017536:	f001 fc37 	bl	8018da8 <nan>
 801753a:	ed8d 0b06 	vstr	d0, [sp, #24]
 801753e:	e006      	b.n	801754e <log10f+0xb6>
 8017540:	2302      	movs	r3, #2
 8017542:	9300      	str	r3, [sp, #0]
 8017544:	4668      	mov	r0, sp
 8017546:	f001 fc2b 	bl	8018da0 <matherr>
 801754a:	2800      	cmp	r0, #0
 801754c:	d0e8      	beq.n	8017520 <log10f+0x88>
 801754e:	9b08      	ldr	r3, [sp, #32]
 8017550:	b11b      	cbz	r3, 801755a <log10f+0xc2>
 8017552:	f7fe fb6f 	bl	8015c34 <__errno>
 8017556:	9b08      	ldr	r3, [sp, #32]
 8017558:	6003      	str	r3, [r0, #0]
 801755a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801755e:	f7ed fbbb 	bl	8004cd8 <__aeabi_d2f>
 8017562:	ee00 0a10 	vmov	s0, r0
 8017566:	b00a      	add	sp, #40	; 0x28
 8017568:	ecbd 8b02 	vpop	{d8}
 801756c:	bd10      	pop	{r4, pc}
 801756e:	bf00      	nop
 8017570:	20000aa8 	.word	0x20000aa8
 8017574:	0802fbba 	.word	0x0802fbba
 8017578:	c7efffff 	.word	0xc7efffff
 801757c:	fff00000 	.word	0xfff00000
 8017580:	0801b212 	.word	0x0801b212

08017584 <powf>:
 8017584:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8017588:	ed2d 8b04 	vpush	{d8-d9}
 801758c:	4ca7      	ldr	r4, [pc, #668]	; (801782c <powf+0x2a8>)
 801758e:	b08a      	sub	sp, #40	; 0x28
 8017590:	eef0 8a40 	vmov.f32	s17, s0
 8017594:	eeb0 8a60 	vmov.f32	s16, s1
 8017598:	f001 f92e 	bl	80187f8 <__ieee754_powf>
 801759c:	f994 5000 	ldrsb.w	r5, [r4]
 80175a0:	1c6b      	adds	r3, r5, #1
 80175a2:	eeb0 9a40 	vmov.f32	s18, s0
 80175a6:	4626      	mov	r6, r4
 80175a8:	d05f      	beq.n	801766a <powf+0xe6>
 80175aa:	eeb4 8a48 	vcmp.f32	s16, s16
 80175ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80175b2:	d65a      	bvs.n	801766a <powf+0xe6>
 80175b4:	eef4 8a68 	vcmp.f32	s17, s17
 80175b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80175bc:	d721      	bvc.n	8017602 <powf+0x7e>
 80175be:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80175c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80175c6:	d150      	bne.n	801766a <powf+0xe6>
 80175c8:	2301      	movs	r3, #1
 80175ca:	9300      	str	r3, [sp, #0]
 80175cc:	4b98      	ldr	r3, [pc, #608]	; (8017830 <powf+0x2ac>)
 80175ce:	9301      	str	r3, [sp, #4]
 80175d0:	ee18 0a90 	vmov	r0, s17
 80175d4:	2300      	movs	r3, #0
 80175d6:	9308      	str	r3, [sp, #32]
 80175d8:	f7ed f82e 	bl	8004638 <__aeabi_f2d>
 80175dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80175e0:	ee18 0a10 	vmov	r0, s16
 80175e4:	f7ed f828 	bl	8004638 <__aeabi_f2d>
 80175e8:	4b92      	ldr	r3, [pc, #584]	; (8017834 <powf+0x2b0>)
 80175ea:	2200      	movs	r2, #0
 80175ec:	2d02      	cmp	r5, #2
 80175ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80175f2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80175f6:	d032      	beq.n	801765e <powf+0xda>
 80175f8:	4668      	mov	r0, sp
 80175fa:	f001 fbd1 	bl	8018da0 <matherr>
 80175fe:	bb40      	cbnz	r0, 8017652 <powf+0xce>
 8017600:	e065      	b.n	80176ce <powf+0x14a>
 8017602:	eddf 9a8d 	vldr	s19, [pc, #564]	; 8017838 <powf+0x2b4>
 8017606:	eef4 8a69 	vcmp.f32	s17, s19
 801760a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801760e:	d163      	bne.n	80176d8 <powf+0x154>
 8017610:	eeb4 8a69 	vcmp.f32	s16, s19
 8017614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017618:	d12e      	bne.n	8017678 <powf+0xf4>
 801761a:	2301      	movs	r3, #1
 801761c:	9300      	str	r3, [sp, #0]
 801761e:	4b84      	ldr	r3, [pc, #528]	; (8017830 <powf+0x2ac>)
 8017620:	9301      	str	r3, [sp, #4]
 8017622:	ee18 0a90 	vmov	r0, s17
 8017626:	2300      	movs	r3, #0
 8017628:	9308      	str	r3, [sp, #32]
 801762a:	f7ed f805 	bl	8004638 <__aeabi_f2d>
 801762e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017632:	ee18 0a10 	vmov	r0, s16
 8017636:	f7ec ffff 	bl	8004638 <__aeabi_f2d>
 801763a:	2200      	movs	r2, #0
 801763c:	2300      	movs	r3, #0
 801763e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8017642:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8017646:	2d00      	cmp	r5, #0
 8017648:	d0d6      	beq.n	80175f8 <powf+0x74>
 801764a:	4b7a      	ldr	r3, [pc, #488]	; (8017834 <powf+0x2b0>)
 801764c:	2200      	movs	r2, #0
 801764e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8017652:	9b08      	ldr	r3, [sp, #32]
 8017654:	b11b      	cbz	r3, 801765e <powf+0xda>
 8017656:	f7fe faed 	bl	8015c34 <__errno>
 801765a:	9b08      	ldr	r3, [sp, #32]
 801765c:	6003      	str	r3, [r0, #0]
 801765e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8017662:	f7ed fb39 	bl	8004cd8 <__aeabi_d2f>
 8017666:	ee09 0a10 	vmov	s18, r0
 801766a:	eeb0 0a49 	vmov.f32	s0, s18
 801766e:	b00a      	add	sp, #40	; 0x28
 8017670:	ecbd 8b04 	vpop	{d8-d9}
 8017674:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8017678:	eeb0 0a48 	vmov.f32	s0, s16
 801767c:	f001 fc9d 	bl	8018fba <finitef>
 8017680:	2800      	cmp	r0, #0
 8017682:	d0f2      	beq.n	801766a <powf+0xe6>
 8017684:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8017688:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801768c:	d5ed      	bpl.n	801766a <powf+0xe6>
 801768e:	2301      	movs	r3, #1
 8017690:	9300      	str	r3, [sp, #0]
 8017692:	4b67      	ldr	r3, [pc, #412]	; (8017830 <powf+0x2ac>)
 8017694:	9301      	str	r3, [sp, #4]
 8017696:	ee18 0a90 	vmov	r0, s17
 801769a:	2300      	movs	r3, #0
 801769c:	9308      	str	r3, [sp, #32]
 801769e:	f7ec ffcb 	bl	8004638 <__aeabi_f2d>
 80176a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80176a6:	ee18 0a10 	vmov	r0, s16
 80176aa:	f7ec ffc5 	bl	8004638 <__aeabi_f2d>
 80176ae:	f994 3000 	ldrsb.w	r3, [r4]
 80176b2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80176b6:	b923      	cbnz	r3, 80176c2 <powf+0x13e>
 80176b8:	2200      	movs	r2, #0
 80176ba:	2300      	movs	r3, #0
 80176bc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80176c0:	e79a      	b.n	80175f8 <powf+0x74>
 80176c2:	495e      	ldr	r1, [pc, #376]	; (801783c <powf+0x2b8>)
 80176c4:	2000      	movs	r0, #0
 80176c6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80176ca:	2b02      	cmp	r3, #2
 80176cc:	d194      	bne.n	80175f8 <powf+0x74>
 80176ce:	f7fe fab1 	bl	8015c34 <__errno>
 80176d2:	2321      	movs	r3, #33	; 0x21
 80176d4:	6003      	str	r3, [r0, #0]
 80176d6:	e7bc      	b.n	8017652 <powf+0xce>
 80176d8:	f001 fc6f 	bl	8018fba <finitef>
 80176dc:	4605      	mov	r5, r0
 80176de:	2800      	cmp	r0, #0
 80176e0:	d173      	bne.n	80177ca <powf+0x246>
 80176e2:	eeb0 0a68 	vmov.f32	s0, s17
 80176e6:	f001 fc68 	bl	8018fba <finitef>
 80176ea:	2800      	cmp	r0, #0
 80176ec:	d06d      	beq.n	80177ca <powf+0x246>
 80176ee:	eeb0 0a48 	vmov.f32	s0, s16
 80176f2:	f001 fc62 	bl	8018fba <finitef>
 80176f6:	2800      	cmp	r0, #0
 80176f8:	d067      	beq.n	80177ca <powf+0x246>
 80176fa:	ee18 0a90 	vmov	r0, s17
 80176fe:	f7ec ff9b 	bl	8004638 <__aeabi_f2d>
 8017702:	4680      	mov	r8, r0
 8017704:	ee18 0a10 	vmov	r0, s16
 8017708:	4689      	mov	r9, r1
 801770a:	f7ec ff95 	bl	8004638 <__aeabi_f2d>
 801770e:	eeb4 9a49 	vcmp.f32	s18, s18
 8017712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017716:	f994 4000 	ldrsb.w	r4, [r4]
 801771a:	4b45      	ldr	r3, [pc, #276]	; (8017830 <powf+0x2ac>)
 801771c:	d713      	bvc.n	8017746 <powf+0x1c2>
 801771e:	2201      	movs	r2, #1
 8017720:	e9cd 2300 	strd	r2, r3, [sp]
 8017724:	9508      	str	r5, [sp, #32]
 8017726:	e9cd 8902 	strd	r8, r9, [sp, #8]
 801772a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801772e:	2c00      	cmp	r4, #0
 8017730:	d0c2      	beq.n	80176b8 <powf+0x134>
 8017732:	eec9 7aa9 	vdiv.f32	s15, s19, s19
 8017736:	ee17 0a90 	vmov	r0, s15
 801773a:	f7ec ff7d 	bl	8004638 <__aeabi_f2d>
 801773e:	2c02      	cmp	r4, #2
 8017740:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8017744:	e7c2      	b.n	80176cc <powf+0x148>
 8017746:	2203      	movs	r2, #3
 8017748:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801774c:	e9cd 2300 	strd	r2, r3, [sp]
 8017750:	9508      	str	r5, [sp, #32]
 8017752:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8017756:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801775a:	ee28 8a27 	vmul.f32	s16, s16, s15
 801775e:	b9fc      	cbnz	r4, 80177a0 <powf+0x21c>
 8017760:	4b37      	ldr	r3, [pc, #220]	; (8017840 <powf+0x2bc>)
 8017762:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8017766:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801776a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801776e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8017772:	d553      	bpl.n	801781c <powf+0x298>
 8017774:	eeb0 0a48 	vmov.f32	s0, s16
 8017778:	f001 fc30 	bl	8018fdc <rintf>
 801777c:	eeb4 0a48 	vcmp.f32	s0, s16
 8017780:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017784:	d004      	beq.n	8017790 <powf+0x20c>
 8017786:	4b2f      	ldr	r3, [pc, #188]	; (8017844 <powf+0x2c0>)
 8017788:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801778c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8017790:	f996 3000 	ldrsb.w	r3, [r6]
 8017794:	2b02      	cmp	r3, #2
 8017796:	d141      	bne.n	801781c <powf+0x298>
 8017798:	f7fe fa4c 	bl	8015c34 <__errno>
 801779c:	2322      	movs	r3, #34	; 0x22
 801779e:	e799      	b.n	80176d4 <powf+0x150>
 80177a0:	4b29      	ldr	r3, [pc, #164]	; (8017848 <powf+0x2c4>)
 80177a2:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 80177a6:	2200      	movs	r2, #0
 80177a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80177ac:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80177b0:	d5ee      	bpl.n	8017790 <powf+0x20c>
 80177b2:	eeb0 0a48 	vmov.f32	s0, s16
 80177b6:	f001 fc11 	bl	8018fdc <rintf>
 80177ba:	eeb4 0a48 	vcmp.f32	s0, s16
 80177be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80177c2:	d0e5      	beq.n	8017790 <powf+0x20c>
 80177c4:	2200      	movs	r2, #0
 80177c6:	4b1d      	ldr	r3, [pc, #116]	; (801783c <powf+0x2b8>)
 80177c8:	e7e0      	b.n	801778c <powf+0x208>
 80177ca:	eeb5 9a40 	vcmp.f32	s18, #0.0
 80177ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80177d2:	f47f af4a 	bne.w	801766a <powf+0xe6>
 80177d6:	eeb0 0a68 	vmov.f32	s0, s17
 80177da:	f001 fbee 	bl	8018fba <finitef>
 80177de:	2800      	cmp	r0, #0
 80177e0:	f43f af43 	beq.w	801766a <powf+0xe6>
 80177e4:	eeb0 0a48 	vmov.f32	s0, s16
 80177e8:	f001 fbe7 	bl	8018fba <finitef>
 80177ec:	2800      	cmp	r0, #0
 80177ee:	f43f af3c 	beq.w	801766a <powf+0xe6>
 80177f2:	2304      	movs	r3, #4
 80177f4:	9300      	str	r3, [sp, #0]
 80177f6:	4b0e      	ldr	r3, [pc, #56]	; (8017830 <powf+0x2ac>)
 80177f8:	9301      	str	r3, [sp, #4]
 80177fa:	ee18 0a90 	vmov	r0, s17
 80177fe:	2300      	movs	r3, #0
 8017800:	9308      	str	r3, [sp, #32]
 8017802:	f7ec ff19 	bl	8004638 <__aeabi_f2d>
 8017806:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801780a:	ee18 0a10 	vmov	r0, s16
 801780e:	f7ec ff13 	bl	8004638 <__aeabi_f2d>
 8017812:	2200      	movs	r2, #0
 8017814:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8017818:	2300      	movs	r3, #0
 801781a:	e7b7      	b.n	801778c <powf+0x208>
 801781c:	4668      	mov	r0, sp
 801781e:	f001 fabf 	bl	8018da0 <matherr>
 8017822:	2800      	cmp	r0, #0
 8017824:	f47f af15 	bne.w	8017652 <powf+0xce>
 8017828:	e7b6      	b.n	8017798 <powf+0x214>
 801782a:	bf00      	nop
 801782c:	20000aa8 	.word	0x20000aa8
 8017830:	0802fbc1 	.word	0x0802fbc1
 8017834:	3ff00000 	.word	0x3ff00000
 8017838:	00000000 	.word	0x00000000
 801783c:	fff00000 	.word	0xfff00000
 8017840:	47efffff 	.word	0x47efffff
 8017844:	c7efffff 	.word	0xc7efffff
 8017848:	7ff00000 	.word	0x7ff00000

0801784c <sqrtf>:
 801784c:	b510      	push	{r4, lr}
 801784e:	ed2d 8b02 	vpush	{d8}
 8017852:	b08a      	sub	sp, #40	; 0x28
 8017854:	eeb0 8a40 	vmov.f32	s16, s0
 8017858:	f001 fa8e 	bl	8018d78 <__ieee754_sqrtf>
 801785c:	4b21      	ldr	r3, [pc, #132]	; (80178e4 <sqrtf+0x98>)
 801785e:	f993 4000 	ldrsb.w	r4, [r3]
 8017862:	1c63      	adds	r3, r4, #1
 8017864:	d02c      	beq.n	80178c0 <sqrtf+0x74>
 8017866:	eeb4 8a48 	vcmp.f32	s16, s16
 801786a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801786e:	d627      	bvs.n	80178c0 <sqrtf+0x74>
 8017870:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8017874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017878:	d522      	bpl.n	80178c0 <sqrtf+0x74>
 801787a:	2301      	movs	r3, #1
 801787c:	9300      	str	r3, [sp, #0]
 801787e:	4b1a      	ldr	r3, [pc, #104]	; (80178e8 <sqrtf+0x9c>)
 8017880:	9301      	str	r3, [sp, #4]
 8017882:	ee18 0a10 	vmov	r0, s16
 8017886:	2300      	movs	r3, #0
 8017888:	9308      	str	r3, [sp, #32]
 801788a:	f7ec fed5 	bl	8004638 <__aeabi_f2d>
 801788e:	2200      	movs	r2, #0
 8017890:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8017894:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017898:	2300      	movs	r3, #0
 801789a:	b9ac      	cbnz	r4, 80178c8 <sqrtf+0x7c>
 801789c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80178a0:	4668      	mov	r0, sp
 80178a2:	f001 fa7d 	bl	8018da0 <matherr>
 80178a6:	b1b8      	cbz	r0, 80178d8 <sqrtf+0x8c>
 80178a8:	9b08      	ldr	r3, [sp, #32]
 80178aa:	b11b      	cbz	r3, 80178b4 <sqrtf+0x68>
 80178ac:	f7fe f9c2 	bl	8015c34 <__errno>
 80178b0:	9b08      	ldr	r3, [sp, #32]
 80178b2:	6003      	str	r3, [r0, #0]
 80178b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80178b8:	f7ed fa0e 	bl	8004cd8 <__aeabi_d2f>
 80178bc:	ee00 0a10 	vmov	s0, r0
 80178c0:	b00a      	add	sp, #40	; 0x28
 80178c2:	ecbd 8b02 	vpop	{d8}
 80178c6:	bd10      	pop	{r4, pc}
 80178c8:	4610      	mov	r0, r2
 80178ca:	4619      	mov	r1, r3
 80178cc:	f7ed f836 	bl	800493c <__aeabi_ddiv>
 80178d0:	2c02      	cmp	r4, #2
 80178d2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80178d6:	d1e3      	bne.n	80178a0 <sqrtf+0x54>
 80178d8:	f7fe f9ac 	bl	8015c34 <__errno>
 80178dc:	2321      	movs	r3, #33	; 0x21
 80178de:	6003      	str	r3, [r0, #0]
 80178e0:	e7e2      	b.n	80178a8 <sqrtf+0x5c>
 80178e2:	bf00      	nop
 80178e4:	20000aa8 	.word	0x20000aa8
 80178e8:	0802fbc6 	.word	0x0802fbc6
 80178ec:	00000000 	.word	0x00000000

080178f0 <__ieee754_exp>:
 80178f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80178f4:	ec55 4b10 	vmov	r4, r5, d0
 80178f8:	4aab      	ldr	r2, [pc, #684]	; (8017ba8 <__ieee754_exp+0x2b8>)
 80178fa:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80178fe:	4296      	cmp	r6, r2
 8017900:	ea4f 77d5 	mov.w	r7, r5, lsr #31
 8017904:	d932      	bls.n	801796c <__ieee754_exp+0x7c>
 8017906:	4aa9      	ldr	r2, [pc, #676]	; (8017bac <__ieee754_exp+0x2bc>)
 8017908:	4296      	cmp	r6, r2
 801790a:	d913      	bls.n	8017934 <__ieee754_exp+0x44>
 801790c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8017910:	4323      	orrs	r3, r4
 8017912:	ee10 2a10 	vmov	r2, s0
 8017916:	d007      	beq.n	8017928 <__ieee754_exp+0x38>
 8017918:	462b      	mov	r3, r5
 801791a:	4620      	mov	r0, r4
 801791c:	4629      	mov	r1, r5
 801791e:	f7ec fd2d 	bl	800437c <__adddf3>
 8017922:	4604      	mov	r4, r0
 8017924:	460d      	mov	r5, r1
 8017926:	e000      	b.n	801792a <__ieee754_exp+0x3a>
 8017928:	b9ef      	cbnz	r7, 8017966 <__ieee754_exp+0x76>
 801792a:	ec45 4b10 	vmov	d0, r4, r5
 801792e:	b004      	add	sp, #16
 8017930:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017934:	a386      	add	r3, pc, #536	; (adr r3, 8017b50 <__ieee754_exp+0x260>)
 8017936:	e9d3 2300 	ldrd	r2, r3, [r3]
 801793a:	ee10 0a10 	vmov	r0, s0
 801793e:	4629      	mov	r1, r5
 8017940:	f7ed f962 	bl	8004c08 <__aeabi_dcmpgt>
 8017944:	b138      	cbz	r0, 8017956 <__ieee754_exp+0x66>
 8017946:	a384      	add	r3, pc, #528	; (adr r3, 8017b58 <__ieee754_exp+0x268>)
 8017948:	e9d3 2300 	ldrd	r2, r3, [r3]
 801794c:	4610      	mov	r0, r2
 801794e:	4619      	mov	r1, r3
 8017950:	f7ec feca 	bl	80046e8 <__aeabi_dmul>
 8017954:	e7e5      	b.n	8017922 <__ieee754_exp+0x32>
 8017956:	a382      	add	r3, pc, #520	; (adr r3, 8017b60 <__ieee754_exp+0x270>)
 8017958:	e9d3 2300 	ldrd	r2, r3, [r3]
 801795c:	4620      	mov	r0, r4
 801795e:	4629      	mov	r1, r5
 8017960:	f7ed f934 	bl	8004bcc <__aeabi_dcmplt>
 8017964:	b130      	cbz	r0, 8017974 <__ieee754_exp+0x84>
 8017966:	2400      	movs	r4, #0
 8017968:	2500      	movs	r5, #0
 801796a:	e7de      	b.n	801792a <__ieee754_exp+0x3a>
 801796c:	4b90      	ldr	r3, [pc, #576]	; (8017bb0 <__ieee754_exp+0x2c0>)
 801796e:	429e      	cmp	r6, r3
 8017970:	f240 80a6 	bls.w	8017ac0 <__ieee754_exp+0x1d0>
 8017974:	4b8f      	ldr	r3, [pc, #572]	; (8017bb4 <__ieee754_exp+0x2c4>)
 8017976:	429e      	cmp	r6, r3
 8017978:	ea4f 08c7 	mov.w	r8, r7, lsl #3
 801797c:	d875      	bhi.n	8017a6a <__ieee754_exp+0x17a>
 801797e:	4b8e      	ldr	r3, [pc, #568]	; (8017bb8 <__ieee754_exp+0x2c8>)
 8017980:	4e8e      	ldr	r6, [pc, #568]	; (8017bbc <__ieee754_exp+0x2cc>)
 8017982:	4443      	add	r3, r8
 8017984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017988:	4620      	mov	r0, r4
 801798a:	4629      	mov	r1, r5
 801798c:	f7ec fcf4 	bl	8004378 <__aeabi_dsub>
 8017990:	4446      	add	r6, r8
 8017992:	e9cd 0100 	strd	r0, r1, [sp]
 8017996:	e9d6 8900 	ldrd	r8, r9, [r6]
 801799a:	f1c7 0a01 	rsb	sl, r7, #1
 801799e:	ebaa 0a07 	sub.w	sl, sl, r7
 80179a2:	4642      	mov	r2, r8
 80179a4:	464b      	mov	r3, r9
 80179a6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80179aa:	f7ec fce5 	bl	8004378 <__aeabi_dsub>
 80179ae:	4604      	mov	r4, r0
 80179b0:	460d      	mov	r5, r1
 80179b2:	4622      	mov	r2, r4
 80179b4:	462b      	mov	r3, r5
 80179b6:	4620      	mov	r0, r4
 80179b8:	4629      	mov	r1, r5
 80179ba:	f7ec fe95 	bl	80046e8 <__aeabi_dmul>
 80179be:	a36a      	add	r3, pc, #424	; (adr r3, 8017b68 <__ieee754_exp+0x278>)
 80179c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80179c4:	4606      	mov	r6, r0
 80179c6:	460f      	mov	r7, r1
 80179c8:	f7ec fe8e 	bl	80046e8 <__aeabi_dmul>
 80179cc:	a368      	add	r3, pc, #416	; (adr r3, 8017b70 <__ieee754_exp+0x280>)
 80179ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80179d2:	f7ec fcd1 	bl	8004378 <__aeabi_dsub>
 80179d6:	4632      	mov	r2, r6
 80179d8:	463b      	mov	r3, r7
 80179da:	f7ec fe85 	bl	80046e8 <__aeabi_dmul>
 80179de:	a366      	add	r3, pc, #408	; (adr r3, 8017b78 <__ieee754_exp+0x288>)
 80179e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80179e4:	f7ec fcca 	bl	800437c <__adddf3>
 80179e8:	4632      	mov	r2, r6
 80179ea:	463b      	mov	r3, r7
 80179ec:	f7ec fe7c 	bl	80046e8 <__aeabi_dmul>
 80179f0:	a363      	add	r3, pc, #396	; (adr r3, 8017b80 <__ieee754_exp+0x290>)
 80179f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80179f6:	f7ec fcbf 	bl	8004378 <__aeabi_dsub>
 80179fa:	4632      	mov	r2, r6
 80179fc:	463b      	mov	r3, r7
 80179fe:	f7ec fe73 	bl	80046e8 <__aeabi_dmul>
 8017a02:	a361      	add	r3, pc, #388	; (adr r3, 8017b88 <__ieee754_exp+0x298>)
 8017a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017a08:	f7ec fcb8 	bl	800437c <__adddf3>
 8017a0c:	4632      	mov	r2, r6
 8017a0e:	463b      	mov	r3, r7
 8017a10:	f7ec fe6a 	bl	80046e8 <__aeabi_dmul>
 8017a14:	4602      	mov	r2, r0
 8017a16:	460b      	mov	r3, r1
 8017a18:	4620      	mov	r0, r4
 8017a1a:	4629      	mov	r1, r5
 8017a1c:	f7ec fcac 	bl	8004378 <__aeabi_dsub>
 8017a20:	4602      	mov	r2, r0
 8017a22:	460b      	mov	r3, r1
 8017a24:	4606      	mov	r6, r0
 8017a26:	460f      	mov	r7, r1
 8017a28:	4620      	mov	r0, r4
 8017a2a:	4629      	mov	r1, r5
 8017a2c:	f7ec fe5c 	bl	80046e8 <__aeabi_dmul>
 8017a30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017a34:	f1ba 0f00 	cmp.w	sl, #0
 8017a38:	d15c      	bne.n	8017af4 <__ieee754_exp+0x204>
 8017a3a:	2200      	movs	r2, #0
 8017a3c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8017a40:	4630      	mov	r0, r6
 8017a42:	4639      	mov	r1, r7
 8017a44:	f7ec fc98 	bl	8004378 <__aeabi_dsub>
 8017a48:	4602      	mov	r2, r0
 8017a4a:	460b      	mov	r3, r1
 8017a4c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017a50:	f7ec ff74 	bl	800493c <__aeabi_ddiv>
 8017a54:	4622      	mov	r2, r4
 8017a56:	462b      	mov	r3, r5
 8017a58:	f7ec fc8e 	bl	8004378 <__aeabi_dsub>
 8017a5c:	4602      	mov	r2, r0
 8017a5e:	460b      	mov	r3, r1
 8017a60:	2000      	movs	r0, #0
 8017a62:	4957      	ldr	r1, [pc, #348]	; (8017bc0 <__ieee754_exp+0x2d0>)
 8017a64:	f7ec fc88 	bl	8004378 <__aeabi_dsub>
 8017a68:	e75b      	b.n	8017922 <__ieee754_exp+0x32>
 8017a6a:	4e56      	ldr	r6, [pc, #344]	; (8017bc4 <__ieee754_exp+0x2d4>)
 8017a6c:	a348      	add	r3, pc, #288	; (adr r3, 8017b90 <__ieee754_exp+0x2a0>)
 8017a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017a72:	4446      	add	r6, r8
 8017a74:	4620      	mov	r0, r4
 8017a76:	4629      	mov	r1, r5
 8017a78:	f7ec fe36 	bl	80046e8 <__aeabi_dmul>
 8017a7c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8017a80:	f7ec fc7c 	bl	800437c <__adddf3>
 8017a84:	f7ed f8e0 	bl	8004c48 <__aeabi_d2iz>
 8017a88:	4682      	mov	sl, r0
 8017a8a:	f7ec fdc3 	bl	8004614 <__aeabi_i2d>
 8017a8e:	a342      	add	r3, pc, #264	; (adr r3, 8017b98 <__ieee754_exp+0x2a8>)
 8017a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017a94:	4606      	mov	r6, r0
 8017a96:	460f      	mov	r7, r1
 8017a98:	f7ec fe26 	bl	80046e8 <__aeabi_dmul>
 8017a9c:	4602      	mov	r2, r0
 8017a9e:	460b      	mov	r3, r1
 8017aa0:	4620      	mov	r0, r4
 8017aa2:	4629      	mov	r1, r5
 8017aa4:	f7ec fc68 	bl	8004378 <__aeabi_dsub>
 8017aa8:	a33d      	add	r3, pc, #244	; (adr r3, 8017ba0 <__ieee754_exp+0x2b0>)
 8017aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017aae:	e9cd 0100 	strd	r0, r1, [sp]
 8017ab2:	4630      	mov	r0, r6
 8017ab4:	4639      	mov	r1, r7
 8017ab6:	f7ec fe17 	bl	80046e8 <__aeabi_dmul>
 8017aba:	4680      	mov	r8, r0
 8017abc:	4689      	mov	r9, r1
 8017abe:	e770      	b.n	80179a2 <__ieee754_exp+0xb2>
 8017ac0:	4b41      	ldr	r3, [pc, #260]	; (8017bc8 <__ieee754_exp+0x2d8>)
 8017ac2:	429e      	cmp	r6, r3
 8017ac4:	d811      	bhi.n	8017aea <__ieee754_exp+0x1fa>
 8017ac6:	a324      	add	r3, pc, #144	; (adr r3, 8017b58 <__ieee754_exp+0x268>)
 8017ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017acc:	ee10 0a10 	vmov	r0, s0
 8017ad0:	4629      	mov	r1, r5
 8017ad2:	f7ec fc53 	bl	800437c <__adddf3>
 8017ad6:	2200      	movs	r2, #0
 8017ad8:	4b39      	ldr	r3, [pc, #228]	; (8017bc0 <__ieee754_exp+0x2d0>)
 8017ada:	f7ed f895 	bl	8004c08 <__aeabi_dcmpgt>
 8017ade:	b138      	cbz	r0, 8017af0 <__ieee754_exp+0x200>
 8017ae0:	2200      	movs	r2, #0
 8017ae2:	4b37      	ldr	r3, [pc, #220]	; (8017bc0 <__ieee754_exp+0x2d0>)
 8017ae4:	4620      	mov	r0, r4
 8017ae6:	4629      	mov	r1, r5
 8017ae8:	e719      	b.n	801791e <__ieee754_exp+0x2e>
 8017aea:	f04f 0a00 	mov.w	sl, #0
 8017aee:	e760      	b.n	80179b2 <__ieee754_exp+0xc2>
 8017af0:	4682      	mov	sl, r0
 8017af2:	e75e      	b.n	80179b2 <__ieee754_exp+0xc2>
 8017af4:	4632      	mov	r2, r6
 8017af6:	463b      	mov	r3, r7
 8017af8:	2000      	movs	r0, #0
 8017afa:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8017afe:	f7ec fc3b 	bl	8004378 <__aeabi_dsub>
 8017b02:	4602      	mov	r2, r0
 8017b04:	460b      	mov	r3, r1
 8017b06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017b0a:	f7ec ff17 	bl	800493c <__aeabi_ddiv>
 8017b0e:	4602      	mov	r2, r0
 8017b10:	460b      	mov	r3, r1
 8017b12:	4640      	mov	r0, r8
 8017b14:	4649      	mov	r1, r9
 8017b16:	f7ec fc2f 	bl	8004378 <__aeabi_dsub>
 8017b1a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017b1e:	f7ec fc2b 	bl	8004378 <__aeabi_dsub>
 8017b22:	4602      	mov	r2, r0
 8017b24:	460b      	mov	r3, r1
 8017b26:	2000      	movs	r0, #0
 8017b28:	4925      	ldr	r1, [pc, #148]	; (8017bc0 <__ieee754_exp+0x2d0>)
 8017b2a:	f7ec fc25 	bl	8004378 <__aeabi_dsub>
 8017b2e:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 8017b32:	4592      	cmp	sl, r2
 8017b34:	db02      	blt.n	8017b3c <__ieee754_exp+0x24c>
 8017b36:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8017b3a:	e6f2      	b.n	8017922 <__ieee754_exp+0x32>
 8017b3c:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 8017b40:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8017b44:	2200      	movs	r2, #0
 8017b46:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 8017b4a:	e701      	b.n	8017950 <__ieee754_exp+0x60>
 8017b4c:	f3af 8000 	nop.w
 8017b50:	fefa39ef 	.word	0xfefa39ef
 8017b54:	40862e42 	.word	0x40862e42
 8017b58:	8800759c 	.word	0x8800759c
 8017b5c:	7e37e43c 	.word	0x7e37e43c
 8017b60:	d52d3051 	.word	0xd52d3051
 8017b64:	c0874910 	.word	0xc0874910
 8017b68:	72bea4d0 	.word	0x72bea4d0
 8017b6c:	3e663769 	.word	0x3e663769
 8017b70:	c5d26bf1 	.word	0xc5d26bf1
 8017b74:	3ebbbd41 	.word	0x3ebbbd41
 8017b78:	af25de2c 	.word	0xaf25de2c
 8017b7c:	3f11566a 	.word	0x3f11566a
 8017b80:	16bebd93 	.word	0x16bebd93
 8017b84:	3f66c16c 	.word	0x3f66c16c
 8017b88:	5555553e 	.word	0x5555553e
 8017b8c:	3fc55555 	.word	0x3fc55555
 8017b90:	652b82fe 	.word	0x652b82fe
 8017b94:	3ff71547 	.word	0x3ff71547
 8017b98:	fee00000 	.word	0xfee00000
 8017b9c:	3fe62e42 	.word	0x3fe62e42
 8017ba0:	35793c76 	.word	0x35793c76
 8017ba4:	3dea39ef 	.word	0x3dea39ef
 8017ba8:	40862e41 	.word	0x40862e41
 8017bac:	7fefffff 	.word	0x7fefffff
 8017bb0:	3fd62e42 	.word	0x3fd62e42
 8017bb4:	3ff0a2b1 	.word	0x3ff0a2b1
 8017bb8:	0802fbe0 	.word	0x0802fbe0
 8017bbc:	0802fbf0 	.word	0x0802fbf0
 8017bc0:	3ff00000 	.word	0x3ff00000
 8017bc4:	0802fbd0 	.word	0x0802fbd0
 8017bc8:	3e2fffff 	.word	0x3e2fffff
 8017bcc:	00000000 	.word	0x00000000

08017bd0 <__ieee754_pow>:
 8017bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017bd4:	b091      	sub	sp, #68	; 0x44
 8017bd6:	ed8d 1b00 	vstr	d1, [sp]
 8017bda:	e9dd 2900 	ldrd	r2, r9, [sp]
 8017bde:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8017be2:	ea58 0302 	orrs.w	r3, r8, r2
 8017be6:	ec57 6b10 	vmov	r6, r7, d0
 8017bea:	f000 84be 	beq.w	801856a <__ieee754_pow+0x99a>
 8017bee:	4b7a      	ldr	r3, [pc, #488]	; (8017dd8 <__ieee754_pow+0x208>)
 8017bf0:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8017bf4:	429c      	cmp	r4, r3
 8017bf6:	463d      	mov	r5, r7
 8017bf8:	ee10 aa10 	vmov	sl, s0
 8017bfc:	dc09      	bgt.n	8017c12 <__ieee754_pow+0x42>
 8017bfe:	d103      	bne.n	8017c08 <__ieee754_pow+0x38>
 8017c00:	b93e      	cbnz	r6, 8017c12 <__ieee754_pow+0x42>
 8017c02:	45a0      	cmp	r8, r4
 8017c04:	dc0d      	bgt.n	8017c22 <__ieee754_pow+0x52>
 8017c06:	e001      	b.n	8017c0c <__ieee754_pow+0x3c>
 8017c08:	4598      	cmp	r8, r3
 8017c0a:	dc02      	bgt.n	8017c12 <__ieee754_pow+0x42>
 8017c0c:	4598      	cmp	r8, r3
 8017c0e:	d10e      	bne.n	8017c2e <__ieee754_pow+0x5e>
 8017c10:	b16a      	cbz	r2, 8017c2e <__ieee754_pow+0x5e>
 8017c12:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8017c16:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8017c1a:	ea54 030a 	orrs.w	r3, r4, sl
 8017c1e:	f000 84a4 	beq.w	801856a <__ieee754_pow+0x99a>
 8017c22:	486e      	ldr	r0, [pc, #440]	; (8017ddc <__ieee754_pow+0x20c>)
 8017c24:	b011      	add	sp, #68	; 0x44
 8017c26:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c2a:	f001 b8bd 	b.w	8018da8 <nan>
 8017c2e:	2d00      	cmp	r5, #0
 8017c30:	da53      	bge.n	8017cda <__ieee754_pow+0x10a>
 8017c32:	4b6b      	ldr	r3, [pc, #428]	; (8017de0 <__ieee754_pow+0x210>)
 8017c34:	4598      	cmp	r8, r3
 8017c36:	dc4d      	bgt.n	8017cd4 <__ieee754_pow+0x104>
 8017c38:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8017c3c:	4598      	cmp	r8, r3
 8017c3e:	dd4c      	ble.n	8017cda <__ieee754_pow+0x10a>
 8017c40:	ea4f 5328 	mov.w	r3, r8, asr #20
 8017c44:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8017c48:	2b14      	cmp	r3, #20
 8017c4a:	dd26      	ble.n	8017c9a <__ieee754_pow+0xca>
 8017c4c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8017c50:	fa22 f103 	lsr.w	r1, r2, r3
 8017c54:	fa01 f303 	lsl.w	r3, r1, r3
 8017c58:	4293      	cmp	r3, r2
 8017c5a:	d13e      	bne.n	8017cda <__ieee754_pow+0x10a>
 8017c5c:	f001 0101 	and.w	r1, r1, #1
 8017c60:	f1c1 0b02 	rsb	fp, r1, #2
 8017c64:	2a00      	cmp	r2, #0
 8017c66:	d15b      	bne.n	8017d20 <__ieee754_pow+0x150>
 8017c68:	4b5b      	ldr	r3, [pc, #364]	; (8017dd8 <__ieee754_pow+0x208>)
 8017c6a:	4598      	cmp	r8, r3
 8017c6c:	d124      	bne.n	8017cb8 <__ieee754_pow+0xe8>
 8017c6e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8017c72:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8017c76:	ea53 030a 	orrs.w	r3, r3, sl
 8017c7a:	f000 8476 	beq.w	801856a <__ieee754_pow+0x99a>
 8017c7e:	4b59      	ldr	r3, [pc, #356]	; (8017de4 <__ieee754_pow+0x214>)
 8017c80:	429c      	cmp	r4, r3
 8017c82:	dd2d      	ble.n	8017ce0 <__ieee754_pow+0x110>
 8017c84:	f1b9 0f00 	cmp.w	r9, #0
 8017c88:	f280 8473 	bge.w	8018572 <__ieee754_pow+0x9a2>
 8017c8c:	2000      	movs	r0, #0
 8017c8e:	2100      	movs	r1, #0
 8017c90:	ec41 0b10 	vmov	d0, r0, r1
 8017c94:	b011      	add	sp, #68	; 0x44
 8017c96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c9a:	2a00      	cmp	r2, #0
 8017c9c:	d13e      	bne.n	8017d1c <__ieee754_pow+0x14c>
 8017c9e:	f1c3 0314 	rsb	r3, r3, #20
 8017ca2:	fa48 f103 	asr.w	r1, r8, r3
 8017ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8017caa:	4543      	cmp	r3, r8
 8017cac:	f040 8469 	bne.w	8018582 <__ieee754_pow+0x9b2>
 8017cb0:	f001 0101 	and.w	r1, r1, #1
 8017cb4:	f1c1 0b02 	rsb	fp, r1, #2
 8017cb8:	4b4b      	ldr	r3, [pc, #300]	; (8017de8 <__ieee754_pow+0x218>)
 8017cba:	4598      	cmp	r8, r3
 8017cbc:	d118      	bne.n	8017cf0 <__ieee754_pow+0x120>
 8017cbe:	f1b9 0f00 	cmp.w	r9, #0
 8017cc2:	f280 845a 	bge.w	801857a <__ieee754_pow+0x9aa>
 8017cc6:	4948      	ldr	r1, [pc, #288]	; (8017de8 <__ieee754_pow+0x218>)
 8017cc8:	4632      	mov	r2, r6
 8017cca:	463b      	mov	r3, r7
 8017ccc:	2000      	movs	r0, #0
 8017cce:	f7ec fe35 	bl	800493c <__aeabi_ddiv>
 8017cd2:	e7dd      	b.n	8017c90 <__ieee754_pow+0xc0>
 8017cd4:	f04f 0b02 	mov.w	fp, #2
 8017cd8:	e7c4      	b.n	8017c64 <__ieee754_pow+0x94>
 8017cda:	f04f 0b00 	mov.w	fp, #0
 8017cde:	e7c1      	b.n	8017c64 <__ieee754_pow+0x94>
 8017ce0:	f1b9 0f00 	cmp.w	r9, #0
 8017ce4:	dad2      	bge.n	8017c8c <__ieee754_pow+0xbc>
 8017ce6:	e9dd 0300 	ldrd	r0, r3, [sp]
 8017cea:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8017cee:	e7cf      	b.n	8017c90 <__ieee754_pow+0xc0>
 8017cf0:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8017cf4:	d106      	bne.n	8017d04 <__ieee754_pow+0x134>
 8017cf6:	4632      	mov	r2, r6
 8017cf8:	463b      	mov	r3, r7
 8017cfa:	4610      	mov	r0, r2
 8017cfc:	4619      	mov	r1, r3
 8017cfe:	f7ec fcf3 	bl	80046e8 <__aeabi_dmul>
 8017d02:	e7c5      	b.n	8017c90 <__ieee754_pow+0xc0>
 8017d04:	4b39      	ldr	r3, [pc, #228]	; (8017dec <__ieee754_pow+0x21c>)
 8017d06:	4599      	cmp	r9, r3
 8017d08:	d10a      	bne.n	8017d20 <__ieee754_pow+0x150>
 8017d0a:	2d00      	cmp	r5, #0
 8017d0c:	db08      	blt.n	8017d20 <__ieee754_pow+0x150>
 8017d0e:	ec47 6b10 	vmov	d0, r6, r7
 8017d12:	b011      	add	sp, #68	; 0x44
 8017d14:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d18:	f000 bc68 	b.w	80185ec <__ieee754_sqrt>
 8017d1c:	f04f 0b00 	mov.w	fp, #0
 8017d20:	ec47 6b10 	vmov	d0, r6, r7
 8017d24:	f001 f82b 	bl	8018d7e <fabs>
 8017d28:	ec51 0b10 	vmov	r0, r1, d0
 8017d2c:	f1ba 0f00 	cmp.w	sl, #0
 8017d30:	d127      	bne.n	8017d82 <__ieee754_pow+0x1b2>
 8017d32:	b124      	cbz	r4, 8017d3e <__ieee754_pow+0x16e>
 8017d34:	4b2c      	ldr	r3, [pc, #176]	; (8017de8 <__ieee754_pow+0x218>)
 8017d36:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8017d3a:	429a      	cmp	r2, r3
 8017d3c:	d121      	bne.n	8017d82 <__ieee754_pow+0x1b2>
 8017d3e:	f1b9 0f00 	cmp.w	r9, #0
 8017d42:	da05      	bge.n	8017d50 <__ieee754_pow+0x180>
 8017d44:	4602      	mov	r2, r0
 8017d46:	460b      	mov	r3, r1
 8017d48:	2000      	movs	r0, #0
 8017d4a:	4927      	ldr	r1, [pc, #156]	; (8017de8 <__ieee754_pow+0x218>)
 8017d4c:	f7ec fdf6 	bl	800493c <__aeabi_ddiv>
 8017d50:	2d00      	cmp	r5, #0
 8017d52:	da9d      	bge.n	8017c90 <__ieee754_pow+0xc0>
 8017d54:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8017d58:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8017d5c:	ea54 030b 	orrs.w	r3, r4, fp
 8017d60:	d108      	bne.n	8017d74 <__ieee754_pow+0x1a4>
 8017d62:	4602      	mov	r2, r0
 8017d64:	460b      	mov	r3, r1
 8017d66:	4610      	mov	r0, r2
 8017d68:	4619      	mov	r1, r3
 8017d6a:	f7ec fb05 	bl	8004378 <__aeabi_dsub>
 8017d6e:	4602      	mov	r2, r0
 8017d70:	460b      	mov	r3, r1
 8017d72:	e7ac      	b.n	8017cce <__ieee754_pow+0xfe>
 8017d74:	f1bb 0f01 	cmp.w	fp, #1
 8017d78:	d18a      	bne.n	8017c90 <__ieee754_pow+0xc0>
 8017d7a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017d7e:	4619      	mov	r1, r3
 8017d80:	e786      	b.n	8017c90 <__ieee754_pow+0xc0>
 8017d82:	0fed      	lsrs	r5, r5, #31
 8017d84:	1e6b      	subs	r3, r5, #1
 8017d86:	930d      	str	r3, [sp, #52]	; 0x34
 8017d88:	ea5b 0303 	orrs.w	r3, fp, r3
 8017d8c:	d102      	bne.n	8017d94 <__ieee754_pow+0x1c4>
 8017d8e:	4632      	mov	r2, r6
 8017d90:	463b      	mov	r3, r7
 8017d92:	e7e8      	b.n	8017d66 <__ieee754_pow+0x196>
 8017d94:	4b16      	ldr	r3, [pc, #88]	; (8017df0 <__ieee754_pow+0x220>)
 8017d96:	4598      	cmp	r8, r3
 8017d98:	f340 80fe 	ble.w	8017f98 <__ieee754_pow+0x3c8>
 8017d9c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8017da0:	4598      	cmp	r8, r3
 8017da2:	dd0a      	ble.n	8017dba <__ieee754_pow+0x1ea>
 8017da4:	4b0f      	ldr	r3, [pc, #60]	; (8017de4 <__ieee754_pow+0x214>)
 8017da6:	429c      	cmp	r4, r3
 8017da8:	dc0d      	bgt.n	8017dc6 <__ieee754_pow+0x1f6>
 8017daa:	f1b9 0f00 	cmp.w	r9, #0
 8017dae:	f6bf af6d 	bge.w	8017c8c <__ieee754_pow+0xbc>
 8017db2:	a307      	add	r3, pc, #28	; (adr r3, 8017dd0 <__ieee754_pow+0x200>)
 8017db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017db8:	e79f      	b.n	8017cfa <__ieee754_pow+0x12a>
 8017dba:	4b0e      	ldr	r3, [pc, #56]	; (8017df4 <__ieee754_pow+0x224>)
 8017dbc:	429c      	cmp	r4, r3
 8017dbe:	ddf4      	ble.n	8017daa <__ieee754_pow+0x1da>
 8017dc0:	4b09      	ldr	r3, [pc, #36]	; (8017de8 <__ieee754_pow+0x218>)
 8017dc2:	429c      	cmp	r4, r3
 8017dc4:	dd18      	ble.n	8017df8 <__ieee754_pow+0x228>
 8017dc6:	f1b9 0f00 	cmp.w	r9, #0
 8017dca:	dcf2      	bgt.n	8017db2 <__ieee754_pow+0x1e2>
 8017dcc:	e75e      	b.n	8017c8c <__ieee754_pow+0xbc>
 8017dce:	bf00      	nop
 8017dd0:	8800759c 	.word	0x8800759c
 8017dd4:	7e37e43c 	.word	0x7e37e43c
 8017dd8:	7ff00000 	.word	0x7ff00000
 8017ddc:	0801b212 	.word	0x0801b212
 8017de0:	433fffff 	.word	0x433fffff
 8017de4:	3fefffff 	.word	0x3fefffff
 8017de8:	3ff00000 	.word	0x3ff00000
 8017dec:	3fe00000 	.word	0x3fe00000
 8017df0:	41e00000 	.word	0x41e00000
 8017df4:	3feffffe 	.word	0x3feffffe
 8017df8:	2200      	movs	r2, #0
 8017dfa:	4b63      	ldr	r3, [pc, #396]	; (8017f88 <__ieee754_pow+0x3b8>)
 8017dfc:	f7ec fabc 	bl	8004378 <__aeabi_dsub>
 8017e00:	a355      	add	r3, pc, #340	; (adr r3, 8017f58 <__ieee754_pow+0x388>)
 8017e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017e06:	4604      	mov	r4, r0
 8017e08:	460d      	mov	r5, r1
 8017e0a:	f7ec fc6d 	bl	80046e8 <__aeabi_dmul>
 8017e0e:	a354      	add	r3, pc, #336	; (adr r3, 8017f60 <__ieee754_pow+0x390>)
 8017e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017e14:	4606      	mov	r6, r0
 8017e16:	460f      	mov	r7, r1
 8017e18:	4620      	mov	r0, r4
 8017e1a:	4629      	mov	r1, r5
 8017e1c:	f7ec fc64 	bl	80046e8 <__aeabi_dmul>
 8017e20:	2200      	movs	r2, #0
 8017e22:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017e26:	4b59      	ldr	r3, [pc, #356]	; (8017f8c <__ieee754_pow+0x3bc>)
 8017e28:	4620      	mov	r0, r4
 8017e2a:	4629      	mov	r1, r5
 8017e2c:	f7ec fc5c 	bl	80046e8 <__aeabi_dmul>
 8017e30:	4602      	mov	r2, r0
 8017e32:	460b      	mov	r3, r1
 8017e34:	a14c      	add	r1, pc, #304	; (adr r1, 8017f68 <__ieee754_pow+0x398>)
 8017e36:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017e3a:	f7ec fa9d 	bl	8004378 <__aeabi_dsub>
 8017e3e:	4622      	mov	r2, r4
 8017e40:	462b      	mov	r3, r5
 8017e42:	f7ec fc51 	bl	80046e8 <__aeabi_dmul>
 8017e46:	4602      	mov	r2, r0
 8017e48:	460b      	mov	r3, r1
 8017e4a:	2000      	movs	r0, #0
 8017e4c:	4950      	ldr	r1, [pc, #320]	; (8017f90 <__ieee754_pow+0x3c0>)
 8017e4e:	f7ec fa93 	bl	8004378 <__aeabi_dsub>
 8017e52:	4622      	mov	r2, r4
 8017e54:	462b      	mov	r3, r5
 8017e56:	4680      	mov	r8, r0
 8017e58:	4689      	mov	r9, r1
 8017e5a:	4620      	mov	r0, r4
 8017e5c:	4629      	mov	r1, r5
 8017e5e:	f7ec fc43 	bl	80046e8 <__aeabi_dmul>
 8017e62:	4602      	mov	r2, r0
 8017e64:	460b      	mov	r3, r1
 8017e66:	4640      	mov	r0, r8
 8017e68:	4649      	mov	r1, r9
 8017e6a:	f7ec fc3d 	bl	80046e8 <__aeabi_dmul>
 8017e6e:	a340      	add	r3, pc, #256	; (adr r3, 8017f70 <__ieee754_pow+0x3a0>)
 8017e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017e74:	f7ec fc38 	bl	80046e8 <__aeabi_dmul>
 8017e78:	4602      	mov	r2, r0
 8017e7a:	460b      	mov	r3, r1
 8017e7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017e80:	f7ec fa7a 	bl	8004378 <__aeabi_dsub>
 8017e84:	4602      	mov	r2, r0
 8017e86:	460b      	mov	r3, r1
 8017e88:	4604      	mov	r4, r0
 8017e8a:	460d      	mov	r5, r1
 8017e8c:	4630      	mov	r0, r6
 8017e8e:	4639      	mov	r1, r7
 8017e90:	f7ec fa74 	bl	800437c <__adddf3>
 8017e94:	2000      	movs	r0, #0
 8017e96:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8017e9a:	4632      	mov	r2, r6
 8017e9c:	463b      	mov	r3, r7
 8017e9e:	f7ec fa6b 	bl	8004378 <__aeabi_dsub>
 8017ea2:	4602      	mov	r2, r0
 8017ea4:	460b      	mov	r3, r1
 8017ea6:	4620      	mov	r0, r4
 8017ea8:	4629      	mov	r1, r5
 8017eaa:	f7ec fa65 	bl	8004378 <__aeabi_dsub>
 8017eae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017eb0:	f10b 33ff 	add.w	r3, fp, #4294967295
 8017eb4:	4313      	orrs	r3, r2
 8017eb6:	4606      	mov	r6, r0
 8017eb8:	460f      	mov	r7, r1
 8017eba:	f040 81eb 	bne.w	8018294 <__ieee754_pow+0x6c4>
 8017ebe:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8017f78 <__ieee754_pow+0x3a8>
 8017ec2:	e9dd 4500 	ldrd	r4, r5, [sp]
 8017ec6:	2400      	movs	r4, #0
 8017ec8:	4622      	mov	r2, r4
 8017eca:	462b      	mov	r3, r5
 8017ecc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017ed0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8017ed4:	f7ec fa50 	bl	8004378 <__aeabi_dsub>
 8017ed8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8017edc:	f7ec fc04 	bl	80046e8 <__aeabi_dmul>
 8017ee0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017ee4:	4680      	mov	r8, r0
 8017ee6:	4689      	mov	r9, r1
 8017ee8:	4630      	mov	r0, r6
 8017eea:	4639      	mov	r1, r7
 8017eec:	f7ec fbfc 	bl	80046e8 <__aeabi_dmul>
 8017ef0:	4602      	mov	r2, r0
 8017ef2:	460b      	mov	r3, r1
 8017ef4:	4640      	mov	r0, r8
 8017ef6:	4649      	mov	r1, r9
 8017ef8:	f7ec fa40 	bl	800437c <__adddf3>
 8017efc:	4622      	mov	r2, r4
 8017efe:	462b      	mov	r3, r5
 8017f00:	4680      	mov	r8, r0
 8017f02:	4689      	mov	r9, r1
 8017f04:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8017f08:	f7ec fbee 	bl	80046e8 <__aeabi_dmul>
 8017f0c:	460b      	mov	r3, r1
 8017f0e:	4604      	mov	r4, r0
 8017f10:	460d      	mov	r5, r1
 8017f12:	4602      	mov	r2, r0
 8017f14:	4649      	mov	r1, r9
 8017f16:	4640      	mov	r0, r8
 8017f18:	e9cd 4500 	strd	r4, r5, [sp]
 8017f1c:	f7ec fa2e 	bl	800437c <__adddf3>
 8017f20:	4b1c      	ldr	r3, [pc, #112]	; (8017f94 <__ieee754_pow+0x3c4>)
 8017f22:	4299      	cmp	r1, r3
 8017f24:	4606      	mov	r6, r0
 8017f26:	460f      	mov	r7, r1
 8017f28:	468b      	mov	fp, r1
 8017f2a:	f340 82f7 	ble.w	801851c <__ieee754_pow+0x94c>
 8017f2e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8017f32:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8017f36:	4303      	orrs	r3, r0
 8017f38:	f000 81ea 	beq.w	8018310 <__ieee754_pow+0x740>
 8017f3c:	a310      	add	r3, pc, #64	; (adr r3, 8017f80 <__ieee754_pow+0x3b0>)
 8017f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017f42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017f46:	f7ec fbcf 	bl	80046e8 <__aeabi_dmul>
 8017f4a:	a30d      	add	r3, pc, #52	; (adr r3, 8017f80 <__ieee754_pow+0x3b0>)
 8017f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017f50:	e6d5      	b.n	8017cfe <__ieee754_pow+0x12e>
 8017f52:	bf00      	nop
 8017f54:	f3af 8000 	nop.w
 8017f58:	60000000 	.word	0x60000000
 8017f5c:	3ff71547 	.word	0x3ff71547
 8017f60:	f85ddf44 	.word	0xf85ddf44
 8017f64:	3e54ae0b 	.word	0x3e54ae0b
 8017f68:	55555555 	.word	0x55555555
 8017f6c:	3fd55555 	.word	0x3fd55555
 8017f70:	652b82fe 	.word	0x652b82fe
 8017f74:	3ff71547 	.word	0x3ff71547
 8017f78:	00000000 	.word	0x00000000
 8017f7c:	bff00000 	.word	0xbff00000
 8017f80:	8800759c 	.word	0x8800759c
 8017f84:	7e37e43c 	.word	0x7e37e43c
 8017f88:	3ff00000 	.word	0x3ff00000
 8017f8c:	3fd00000 	.word	0x3fd00000
 8017f90:	3fe00000 	.word	0x3fe00000
 8017f94:	408fffff 	.word	0x408fffff
 8017f98:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8017f9c:	f04f 0200 	mov.w	r2, #0
 8017fa0:	da05      	bge.n	8017fae <__ieee754_pow+0x3de>
 8017fa2:	4bd3      	ldr	r3, [pc, #844]	; (80182f0 <__ieee754_pow+0x720>)
 8017fa4:	f7ec fba0 	bl	80046e8 <__aeabi_dmul>
 8017fa8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8017fac:	460c      	mov	r4, r1
 8017fae:	1523      	asrs	r3, r4, #20
 8017fb0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8017fb4:	4413      	add	r3, r2
 8017fb6:	9309      	str	r3, [sp, #36]	; 0x24
 8017fb8:	4bce      	ldr	r3, [pc, #824]	; (80182f4 <__ieee754_pow+0x724>)
 8017fba:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8017fbe:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8017fc2:	429c      	cmp	r4, r3
 8017fc4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8017fc8:	dd08      	ble.n	8017fdc <__ieee754_pow+0x40c>
 8017fca:	4bcb      	ldr	r3, [pc, #812]	; (80182f8 <__ieee754_pow+0x728>)
 8017fcc:	429c      	cmp	r4, r3
 8017fce:	f340 815e 	ble.w	801828e <__ieee754_pow+0x6be>
 8017fd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017fd4:	3301      	adds	r3, #1
 8017fd6:	9309      	str	r3, [sp, #36]	; 0x24
 8017fd8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8017fdc:	f04f 0a00 	mov.w	sl, #0
 8017fe0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8017fe4:	930c      	str	r3, [sp, #48]	; 0x30
 8017fe6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017fe8:	4bc4      	ldr	r3, [pc, #784]	; (80182fc <__ieee754_pow+0x72c>)
 8017fea:	4413      	add	r3, r2
 8017fec:	ed93 7b00 	vldr	d7, [r3]
 8017ff0:	4629      	mov	r1, r5
 8017ff2:	ec53 2b17 	vmov	r2, r3, d7
 8017ff6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8017ffa:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8017ffe:	f7ec f9bb 	bl	8004378 <__aeabi_dsub>
 8018002:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8018006:	4606      	mov	r6, r0
 8018008:	460f      	mov	r7, r1
 801800a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801800e:	f7ec f9b5 	bl	800437c <__adddf3>
 8018012:	4602      	mov	r2, r0
 8018014:	460b      	mov	r3, r1
 8018016:	2000      	movs	r0, #0
 8018018:	49b9      	ldr	r1, [pc, #740]	; (8018300 <__ieee754_pow+0x730>)
 801801a:	f7ec fc8f 	bl	800493c <__aeabi_ddiv>
 801801e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8018022:	4602      	mov	r2, r0
 8018024:	460b      	mov	r3, r1
 8018026:	4630      	mov	r0, r6
 8018028:	4639      	mov	r1, r7
 801802a:	f7ec fb5d 	bl	80046e8 <__aeabi_dmul>
 801802e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018032:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8018036:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801803a:	2300      	movs	r3, #0
 801803c:	9302      	str	r3, [sp, #8]
 801803e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8018042:	106d      	asrs	r5, r5, #1
 8018044:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8018048:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801804c:	2200      	movs	r2, #0
 801804e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8018052:	4640      	mov	r0, r8
 8018054:	4649      	mov	r1, r9
 8018056:	4614      	mov	r4, r2
 8018058:	461d      	mov	r5, r3
 801805a:	f7ec fb45 	bl	80046e8 <__aeabi_dmul>
 801805e:	4602      	mov	r2, r0
 8018060:	460b      	mov	r3, r1
 8018062:	4630      	mov	r0, r6
 8018064:	4639      	mov	r1, r7
 8018066:	f7ec f987 	bl	8004378 <__aeabi_dsub>
 801806a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801806e:	4606      	mov	r6, r0
 8018070:	460f      	mov	r7, r1
 8018072:	4620      	mov	r0, r4
 8018074:	4629      	mov	r1, r5
 8018076:	f7ec f97f 	bl	8004378 <__aeabi_dsub>
 801807a:	4602      	mov	r2, r0
 801807c:	460b      	mov	r3, r1
 801807e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8018082:	f7ec f979 	bl	8004378 <__aeabi_dsub>
 8018086:	4642      	mov	r2, r8
 8018088:	464b      	mov	r3, r9
 801808a:	f7ec fb2d 	bl	80046e8 <__aeabi_dmul>
 801808e:	4602      	mov	r2, r0
 8018090:	460b      	mov	r3, r1
 8018092:	4630      	mov	r0, r6
 8018094:	4639      	mov	r1, r7
 8018096:	f7ec f96f 	bl	8004378 <__aeabi_dsub>
 801809a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801809e:	f7ec fb23 	bl	80046e8 <__aeabi_dmul>
 80180a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80180a6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80180aa:	4610      	mov	r0, r2
 80180ac:	4619      	mov	r1, r3
 80180ae:	f7ec fb1b 	bl	80046e8 <__aeabi_dmul>
 80180b2:	a37b      	add	r3, pc, #492	; (adr r3, 80182a0 <__ieee754_pow+0x6d0>)
 80180b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80180b8:	4604      	mov	r4, r0
 80180ba:	460d      	mov	r5, r1
 80180bc:	f7ec fb14 	bl	80046e8 <__aeabi_dmul>
 80180c0:	a379      	add	r3, pc, #484	; (adr r3, 80182a8 <__ieee754_pow+0x6d8>)
 80180c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80180c6:	f7ec f959 	bl	800437c <__adddf3>
 80180ca:	4622      	mov	r2, r4
 80180cc:	462b      	mov	r3, r5
 80180ce:	f7ec fb0b 	bl	80046e8 <__aeabi_dmul>
 80180d2:	a377      	add	r3, pc, #476	; (adr r3, 80182b0 <__ieee754_pow+0x6e0>)
 80180d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80180d8:	f7ec f950 	bl	800437c <__adddf3>
 80180dc:	4622      	mov	r2, r4
 80180de:	462b      	mov	r3, r5
 80180e0:	f7ec fb02 	bl	80046e8 <__aeabi_dmul>
 80180e4:	a374      	add	r3, pc, #464	; (adr r3, 80182b8 <__ieee754_pow+0x6e8>)
 80180e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80180ea:	f7ec f947 	bl	800437c <__adddf3>
 80180ee:	4622      	mov	r2, r4
 80180f0:	462b      	mov	r3, r5
 80180f2:	f7ec faf9 	bl	80046e8 <__aeabi_dmul>
 80180f6:	a372      	add	r3, pc, #456	; (adr r3, 80182c0 <__ieee754_pow+0x6f0>)
 80180f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80180fc:	f7ec f93e 	bl	800437c <__adddf3>
 8018100:	4622      	mov	r2, r4
 8018102:	462b      	mov	r3, r5
 8018104:	f7ec faf0 	bl	80046e8 <__aeabi_dmul>
 8018108:	a36f      	add	r3, pc, #444	; (adr r3, 80182c8 <__ieee754_pow+0x6f8>)
 801810a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801810e:	f7ec f935 	bl	800437c <__adddf3>
 8018112:	4622      	mov	r2, r4
 8018114:	4606      	mov	r6, r0
 8018116:	460f      	mov	r7, r1
 8018118:	462b      	mov	r3, r5
 801811a:	4620      	mov	r0, r4
 801811c:	4629      	mov	r1, r5
 801811e:	f7ec fae3 	bl	80046e8 <__aeabi_dmul>
 8018122:	4602      	mov	r2, r0
 8018124:	460b      	mov	r3, r1
 8018126:	4630      	mov	r0, r6
 8018128:	4639      	mov	r1, r7
 801812a:	f7ec fadd 	bl	80046e8 <__aeabi_dmul>
 801812e:	4642      	mov	r2, r8
 8018130:	4604      	mov	r4, r0
 8018132:	460d      	mov	r5, r1
 8018134:	464b      	mov	r3, r9
 8018136:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801813a:	f7ec f91f 	bl	800437c <__adddf3>
 801813e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8018142:	f7ec fad1 	bl	80046e8 <__aeabi_dmul>
 8018146:	4622      	mov	r2, r4
 8018148:	462b      	mov	r3, r5
 801814a:	f7ec f917 	bl	800437c <__adddf3>
 801814e:	4642      	mov	r2, r8
 8018150:	4606      	mov	r6, r0
 8018152:	460f      	mov	r7, r1
 8018154:	464b      	mov	r3, r9
 8018156:	4640      	mov	r0, r8
 8018158:	4649      	mov	r1, r9
 801815a:	f7ec fac5 	bl	80046e8 <__aeabi_dmul>
 801815e:	2200      	movs	r2, #0
 8018160:	4b68      	ldr	r3, [pc, #416]	; (8018304 <__ieee754_pow+0x734>)
 8018162:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8018166:	f7ec f909 	bl	800437c <__adddf3>
 801816a:	4632      	mov	r2, r6
 801816c:	463b      	mov	r3, r7
 801816e:	f7ec f905 	bl	800437c <__adddf3>
 8018172:	9802      	ldr	r0, [sp, #8]
 8018174:	460d      	mov	r5, r1
 8018176:	4604      	mov	r4, r0
 8018178:	4602      	mov	r2, r0
 801817a:	460b      	mov	r3, r1
 801817c:	4640      	mov	r0, r8
 801817e:	4649      	mov	r1, r9
 8018180:	f7ec fab2 	bl	80046e8 <__aeabi_dmul>
 8018184:	2200      	movs	r2, #0
 8018186:	4680      	mov	r8, r0
 8018188:	4689      	mov	r9, r1
 801818a:	4b5e      	ldr	r3, [pc, #376]	; (8018304 <__ieee754_pow+0x734>)
 801818c:	4620      	mov	r0, r4
 801818e:	4629      	mov	r1, r5
 8018190:	f7ec f8f2 	bl	8004378 <__aeabi_dsub>
 8018194:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8018198:	f7ec f8ee 	bl	8004378 <__aeabi_dsub>
 801819c:	4602      	mov	r2, r0
 801819e:	460b      	mov	r3, r1
 80181a0:	4630      	mov	r0, r6
 80181a2:	4639      	mov	r1, r7
 80181a4:	f7ec f8e8 	bl	8004378 <__aeabi_dsub>
 80181a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80181ac:	f7ec fa9c 	bl	80046e8 <__aeabi_dmul>
 80181b0:	4622      	mov	r2, r4
 80181b2:	4606      	mov	r6, r0
 80181b4:	460f      	mov	r7, r1
 80181b6:	462b      	mov	r3, r5
 80181b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80181bc:	f7ec fa94 	bl	80046e8 <__aeabi_dmul>
 80181c0:	4602      	mov	r2, r0
 80181c2:	460b      	mov	r3, r1
 80181c4:	4630      	mov	r0, r6
 80181c6:	4639      	mov	r1, r7
 80181c8:	f7ec f8d8 	bl	800437c <__adddf3>
 80181cc:	4606      	mov	r6, r0
 80181ce:	460f      	mov	r7, r1
 80181d0:	4602      	mov	r2, r0
 80181d2:	460b      	mov	r3, r1
 80181d4:	4640      	mov	r0, r8
 80181d6:	4649      	mov	r1, r9
 80181d8:	f7ec f8d0 	bl	800437c <__adddf3>
 80181dc:	9802      	ldr	r0, [sp, #8]
 80181de:	a33c      	add	r3, pc, #240	; (adr r3, 80182d0 <__ieee754_pow+0x700>)
 80181e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80181e4:	4604      	mov	r4, r0
 80181e6:	460d      	mov	r5, r1
 80181e8:	f7ec fa7e 	bl	80046e8 <__aeabi_dmul>
 80181ec:	4642      	mov	r2, r8
 80181ee:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80181f2:	464b      	mov	r3, r9
 80181f4:	4620      	mov	r0, r4
 80181f6:	4629      	mov	r1, r5
 80181f8:	f7ec f8be 	bl	8004378 <__aeabi_dsub>
 80181fc:	4602      	mov	r2, r0
 80181fe:	460b      	mov	r3, r1
 8018200:	4630      	mov	r0, r6
 8018202:	4639      	mov	r1, r7
 8018204:	f7ec f8b8 	bl	8004378 <__aeabi_dsub>
 8018208:	a333      	add	r3, pc, #204	; (adr r3, 80182d8 <__ieee754_pow+0x708>)
 801820a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801820e:	f7ec fa6b 	bl	80046e8 <__aeabi_dmul>
 8018212:	a333      	add	r3, pc, #204	; (adr r3, 80182e0 <__ieee754_pow+0x710>)
 8018214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018218:	4606      	mov	r6, r0
 801821a:	460f      	mov	r7, r1
 801821c:	4620      	mov	r0, r4
 801821e:	4629      	mov	r1, r5
 8018220:	f7ec fa62 	bl	80046e8 <__aeabi_dmul>
 8018224:	4602      	mov	r2, r0
 8018226:	460b      	mov	r3, r1
 8018228:	4630      	mov	r0, r6
 801822a:	4639      	mov	r1, r7
 801822c:	f7ec f8a6 	bl	800437c <__adddf3>
 8018230:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018232:	4b35      	ldr	r3, [pc, #212]	; (8018308 <__ieee754_pow+0x738>)
 8018234:	4413      	add	r3, r2
 8018236:	e9d3 2300 	ldrd	r2, r3, [r3]
 801823a:	f7ec f89f 	bl	800437c <__adddf3>
 801823e:	4604      	mov	r4, r0
 8018240:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018242:	460d      	mov	r5, r1
 8018244:	f7ec f9e6 	bl	8004614 <__aeabi_i2d>
 8018248:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801824a:	4b30      	ldr	r3, [pc, #192]	; (801830c <__ieee754_pow+0x73c>)
 801824c:	4413      	add	r3, r2
 801824e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8018252:	4606      	mov	r6, r0
 8018254:	460f      	mov	r7, r1
 8018256:	4622      	mov	r2, r4
 8018258:	462b      	mov	r3, r5
 801825a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801825e:	f7ec f88d 	bl	800437c <__adddf3>
 8018262:	4642      	mov	r2, r8
 8018264:	464b      	mov	r3, r9
 8018266:	f7ec f889 	bl	800437c <__adddf3>
 801826a:	4632      	mov	r2, r6
 801826c:	463b      	mov	r3, r7
 801826e:	f7ec f885 	bl	800437c <__adddf3>
 8018272:	9802      	ldr	r0, [sp, #8]
 8018274:	4632      	mov	r2, r6
 8018276:	463b      	mov	r3, r7
 8018278:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801827c:	f7ec f87c 	bl	8004378 <__aeabi_dsub>
 8018280:	4642      	mov	r2, r8
 8018282:	464b      	mov	r3, r9
 8018284:	f7ec f878 	bl	8004378 <__aeabi_dsub>
 8018288:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801828c:	e607      	b.n	8017e9e <__ieee754_pow+0x2ce>
 801828e:	f04f 0a01 	mov.w	sl, #1
 8018292:	e6a5      	b.n	8017fe0 <__ieee754_pow+0x410>
 8018294:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80182e8 <__ieee754_pow+0x718>
 8018298:	e613      	b.n	8017ec2 <__ieee754_pow+0x2f2>
 801829a:	bf00      	nop
 801829c:	f3af 8000 	nop.w
 80182a0:	4a454eef 	.word	0x4a454eef
 80182a4:	3fca7e28 	.word	0x3fca7e28
 80182a8:	93c9db65 	.word	0x93c9db65
 80182ac:	3fcd864a 	.word	0x3fcd864a
 80182b0:	a91d4101 	.word	0xa91d4101
 80182b4:	3fd17460 	.word	0x3fd17460
 80182b8:	518f264d 	.word	0x518f264d
 80182bc:	3fd55555 	.word	0x3fd55555
 80182c0:	db6fabff 	.word	0xdb6fabff
 80182c4:	3fdb6db6 	.word	0x3fdb6db6
 80182c8:	33333303 	.word	0x33333303
 80182cc:	3fe33333 	.word	0x3fe33333
 80182d0:	e0000000 	.word	0xe0000000
 80182d4:	3feec709 	.word	0x3feec709
 80182d8:	dc3a03fd 	.word	0xdc3a03fd
 80182dc:	3feec709 	.word	0x3feec709
 80182e0:	145b01f5 	.word	0x145b01f5
 80182e4:	be3e2fe0 	.word	0xbe3e2fe0
 80182e8:	00000000 	.word	0x00000000
 80182ec:	3ff00000 	.word	0x3ff00000
 80182f0:	43400000 	.word	0x43400000
 80182f4:	0003988e 	.word	0x0003988e
 80182f8:	000bb679 	.word	0x000bb679
 80182fc:	0802fc00 	.word	0x0802fc00
 8018300:	3ff00000 	.word	0x3ff00000
 8018304:	40080000 	.word	0x40080000
 8018308:	0802fc20 	.word	0x0802fc20
 801830c:	0802fc10 	.word	0x0802fc10
 8018310:	a3b4      	add	r3, pc, #720	; (adr r3, 80185e4 <__ieee754_pow+0xa14>)
 8018312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018316:	4640      	mov	r0, r8
 8018318:	4649      	mov	r1, r9
 801831a:	f7ec f82f 	bl	800437c <__adddf3>
 801831e:	4622      	mov	r2, r4
 8018320:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018324:	462b      	mov	r3, r5
 8018326:	4630      	mov	r0, r6
 8018328:	4639      	mov	r1, r7
 801832a:	f7ec f825 	bl	8004378 <__aeabi_dsub>
 801832e:	4602      	mov	r2, r0
 8018330:	460b      	mov	r3, r1
 8018332:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8018336:	f7ec fc67 	bl	8004c08 <__aeabi_dcmpgt>
 801833a:	2800      	cmp	r0, #0
 801833c:	f47f adfe 	bne.w	8017f3c <__ieee754_pow+0x36c>
 8018340:	4aa3      	ldr	r2, [pc, #652]	; (80185d0 <__ieee754_pow+0xa00>)
 8018342:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8018346:	4293      	cmp	r3, r2
 8018348:	f340 810a 	ble.w	8018560 <__ieee754_pow+0x990>
 801834c:	151b      	asrs	r3, r3, #20
 801834e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8018352:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8018356:	fa4a f303 	asr.w	r3, sl, r3
 801835a:	445b      	add	r3, fp
 801835c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8018360:	4e9c      	ldr	r6, [pc, #624]	; (80185d4 <__ieee754_pow+0xa04>)
 8018362:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8018366:	4116      	asrs	r6, r2
 8018368:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 801836c:	2000      	movs	r0, #0
 801836e:	ea23 0106 	bic.w	r1, r3, r6
 8018372:	f1c2 0214 	rsb	r2, r2, #20
 8018376:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801837a:	fa4a fa02 	asr.w	sl, sl, r2
 801837e:	f1bb 0f00 	cmp.w	fp, #0
 8018382:	4602      	mov	r2, r0
 8018384:	460b      	mov	r3, r1
 8018386:	4620      	mov	r0, r4
 8018388:	4629      	mov	r1, r5
 801838a:	bfb8      	it	lt
 801838c:	f1ca 0a00 	rsblt	sl, sl, #0
 8018390:	f7eb fff2 	bl	8004378 <__aeabi_dsub>
 8018394:	e9cd 0100 	strd	r0, r1, [sp]
 8018398:	4642      	mov	r2, r8
 801839a:	464b      	mov	r3, r9
 801839c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80183a0:	f7eb ffec 	bl	800437c <__adddf3>
 80183a4:	2000      	movs	r0, #0
 80183a6:	a378      	add	r3, pc, #480	; (adr r3, 8018588 <__ieee754_pow+0x9b8>)
 80183a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80183ac:	4604      	mov	r4, r0
 80183ae:	460d      	mov	r5, r1
 80183b0:	f7ec f99a 	bl	80046e8 <__aeabi_dmul>
 80183b4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80183b8:	4606      	mov	r6, r0
 80183ba:	460f      	mov	r7, r1
 80183bc:	4620      	mov	r0, r4
 80183be:	4629      	mov	r1, r5
 80183c0:	f7eb ffda 	bl	8004378 <__aeabi_dsub>
 80183c4:	4602      	mov	r2, r0
 80183c6:	460b      	mov	r3, r1
 80183c8:	4640      	mov	r0, r8
 80183ca:	4649      	mov	r1, r9
 80183cc:	f7eb ffd4 	bl	8004378 <__aeabi_dsub>
 80183d0:	a36f      	add	r3, pc, #444	; (adr r3, 8018590 <__ieee754_pow+0x9c0>)
 80183d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80183d6:	f7ec f987 	bl	80046e8 <__aeabi_dmul>
 80183da:	a36f      	add	r3, pc, #444	; (adr r3, 8018598 <__ieee754_pow+0x9c8>)
 80183dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80183e0:	4680      	mov	r8, r0
 80183e2:	4689      	mov	r9, r1
 80183e4:	4620      	mov	r0, r4
 80183e6:	4629      	mov	r1, r5
 80183e8:	f7ec f97e 	bl	80046e8 <__aeabi_dmul>
 80183ec:	4602      	mov	r2, r0
 80183ee:	460b      	mov	r3, r1
 80183f0:	4640      	mov	r0, r8
 80183f2:	4649      	mov	r1, r9
 80183f4:	f7eb ffc2 	bl	800437c <__adddf3>
 80183f8:	4604      	mov	r4, r0
 80183fa:	460d      	mov	r5, r1
 80183fc:	4602      	mov	r2, r0
 80183fe:	460b      	mov	r3, r1
 8018400:	4630      	mov	r0, r6
 8018402:	4639      	mov	r1, r7
 8018404:	f7eb ffba 	bl	800437c <__adddf3>
 8018408:	4632      	mov	r2, r6
 801840a:	463b      	mov	r3, r7
 801840c:	4680      	mov	r8, r0
 801840e:	4689      	mov	r9, r1
 8018410:	f7eb ffb2 	bl	8004378 <__aeabi_dsub>
 8018414:	4602      	mov	r2, r0
 8018416:	460b      	mov	r3, r1
 8018418:	4620      	mov	r0, r4
 801841a:	4629      	mov	r1, r5
 801841c:	f7eb ffac 	bl	8004378 <__aeabi_dsub>
 8018420:	4642      	mov	r2, r8
 8018422:	4606      	mov	r6, r0
 8018424:	460f      	mov	r7, r1
 8018426:	464b      	mov	r3, r9
 8018428:	4640      	mov	r0, r8
 801842a:	4649      	mov	r1, r9
 801842c:	f7ec f95c 	bl	80046e8 <__aeabi_dmul>
 8018430:	a35b      	add	r3, pc, #364	; (adr r3, 80185a0 <__ieee754_pow+0x9d0>)
 8018432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018436:	4604      	mov	r4, r0
 8018438:	460d      	mov	r5, r1
 801843a:	f7ec f955 	bl	80046e8 <__aeabi_dmul>
 801843e:	a35a      	add	r3, pc, #360	; (adr r3, 80185a8 <__ieee754_pow+0x9d8>)
 8018440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018444:	f7eb ff98 	bl	8004378 <__aeabi_dsub>
 8018448:	4622      	mov	r2, r4
 801844a:	462b      	mov	r3, r5
 801844c:	f7ec f94c 	bl	80046e8 <__aeabi_dmul>
 8018450:	a357      	add	r3, pc, #348	; (adr r3, 80185b0 <__ieee754_pow+0x9e0>)
 8018452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018456:	f7eb ff91 	bl	800437c <__adddf3>
 801845a:	4622      	mov	r2, r4
 801845c:	462b      	mov	r3, r5
 801845e:	f7ec f943 	bl	80046e8 <__aeabi_dmul>
 8018462:	a355      	add	r3, pc, #340	; (adr r3, 80185b8 <__ieee754_pow+0x9e8>)
 8018464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018468:	f7eb ff86 	bl	8004378 <__aeabi_dsub>
 801846c:	4622      	mov	r2, r4
 801846e:	462b      	mov	r3, r5
 8018470:	f7ec f93a 	bl	80046e8 <__aeabi_dmul>
 8018474:	a352      	add	r3, pc, #328	; (adr r3, 80185c0 <__ieee754_pow+0x9f0>)
 8018476:	e9d3 2300 	ldrd	r2, r3, [r3]
 801847a:	f7eb ff7f 	bl	800437c <__adddf3>
 801847e:	4622      	mov	r2, r4
 8018480:	462b      	mov	r3, r5
 8018482:	f7ec f931 	bl	80046e8 <__aeabi_dmul>
 8018486:	4602      	mov	r2, r0
 8018488:	460b      	mov	r3, r1
 801848a:	4640      	mov	r0, r8
 801848c:	4649      	mov	r1, r9
 801848e:	f7eb ff73 	bl	8004378 <__aeabi_dsub>
 8018492:	4604      	mov	r4, r0
 8018494:	460d      	mov	r5, r1
 8018496:	4602      	mov	r2, r0
 8018498:	460b      	mov	r3, r1
 801849a:	4640      	mov	r0, r8
 801849c:	4649      	mov	r1, r9
 801849e:	f7ec f923 	bl	80046e8 <__aeabi_dmul>
 80184a2:	2200      	movs	r2, #0
 80184a4:	e9cd 0100 	strd	r0, r1, [sp]
 80184a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80184ac:	4620      	mov	r0, r4
 80184ae:	4629      	mov	r1, r5
 80184b0:	f7eb ff62 	bl	8004378 <__aeabi_dsub>
 80184b4:	4602      	mov	r2, r0
 80184b6:	460b      	mov	r3, r1
 80184b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80184bc:	f7ec fa3e 	bl	800493c <__aeabi_ddiv>
 80184c0:	4632      	mov	r2, r6
 80184c2:	4604      	mov	r4, r0
 80184c4:	460d      	mov	r5, r1
 80184c6:	463b      	mov	r3, r7
 80184c8:	4640      	mov	r0, r8
 80184ca:	4649      	mov	r1, r9
 80184cc:	f7ec f90c 	bl	80046e8 <__aeabi_dmul>
 80184d0:	4632      	mov	r2, r6
 80184d2:	463b      	mov	r3, r7
 80184d4:	f7eb ff52 	bl	800437c <__adddf3>
 80184d8:	4602      	mov	r2, r0
 80184da:	460b      	mov	r3, r1
 80184dc:	4620      	mov	r0, r4
 80184de:	4629      	mov	r1, r5
 80184e0:	f7eb ff4a 	bl	8004378 <__aeabi_dsub>
 80184e4:	4642      	mov	r2, r8
 80184e6:	464b      	mov	r3, r9
 80184e8:	f7eb ff46 	bl	8004378 <__aeabi_dsub>
 80184ec:	4602      	mov	r2, r0
 80184ee:	460b      	mov	r3, r1
 80184f0:	2000      	movs	r0, #0
 80184f2:	4939      	ldr	r1, [pc, #228]	; (80185d8 <__ieee754_pow+0xa08>)
 80184f4:	f7eb ff40 	bl	8004378 <__aeabi_dsub>
 80184f8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80184fc:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8018500:	4602      	mov	r2, r0
 8018502:	460b      	mov	r3, r1
 8018504:	da2f      	bge.n	8018566 <__ieee754_pow+0x996>
 8018506:	4650      	mov	r0, sl
 8018508:	ec43 2b10 	vmov	d0, r2, r3
 801850c:	f000 fcd8 	bl	8018ec0 <scalbn>
 8018510:	ec51 0b10 	vmov	r0, r1, d0
 8018514:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018518:	f7ff bbf1 	b.w	8017cfe <__ieee754_pow+0x12e>
 801851c:	4b2f      	ldr	r3, [pc, #188]	; (80185dc <__ieee754_pow+0xa0c>)
 801851e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8018522:	429e      	cmp	r6, r3
 8018524:	f77f af0c 	ble.w	8018340 <__ieee754_pow+0x770>
 8018528:	4b2d      	ldr	r3, [pc, #180]	; (80185e0 <__ieee754_pow+0xa10>)
 801852a:	440b      	add	r3, r1
 801852c:	4303      	orrs	r3, r0
 801852e:	d00b      	beq.n	8018548 <__ieee754_pow+0x978>
 8018530:	a325      	add	r3, pc, #148	; (adr r3, 80185c8 <__ieee754_pow+0x9f8>)
 8018532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018536:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801853a:	f7ec f8d5 	bl	80046e8 <__aeabi_dmul>
 801853e:	a322      	add	r3, pc, #136	; (adr r3, 80185c8 <__ieee754_pow+0x9f8>)
 8018540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018544:	f7ff bbdb 	b.w	8017cfe <__ieee754_pow+0x12e>
 8018548:	4622      	mov	r2, r4
 801854a:	462b      	mov	r3, r5
 801854c:	f7eb ff14 	bl	8004378 <__aeabi_dsub>
 8018550:	4642      	mov	r2, r8
 8018552:	464b      	mov	r3, r9
 8018554:	f7ec fb4e 	bl	8004bf4 <__aeabi_dcmpge>
 8018558:	2800      	cmp	r0, #0
 801855a:	f43f aef1 	beq.w	8018340 <__ieee754_pow+0x770>
 801855e:	e7e7      	b.n	8018530 <__ieee754_pow+0x960>
 8018560:	f04f 0a00 	mov.w	sl, #0
 8018564:	e718      	b.n	8018398 <__ieee754_pow+0x7c8>
 8018566:	4621      	mov	r1, r4
 8018568:	e7d4      	b.n	8018514 <__ieee754_pow+0x944>
 801856a:	2000      	movs	r0, #0
 801856c:	491a      	ldr	r1, [pc, #104]	; (80185d8 <__ieee754_pow+0xa08>)
 801856e:	f7ff bb8f 	b.w	8017c90 <__ieee754_pow+0xc0>
 8018572:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018576:	f7ff bb8b 	b.w	8017c90 <__ieee754_pow+0xc0>
 801857a:	4630      	mov	r0, r6
 801857c:	4639      	mov	r1, r7
 801857e:	f7ff bb87 	b.w	8017c90 <__ieee754_pow+0xc0>
 8018582:	4693      	mov	fp, r2
 8018584:	f7ff bb98 	b.w	8017cb8 <__ieee754_pow+0xe8>
 8018588:	00000000 	.word	0x00000000
 801858c:	3fe62e43 	.word	0x3fe62e43
 8018590:	fefa39ef 	.word	0xfefa39ef
 8018594:	3fe62e42 	.word	0x3fe62e42
 8018598:	0ca86c39 	.word	0x0ca86c39
 801859c:	be205c61 	.word	0xbe205c61
 80185a0:	72bea4d0 	.word	0x72bea4d0
 80185a4:	3e663769 	.word	0x3e663769
 80185a8:	c5d26bf1 	.word	0xc5d26bf1
 80185ac:	3ebbbd41 	.word	0x3ebbbd41
 80185b0:	af25de2c 	.word	0xaf25de2c
 80185b4:	3f11566a 	.word	0x3f11566a
 80185b8:	16bebd93 	.word	0x16bebd93
 80185bc:	3f66c16c 	.word	0x3f66c16c
 80185c0:	5555553e 	.word	0x5555553e
 80185c4:	3fc55555 	.word	0x3fc55555
 80185c8:	c2f8f359 	.word	0xc2f8f359
 80185cc:	01a56e1f 	.word	0x01a56e1f
 80185d0:	3fe00000 	.word	0x3fe00000
 80185d4:	000fffff 	.word	0x000fffff
 80185d8:	3ff00000 	.word	0x3ff00000
 80185dc:	4090cbff 	.word	0x4090cbff
 80185e0:	3f6f3400 	.word	0x3f6f3400
 80185e4:	652b82fe 	.word	0x652b82fe
 80185e8:	3c971547 	.word	0x3c971547

080185ec <__ieee754_sqrt>:
 80185ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80185f0:	4955      	ldr	r1, [pc, #340]	; (8018748 <__ieee754_sqrt+0x15c>)
 80185f2:	ec55 4b10 	vmov	r4, r5, d0
 80185f6:	43a9      	bics	r1, r5
 80185f8:	462b      	mov	r3, r5
 80185fa:	462a      	mov	r2, r5
 80185fc:	d112      	bne.n	8018624 <__ieee754_sqrt+0x38>
 80185fe:	ee10 2a10 	vmov	r2, s0
 8018602:	ee10 0a10 	vmov	r0, s0
 8018606:	4629      	mov	r1, r5
 8018608:	f7ec f86e 	bl	80046e8 <__aeabi_dmul>
 801860c:	4602      	mov	r2, r0
 801860e:	460b      	mov	r3, r1
 8018610:	4620      	mov	r0, r4
 8018612:	4629      	mov	r1, r5
 8018614:	f7eb feb2 	bl	800437c <__adddf3>
 8018618:	4604      	mov	r4, r0
 801861a:	460d      	mov	r5, r1
 801861c:	ec45 4b10 	vmov	d0, r4, r5
 8018620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018624:	2d00      	cmp	r5, #0
 8018626:	ee10 0a10 	vmov	r0, s0
 801862a:	4621      	mov	r1, r4
 801862c:	dc0f      	bgt.n	801864e <__ieee754_sqrt+0x62>
 801862e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8018632:	4330      	orrs	r0, r6
 8018634:	d0f2      	beq.n	801861c <__ieee754_sqrt+0x30>
 8018636:	b155      	cbz	r5, 801864e <__ieee754_sqrt+0x62>
 8018638:	ee10 2a10 	vmov	r2, s0
 801863c:	4620      	mov	r0, r4
 801863e:	4629      	mov	r1, r5
 8018640:	f7eb fe9a 	bl	8004378 <__aeabi_dsub>
 8018644:	4602      	mov	r2, r0
 8018646:	460b      	mov	r3, r1
 8018648:	f7ec f978 	bl	800493c <__aeabi_ddiv>
 801864c:	e7e4      	b.n	8018618 <__ieee754_sqrt+0x2c>
 801864e:	151b      	asrs	r3, r3, #20
 8018650:	d073      	beq.n	801873a <__ieee754_sqrt+0x14e>
 8018652:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8018656:	07dd      	lsls	r5, r3, #31
 8018658:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801865c:	bf48      	it	mi
 801865e:	0fc8      	lsrmi	r0, r1, #31
 8018660:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8018664:	bf44      	itt	mi
 8018666:	0049      	lslmi	r1, r1, #1
 8018668:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 801866c:	2500      	movs	r5, #0
 801866e:	1058      	asrs	r0, r3, #1
 8018670:	0fcb      	lsrs	r3, r1, #31
 8018672:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8018676:	0049      	lsls	r1, r1, #1
 8018678:	2316      	movs	r3, #22
 801867a:	462c      	mov	r4, r5
 801867c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8018680:	19a7      	adds	r7, r4, r6
 8018682:	4297      	cmp	r7, r2
 8018684:	bfde      	ittt	le
 8018686:	19bc      	addle	r4, r7, r6
 8018688:	1bd2      	suble	r2, r2, r7
 801868a:	19ad      	addle	r5, r5, r6
 801868c:	0fcf      	lsrs	r7, r1, #31
 801868e:	3b01      	subs	r3, #1
 8018690:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8018694:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8018698:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801869c:	d1f0      	bne.n	8018680 <__ieee754_sqrt+0x94>
 801869e:	f04f 0c20 	mov.w	ip, #32
 80186a2:	469e      	mov	lr, r3
 80186a4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80186a8:	42a2      	cmp	r2, r4
 80186aa:	eb06 070e 	add.w	r7, r6, lr
 80186ae:	dc02      	bgt.n	80186b6 <__ieee754_sqrt+0xca>
 80186b0:	d112      	bne.n	80186d8 <__ieee754_sqrt+0xec>
 80186b2:	428f      	cmp	r7, r1
 80186b4:	d810      	bhi.n	80186d8 <__ieee754_sqrt+0xec>
 80186b6:	2f00      	cmp	r7, #0
 80186b8:	eb07 0e06 	add.w	lr, r7, r6
 80186bc:	da42      	bge.n	8018744 <__ieee754_sqrt+0x158>
 80186be:	f1be 0f00 	cmp.w	lr, #0
 80186c2:	db3f      	blt.n	8018744 <__ieee754_sqrt+0x158>
 80186c4:	f104 0801 	add.w	r8, r4, #1
 80186c8:	1b12      	subs	r2, r2, r4
 80186ca:	428f      	cmp	r7, r1
 80186cc:	bf88      	it	hi
 80186ce:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80186d2:	1bc9      	subs	r1, r1, r7
 80186d4:	4433      	add	r3, r6
 80186d6:	4644      	mov	r4, r8
 80186d8:	0052      	lsls	r2, r2, #1
 80186da:	f1bc 0c01 	subs.w	ip, ip, #1
 80186de:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 80186e2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80186e6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80186ea:	d1dd      	bne.n	80186a8 <__ieee754_sqrt+0xbc>
 80186ec:	430a      	orrs	r2, r1
 80186ee:	d006      	beq.n	80186fe <__ieee754_sqrt+0x112>
 80186f0:	1c5c      	adds	r4, r3, #1
 80186f2:	bf13      	iteet	ne
 80186f4:	3301      	addne	r3, #1
 80186f6:	3501      	addeq	r5, #1
 80186f8:	4663      	moveq	r3, ip
 80186fa:	f023 0301 	bicne.w	r3, r3, #1
 80186fe:	106a      	asrs	r2, r5, #1
 8018700:	085b      	lsrs	r3, r3, #1
 8018702:	07e9      	lsls	r1, r5, #31
 8018704:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8018708:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801870c:	bf48      	it	mi
 801870e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8018712:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8018716:	461c      	mov	r4, r3
 8018718:	e780      	b.n	801861c <__ieee754_sqrt+0x30>
 801871a:	0aca      	lsrs	r2, r1, #11
 801871c:	3815      	subs	r0, #21
 801871e:	0549      	lsls	r1, r1, #21
 8018720:	2a00      	cmp	r2, #0
 8018722:	d0fa      	beq.n	801871a <__ieee754_sqrt+0x12e>
 8018724:	02d6      	lsls	r6, r2, #11
 8018726:	d50a      	bpl.n	801873e <__ieee754_sqrt+0x152>
 8018728:	f1c3 0420 	rsb	r4, r3, #32
 801872c:	fa21 f404 	lsr.w	r4, r1, r4
 8018730:	1e5d      	subs	r5, r3, #1
 8018732:	4099      	lsls	r1, r3
 8018734:	4322      	orrs	r2, r4
 8018736:	1b43      	subs	r3, r0, r5
 8018738:	e78b      	b.n	8018652 <__ieee754_sqrt+0x66>
 801873a:	4618      	mov	r0, r3
 801873c:	e7f0      	b.n	8018720 <__ieee754_sqrt+0x134>
 801873e:	0052      	lsls	r2, r2, #1
 8018740:	3301      	adds	r3, #1
 8018742:	e7ef      	b.n	8018724 <__ieee754_sqrt+0x138>
 8018744:	46a0      	mov	r8, r4
 8018746:	e7bf      	b.n	80186c8 <__ieee754_sqrt+0xdc>
 8018748:	7ff00000 	.word	0x7ff00000

0801874c <__ieee754_log10f>:
 801874c:	b508      	push	{r3, lr}
 801874e:	ee10 2a10 	vmov	r2, s0
 8018752:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8018756:	ed2d 8b02 	vpush	{d8}
 801875a:	d108      	bne.n	801876e <__ieee754_log10f+0x22>
 801875c:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80187e0 <__ieee754_log10f+0x94>
 8018760:	eddf 7a20 	vldr	s15, [pc, #128]	; 80187e4 <__ieee754_log10f+0x98>
 8018764:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8018768:	ecbd 8b02 	vpop	{d8}
 801876c:	bd08      	pop	{r3, pc}
 801876e:	2a00      	cmp	r2, #0
 8018770:	da02      	bge.n	8018778 <__ieee754_log10f+0x2c>
 8018772:	ee30 7a40 	vsub.f32	s14, s0, s0
 8018776:	e7f3      	b.n	8018760 <__ieee754_log10f+0x14>
 8018778:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801877c:	db02      	blt.n	8018784 <__ieee754_log10f+0x38>
 801877e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8018782:	e7f1      	b.n	8018768 <__ieee754_log10f+0x1c>
 8018784:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8018788:	bfbf      	itttt	lt
 801878a:	eddf 7a17 	vldrlt	s15, [pc, #92]	; 80187e8 <__ieee754_log10f+0x9c>
 801878e:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8018792:	f06f 0118 	mvnlt.w	r1, #24
 8018796:	ee17 2a90 	vmovlt	r2, s15
 801879a:	ea4f 53e2 	mov.w	r3, r2, asr #23
 801879e:	bfa8      	it	ge
 80187a0:	2100      	movge	r1, #0
 80187a2:	3b7f      	subs	r3, #127	; 0x7f
 80187a4:	440b      	add	r3, r1
 80187a6:	0fd9      	lsrs	r1, r3, #31
 80187a8:	440b      	add	r3, r1
 80187aa:	f3c2 0216 	ubfx	r2, r2, #0, #23
 80187ae:	f1c1 017f 	rsb	r1, r1, #127	; 0x7f
 80187b2:	ee07 3a90 	vmov	s15, r3
 80187b6:	ea42 53c1 	orr.w	r3, r2, r1, lsl #23
 80187ba:	ee00 3a10 	vmov	s0, r3
 80187be:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80187c2:	f000 fcc5 	bl	8019150 <__ieee754_logf>
 80187c6:	eddf 7a09 	vldr	s15, [pc, #36]	; 80187ec <__ieee754_log10f+0xa0>
 80187ca:	ee20 0a27 	vmul.f32	s0, s0, s15
 80187ce:	eddf 7a08 	vldr	s15, [pc, #32]	; 80187f0 <__ieee754_log10f+0xa4>
 80187d2:	eea8 0a27 	vfma.f32	s0, s16, s15
 80187d6:	eddf 7a07 	vldr	s15, [pc, #28]	; 80187f4 <__ieee754_log10f+0xa8>
 80187da:	eea8 0a27 	vfma.f32	s0, s16, s15
 80187de:	e7c3      	b.n	8018768 <__ieee754_log10f+0x1c>
 80187e0:	cc000000 	.word	0xcc000000
 80187e4:	00000000 	.word	0x00000000
 80187e8:	4c000000 	.word	0x4c000000
 80187ec:	3ede5bd9 	.word	0x3ede5bd9
 80187f0:	355427db 	.word	0x355427db
 80187f4:	3e9a2080 	.word	0x3e9a2080

080187f8 <__ieee754_powf>:
 80187f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80187fc:	ee10 5a90 	vmov	r5, s1
 8018800:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 8018804:	ed2d 8b02 	vpush	{d8}
 8018808:	eeb0 8a40 	vmov.f32	s16, s0
 801880c:	eef0 8a60 	vmov.f32	s17, s1
 8018810:	f000 8293 	beq.w	8018d3a <__ieee754_powf+0x542>
 8018814:	ee10 8a10 	vmov	r8, s0
 8018818:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 801881c:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8018820:	dc06      	bgt.n	8018830 <__ieee754_powf+0x38>
 8018822:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8018826:	dd0a      	ble.n	801883e <__ieee754_powf+0x46>
 8018828:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 801882c:	f000 8285 	beq.w	8018d3a <__ieee754_powf+0x542>
 8018830:	ecbd 8b02 	vpop	{d8}
 8018834:	48d9      	ldr	r0, [pc, #868]	; (8018b9c <__ieee754_powf+0x3a4>)
 8018836:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801883a:	f000 bbc9 	b.w	8018fd0 <nanf>
 801883e:	f1b8 0f00 	cmp.w	r8, #0
 8018842:	da1d      	bge.n	8018880 <__ieee754_powf+0x88>
 8018844:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 8018848:	da2c      	bge.n	80188a4 <__ieee754_powf+0xac>
 801884a:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 801884e:	db30      	blt.n	80188b2 <__ieee754_powf+0xba>
 8018850:	15fb      	asrs	r3, r7, #23
 8018852:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8018856:	fa47 f603 	asr.w	r6, r7, r3
 801885a:	fa06 f303 	lsl.w	r3, r6, r3
 801885e:	42bb      	cmp	r3, r7
 8018860:	d127      	bne.n	80188b2 <__ieee754_powf+0xba>
 8018862:	f006 0601 	and.w	r6, r6, #1
 8018866:	f1c6 0602 	rsb	r6, r6, #2
 801886a:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 801886e:	d122      	bne.n	80188b6 <__ieee754_powf+0xbe>
 8018870:	2d00      	cmp	r5, #0
 8018872:	f280 8268 	bge.w	8018d46 <__ieee754_powf+0x54e>
 8018876:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801887a:	ee87 0a88 	vdiv.f32	s0, s15, s16
 801887e:	e00d      	b.n	801889c <__ieee754_powf+0xa4>
 8018880:	2600      	movs	r6, #0
 8018882:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8018886:	d1f0      	bne.n	801886a <__ieee754_powf+0x72>
 8018888:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 801888c:	f000 8255 	beq.w	8018d3a <__ieee754_powf+0x542>
 8018890:	dd0a      	ble.n	80188a8 <__ieee754_powf+0xb0>
 8018892:	2d00      	cmp	r5, #0
 8018894:	f280 8254 	bge.w	8018d40 <__ieee754_powf+0x548>
 8018898:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 8018ba0 <__ieee754_powf+0x3a8>
 801889c:	ecbd 8b02 	vpop	{d8}
 80188a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80188a4:	2602      	movs	r6, #2
 80188a6:	e7ec      	b.n	8018882 <__ieee754_powf+0x8a>
 80188a8:	2d00      	cmp	r5, #0
 80188aa:	daf5      	bge.n	8018898 <__ieee754_powf+0xa0>
 80188ac:	eeb1 0a68 	vneg.f32	s0, s17
 80188b0:	e7f4      	b.n	801889c <__ieee754_powf+0xa4>
 80188b2:	2600      	movs	r6, #0
 80188b4:	e7d9      	b.n	801886a <__ieee754_powf+0x72>
 80188b6:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 80188ba:	d102      	bne.n	80188c2 <__ieee754_powf+0xca>
 80188bc:	ee28 0a08 	vmul.f32	s0, s16, s16
 80188c0:	e7ec      	b.n	801889c <__ieee754_powf+0xa4>
 80188c2:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 80188c6:	eeb0 0a48 	vmov.f32	s0, s16
 80188ca:	d108      	bne.n	80188de <__ieee754_powf+0xe6>
 80188cc:	f1b8 0f00 	cmp.w	r8, #0
 80188d0:	db05      	blt.n	80188de <__ieee754_powf+0xe6>
 80188d2:	ecbd 8b02 	vpop	{d8}
 80188d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80188da:	f000 ba4d 	b.w	8018d78 <__ieee754_sqrtf>
 80188de:	f000 fb65 	bl	8018fac <fabsf>
 80188e2:	b124      	cbz	r4, 80188ee <__ieee754_powf+0xf6>
 80188e4:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 80188e8:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 80188ec:	d117      	bne.n	801891e <__ieee754_powf+0x126>
 80188ee:	2d00      	cmp	r5, #0
 80188f0:	bfbc      	itt	lt
 80188f2:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 80188f6:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 80188fa:	f1b8 0f00 	cmp.w	r8, #0
 80188fe:	dacd      	bge.n	801889c <__ieee754_powf+0xa4>
 8018900:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 8018904:	ea54 0306 	orrs.w	r3, r4, r6
 8018908:	d104      	bne.n	8018914 <__ieee754_powf+0x11c>
 801890a:	ee70 7a40 	vsub.f32	s15, s0, s0
 801890e:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8018912:	e7c3      	b.n	801889c <__ieee754_powf+0xa4>
 8018914:	2e01      	cmp	r6, #1
 8018916:	d1c1      	bne.n	801889c <__ieee754_powf+0xa4>
 8018918:	eeb1 0a40 	vneg.f32	s0, s0
 801891c:	e7be      	b.n	801889c <__ieee754_powf+0xa4>
 801891e:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 8018922:	3801      	subs	r0, #1
 8018924:	ea56 0300 	orrs.w	r3, r6, r0
 8018928:	d104      	bne.n	8018934 <__ieee754_powf+0x13c>
 801892a:	ee38 8a48 	vsub.f32	s16, s16, s16
 801892e:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8018932:	e7b3      	b.n	801889c <__ieee754_powf+0xa4>
 8018934:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 8018938:	dd6d      	ble.n	8018a16 <__ieee754_powf+0x21e>
 801893a:	4b9a      	ldr	r3, [pc, #616]	; (8018ba4 <__ieee754_powf+0x3ac>)
 801893c:	429c      	cmp	r4, r3
 801893e:	dc06      	bgt.n	801894e <__ieee754_powf+0x156>
 8018940:	2d00      	cmp	r5, #0
 8018942:	daa9      	bge.n	8018898 <__ieee754_powf+0xa0>
 8018944:	ed9f 0a98 	vldr	s0, [pc, #608]	; 8018ba8 <__ieee754_powf+0x3b0>
 8018948:	ee20 0a00 	vmul.f32	s0, s0, s0
 801894c:	e7a6      	b.n	801889c <__ieee754_powf+0xa4>
 801894e:	4b97      	ldr	r3, [pc, #604]	; (8018bac <__ieee754_powf+0x3b4>)
 8018950:	429c      	cmp	r4, r3
 8018952:	dd02      	ble.n	801895a <__ieee754_powf+0x162>
 8018954:	2d00      	cmp	r5, #0
 8018956:	dcf5      	bgt.n	8018944 <__ieee754_powf+0x14c>
 8018958:	e79e      	b.n	8018898 <__ieee754_powf+0xa0>
 801895a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801895e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8018962:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8018bb0 <__ieee754_powf+0x3b8>
 8018966:	eef1 6a40 	vneg.f32	s13, s0
 801896a:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 801896e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8018972:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8018976:	eee7 7a40 	vfms.f32	s15, s14, s0
 801897a:	ee60 0a00 	vmul.f32	s1, s0, s0
 801897e:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 8018bb4 <__ieee754_powf+0x3bc>
 8018982:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8018986:	eddf 7a8c 	vldr	s15, [pc, #560]	; 8018bb8 <__ieee754_powf+0x3c0>
 801898a:	ee67 7ae0 	vnmul.f32	s15, s15, s1
 801898e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8018992:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8018bbc <__ieee754_powf+0x3c4>
 8018996:	eeb0 6a67 	vmov.f32	s12, s15
 801899a:	eea0 6a07 	vfma.f32	s12, s0, s14
 801899e:	ee16 3a10 	vmov	r3, s12
 80189a2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80189a6:	f023 030f 	bic.w	r3, r3, #15
 80189aa:	ee00 3a90 	vmov	s1, r3
 80189ae:	eee6 0a87 	vfma.f32	s1, s13, s14
 80189b2:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80189b6:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 80189ba:	f025 050f 	bic.w	r5, r5, #15
 80189be:	ee07 5a10 	vmov	s14, r5
 80189c2:	ee67 0aa8 	vmul.f32	s1, s15, s17
 80189c6:	ee38 7ac7 	vsub.f32	s14, s17, s14
 80189ca:	ee07 3a90 	vmov	s15, r3
 80189ce:	eee7 0a27 	vfma.f32	s1, s14, s15
 80189d2:	3e01      	subs	r6, #1
 80189d4:	ea56 0200 	orrs.w	r2, r6, r0
 80189d8:	ee07 5a10 	vmov	s14, r5
 80189dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80189e0:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 80189e4:	ee30 7aa7 	vadd.f32	s14, s1, s15
 80189e8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80189ec:	ee17 4a10 	vmov	r4, s14
 80189f0:	bf08      	it	eq
 80189f2:	eeb0 8a40 	vmoveq.f32	s16, s0
 80189f6:	2c00      	cmp	r4, #0
 80189f8:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80189fc:	f340 8184 	ble.w	8018d08 <__ieee754_powf+0x510>
 8018a00:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8018a04:	f340 80fc 	ble.w	8018c00 <__ieee754_powf+0x408>
 8018a08:	eddf 7a67 	vldr	s15, [pc, #412]	; 8018ba8 <__ieee754_powf+0x3b0>
 8018a0c:	ee28 0a27 	vmul.f32	s0, s16, s15
 8018a10:	ee20 0a27 	vmul.f32	s0, s0, s15
 8018a14:	e742      	b.n	801889c <__ieee754_powf+0xa4>
 8018a16:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 8018a1a:	bfbf      	itttt	lt
 8018a1c:	eddf 7a68 	vldrlt	s15, [pc, #416]	; 8018bc0 <__ieee754_powf+0x3c8>
 8018a20:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8018a24:	f06f 0217 	mvnlt.w	r2, #23
 8018a28:	ee17 4a90 	vmovlt	r4, s15
 8018a2c:	ea4f 53e4 	mov.w	r3, r4, asr #23
 8018a30:	bfa8      	it	ge
 8018a32:	2200      	movge	r2, #0
 8018a34:	3b7f      	subs	r3, #127	; 0x7f
 8018a36:	4413      	add	r3, r2
 8018a38:	4a62      	ldr	r2, [pc, #392]	; (8018bc4 <__ieee754_powf+0x3cc>)
 8018a3a:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8018a3e:	4294      	cmp	r4, r2
 8018a40:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 8018a44:	dd06      	ble.n	8018a54 <__ieee754_powf+0x25c>
 8018a46:	4a60      	ldr	r2, [pc, #384]	; (8018bc8 <__ieee754_powf+0x3d0>)
 8018a48:	4294      	cmp	r4, r2
 8018a4a:	f340 80a5 	ble.w	8018b98 <__ieee754_powf+0x3a0>
 8018a4e:	3301      	adds	r3, #1
 8018a50:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8018a54:	2400      	movs	r4, #0
 8018a56:	4a5d      	ldr	r2, [pc, #372]	; (8018bcc <__ieee754_powf+0x3d4>)
 8018a58:	00a7      	lsls	r7, r4, #2
 8018a5a:	443a      	add	r2, r7
 8018a5c:	ee07 1a90 	vmov	s15, r1
 8018a60:	ed92 7a00 	vldr	s14, [r2]
 8018a64:	4a5a      	ldr	r2, [pc, #360]	; (8018bd0 <__ieee754_powf+0x3d8>)
 8018a66:	ee37 6a27 	vadd.f32	s12, s14, s15
 8018a6a:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8018a6e:	eec5 6a06 	vdiv.f32	s13, s10, s12
 8018a72:	1049      	asrs	r1, r1, #1
 8018a74:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8018a78:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8018a7c:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 8018a80:	ee77 5ac7 	vsub.f32	s11, s15, s14
 8018a84:	ee06 1a10 	vmov	s12, r1
 8018a88:	ee65 4aa6 	vmul.f32	s9, s11, s13
 8018a8c:	ee14 ca90 	vmov	ip, s9
 8018a90:	ea02 0c0c 	and.w	ip, r2, ip
 8018a94:	ee05 ca10 	vmov	s10, ip
 8018a98:	eeb1 4a45 	vneg.f32	s8, s10
 8018a9c:	eee4 5a06 	vfma.f32	s11, s8, s12
 8018aa0:	ee36 6a47 	vsub.f32	s12, s12, s14
 8018aa4:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8018bd4 <__ieee754_powf+0x3dc>
 8018aa8:	ee37 6ac6 	vsub.f32	s12, s15, s12
 8018aac:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8018ab0:	eee4 5a06 	vfma.f32	s11, s8, s12
 8018ab4:	ee67 3aa7 	vmul.f32	s7, s15, s15
 8018ab8:	ee25 6aa6 	vmul.f32	s12, s11, s13
 8018abc:	eddf 5a46 	vldr	s11, [pc, #280]	; 8018bd8 <__ieee754_powf+0x3e0>
 8018ac0:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8018ac4:	eddf 5a45 	vldr	s11, [pc, #276]	; 8018bdc <__ieee754_powf+0x3e4>
 8018ac8:	eee7 5a27 	vfma.f32	s11, s14, s15
 8018acc:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8018bb0 <__ieee754_powf+0x3b8>
 8018ad0:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8018ad4:	eddf 5a42 	vldr	s11, [pc, #264]	; 8018be0 <__ieee754_powf+0x3e8>
 8018ad8:	eee7 5a27 	vfma.f32	s11, s14, s15
 8018adc:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8018be4 <__ieee754_powf+0x3ec>
 8018ae0:	ee75 6a24 	vadd.f32	s13, s10, s9
 8018ae4:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8018ae8:	ee66 6a86 	vmul.f32	s13, s13, s12
 8018aec:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 8018af0:	eef0 7a65 	vmov.f32	s15, s11
 8018af4:	eee3 6a87 	vfma.f32	s13, s7, s14
 8018af8:	eee5 7a05 	vfma.f32	s15, s10, s10
 8018afc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018b00:	ee17 1a90 	vmov	r1, s15
 8018b04:	4011      	ands	r1, r2
 8018b06:	ee07 1a90 	vmov	s15, r1
 8018b0a:	ee37 7ae5 	vsub.f32	s14, s15, s11
 8018b0e:	eddf 5a36 	vldr	s11, [pc, #216]	; 8018be8 <__ieee754_powf+0x3f0>
 8018b12:	eea4 7a05 	vfma.f32	s14, s8, s10
 8018b16:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8018b1a:	ee27 7a24 	vmul.f32	s14, s14, s9
 8018b1e:	eea7 7a86 	vfma.f32	s14, s15, s12
 8018b22:	eeb0 6a47 	vmov.f32	s12, s14
 8018b26:	eea5 6a27 	vfma.f32	s12, s10, s15
 8018b2a:	ee16 1a10 	vmov	r1, s12
 8018b2e:	4011      	ands	r1, r2
 8018b30:	ee06 1a90 	vmov	s13, r1
 8018b34:	eee4 6a27 	vfma.f32	s13, s8, s15
 8018b38:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8018bec <__ieee754_powf+0x3f4>
 8018b3c:	ee37 7a66 	vsub.f32	s14, s14, s13
 8018b40:	ee06 1a10 	vmov	s12, r1
 8018b44:	ee27 7a27 	vmul.f32	s14, s14, s15
 8018b48:	eddf 7a29 	vldr	s15, [pc, #164]	; 8018bf0 <__ieee754_powf+0x3f8>
 8018b4c:	4929      	ldr	r1, [pc, #164]	; (8018bf4 <__ieee754_powf+0x3fc>)
 8018b4e:	eea6 7a27 	vfma.f32	s14, s12, s15
 8018b52:	4439      	add	r1, r7
 8018b54:	edd1 7a00 	vldr	s15, [r1]
 8018b58:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018b5c:	ee07 3a90 	vmov	s15, r3
 8018b60:	eef0 0a47 	vmov.f32	s1, s14
 8018b64:	4b24      	ldr	r3, [pc, #144]	; (8018bf8 <__ieee754_powf+0x400>)
 8018b66:	eee6 0a25 	vfma.f32	s1, s12, s11
 8018b6a:	443b      	add	r3, r7
 8018b6c:	ed93 5a00 	vldr	s10, [r3]
 8018b70:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8018b74:	ee70 0a85 	vadd.f32	s1, s1, s10
 8018b78:	ee70 7aa6 	vadd.f32	s15, s1, s13
 8018b7c:	ee17 3a90 	vmov	r3, s15
 8018b80:	4013      	ands	r3, r2
 8018b82:	ee07 3a90 	vmov	s15, r3
 8018b86:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8018b8a:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8018b8e:	eee6 7a65 	vfms.f32	s15, s12, s11
 8018b92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018b96:	e70e      	b.n	80189b6 <__ieee754_powf+0x1be>
 8018b98:	2401      	movs	r4, #1
 8018b9a:	e75c      	b.n	8018a56 <__ieee754_powf+0x25e>
 8018b9c:	0801b212 	.word	0x0801b212
 8018ba0:	00000000 	.word	0x00000000
 8018ba4:	3f7ffff7 	.word	0x3f7ffff7
 8018ba8:	7149f2ca 	.word	0x7149f2ca
 8018bac:	3f800007 	.word	0x3f800007
 8018bb0:	3eaaaaab 	.word	0x3eaaaaab
 8018bb4:	36eca570 	.word	0x36eca570
 8018bb8:	3fb8aa3b 	.word	0x3fb8aa3b
 8018bbc:	3fb8aa00 	.word	0x3fb8aa00
 8018bc0:	4b800000 	.word	0x4b800000
 8018bc4:	001cc471 	.word	0x001cc471
 8018bc8:	005db3d6 	.word	0x005db3d6
 8018bcc:	0802fc30 	.word	0x0802fc30
 8018bd0:	fffff000 	.word	0xfffff000
 8018bd4:	3e6c3255 	.word	0x3e6c3255
 8018bd8:	3e53f142 	.word	0x3e53f142
 8018bdc:	3e8ba305 	.word	0x3e8ba305
 8018be0:	3edb6db7 	.word	0x3edb6db7
 8018be4:	3f19999a 	.word	0x3f19999a
 8018be8:	3f763800 	.word	0x3f763800
 8018bec:	3f76384f 	.word	0x3f76384f
 8018bf0:	369dc3a0 	.word	0x369dc3a0
 8018bf4:	0802fc40 	.word	0x0802fc40
 8018bf8:	0802fc38 	.word	0x0802fc38
 8018bfc:	3338aa3c 	.word	0x3338aa3c
 8018c00:	f040 8092 	bne.w	8018d28 <__ieee754_powf+0x530>
 8018c04:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8018bfc <__ieee754_powf+0x404>
 8018c08:	ee37 7a67 	vsub.f32	s14, s14, s15
 8018c0c:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8018c10:	eef4 6ac7 	vcmpe.f32	s13, s14
 8018c14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018c18:	f73f aef6 	bgt.w	8018a08 <__ieee754_powf+0x210>
 8018c1c:	15db      	asrs	r3, r3, #23
 8018c1e:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 8018c22:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8018c26:	4103      	asrs	r3, r0
 8018c28:	4423      	add	r3, r4
 8018c2a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8018c2e:	4947      	ldr	r1, [pc, #284]	; (8018d4c <__ieee754_powf+0x554>)
 8018c30:	3a7f      	subs	r2, #127	; 0x7f
 8018c32:	4111      	asrs	r1, r2
 8018c34:	ea23 0101 	bic.w	r1, r3, r1
 8018c38:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8018c3c:	ee07 1a10 	vmov	s14, r1
 8018c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8018c44:	f1c2 0217 	rsb	r2, r2, #23
 8018c48:	4110      	asrs	r0, r2
 8018c4a:	2c00      	cmp	r4, #0
 8018c4c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018c50:	bfb8      	it	lt
 8018c52:	4240      	neglt	r0, r0
 8018c54:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8018c58:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8018d50 <__ieee754_powf+0x558>
 8018c5c:	ee17 3a10 	vmov	r3, s14
 8018c60:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8018c64:	f023 030f 	bic.w	r3, r3, #15
 8018c68:	ee07 3a10 	vmov	s14, r3
 8018c6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018c70:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8018c74:	eddf 7a37 	vldr	s15, [pc, #220]	; 8018d54 <__ieee754_powf+0x55c>
 8018c78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018c7c:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8018c80:	eddf 6a35 	vldr	s13, [pc, #212]	; 8018d58 <__ieee754_powf+0x560>
 8018c84:	eeb0 0a67 	vmov.f32	s0, s15
 8018c88:	eea7 0a26 	vfma.f32	s0, s14, s13
 8018c8c:	eeb0 6a40 	vmov.f32	s12, s0
 8018c90:	eea7 6a66 	vfms.f32	s12, s14, s13
 8018c94:	ee20 7a00 	vmul.f32	s14, s0, s0
 8018c98:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8018c9c:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8018d5c <__ieee754_powf+0x564>
 8018ca0:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8018d60 <__ieee754_powf+0x568>
 8018ca4:	eea7 6a26 	vfma.f32	s12, s14, s13
 8018ca8:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8018d64 <__ieee754_powf+0x56c>
 8018cac:	eee6 6a07 	vfma.f32	s13, s12, s14
 8018cb0:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 8018d68 <__ieee754_powf+0x570>
 8018cb4:	eea6 6a87 	vfma.f32	s12, s13, s14
 8018cb8:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8018d6c <__ieee754_powf+0x574>
 8018cbc:	eee6 6a07 	vfma.f32	s13, s12, s14
 8018cc0:	eeb0 6a40 	vmov.f32	s12, s0
 8018cc4:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8018cc8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8018ccc:	eeb0 7a46 	vmov.f32	s14, s12
 8018cd0:	ee77 6a66 	vsub.f32	s13, s14, s13
 8018cd4:	ee20 6a06 	vmul.f32	s12, s0, s12
 8018cd8:	eee0 7a27 	vfma.f32	s15, s0, s15
 8018cdc:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8018ce0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018ce4:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8018ce8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8018cec:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8018cf0:	ee10 3a10 	vmov	r3, s0
 8018cf4:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8018cf8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8018cfc:	da1a      	bge.n	8018d34 <__ieee754_powf+0x53c>
 8018cfe:	f000 f9c7 	bl	8019090 <scalbnf>
 8018d02:	ee20 0a08 	vmul.f32	s0, s0, s16
 8018d06:	e5c9      	b.n	801889c <__ieee754_powf+0xa4>
 8018d08:	4a19      	ldr	r2, [pc, #100]	; (8018d70 <__ieee754_powf+0x578>)
 8018d0a:	4293      	cmp	r3, r2
 8018d0c:	dd02      	ble.n	8018d14 <__ieee754_powf+0x51c>
 8018d0e:	eddf 7a19 	vldr	s15, [pc, #100]	; 8018d74 <__ieee754_powf+0x57c>
 8018d12:	e67b      	b.n	8018a0c <__ieee754_powf+0x214>
 8018d14:	d108      	bne.n	8018d28 <__ieee754_powf+0x530>
 8018d16:	ee37 7a67 	vsub.f32	s14, s14, s15
 8018d1a:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8018d1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d22:	f6ff af7b 	blt.w	8018c1c <__ieee754_powf+0x424>
 8018d26:	e7f2      	b.n	8018d0e <__ieee754_powf+0x516>
 8018d28:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8018d2c:	f73f af76 	bgt.w	8018c1c <__ieee754_powf+0x424>
 8018d30:	2000      	movs	r0, #0
 8018d32:	e78f      	b.n	8018c54 <__ieee754_powf+0x45c>
 8018d34:	ee00 3a10 	vmov	s0, r3
 8018d38:	e7e3      	b.n	8018d02 <__ieee754_powf+0x50a>
 8018d3a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8018d3e:	e5ad      	b.n	801889c <__ieee754_powf+0xa4>
 8018d40:	eeb0 0a68 	vmov.f32	s0, s17
 8018d44:	e5aa      	b.n	801889c <__ieee754_powf+0xa4>
 8018d46:	eeb0 0a48 	vmov.f32	s0, s16
 8018d4a:	e5a7      	b.n	801889c <__ieee754_powf+0xa4>
 8018d4c:	007fffff 	.word	0x007fffff
 8018d50:	3f317218 	.word	0x3f317218
 8018d54:	35bfbe8c 	.word	0x35bfbe8c
 8018d58:	3f317200 	.word	0x3f317200
 8018d5c:	3331bb4c 	.word	0x3331bb4c
 8018d60:	b5ddea0e 	.word	0xb5ddea0e
 8018d64:	388ab355 	.word	0x388ab355
 8018d68:	bb360b61 	.word	0xbb360b61
 8018d6c:	3e2aaaab 	.word	0x3e2aaaab
 8018d70:	43160000 	.word	0x43160000
 8018d74:	0da24260 	.word	0x0da24260

08018d78 <__ieee754_sqrtf>:
 8018d78:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8018d7c:	4770      	bx	lr

08018d7e <fabs>:
 8018d7e:	ec51 0b10 	vmov	r0, r1, d0
 8018d82:	ee10 2a10 	vmov	r2, s0
 8018d86:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8018d8a:	ec43 2b10 	vmov	d0, r2, r3
 8018d8e:	4770      	bx	lr

08018d90 <finite>:
 8018d90:	ee10 3a90 	vmov	r3, s1
 8018d94:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8018d98:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8018d9c:	0fc0      	lsrs	r0, r0, #31
 8018d9e:	4770      	bx	lr

08018da0 <matherr>:
 8018da0:	2000      	movs	r0, #0
 8018da2:	4770      	bx	lr
 8018da4:	0000      	movs	r0, r0
	...

08018da8 <nan>:
 8018da8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8018db0 <nan+0x8>
 8018dac:	4770      	bx	lr
 8018dae:	bf00      	nop
 8018db0:	00000000 	.word	0x00000000
 8018db4:	7ff80000 	.word	0x7ff80000

08018db8 <rint>:
 8018db8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018dba:	ec51 0b10 	vmov	r0, r1, d0
 8018dbe:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8018dc2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8018dc6:	2e13      	cmp	r6, #19
 8018dc8:	460b      	mov	r3, r1
 8018dca:	ee10 4a10 	vmov	r4, s0
 8018dce:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8018dd2:	dc56      	bgt.n	8018e82 <rint+0xca>
 8018dd4:	2e00      	cmp	r6, #0
 8018dd6:	da2b      	bge.n	8018e30 <rint+0x78>
 8018dd8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8018ddc:	4302      	orrs	r2, r0
 8018dde:	d023      	beq.n	8018e28 <rint+0x70>
 8018de0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8018de4:	4302      	orrs	r2, r0
 8018de6:	4254      	negs	r4, r2
 8018de8:	4314      	orrs	r4, r2
 8018dea:	0c4b      	lsrs	r3, r1, #17
 8018dec:	0b24      	lsrs	r4, r4, #12
 8018dee:	045b      	lsls	r3, r3, #17
 8018df0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8018df4:	ea44 0103 	orr.w	r1, r4, r3
 8018df8:	460b      	mov	r3, r1
 8018dfa:	492f      	ldr	r1, [pc, #188]	; (8018eb8 <rint+0x100>)
 8018dfc:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8018e00:	e9d1 6700 	ldrd	r6, r7, [r1]
 8018e04:	4602      	mov	r2, r0
 8018e06:	4639      	mov	r1, r7
 8018e08:	4630      	mov	r0, r6
 8018e0a:	f7eb fab7 	bl	800437c <__adddf3>
 8018e0e:	e9cd 0100 	strd	r0, r1, [sp]
 8018e12:	463b      	mov	r3, r7
 8018e14:	4632      	mov	r2, r6
 8018e16:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018e1a:	f7eb faad 	bl	8004378 <__aeabi_dsub>
 8018e1e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8018e22:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8018e26:	4639      	mov	r1, r7
 8018e28:	ec41 0b10 	vmov	d0, r0, r1
 8018e2c:	b003      	add	sp, #12
 8018e2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018e30:	4a22      	ldr	r2, [pc, #136]	; (8018ebc <rint+0x104>)
 8018e32:	4132      	asrs	r2, r6
 8018e34:	ea01 0702 	and.w	r7, r1, r2
 8018e38:	4307      	orrs	r7, r0
 8018e3a:	d0f5      	beq.n	8018e28 <rint+0x70>
 8018e3c:	0852      	lsrs	r2, r2, #1
 8018e3e:	4011      	ands	r1, r2
 8018e40:	430c      	orrs	r4, r1
 8018e42:	d00b      	beq.n	8018e5c <rint+0xa4>
 8018e44:	ea23 0202 	bic.w	r2, r3, r2
 8018e48:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8018e4c:	2e13      	cmp	r6, #19
 8018e4e:	fa43 f306 	asr.w	r3, r3, r6
 8018e52:	bf0c      	ite	eq
 8018e54:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8018e58:	2400      	movne	r4, #0
 8018e5a:	4313      	orrs	r3, r2
 8018e5c:	4916      	ldr	r1, [pc, #88]	; (8018eb8 <rint+0x100>)
 8018e5e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8018e62:	4622      	mov	r2, r4
 8018e64:	e9d5 4500 	ldrd	r4, r5, [r5]
 8018e68:	4620      	mov	r0, r4
 8018e6a:	4629      	mov	r1, r5
 8018e6c:	f7eb fa86 	bl	800437c <__adddf3>
 8018e70:	e9cd 0100 	strd	r0, r1, [sp]
 8018e74:	4622      	mov	r2, r4
 8018e76:	462b      	mov	r3, r5
 8018e78:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018e7c:	f7eb fa7c 	bl	8004378 <__aeabi_dsub>
 8018e80:	e7d2      	b.n	8018e28 <rint+0x70>
 8018e82:	2e33      	cmp	r6, #51	; 0x33
 8018e84:	dd07      	ble.n	8018e96 <rint+0xde>
 8018e86:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8018e8a:	d1cd      	bne.n	8018e28 <rint+0x70>
 8018e8c:	ee10 2a10 	vmov	r2, s0
 8018e90:	f7eb fa74 	bl	800437c <__adddf3>
 8018e94:	e7c8      	b.n	8018e28 <rint+0x70>
 8018e96:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8018e9a:	f04f 32ff 	mov.w	r2, #4294967295
 8018e9e:	40f2      	lsrs	r2, r6
 8018ea0:	4210      	tst	r0, r2
 8018ea2:	d0c1      	beq.n	8018e28 <rint+0x70>
 8018ea4:	0852      	lsrs	r2, r2, #1
 8018ea6:	4210      	tst	r0, r2
 8018ea8:	bf1f      	itttt	ne
 8018eaa:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8018eae:	ea20 0202 	bicne.w	r2, r0, r2
 8018eb2:	4134      	asrne	r4, r6
 8018eb4:	4314      	orrne	r4, r2
 8018eb6:	e7d1      	b.n	8018e5c <rint+0xa4>
 8018eb8:	0802fc48 	.word	0x0802fc48
 8018ebc:	000fffff 	.word	0x000fffff

08018ec0 <scalbn>:
 8018ec0:	b570      	push	{r4, r5, r6, lr}
 8018ec2:	ec55 4b10 	vmov	r4, r5, d0
 8018ec6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8018eca:	4606      	mov	r6, r0
 8018ecc:	462b      	mov	r3, r5
 8018ece:	b9aa      	cbnz	r2, 8018efc <scalbn+0x3c>
 8018ed0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8018ed4:	4323      	orrs	r3, r4
 8018ed6:	d03b      	beq.n	8018f50 <scalbn+0x90>
 8018ed8:	4b31      	ldr	r3, [pc, #196]	; (8018fa0 <scalbn+0xe0>)
 8018eda:	4629      	mov	r1, r5
 8018edc:	2200      	movs	r2, #0
 8018ede:	ee10 0a10 	vmov	r0, s0
 8018ee2:	f7eb fc01 	bl	80046e8 <__aeabi_dmul>
 8018ee6:	4b2f      	ldr	r3, [pc, #188]	; (8018fa4 <scalbn+0xe4>)
 8018ee8:	429e      	cmp	r6, r3
 8018eea:	4604      	mov	r4, r0
 8018eec:	460d      	mov	r5, r1
 8018eee:	da12      	bge.n	8018f16 <scalbn+0x56>
 8018ef0:	a327      	add	r3, pc, #156	; (adr r3, 8018f90 <scalbn+0xd0>)
 8018ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018ef6:	f7eb fbf7 	bl	80046e8 <__aeabi_dmul>
 8018efa:	e009      	b.n	8018f10 <scalbn+0x50>
 8018efc:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8018f00:	428a      	cmp	r2, r1
 8018f02:	d10c      	bne.n	8018f1e <scalbn+0x5e>
 8018f04:	ee10 2a10 	vmov	r2, s0
 8018f08:	4620      	mov	r0, r4
 8018f0a:	4629      	mov	r1, r5
 8018f0c:	f7eb fa36 	bl	800437c <__adddf3>
 8018f10:	4604      	mov	r4, r0
 8018f12:	460d      	mov	r5, r1
 8018f14:	e01c      	b.n	8018f50 <scalbn+0x90>
 8018f16:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8018f1a:	460b      	mov	r3, r1
 8018f1c:	3a36      	subs	r2, #54	; 0x36
 8018f1e:	4432      	add	r2, r6
 8018f20:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8018f24:	428a      	cmp	r2, r1
 8018f26:	dd0b      	ble.n	8018f40 <scalbn+0x80>
 8018f28:	ec45 4b11 	vmov	d1, r4, r5
 8018f2c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8018f98 <scalbn+0xd8>
 8018f30:	f000 f9fc 	bl	801932c <copysign>
 8018f34:	a318      	add	r3, pc, #96	; (adr r3, 8018f98 <scalbn+0xd8>)
 8018f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f3a:	ec51 0b10 	vmov	r0, r1, d0
 8018f3e:	e7da      	b.n	8018ef6 <scalbn+0x36>
 8018f40:	2a00      	cmp	r2, #0
 8018f42:	dd08      	ble.n	8018f56 <scalbn+0x96>
 8018f44:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8018f48:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8018f4c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8018f50:	ec45 4b10 	vmov	d0, r4, r5
 8018f54:	bd70      	pop	{r4, r5, r6, pc}
 8018f56:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8018f5a:	da0d      	bge.n	8018f78 <scalbn+0xb8>
 8018f5c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8018f60:	429e      	cmp	r6, r3
 8018f62:	ec45 4b11 	vmov	d1, r4, r5
 8018f66:	dce1      	bgt.n	8018f2c <scalbn+0x6c>
 8018f68:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8018f90 <scalbn+0xd0>
 8018f6c:	f000 f9de 	bl	801932c <copysign>
 8018f70:	a307      	add	r3, pc, #28	; (adr r3, 8018f90 <scalbn+0xd0>)
 8018f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f76:	e7e0      	b.n	8018f3a <scalbn+0x7a>
 8018f78:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8018f7c:	3236      	adds	r2, #54	; 0x36
 8018f7e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8018f82:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8018f86:	4620      	mov	r0, r4
 8018f88:	4629      	mov	r1, r5
 8018f8a:	2200      	movs	r2, #0
 8018f8c:	4b06      	ldr	r3, [pc, #24]	; (8018fa8 <scalbn+0xe8>)
 8018f8e:	e7b2      	b.n	8018ef6 <scalbn+0x36>
 8018f90:	c2f8f359 	.word	0xc2f8f359
 8018f94:	01a56e1f 	.word	0x01a56e1f
 8018f98:	8800759c 	.word	0x8800759c
 8018f9c:	7e37e43c 	.word	0x7e37e43c
 8018fa0:	43500000 	.word	0x43500000
 8018fa4:	ffff3cb0 	.word	0xffff3cb0
 8018fa8:	3c900000 	.word	0x3c900000

08018fac <fabsf>:
 8018fac:	ee10 3a10 	vmov	r3, s0
 8018fb0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018fb4:	ee00 3a10 	vmov	s0, r3
 8018fb8:	4770      	bx	lr

08018fba <finitef>:
 8018fba:	ee10 3a10 	vmov	r3, s0
 8018fbe:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 8018fc2:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8018fc6:	bfac      	ite	ge
 8018fc8:	2000      	movge	r0, #0
 8018fca:	2001      	movlt	r0, #1
 8018fcc:	4770      	bx	lr
	...

08018fd0 <nanf>:
 8018fd0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8018fd8 <nanf+0x8>
 8018fd4:	4770      	bx	lr
 8018fd6:	bf00      	nop
 8018fd8:	7fc00000 	.word	0x7fc00000

08018fdc <rintf>:
 8018fdc:	b513      	push	{r0, r1, r4, lr}
 8018fde:	ee10 1a10 	vmov	r1, s0
 8018fe2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8018fe6:	0ddc      	lsrs	r4, r3, #23
 8018fe8:	3c7f      	subs	r4, #127	; 0x7f
 8018fea:	2c16      	cmp	r4, #22
 8018fec:	dc46      	bgt.n	801907c <rintf+0xa0>
 8018fee:	b32b      	cbz	r3, 801903c <rintf+0x60>
 8018ff0:	2c00      	cmp	r4, #0
 8018ff2:	ee10 2a10 	vmov	r2, s0
 8018ff6:	ea4f 70d1 	mov.w	r0, r1, lsr #31
 8018ffa:	da21      	bge.n	8019040 <rintf+0x64>
 8018ffc:	f3c1 0316 	ubfx	r3, r1, #0, #23
 8019000:	425b      	negs	r3, r3
 8019002:	4a21      	ldr	r2, [pc, #132]	; (8019088 <rintf+0xac>)
 8019004:	0a5b      	lsrs	r3, r3, #9
 8019006:	0d09      	lsrs	r1, r1, #20
 8019008:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801900c:	0509      	lsls	r1, r1, #20
 801900e:	430b      	orrs	r3, r1
 8019010:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8019014:	ee07 3a90 	vmov	s15, r3
 8019018:	edd2 6a00 	vldr	s13, [r2]
 801901c:	ee36 7aa7 	vadd.f32	s14, s13, s15
 8019020:	ed8d 7a01 	vstr	s14, [sp, #4]
 8019024:	eddd 7a01 	vldr	s15, [sp, #4]
 8019028:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801902c:	ee17 3a90 	vmov	r3, s15
 8019030:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019034:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 8019038:	ee00 3a10 	vmov	s0, r3
 801903c:	b002      	add	sp, #8
 801903e:	bd10      	pop	{r4, pc}
 8019040:	4b12      	ldr	r3, [pc, #72]	; (801908c <rintf+0xb0>)
 8019042:	4123      	asrs	r3, r4
 8019044:	4219      	tst	r1, r3
 8019046:	d0f9      	beq.n	801903c <rintf+0x60>
 8019048:	085b      	lsrs	r3, r3, #1
 801904a:	4219      	tst	r1, r3
 801904c:	d006      	beq.n	801905c <rintf+0x80>
 801904e:	ea21 0203 	bic.w	r2, r1, r3
 8019052:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8019056:	fa43 f404 	asr.w	r4, r3, r4
 801905a:	4322      	orrs	r2, r4
 801905c:	4b0a      	ldr	r3, [pc, #40]	; (8019088 <rintf+0xac>)
 801905e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8019062:	ed90 7a00 	vldr	s14, [r0]
 8019066:	ee07 2a90 	vmov	s15, r2
 801906a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801906e:	edcd 7a01 	vstr	s15, [sp, #4]
 8019072:	ed9d 0a01 	vldr	s0, [sp, #4]
 8019076:	ee30 0a47 	vsub.f32	s0, s0, s14
 801907a:	e7df      	b.n	801903c <rintf+0x60>
 801907c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8019080:	d3dc      	bcc.n	801903c <rintf+0x60>
 8019082:	ee30 0a00 	vadd.f32	s0, s0, s0
 8019086:	e7d9      	b.n	801903c <rintf+0x60>
 8019088:	0802fc58 	.word	0x0802fc58
 801908c:	007fffff 	.word	0x007fffff

08019090 <scalbnf>:
 8019090:	b508      	push	{r3, lr}
 8019092:	ee10 2a10 	vmov	r2, s0
 8019096:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 801909a:	ed2d 8b02 	vpush	{d8}
 801909e:	eef0 0a40 	vmov.f32	s1, s0
 80190a2:	d004      	beq.n	80190ae <scalbnf+0x1e>
 80190a4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80190a8:	d306      	bcc.n	80190b8 <scalbnf+0x28>
 80190aa:	ee70 0a00 	vadd.f32	s1, s0, s0
 80190ae:	ecbd 8b02 	vpop	{d8}
 80190b2:	eeb0 0a60 	vmov.f32	s0, s1
 80190b6:	bd08      	pop	{r3, pc}
 80190b8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80190bc:	d21c      	bcs.n	80190f8 <scalbnf+0x68>
 80190be:	4b1f      	ldr	r3, [pc, #124]	; (801913c <scalbnf+0xac>)
 80190c0:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8019140 <scalbnf+0xb0>
 80190c4:	4298      	cmp	r0, r3
 80190c6:	ee60 0a27 	vmul.f32	s1, s0, s15
 80190ca:	db10      	blt.n	80190ee <scalbnf+0x5e>
 80190cc:	ee10 2a90 	vmov	r2, s1
 80190d0:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 80190d4:	3b19      	subs	r3, #25
 80190d6:	4403      	add	r3, r0
 80190d8:	2bfe      	cmp	r3, #254	; 0xfe
 80190da:	dd0f      	ble.n	80190fc <scalbnf+0x6c>
 80190dc:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8019144 <scalbnf+0xb4>
 80190e0:	eeb0 0a48 	vmov.f32	s0, s16
 80190e4:	f000 f931 	bl	801934a <copysignf>
 80190e8:	ee60 0a08 	vmul.f32	s1, s0, s16
 80190ec:	e7df      	b.n	80190ae <scalbnf+0x1e>
 80190ee:	eddf 7a16 	vldr	s15, [pc, #88]	; 8019148 <scalbnf+0xb8>
 80190f2:	ee60 0aa7 	vmul.f32	s1, s1, s15
 80190f6:	e7da      	b.n	80190ae <scalbnf+0x1e>
 80190f8:	0ddb      	lsrs	r3, r3, #23
 80190fa:	e7ec      	b.n	80190d6 <scalbnf+0x46>
 80190fc:	2b00      	cmp	r3, #0
 80190fe:	dd06      	ble.n	801910e <scalbnf+0x7e>
 8019100:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8019104:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8019108:	ee00 3a90 	vmov	s1, r3
 801910c:	e7cf      	b.n	80190ae <scalbnf+0x1e>
 801910e:	f113 0f16 	cmn.w	r3, #22
 8019112:	da06      	bge.n	8019122 <scalbnf+0x92>
 8019114:	f24c 3350 	movw	r3, #50000	; 0xc350
 8019118:	4298      	cmp	r0, r3
 801911a:	dcdf      	bgt.n	80190dc <scalbnf+0x4c>
 801911c:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8019148 <scalbnf+0xb8>
 8019120:	e7de      	b.n	80190e0 <scalbnf+0x50>
 8019122:	3319      	adds	r3, #25
 8019124:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8019128:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 801912c:	eddf 7a07 	vldr	s15, [pc, #28]	; 801914c <scalbnf+0xbc>
 8019130:	ee07 3a10 	vmov	s14, r3
 8019134:	ee67 0a27 	vmul.f32	s1, s14, s15
 8019138:	e7b9      	b.n	80190ae <scalbnf+0x1e>
 801913a:	bf00      	nop
 801913c:	ffff3cb0 	.word	0xffff3cb0
 8019140:	4c000000 	.word	0x4c000000
 8019144:	7149f2ca 	.word	0x7149f2ca
 8019148:	0da24260 	.word	0x0da24260
 801914c:	33000000 	.word	0x33000000

08019150 <__ieee754_logf>:
 8019150:	ee10 3a10 	vmov	r3, s0
 8019154:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8019158:	d106      	bne.n	8019168 <__ieee754_logf+0x18>
 801915a:	ed9f 7a65 	vldr	s14, [pc, #404]	; 80192f0 <__ieee754_logf+0x1a0>
 801915e:	eddf 7a65 	vldr	s15, [pc, #404]	; 80192f4 <__ieee754_logf+0x1a4>
 8019162:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8019166:	4770      	bx	lr
 8019168:	2b00      	cmp	r3, #0
 801916a:	da02      	bge.n	8019172 <__ieee754_logf+0x22>
 801916c:	ee30 7a40 	vsub.f32	s14, s0, s0
 8019170:	e7f5      	b.n	801915e <__ieee754_logf+0xe>
 8019172:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8019176:	db02      	blt.n	801917e <__ieee754_logf+0x2e>
 8019178:	ee30 0a00 	vadd.f32	s0, s0, s0
 801917c:	4770      	bx	lr
 801917e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8019182:	bfbf      	itttt	lt
 8019184:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 80192f8 <__ieee754_logf+0x1a8>
 8019188:	ee60 7a27 	vmullt.f32	s15, s0, s15
 801918c:	f06f 0118 	mvnlt.w	r1, #24
 8019190:	ee17 3a90 	vmovlt	r3, s15
 8019194:	ea4f 52e3 	mov.w	r2, r3, asr #23
 8019198:	bfa8      	it	ge
 801919a:	2100      	movge	r1, #0
 801919c:	3a7f      	subs	r2, #127	; 0x7f
 801919e:	440a      	add	r2, r1
 80191a0:	4956      	ldr	r1, [pc, #344]	; (80192fc <__ieee754_logf+0x1ac>)
 80191a2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80191a6:	4419      	add	r1, r3
 80191a8:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
 80191ac:	eb02 52d1 	add.w	r2, r2, r1, lsr #23
 80191b0:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 80191b4:	4319      	orrs	r1, r3
 80191b6:	ee07 1a90 	vmov	s15, r1
 80191ba:	f103 010f 	add.w	r1, r3, #15
 80191be:	f3c1 0116 	ubfx	r1, r1, #0, #23
 80191c2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80191c6:	290f      	cmp	r1, #15
 80191c8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80191cc:	dc31      	bgt.n	8019232 <__ieee754_logf+0xe2>
 80191ce:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80191d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80191d6:	d10f      	bne.n	80191f8 <__ieee754_logf+0xa8>
 80191d8:	2a00      	cmp	r2, #0
 80191da:	f000 8085 	beq.w	80192e8 <__ieee754_logf+0x198>
 80191de:	ee07 2a90 	vmov	s15, r2
 80191e2:	ed9f 0a47 	vldr	s0, [pc, #284]	; 8019300 <__ieee754_logf+0x1b0>
 80191e6:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8019304 <__ieee754_logf+0x1b4>
 80191ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80191ee:	ee27 0a80 	vmul.f32	s0, s15, s0
 80191f2:	eea7 0a87 	vfma.f32	s0, s15, s14
 80191f6:	4770      	bx	lr
 80191f8:	eddf 7a43 	vldr	s15, [pc, #268]	; 8019308 <__ieee754_logf+0x1b8>
 80191fc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8019200:	eea0 7a67 	vfms.f32	s14, s0, s15
 8019204:	ee60 7a00 	vmul.f32	s15, s0, s0
 8019208:	ee27 7a27 	vmul.f32	s14, s14, s15
 801920c:	b912      	cbnz	r2, 8019214 <__ieee754_logf+0xc4>
 801920e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8019212:	4770      	bx	lr
 8019214:	ee07 2a90 	vmov	s15, r2
 8019218:	eddf 6a39 	vldr	s13, [pc, #228]	; 8019300 <__ieee754_logf+0x1b0>
 801921c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019220:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8019224:	ee37 0a40 	vsub.f32	s0, s14, s0
 8019228:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8019304 <__ieee754_logf+0x1b4>
 801922c:	ee97 0a87 	vfnms.f32	s0, s15, s14
 8019230:	4770      	bx	lr
 8019232:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8019236:	ee70 7a27 	vadd.f32	s15, s0, s15
 801923a:	eddf 5a34 	vldr	s11, [pc, #208]	; 801930c <__ieee754_logf+0x1bc>
 801923e:	eddf 4a34 	vldr	s9, [pc, #208]	; 8019310 <__ieee754_logf+0x1c0>
 8019242:	4934      	ldr	r1, [pc, #208]	; (8019314 <__ieee754_logf+0x1c4>)
 8019244:	ee80 6a27 	vdiv.f32	s12, s0, s15
 8019248:	4419      	add	r1, r3
 801924a:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 801924e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8019252:	430b      	orrs	r3, r1
 8019254:	2b00      	cmp	r3, #0
 8019256:	ee07 2a90 	vmov	s15, r2
 801925a:	ee26 5a06 	vmul.f32	s10, s12, s12
 801925e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8019262:	ee25 7a05 	vmul.f32	s14, s10, s10
 8019266:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8019318 <__ieee754_logf+0x1c8>
 801926a:	eee7 7a25 	vfma.f32	s15, s14, s11
 801926e:	eddf 5a2b 	vldr	s11, [pc, #172]	; 801931c <__ieee754_logf+0x1cc>
 8019272:	eee7 5a87 	vfma.f32	s11, s15, s14
 8019276:	eddf 7a2a 	vldr	s15, [pc, #168]	; 8019320 <__ieee754_logf+0x1d0>
 801927a:	eee7 7a24 	vfma.f32	s15, s14, s9
 801927e:	eddf 4a29 	vldr	s9, [pc, #164]	; 8019324 <__ieee754_logf+0x1d4>
 8019282:	eee7 4a87 	vfma.f32	s9, s15, s14
 8019286:	eddf 7a28 	vldr	s15, [pc, #160]	; 8019328 <__ieee754_logf+0x1d8>
 801928a:	eee4 7a87 	vfma.f32	s15, s9, s14
 801928e:	ee67 7a85 	vmul.f32	s15, s15, s10
 8019292:	eee5 7a87 	vfma.f32	s15, s11, s14
 8019296:	dd1c      	ble.n	80192d2 <__ieee754_logf+0x182>
 8019298:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801929c:	ee20 7a07 	vmul.f32	s14, s0, s14
 80192a0:	ee27 7a00 	vmul.f32	s14, s14, s0
 80192a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80192a8:	ee67 7a86 	vmul.f32	s15, s15, s12
 80192ac:	b922      	cbnz	r2, 80192b8 <__ieee754_logf+0x168>
 80192ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80192b2:	ee30 0a67 	vsub.f32	s0, s0, s15
 80192b6:	4770      	bx	lr
 80192b8:	ed9f 6a11 	vldr	s12, [pc, #68]	; 8019300 <__ieee754_logf+0x1b0>
 80192bc:	eee6 7a86 	vfma.f32	s15, s13, s12
 80192c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80192c4:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80192c8:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8019304 <__ieee754_logf+0x1b4>
 80192cc:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 80192d0:	4770      	bx	lr
 80192d2:	ee70 7a67 	vsub.f32	s15, s0, s15
 80192d6:	ee67 7a86 	vmul.f32	s15, s15, s12
 80192da:	2a00      	cmp	r2, #0
 80192dc:	d0e9      	beq.n	80192b2 <__ieee754_logf+0x162>
 80192de:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8019300 <__ieee754_logf+0x1b0>
 80192e2:	eee6 7ac7 	vfms.f32	s15, s13, s14
 80192e6:	e7ed      	b.n	80192c4 <__ieee754_logf+0x174>
 80192e8:	ed9f 0a02 	vldr	s0, [pc, #8]	; 80192f4 <__ieee754_logf+0x1a4>
 80192ec:	4770      	bx	lr
 80192ee:	bf00      	nop
 80192f0:	cc000000 	.word	0xcc000000
 80192f4:	00000000 	.word	0x00000000
 80192f8:	4c000000 	.word	0x4c000000
 80192fc:	004afb20 	.word	0x004afb20
 8019300:	3717f7d1 	.word	0x3717f7d1
 8019304:	3f317180 	.word	0x3f317180
 8019308:	3eaaaaab 	.word	0x3eaaaaab
 801930c:	3e1cd04f 	.word	0x3e1cd04f
 8019310:	3e178897 	.word	0x3e178897
 8019314:	ffcf5c30 	.word	0xffcf5c30
 8019318:	3e638e29 	.word	0x3e638e29
 801931c:	3ecccccd 	.word	0x3ecccccd
 8019320:	3e3a3325 	.word	0x3e3a3325
 8019324:	3e924925 	.word	0x3e924925
 8019328:	3f2aaaab 	.word	0x3f2aaaab

0801932c <copysign>:
 801932c:	ec51 0b10 	vmov	r0, r1, d0
 8019330:	ee11 0a90 	vmov	r0, s3
 8019334:	ee10 2a10 	vmov	r2, s0
 8019338:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801933c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8019340:	ea41 0300 	orr.w	r3, r1, r0
 8019344:	ec43 2b10 	vmov	d0, r2, r3
 8019348:	4770      	bx	lr

0801934a <copysignf>:
 801934a:	ee10 3a10 	vmov	r3, s0
 801934e:	ee10 2a90 	vmov	r2, s1
 8019352:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019356:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 801935a:	4313      	orrs	r3, r2
 801935c:	ee00 3a10 	vmov	s0, r3
 8019360:	4770      	bx	lr
	...

08019364 <_init>:
 8019364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019366:	bf00      	nop
 8019368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801936a:	bc08      	pop	{r3}
 801936c:	469e      	mov	lr, r3
 801936e:	4770      	bx	lr

08019370 <_fini>:
 8019370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019372:	bf00      	nop
 8019374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019376:	bc08      	pop	{r3}
 8019378:	469e      	mov	lr, r3
 801937a:	4770      	bx	lr
